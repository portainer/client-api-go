// Code generated by go-swagger; DO NOT EDIT.

package models_ee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeammembershipsTeamMembershipUpdatePayload teammemberships team membership update payload
//
// swagger:model teammemberships.teamMembershipUpdatePayload
type TeammembershipsTeamMembershipUpdatePayload struct {

	// Role for the user inside the team (1 for leader and 2 for regular member)
	// Example: 1
	// Required: true
	// Enum: [1 2]
	Role *int64 `json:"role"`

	// Team identifier
	// Example: 1
	// Required: true
	TeamID *int64 `json:"teamID"`

	// User identifier
	// Example: 1
	// Required: true
	UserID *int64 `json:"userID"`
}

// Validate validates this teammemberships team membership update payload
func (m *TeammembershipsTeamMembershipUpdatePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var teammembershipsTeamMembershipUpdatePayloadTypeRolePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teammembershipsTeamMembershipUpdatePayloadTypeRolePropEnum = append(teammembershipsTeamMembershipUpdatePayloadTypeRolePropEnum, v)
	}
}

// prop value enum
func (m *TeammembershipsTeamMembershipUpdatePayload) validateRoleEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, teammembershipsTeamMembershipUpdatePayloadTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TeammembershipsTeamMembershipUpdatePayload) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

func (m *TeammembershipsTeamMembershipUpdatePayload) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("teamID", "body", m.TeamID); err != nil {
		return err
	}

	return nil
}

func (m *TeammembershipsTeamMembershipUpdatePayload) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userID", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this teammemberships team membership update payload based on context it is used
func (m *TeammembershipsTeamMembershipUpdatePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TeammembershipsTeamMembershipUpdatePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeammembershipsTeamMembershipUpdatePayload) UnmarshalBinary(b []byte) error {
	var res TeammembershipsTeamMembershipUpdatePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
