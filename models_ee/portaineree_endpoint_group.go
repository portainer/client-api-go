// Code generated by go-swagger; DO NOT EDIT.

package models_ee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainereeEndpointGroup portaineree endpoint group
//
// swagger:model portaineree.EndpointGroup
type PortainereeEndpointGroup struct {

	// authorized teams
	AuthorizedTeams []int64 `json:"AuthorizedTeams"`

	// Deprecated in DBVersion == 18
	AuthorizedUsers []int64 `json:"AuthorizedUsers"`

	// Description associated to the environment(endpoint) group
	// Example: Environment(Endpoint) group description
	Description string `json:"Description,omitempty"`

	// Environment(Endpoint) group Identifier
	// Example: 1
	ID int64 `json:"Id,omitempty"`

	// Deprecated fields
	Labels []*PortainereePair `json:"Labels"`

	// Environment(Endpoint) group name
	// Example: my-environment-group
	Name string `json:"Name,omitempty"`

	// List of tags associated to this environment(endpoint) group
	TagIds []int64 `json:"TagIds"`

	// Deprecated in DBVersion == 22
	Tags []string `json:"Tags"`

	// team access policies
	TeamAccessPolicies PortainereeTeamAccessPolicies `json:"TeamAccessPolicies,omitempty"`

	// user access policies
	UserAccessPolicies PortainereeUserAccessPolicies `json:"UserAccessPolicies,omitempty"`
}

// Validate validates this portaineree endpoint group
func (m *PortainereeEndpointGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamAccessPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAccessPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeEndpointGroup) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortainereeEndpointGroup) validateTeamAccessPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamAccessPolicies) { // not required
		return nil
	}

	if m.TeamAccessPolicies != nil {
		if err := m.TeamAccessPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TeamAccessPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TeamAccessPolicies")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeEndpointGroup) validateUserAccessPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAccessPolicies) { // not required
		return nil
	}

	if m.UserAccessPolicies != nil {
		if err := m.UserAccessPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserAccessPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserAccessPolicies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this portaineree endpoint group based on the context it is used
func (m *PortainereeEndpointGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamAccessPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAccessPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeEndpointGroup) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortainereeEndpointGroup) contextValidateTeamAccessPolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TeamAccessPolicies.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TeamAccessPolicies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TeamAccessPolicies")
		}
		return err
	}

	return nil
}

func (m *PortainereeEndpointGroup) contextValidateUserAccessPolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserAccessPolicies.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("UserAccessPolicies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("UserAccessPolicies")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeEndpointGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeEndpointGroup) UnmarshalBinary(b []byte) error {
	var res PortainereeEndpointGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
