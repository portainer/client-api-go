// Code generated by go-swagger; DO NOT EDIT.

package models_ee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainereeRegistryManagementConfiguration portaineree registry management configuration
//
// swagger:model portaineree.RegistryManagementConfiguration
type PortainereeRegistryManagementConfiguration struct {

	// access token
	AccessToken string `json:"AccessToken,omitempty"`

	// access token expiry
	AccessTokenExpiry int64 `json:"AccessTokenExpiry,omitempty"`

	// authentication
	Authentication *bool `json:"Authentication,omitempty"`

	// ecr
	Ecr *PortainereeEcrData `json:"Ecr,omitempty"`

	// password
	Password string `json:"Password,omitempty"`

	// TLS config
	TLSConfig *PortainereeTLSConfiguration `json:"TLSConfig,omitempty"`

	// Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR, 8 - Github)
	Type int64 `json:"Type,omitempty"`

	// username
	Username string `json:"Username,omitempty"`
}

// Validate validates this portaineree registry management configuration
func (m *PortainereeRegistryManagementConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEcr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeRegistryManagementConfiguration) validateEcr(formats strfmt.Registry) error {
	if swag.IsZero(m.Ecr) { // not required
		return nil
	}

	if m.Ecr != nil {
		if err := m.Ecr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ecr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Ecr")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistryManagementConfiguration) validateTLSConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TLSConfig) { // not required
		return nil
	}

	if m.TLSConfig != nil {
		if err := m.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TLSConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TLSConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this portaineree registry management configuration based on the context it is used
func (m *PortainereeRegistryManagementConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEcr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTLSConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeRegistryManagementConfiguration) contextValidateEcr(ctx context.Context, formats strfmt.Registry) error {

	if m.Ecr != nil {
		if err := m.Ecr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ecr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Ecr")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistryManagementConfiguration) contextValidateTLSConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TLSConfig != nil {
		if err := m.TLSConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TLSConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TLSConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeRegistryManagementConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeRegistryManagementConfiguration) UnmarshalBinary(b []byte) error {
	var res PortainereeRegistryManagementConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
