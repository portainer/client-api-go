// Code generated by go-swagger; DO NOT EDIT.

package models_ee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkEndpointSettings network endpoint settings
//
// swagger:model network.EndpointSettings
type NetworkEndpointSettings struct {

	// aliases
	Aliases []string `json:"aliases"`

	// driver opts
	DriverOpts map[string]string `json:"driverOpts,omitempty"`

	// endpoint ID
	EndpointID string `json:"endpointID,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// global IPv6 address
	GlobalIPV6Address string `json:"globalIPv6Address,omitempty"`

	// global IPv6 prefix len
	GlobalIPV6PrefixLen int64 `json:"globalIPv6PrefixLen,omitempty"`

	// ipaddress
	Ipaddress string `json:"ipaddress,omitempty"`

	// Configurations
	Ipamconfig *NetworkEndpointIPAMConfig `json:"ipamconfig,omitempty"`

	// ipprefix len
	IpprefixLen int64 `json:"ipprefixLen,omitempty"`

	// ipv6 gateway
	IPV6Gateway string `json:"ipv6Gateway,omitempty"`

	// links
	Links []string `json:"links"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// Operational data
	NetworkID string `json:"networkID,omitempty"`
}

// Validate validates this network endpoint settings
func (m *NetworkEndpointSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIpamconfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkEndpointSettings) validateIpamconfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Ipamconfig) { // not required
		return nil
	}

	if m.Ipamconfig != nil {
		if err := m.Ipamconfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipamconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipamconfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network endpoint settings based on the context it is used
func (m *NetworkEndpointSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIpamconfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkEndpointSettings) contextValidateIpamconfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Ipamconfig != nil {
		if err := m.Ipamconfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipamconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipamconfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkEndpointSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkEndpointSettings) UnmarshalBinary(b []byte) error {
	var res NetworkEndpointSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
