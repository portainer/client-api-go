// Code generated by go-swagger; DO NOT EDIT.

package models_ee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SystemStatus system status
//
// swagger:model system.status
type SystemStatus struct {

	// Portainer API version
	// Example: 2.0.0
	Version string `json:"Version,omitempty"`

	// demo environment
	DemoEnvironment *DemoEnvironmentDetails `json:"demoEnvironment,omitempty"`

	// Server Instance ID
	// Example: 299ab403-70a8-4c05-92f7-bf7a994d50df
	InstanceID string `json:"instanceID,omitempty"`
}

// Validate validates this system status
func (m *SystemStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDemoEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemStatus) validateDemoEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.DemoEnvironment) { // not required
		return nil
	}

	if m.DemoEnvironment != nil {
		if err := m.DemoEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("demoEnvironment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("demoEnvironment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this system status based on the context it is used
func (m *SystemStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDemoEnvironment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemStatus) contextValidateDemoEnvironment(ctx context.Context, formats strfmt.Registry) error {

	if m.DemoEnvironment != nil {
		if err := m.DemoEnvironment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("demoEnvironment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("demoEnvironment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStatus) UnmarshalBinary(b []byte) error {
	var res SystemStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
