// Code generated by go-swagger; DO NOT EDIT.

package models_ee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LiblicensePortainerLicense liblicense portainer license
//
// swagger:model liblicense.PortainerLicense
type LiblicensePortainerLicense struct {

	// company
	Company string `json:"company,omitempty"`

	// created
	Created int64 `json:"created,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// expires after
	ExpiresAfter int64 `json:"expiresAfter,omitempty"`

	// expires at
	ExpiresAt int64 `json:"expiresAt,omitempty"`

	// first checkin
	FirstCheckin int64 `json:"firstCheckin,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last checkin
	LastCheckin int64 `json:"lastCheckin,omitempty"`

	// license key
	LicenseKey string `json:"licenseKey,omitempty"`

	// nodes
	Nodes int64 `json:"nodes,omitempty"`

	// product edition
	ProductEdition int64 `json:"productEdition,omitempty"`

	// reference
	Reference string `json:"reference,omitempty"`

	// revoked
	Revoked *bool `json:"revoked,omitempty"`

	// revoked at
	RevokedAt int64 `json:"revokedAt,omitempty"`

	// type
	Type int64 `json:"type,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this liblicense portainer license
func (m *LiblicensePortainerLicense) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this liblicense portainer license based on context it is used
func (m *LiblicensePortainerLicense) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LiblicensePortainerLicense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LiblicensePortainerLicense) UnmarshalBinary(b []byte) error {
	var res LiblicensePortainerLicense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
