// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EndpointedgeEndpointEdgeStatusInspectResponse endpointedge endpoint edge status inspect response
//
// swagger:model endpointedge.endpointEdgeStatusInspectResponse
type EndpointedgeEndpointEdgeStatusInspectResponse struct {

	// The current value of CheckinInterval
	// Example: 5
	Checkin int64 `json:"checkin,omitempty"`

	// credentials
	Credentials string `json:"credentials,omitempty"`

	// The tunnel port
	// Example: 8732
	Port int64 `json:"port,omitempty"`

	// List of requests for jobs to run on the environment(endpoint)
	Schedules []*EndpointedgeEdgeJobResponse `json:"schedules"`

	// List of stacks to be deployed on the environments(endpoints)
	Stacks []*EndpointedgeStackStatusResponse `json:"stacks"`

	// Status represents the environment(endpoint) status
	// Example: REQUIRED
	Status string `json:"status,omitempty"`
}

// Validate validates this endpointedge endpoint edge status inspect response
func (m *EndpointedgeEndpointEdgeStatusInspectResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStacks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointedgeEndpointEdgeStatusInspectResponse) validateSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedules) { // not required
		return nil
	}

	for i := 0; i < len(m.Schedules); i++ {
		if swag.IsZero(m.Schedules[i]) { // not required
			continue
		}

		if m.Schedules[i] != nil {
			if err := m.Schedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndpointedgeEndpointEdgeStatusInspectResponse) validateStacks(formats strfmt.Registry) error {
	if swag.IsZero(m.Stacks) { // not required
		return nil
	}

	for i := 0; i < len(m.Stacks); i++ {
		if swag.IsZero(m.Stacks[i]) { // not required
			continue
		}

		if m.Stacks[i] != nil {
			if err := m.Stacks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stacks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stacks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this endpointedge endpoint edge status inspect response based on the context it is used
func (m *EndpointedgeEndpointEdgeStatusInspectResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStacks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointedgeEndpointEdgeStatusInspectResponse) contextValidateSchedules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Schedules); i++ {

		if m.Schedules[i] != nil {
			if err := m.Schedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndpointedgeEndpointEdgeStatusInspectResponse) contextValidateStacks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stacks); i++ {

		if m.Stacks[i] != nil {
			if err := m.Stacks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stacks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stacks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointedgeEndpointEdgeStatusInspectResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointedgeEndpointEdgeStatusInspectResponse) UnmarshalBinary(b []byte) error {
	var res EndpointedgeEndpointEdgeStatusInspectResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
