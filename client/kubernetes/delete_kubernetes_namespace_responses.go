// Code generated by go-swagger; DO NOT EDIT.

package kubernetes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteKubernetesNamespaceReader is a Reader for the DeleteKubernetesNamespace structure.
type DeleteKubernetesNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteKubernetesNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteKubernetesNamespaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteKubernetesNamespaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteKubernetesNamespaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteKubernetesNamespaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /kubernetes/{id}/namespaces] DeleteKubernetesNamespace", response, response.Code())
	}
}

// NewDeleteKubernetesNamespaceOK creates a DeleteKubernetesNamespaceOK with default headers values
func NewDeleteKubernetesNamespaceOK() *DeleteKubernetesNamespaceOK {
	return &DeleteKubernetesNamespaceOK{}
}

/*
DeleteKubernetesNamespaceOK describes a response with status code 200, with default header values.

Success
*/
type DeleteKubernetesNamespaceOK struct {
	Payload string
}

// IsSuccess returns true when this delete kubernetes namespace o k response has a 2xx status code
func (o *DeleteKubernetesNamespaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete kubernetes namespace o k response has a 3xx status code
func (o *DeleteKubernetesNamespaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kubernetes namespace o k response has a 4xx status code
func (o *DeleteKubernetesNamespaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete kubernetes namespace o k response has a 5xx status code
func (o *DeleteKubernetesNamespaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kubernetes namespace o k response a status code equal to that given
func (o *DeleteKubernetesNamespaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete kubernetes namespace o k response
func (o *DeleteKubernetesNamespaceOK) Code() int {
	return 200
}

func (o *DeleteKubernetesNamespaceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceOK %s", 200, payload)
}

func (o *DeleteKubernetesNamespaceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceOK %s", 200, payload)
}

func (o *DeleteKubernetesNamespaceOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteKubernetesNamespaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKubernetesNamespaceBadRequest creates a DeleteKubernetesNamespaceBadRequest with default headers values
func NewDeleteKubernetesNamespaceBadRequest() *DeleteKubernetesNamespaceBadRequest {
	return &DeleteKubernetesNamespaceBadRequest{}
}

/*
DeleteKubernetesNamespaceBadRequest describes a response with status code 400, with default header values.

Invalid request payload, such as missing required fields or fields not meeting validation criteria.
*/
type DeleteKubernetesNamespaceBadRequest struct {
}

// IsSuccess returns true when this delete kubernetes namespace bad request response has a 2xx status code
func (o *DeleteKubernetesNamespaceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete kubernetes namespace bad request response has a 3xx status code
func (o *DeleteKubernetesNamespaceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kubernetes namespace bad request response has a 4xx status code
func (o *DeleteKubernetesNamespaceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete kubernetes namespace bad request response has a 5xx status code
func (o *DeleteKubernetesNamespaceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kubernetes namespace bad request response a status code equal to that given
func (o *DeleteKubernetesNamespaceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete kubernetes namespace bad request response
func (o *DeleteKubernetesNamespaceBadRequest) Code() int {
	return 400
}

func (o *DeleteKubernetesNamespaceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceBadRequest", 400)
}

func (o *DeleteKubernetesNamespaceBadRequest) String() string {
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceBadRequest", 400)
}

func (o *DeleteKubernetesNamespaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteKubernetesNamespaceForbidden creates a DeleteKubernetesNamespaceForbidden with default headers values
func NewDeleteKubernetesNamespaceForbidden() *DeleteKubernetesNamespaceForbidden {
	return &DeleteKubernetesNamespaceForbidden{}
}

/*
DeleteKubernetesNamespaceForbidden describes a response with status code 403, with default header values.

Unauthorized access or operation not allowed.
*/
type DeleteKubernetesNamespaceForbidden struct {
}

// IsSuccess returns true when this delete kubernetes namespace forbidden response has a 2xx status code
func (o *DeleteKubernetesNamespaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete kubernetes namespace forbidden response has a 3xx status code
func (o *DeleteKubernetesNamespaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kubernetes namespace forbidden response has a 4xx status code
func (o *DeleteKubernetesNamespaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete kubernetes namespace forbidden response has a 5xx status code
func (o *DeleteKubernetesNamespaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete kubernetes namespace forbidden response a status code equal to that given
func (o *DeleteKubernetesNamespaceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete kubernetes namespace forbidden response
func (o *DeleteKubernetesNamespaceForbidden) Code() int {
	return 403
}

func (o *DeleteKubernetesNamespaceForbidden) Error() string {
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceForbidden", 403)
}

func (o *DeleteKubernetesNamespaceForbidden) String() string {
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceForbidden", 403)
}

func (o *DeleteKubernetesNamespaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteKubernetesNamespaceInternalServerError creates a DeleteKubernetesNamespaceInternalServerError with default headers values
func NewDeleteKubernetesNamespaceInternalServerError() *DeleteKubernetesNamespaceInternalServerError {
	return &DeleteKubernetesNamespaceInternalServerError{}
}

/*
DeleteKubernetesNamespaceInternalServerError describes a response with status code 500, with default header values.

Server error occurred while attempting to delete the namespace.
*/
type DeleteKubernetesNamespaceInternalServerError struct {
}

// IsSuccess returns true when this delete kubernetes namespace internal server error response has a 2xx status code
func (o *DeleteKubernetesNamespaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete kubernetes namespace internal server error response has a 3xx status code
func (o *DeleteKubernetesNamespaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete kubernetes namespace internal server error response has a 4xx status code
func (o *DeleteKubernetesNamespaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete kubernetes namespace internal server error response has a 5xx status code
func (o *DeleteKubernetesNamespaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete kubernetes namespace internal server error response a status code equal to that given
func (o *DeleteKubernetesNamespaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete kubernetes namespace internal server error response
func (o *DeleteKubernetesNamespaceInternalServerError) Code() int {
	return 500
}

func (o *DeleteKubernetesNamespaceInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceInternalServerError", 500)
}

func (o *DeleteKubernetesNamespaceInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /kubernetes/{id}/namespaces][%d] deleteKubernetesNamespaceInternalServerError", 500)
}

func (o *DeleteKubernetesNamespaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
