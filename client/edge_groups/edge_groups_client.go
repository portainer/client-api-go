// Code generated by go-swagger; DO NOT EDIT.

package edge_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEdgeGroupsID(params *DeleteEdgeGroupsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeGroupsIDNoContent, error)

	GetEdgeGroups(params *GetEdgeGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeGroupsOK, error)

	GetEdgeGroupsID(params *GetEdgeGroupsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeGroupsIDOK, error)

	PostEdgeGroups(params *PostEdgeGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostEdgeGroupsOK, error)

	PutEdgeGroupsID(params *PutEdgeGroupsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutEdgeGroupsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteEdgeGroupsID deletes an edge group
*/
func (a *Client) DeleteEdgeGroupsID(params *DeleteEdgeGroupsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeGroupsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEdgeGroupsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEdgeGroupsID",
		Method:             "DELETE",
		PathPattern:        "/edge_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteEdgeGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEdgeGroupsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEdgeGroupsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeGroups lists edge groups
*/
func (a *Client) GetEdgeGroups(params *GetEdgeGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeGroups",
		Method:             "GET",
		PathPattern:        "/edge_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEdgeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeGroupsID inspects an edge group
*/
func (a *Client) GetEdgeGroupsID(params *GetEdgeGroupsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeGroupsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeGroupsID",
		Method:             "GET",
		PathPattern:        "/edge_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEdgeGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeGroupsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeGroupsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEdgeGroups creates an edge group
*/
func (a *Client) PostEdgeGroups(params *PostEdgeGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostEdgeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEdgeGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostEdgeGroups",
		Method:             "POST",
		PathPattern:        "/edge_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostEdgeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEdgeGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEdgeGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutEdgeGroupsID updates an edge group
*/
func (a *Client) PutEdgeGroupsID(params *PutEdgeGroupsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutEdgeGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEdgeGroupsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutEdgeGroupsID",
		Method:             "PUT",
		PathPattern:        "/edge_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutEdgeGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEdgeGroupsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutEdgeGroupsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
