// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UserDeleteReader is a Reader for the UserDelete structure.
type UserDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUserDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /users/{id}] UserDelete", response, response.Code())
	}
}

// NewUserDeleteNoContent creates a UserDeleteNoContent with default headers values
func NewUserDeleteNoContent() *UserDeleteNoContent {
	return &UserDeleteNoContent{}
}

/*
UserDeleteNoContent describes a response with status code 204, with default header values.

Success
*/
type UserDeleteNoContent struct {
}

// IsSuccess returns true when this user delete no content response has a 2xx status code
func (o *UserDeleteNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user delete no content response has a 3xx status code
func (o *UserDeleteNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user delete no content response has a 4xx status code
func (o *UserDeleteNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this user delete no content response has a 5xx status code
func (o *UserDeleteNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this user delete no content response a status code equal to that given
func (o *UserDeleteNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the user delete no content response
func (o *UserDeleteNoContent) Code() int {
	return 204
}

func (o *UserDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteNoContent ", 204)
}

func (o *UserDeleteNoContent) String() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteNoContent ", 204)
}

func (o *UserDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserDeleteBadRequest creates a UserDeleteBadRequest with default headers values
func NewUserDeleteBadRequest() *UserDeleteBadRequest {
	return &UserDeleteBadRequest{}
}

/*
UserDeleteBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UserDeleteBadRequest struct {
}

// IsSuccess returns true when this user delete bad request response has a 2xx status code
func (o *UserDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user delete bad request response has a 3xx status code
func (o *UserDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user delete bad request response has a 4xx status code
func (o *UserDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user delete bad request response has a 5xx status code
func (o *UserDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user delete bad request response a status code equal to that given
func (o *UserDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the user delete bad request response
func (o *UserDeleteBadRequest) Code() int {
	return 400
}

func (o *UserDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteBadRequest ", 400)
}

func (o *UserDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteBadRequest ", 400)
}

func (o *UserDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserDeleteForbidden creates a UserDeleteForbidden with default headers values
func NewUserDeleteForbidden() *UserDeleteForbidden {
	return &UserDeleteForbidden{}
}

/*
UserDeleteForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type UserDeleteForbidden struct {
}

// IsSuccess returns true when this user delete forbidden response has a 2xx status code
func (o *UserDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user delete forbidden response has a 3xx status code
func (o *UserDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user delete forbidden response has a 4xx status code
func (o *UserDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user delete forbidden response has a 5xx status code
func (o *UserDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user delete forbidden response a status code equal to that given
func (o *UserDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the user delete forbidden response
func (o *UserDeleteForbidden) Code() int {
	return 403
}

func (o *UserDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteForbidden ", 403)
}

func (o *UserDeleteForbidden) String() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteForbidden ", 403)
}

func (o *UserDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserDeleteNotFound creates a UserDeleteNotFound with default headers values
func NewUserDeleteNotFound() *UserDeleteNotFound {
	return &UserDeleteNotFound{}
}

/*
UserDeleteNotFound describes a response with status code 404, with default header values.

User not found
*/
type UserDeleteNotFound struct {
}

// IsSuccess returns true when this user delete not found response has a 2xx status code
func (o *UserDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user delete not found response has a 3xx status code
func (o *UserDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user delete not found response has a 4xx status code
func (o *UserDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user delete not found response has a 5xx status code
func (o *UserDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user delete not found response a status code equal to that given
func (o *UserDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the user delete not found response
func (o *UserDeleteNotFound) Code() int {
	return 404
}

func (o *UserDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteNotFound ", 404)
}

func (o *UserDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteNotFound ", 404)
}

func (o *UserDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserDeleteInternalServerError creates a UserDeleteInternalServerError with default headers values
func NewUserDeleteInternalServerError() *UserDeleteInternalServerError {
	return &UserDeleteInternalServerError{}
}

/*
UserDeleteInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UserDeleteInternalServerError struct {
}

// IsSuccess returns true when this user delete internal server error response has a 2xx status code
func (o *UserDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user delete internal server error response has a 3xx status code
func (o *UserDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user delete internal server error response has a 4xx status code
func (o *UserDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user delete internal server error response has a 5xx status code
func (o *UserDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user delete internal server error response a status code equal to that given
func (o *UserDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the user delete internal server error response
func (o *UserDeleteInternalServerError) Code() int {
	return 500
}

func (o *UserDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteInternalServerError ", 500)
}

func (o *UserDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /users/{id}][%d] userDeleteInternalServerError ", 500)
}

func (o *UserDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
