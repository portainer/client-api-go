// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api-go/v2/models"
)

// UserCreateGitCredentialReader is a Reader for the UserCreateGitCredential structure.
type UserCreateGitCredentialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserCreateGitCredentialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUserCreateGitCredentialCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserCreateGitCredentialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserCreateGitCredentialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserCreateGitCredentialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserCreateGitCredentialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /users/{id}/gitcredentials] UserCreateGitCredential", response, response.Code())
	}
}

// NewUserCreateGitCredentialCreated creates a UserCreateGitCredentialCreated with default headers values
func NewUserCreateGitCredentialCreated() *UserCreateGitCredentialCreated {
	return &UserCreateGitCredentialCreated{}
}

/*
UserCreateGitCredentialCreated describes a response with status code 201, with default header values.

Created
*/
type UserCreateGitCredentialCreated struct {
	Payload *models.UsersGitCredentialResponse
}

// IsSuccess returns true when this user create git credential created response has a 2xx status code
func (o *UserCreateGitCredentialCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user create git credential created response has a 3xx status code
func (o *UserCreateGitCredentialCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user create git credential created response has a 4xx status code
func (o *UserCreateGitCredentialCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this user create git credential created response has a 5xx status code
func (o *UserCreateGitCredentialCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this user create git credential created response a status code equal to that given
func (o *UserCreateGitCredentialCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the user create git credential created response
func (o *UserCreateGitCredentialCreated) Code() int {
	return 201
}

func (o *UserCreateGitCredentialCreated) Error() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialCreated  %+v", 201, o.Payload)
}

func (o *UserCreateGitCredentialCreated) String() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialCreated  %+v", 201, o.Payload)
}

func (o *UserCreateGitCredentialCreated) GetPayload() *models.UsersGitCredentialResponse {
	return o.Payload
}

func (o *UserCreateGitCredentialCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UsersGitCredentialResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCreateGitCredentialBadRequest creates a UserCreateGitCredentialBadRequest with default headers values
func NewUserCreateGitCredentialBadRequest() *UserCreateGitCredentialBadRequest {
	return &UserCreateGitCredentialBadRequest{}
}

/*
UserCreateGitCredentialBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UserCreateGitCredentialBadRequest struct {
}

// IsSuccess returns true when this user create git credential bad request response has a 2xx status code
func (o *UserCreateGitCredentialBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user create git credential bad request response has a 3xx status code
func (o *UserCreateGitCredentialBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user create git credential bad request response has a 4xx status code
func (o *UserCreateGitCredentialBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user create git credential bad request response has a 5xx status code
func (o *UserCreateGitCredentialBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user create git credential bad request response a status code equal to that given
func (o *UserCreateGitCredentialBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the user create git credential bad request response
func (o *UserCreateGitCredentialBadRequest) Code() int {
	return 400
}

func (o *UserCreateGitCredentialBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialBadRequest ", 400)
}

func (o *UserCreateGitCredentialBadRequest) String() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialBadRequest ", 400)
}

func (o *UserCreateGitCredentialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserCreateGitCredentialUnauthorized creates a UserCreateGitCredentialUnauthorized with default headers values
func NewUserCreateGitCredentialUnauthorized() *UserCreateGitCredentialUnauthorized {
	return &UserCreateGitCredentialUnauthorized{}
}

/*
UserCreateGitCredentialUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserCreateGitCredentialUnauthorized struct {
}

// IsSuccess returns true when this user create git credential unauthorized response has a 2xx status code
func (o *UserCreateGitCredentialUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user create git credential unauthorized response has a 3xx status code
func (o *UserCreateGitCredentialUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user create git credential unauthorized response has a 4xx status code
func (o *UserCreateGitCredentialUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user create git credential unauthorized response has a 5xx status code
func (o *UserCreateGitCredentialUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user create git credential unauthorized response a status code equal to that given
func (o *UserCreateGitCredentialUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the user create git credential unauthorized response
func (o *UserCreateGitCredentialUnauthorized) Code() int {
	return 401
}

func (o *UserCreateGitCredentialUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialUnauthorized ", 401)
}

func (o *UserCreateGitCredentialUnauthorized) String() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialUnauthorized ", 401)
}

func (o *UserCreateGitCredentialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserCreateGitCredentialForbidden creates a UserCreateGitCredentialForbidden with default headers values
func NewUserCreateGitCredentialForbidden() *UserCreateGitCredentialForbidden {
	return &UserCreateGitCredentialForbidden{}
}

/*
UserCreateGitCredentialForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type UserCreateGitCredentialForbidden struct {
}

// IsSuccess returns true when this user create git credential forbidden response has a 2xx status code
func (o *UserCreateGitCredentialForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user create git credential forbidden response has a 3xx status code
func (o *UserCreateGitCredentialForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user create git credential forbidden response has a 4xx status code
func (o *UserCreateGitCredentialForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user create git credential forbidden response has a 5xx status code
func (o *UserCreateGitCredentialForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user create git credential forbidden response a status code equal to that given
func (o *UserCreateGitCredentialForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the user create git credential forbidden response
func (o *UserCreateGitCredentialForbidden) Code() int {
	return 403
}

func (o *UserCreateGitCredentialForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialForbidden ", 403)
}

func (o *UserCreateGitCredentialForbidden) String() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialForbidden ", 403)
}

func (o *UserCreateGitCredentialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserCreateGitCredentialInternalServerError creates a UserCreateGitCredentialInternalServerError with default headers values
func NewUserCreateGitCredentialInternalServerError() *UserCreateGitCredentialInternalServerError {
	return &UserCreateGitCredentialInternalServerError{}
}

/*
UserCreateGitCredentialInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UserCreateGitCredentialInternalServerError struct {
}

// IsSuccess returns true when this user create git credential internal server error response has a 2xx status code
func (o *UserCreateGitCredentialInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user create git credential internal server error response has a 3xx status code
func (o *UserCreateGitCredentialInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user create git credential internal server error response has a 4xx status code
func (o *UserCreateGitCredentialInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user create git credential internal server error response has a 5xx status code
func (o *UserCreateGitCredentialInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user create git credential internal server error response a status code equal to that given
func (o *UserCreateGitCredentialInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the user create git credential internal server error response
func (o *UserCreateGitCredentialInternalServerError) Code() int {
	return 500
}

func (o *UserCreateGitCredentialInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialInternalServerError ", 500)
}

func (o *UserCreateGitCredentialInternalServerError) String() string {
	return fmt.Sprintf("[POST /users/{id}/gitcredentials][%d] userCreateGitCredentialInternalServerError ", 500)
}

func (o *UserCreateGitCredentialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
