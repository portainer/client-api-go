// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api-go/v2/models"
)

// UserNamespacesReader is a Reader for the UserNamespaces structure.
type UserNamespacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserNamespacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserNamespacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserNamespacesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserNamespacesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserNamespacesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserNamespacesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserNamespacesOK creates a UserNamespacesOK with default headers values
func NewUserNamespacesOK() *UserNamespacesOK {
	return &UserNamespacesOK{}
}

/*
UserNamespacesOK describes a response with status code 200, with default header values.

Success
*/
type UserNamespacesOK struct {
	Payload models.UsersNamespaceMapping
}

// IsSuccess returns true when this user namespaces o k response has a 2xx status code
func (o *UserNamespacesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user namespaces o k response has a 3xx status code
func (o *UserNamespacesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user namespaces o k response has a 4xx status code
func (o *UserNamespacesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user namespaces o k response has a 5xx status code
func (o *UserNamespacesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user namespaces o k response a status code equal to that given
func (o *UserNamespacesOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserNamespacesOK) Error() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesOK  %+v", 200, o.Payload)
}

func (o *UserNamespacesOK) String() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesOK  %+v", 200, o.Payload)
}

func (o *UserNamespacesOK) GetPayload() models.UsersNamespaceMapping {
	return o.Payload
}

func (o *UserNamespacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserNamespacesBadRequest creates a UserNamespacesBadRequest with default headers values
func NewUserNamespacesBadRequest() *UserNamespacesBadRequest {
	return &UserNamespacesBadRequest{}
}

/*
UserNamespacesBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UserNamespacesBadRequest struct {
}

// IsSuccess returns true when this user namespaces bad request response has a 2xx status code
func (o *UserNamespacesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user namespaces bad request response has a 3xx status code
func (o *UserNamespacesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user namespaces bad request response has a 4xx status code
func (o *UserNamespacesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user namespaces bad request response has a 5xx status code
func (o *UserNamespacesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user namespaces bad request response a status code equal to that given
func (o *UserNamespacesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserNamespacesBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesBadRequest ", 400)
}

func (o *UserNamespacesBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesBadRequest ", 400)
}

func (o *UserNamespacesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserNamespacesForbidden creates a UserNamespacesForbidden with default headers values
func NewUserNamespacesForbidden() *UserNamespacesForbidden {
	return &UserNamespacesForbidden{}
}

/*
UserNamespacesForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type UserNamespacesForbidden struct {
}

// IsSuccess returns true when this user namespaces forbidden response has a 2xx status code
func (o *UserNamespacesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user namespaces forbidden response has a 3xx status code
func (o *UserNamespacesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user namespaces forbidden response has a 4xx status code
func (o *UserNamespacesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user namespaces forbidden response has a 5xx status code
func (o *UserNamespacesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user namespaces forbidden response a status code equal to that given
func (o *UserNamespacesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserNamespacesForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesForbidden ", 403)
}

func (o *UserNamespacesForbidden) String() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesForbidden ", 403)
}

func (o *UserNamespacesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserNamespacesNotFound creates a UserNamespacesNotFound with default headers values
func NewUserNamespacesNotFound() *UserNamespacesNotFound {
	return &UserNamespacesNotFound{}
}

/*
UserNamespacesNotFound describes a response with status code 404, with default header values.

User not found
*/
type UserNamespacesNotFound struct {
}

// IsSuccess returns true when this user namespaces not found response has a 2xx status code
func (o *UserNamespacesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user namespaces not found response has a 3xx status code
func (o *UserNamespacesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user namespaces not found response has a 4xx status code
func (o *UserNamespacesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user namespaces not found response has a 5xx status code
func (o *UserNamespacesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user namespaces not found response a status code equal to that given
func (o *UserNamespacesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserNamespacesNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesNotFound ", 404)
}

func (o *UserNamespacesNotFound) String() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesNotFound ", 404)
}

func (o *UserNamespacesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserNamespacesInternalServerError creates a UserNamespacesInternalServerError with default headers values
func NewUserNamespacesInternalServerError() *UserNamespacesInternalServerError {
	return &UserNamespacesInternalServerError{}
}

/*
UserNamespacesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UserNamespacesInternalServerError struct {
}

// IsSuccess returns true when this user namespaces internal server error response has a 2xx status code
func (o *UserNamespacesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user namespaces internal server error response has a 3xx status code
func (o *UserNamespacesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user namespaces internal server error response has a 4xx status code
func (o *UserNamespacesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user namespaces internal server error response has a 5xx status code
func (o *UserNamespacesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user namespaces internal server error response a status code equal to that given
func (o *UserNamespacesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserNamespacesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesInternalServerError ", 500)
}

func (o *UserNamespacesInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{id}/namespaces][%d] userNamespacesInternalServerError ", 500)
}

func (o *UserNamespacesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
