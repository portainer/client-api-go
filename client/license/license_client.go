// Code generated by go-swagger; DO NOT EDIT.

package license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new license API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for license API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LicensesAttach(params *LicensesAttachParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesAttachOK, error)

	LicensesDelete(params *LicensesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesDeleteOK, error)

	LicensesInfo(params *LicensesInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesInfoOK, error)

	LicensesList(params *LicensesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
LicensesAttach attaches a list of licenses to portainer

**Access policy**: administrator
*/
func (a *Client) LicensesAttach(params *LicensesAttachParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLicensesAttachParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "licensesAttach",
		Method:             "POST",
		PathPattern:        "/licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LicensesAttachReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LicensesAttachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for licensesAttach: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LicensesDelete deletes license from portainer instance

**Access policy**: administrator
*/
func (a *Client) LicensesDelete(params *LicensesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLicensesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "licensesDelete",
		Method:             "DELETE",
		PathPattern:        "/licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LicensesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LicensesDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for licensesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LicensesInfo summarizes licenses on portainer

**Access policy**: administrator
*/
func (a *Client) LicensesInfo(params *LicensesInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLicensesInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "licensesInfo",
		Method:             "GET",
		PathPattern:        "/licenses/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LicensesInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LicensesInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for licensesInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LicensesList fetches the list of licenses on portainer

**Access policy**: administrator
*/
func (a *Client) LicensesList(params *LicensesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LicensesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLicensesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "licensesList",
		Method:             "GET",
		PathPattern:        "/licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LicensesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LicensesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for licensesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
