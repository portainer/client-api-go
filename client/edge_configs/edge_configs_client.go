// Code generated by go-swagger; DO NOT EDIT.

package edge_configs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge configs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge configs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EdgeConfigCreate(params *EdgeConfigCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigCreateNoContent, error)

	EdgeConfigDelete(params *EdgeConfigDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigDeleteNoContent, error)

	EdgeConfigFiles(params *EdgeConfigFilesParams, opts ...ClientOption) (*EdgeConfigFilesOK, error)

	EdgeConfigInspect(params *EdgeConfigInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigInspectOK, error)

	EdgeConfigList(params *EdgeConfigListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigListOK, error)

	EdgeConfigState(params *EdgeConfigStateParams, opts ...ClientOption) (*EdgeConfigStateNoContent, error)

	EdgeConfigUpdate(params *EdgeConfigUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigUpdateNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	EdgeConfigCreate creates an edge configuration

	Create an Edge Configuration.

**Access policy**: authenticated
*/
func (a *Client) EdgeConfigCreate(params *EdgeConfigCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeConfigCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeConfigCreate",
		Method:             "POST",
		PathPattern:        "/edge_configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeConfigCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeConfigCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeConfigCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	EdgeConfigDelete deletes an edge configuration

	Delete an Edge configuration.

**Access policy**: authenticated
*/
func (a *Client) EdgeConfigDelete(params *EdgeConfigDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeConfigDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeConfigDelete",
		Method:             "DELETE",
		PathPattern:        "/edge_configurations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeConfigDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeConfigDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeConfigDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeConfigFiles gets the files for an edge configuration

Used by the standard edge agent to retrieve the files for an Edge configuration.
*/
func (a *Client) EdgeConfigFiles(params *EdgeConfigFilesParams, opts ...ClientOption) (*EdgeConfigFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeConfigFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeConfigFiles",
		Method:             "GET",
		PathPattern:        "/edge_configurations/{id}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeConfigFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeConfigFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeConfigFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	EdgeConfigInspect inspects an edge configuration

	Retrieve details about an Edge configuration.

**Access policy**: authenticated
*/
func (a *Client) EdgeConfigInspect(params *EdgeConfigInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeConfigInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeConfigInspect",
		Method:             "GET",
		PathPattern:        "/edge_configurations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeConfigInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeConfigInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeConfigInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeConfigList lists available edge configurations

**Access policy**: authenticated
*/
func (a *Client) EdgeConfigList(params *EdgeConfigListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeConfigListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeConfigList",
		Method:             "GET",
		PathPattern:        "/edge_configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeConfigListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeConfigListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeConfigList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeConfigState updates the state of an edge configuration

Used by the standard edge agent to update the state of an Edge configuration.
*/
func (a *Client) EdgeConfigState(params *EdgeConfigStateParams, opts ...ClientOption) (*EdgeConfigStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeConfigStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeConfigState",
		Method:             "PUT",
		PathPattern:        "/edge_configurations/{id}/{state}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeConfigStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeConfigStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeConfigState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	EdgeConfigUpdate updates an edge configuration

	Update an Edge Configuration.

**Access policy**: authenticated
*/
func (a *Client) EdgeConfigUpdate(params *EdgeConfigUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeConfigUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeConfigUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/edge_configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeConfigUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeConfigUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeConfigUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
