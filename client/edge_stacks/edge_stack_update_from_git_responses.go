// Code generated by go-swagger; DO NOT EDIT.

package edge_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// EdgeStackUpdateFromGitReader is a Reader for the EdgeStackUpdateFromGit structure.
type EdgeStackUpdateFromGitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EdgeStackUpdateFromGitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewEdgeStackUpdateFromGitNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEdgeStackUpdateFromGitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEdgeStackUpdateFromGitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEdgeStackUpdateFromGitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEdgeStackUpdateFromGitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEdgeStackUpdateFromGitNoContent creates a EdgeStackUpdateFromGitNoContent with default headers values
func NewEdgeStackUpdateFromGitNoContent() *EdgeStackUpdateFromGitNoContent {
	return &EdgeStackUpdateFromGitNoContent{}
}

/*
EdgeStackUpdateFromGitNoContent describes a response with status code 204, with default header values.

Success
*/
type EdgeStackUpdateFromGitNoContent struct {
}

// IsSuccess returns true when this edge stack update from git no content response has a 2xx status code
func (o *EdgeStackUpdateFromGitNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edge stack update from git no content response has a 3xx status code
func (o *EdgeStackUpdateFromGitNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge stack update from git no content response has a 4xx status code
func (o *EdgeStackUpdateFromGitNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge stack update from git no content response has a 5xx status code
func (o *EdgeStackUpdateFromGitNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this edge stack update from git no content response a status code equal to that given
func (o *EdgeStackUpdateFromGitNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *EdgeStackUpdateFromGitNoContent) Error() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitNoContent ", 204)
}

func (o *EdgeStackUpdateFromGitNoContent) String() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitNoContent ", 204)
}

func (o *EdgeStackUpdateFromGitNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEdgeStackUpdateFromGitBadRequest creates a EdgeStackUpdateFromGitBadRequest with default headers values
func NewEdgeStackUpdateFromGitBadRequest() *EdgeStackUpdateFromGitBadRequest {
	return &EdgeStackUpdateFromGitBadRequest{}
}

/*
EdgeStackUpdateFromGitBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type EdgeStackUpdateFromGitBadRequest struct {
}

// IsSuccess returns true when this edge stack update from git bad request response has a 2xx status code
func (o *EdgeStackUpdateFromGitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge stack update from git bad request response has a 3xx status code
func (o *EdgeStackUpdateFromGitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge stack update from git bad request response has a 4xx status code
func (o *EdgeStackUpdateFromGitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge stack update from git bad request response has a 5xx status code
func (o *EdgeStackUpdateFromGitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this edge stack update from git bad request response a status code equal to that given
func (o *EdgeStackUpdateFromGitBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EdgeStackUpdateFromGitBadRequest) Error() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitBadRequest ", 400)
}

func (o *EdgeStackUpdateFromGitBadRequest) String() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitBadRequest ", 400)
}

func (o *EdgeStackUpdateFromGitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEdgeStackUpdateFromGitForbidden creates a EdgeStackUpdateFromGitForbidden with default headers values
func NewEdgeStackUpdateFromGitForbidden() *EdgeStackUpdateFromGitForbidden {
	return &EdgeStackUpdateFromGitForbidden{}
}

/*
EdgeStackUpdateFromGitForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type EdgeStackUpdateFromGitForbidden struct {
}

// IsSuccess returns true when this edge stack update from git forbidden response has a 2xx status code
func (o *EdgeStackUpdateFromGitForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge stack update from git forbidden response has a 3xx status code
func (o *EdgeStackUpdateFromGitForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge stack update from git forbidden response has a 4xx status code
func (o *EdgeStackUpdateFromGitForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge stack update from git forbidden response has a 5xx status code
func (o *EdgeStackUpdateFromGitForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this edge stack update from git forbidden response a status code equal to that given
func (o *EdgeStackUpdateFromGitForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *EdgeStackUpdateFromGitForbidden) Error() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitForbidden ", 403)
}

func (o *EdgeStackUpdateFromGitForbidden) String() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitForbidden ", 403)
}

func (o *EdgeStackUpdateFromGitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEdgeStackUpdateFromGitNotFound creates a EdgeStackUpdateFromGitNotFound with default headers values
func NewEdgeStackUpdateFromGitNotFound() *EdgeStackUpdateFromGitNotFound {
	return &EdgeStackUpdateFromGitNotFound{}
}

/*
EdgeStackUpdateFromGitNotFound describes a response with status code 404, with default header values.

Not found
*/
type EdgeStackUpdateFromGitNotFound struct {
}

// IsSuccess returns true when this edge stack update from git not found response has a 2xx status code
func (o *EdgeStackUpdateFromGitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge stack update from git not found response has a 3xx status code
func (o *EdgeStackUpdateFromGitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge stack update from git not found response has a 4xx status code
func (o *EdgeStackUpdateFromGitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge stack update from git not found response has a 5xx status code
func (o *EdgeStackUpdateFromGitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this edge stack update from git not found response a status code equal to that given
func (o *EdgeStackUpdateFromGitNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *EdgeStackUpdateFromGitNotFound) Error() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitNotFound ", 404)
}

func (o *EdgeStackUpdateFromGitNotFound) String() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitNotFound ", 404)
}

func (o *EdgeStackUpdateFromGitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEdgeStackUpdateFromGitInternalServerError creates a EdgeStackUpdateFromGitInternalServerError with default headers values
func NewEdgeStackUpdateFromGitInternalServerError() *EdgeStackUpdateFromGitInternalServerError {
	return &EdgeStackUpdateFromGitInternalServerError{}
}

/*
EdgeStackUpdateFromGitInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type EdgeStackUpdateFromGitInternalServerError struct {
}

// IsSuccess returns true when this edge stack update from git internal server error response has a 2xx status code
func (o *EdgeStackUpdateFromGitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge stack update from git internal server error response has a 3xx status code
func (o *EdgeStackUpdateFromGitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge stack update from git internal server error response has a 4xx status code
func (o *EdgeStackUpdateFromGitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge stack update from git internal server error response has a 5xx status code
func (o *EdgeStackUpdateFromGitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this edge stack update from git internal server error response a status code equal to that given
func (o *EdgeStackUpdateFromGitInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *EdgeStackUpdateFromGitInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitInternalServerError ", 500)
}

func (o *EdgeStackUpdateFromGitInternalServerError) String() string {
	return fmt.Sprintf("[PUT /edge_stacks/{id}/git][%d] edgeStackUpdateFromGitInternalServerError ", 500)
}

func (o *EdgeStackUpdateFromGitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
