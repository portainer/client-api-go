// Code generated by go-swagger; DO NOT EDIT.

package websocket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWebsocketAttachParams creates a new GetWebsocketAttachParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWebsocketAttachParams() *GetWebsocketAttachParams {
	return &GetWebsocketAttachParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWebsocketAttachParamsWithTimeout creates a new GetWebsocketAttachParams object
// with the ability to set a timeout on a request.
func NewGetWebsocketAttachParamsWithTimeout(timeout time.Duration) *GetWebsocketAttachParams {
	return &GetWebsocketAttachParams{
		timeout: timeout,
	}
}

// NewGetWebsocketAttachParamsWithContext creates a new GetWebsocketAttachParams object
// with the ability to set a context for a request.
func NewGetWebsocketAttachParamsWithContext(ctx context.Context) *GetWebsocketAttachParams {
	return &GetWebsocketAttachParams{
		Context: ctx,
	}
}

// NewGetWebsocketAttachParamsWithHTTPClient creates a new GetWebsocketAttachParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWebsocketAttachParamsWithHTTPClient(client *http.Client) *GetWebsocketAttachParams {
	return &GetWebsocketAttachParams{
		HTTPClient: client,
	}
}

/* GetWebsocketAttachParams contains all the parameters to send to the API endpoint
   for the get websocket attach operation.

   Typically these are written to a http.Request.
*/
type GetWebsocketAttachParams struct {

	/* EndpointID.

	   environment(endpoint) ID of the environment(endpoint) where the resource is located
	*/
	EndpointID int64

	/* NodeName.

	   node name
	*/
	NodeName *string

	/* Token.

	   JWT token used for authentication against this environment(endpoint)
	*/
	Token string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get websocket attach params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebsocketAttachParams) WithDefaults() *GetWebsocketAttachParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get websocket attach params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebsocketAttachParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get websocket attach params
func (o *GetWebsocketAttachParams) WithTimeout(timeout time.Duration) *GetWebsocketAttachParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get websocket attach params
func (o *GetWebsocketAttachParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get websocket attach params
func (o *GetWebsocketAttachParams) WithContext(ctx context.Context) *GetWebsocketAttachParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get websocket attach params
func (o *GetWebsocketAttachParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get websocket attach params
func (o *GetWebsocketAttachParams) WithHTTPClient(client *http.Client) *GetWebsocketAttachParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get websocket attach params
func (o *GetWebsocketAttachParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndpointID adds the endpointID to the get websocket attach params
func (o *GetWebsocketAttachParams) WithEndpointID(endpointID int64) *GetWebsocketAttachParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the get websocket attach params
func (o *GetWebsocketAttachParams) SetEndpointID(endpointID int64) {
	o.EndpointID = endpointID
}

// WithNodeName adds the nodeName to the get websocket attach params
func (o *GetWebsocketAttachParams) WithNodeName(nodeName *string) *GetWebsocketAttachParams {
	o.SetNodeName(nodeName)
	return o
}

// SetNodeName adds the nodeName to the get websocket attach params
func (o *GetWebsocketAttachParams) SetNodeName(nodeName *string) {
	o.NodeName = nodeName
}

// WithToken adds the token to the get websocket attach params
func (o *GetWebsocketAttachParams) WithToken(token string) *GetWebsocketAttachParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get websocket attach params
func (o *GetWebsocketAttachParams) SetToken(token string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *GetWebsocketAttachParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endpointId
	qrEndpointID := o.EndpointID
	qEndpointID := swag.FormatInt64(qrEndpointID)
	if qEndpointID != "" {

		if err := r.SetQueryParam("endpointId", qEndpointID); err != nil {
			return err
		}
	}

	if o.NodeName != nil {

		// query param nodeName
		var qrNodeName string

		if o.NodeName != nil {
			qrNodeName = *o.NodeName
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("nodeName", qNodeName); err != nil {
				return err
			}
		}
	}

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {

		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
