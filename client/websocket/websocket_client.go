// Code generated by go-swagger; DO NOT EDIT.

package websocket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new websocket API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for websocket API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetWebsocketAttach(params *GetWebsocketAttachParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketAttachOK, error)

	GetWebsocketExec(params *GetWebsocketExecParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketExecOK, error)

	GetWebsocketKubernetesShell(params *GetWebsocketKubernetesShellParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketKubernetesShellOK, error)

	GetWebsocketPod(params *GetWebsocketPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketPodOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetWebsocketAttach attaches a websocket

	If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).

If the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and
an AttachStart operation HTTP request will be created and hijacked.
**Access policy**: authenticated
*/
func (a *Client) GetWebsocketAttach(params *GetWebsocketAttachParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsocketAttachParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWebsocketAttach",
		Method:             "GET",
		PathPattern:        "/websocket/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWebsocketAttachReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebsocketAttachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWebsocketAttach: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetWebsocketExec executes a websocket

	If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).

If the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and
an ExecStart operation HTTP request will be created and hijacked.
*/
func (a *Client) GetWebsocketExec(params *GetWebsocketExecParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketExecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsocketExecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWebsocketExec",
		Method:             "GET",
		PathPattern:        "/websocket/exec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWebsocketExecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebsocketExecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWebsocketExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetWebsocketKubernetesShell executes a websocket on kubectl shell pod

	The request will be upgraded to the websocket protocol. The request will proxy input from the client to the pod via long-lived websocket connection.

**Access policy**: authenticated
*/
func (a *Client) GetWebsocketKubernetesShell(params *GetWebsocketKubernetesShellParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketKubernetesShellOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsocketKubernetesShellParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWebsocketKubernetesShell",
		Method:             "GET",
		PathPattern:        "/websocket/kubernetes-shell",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWebsocketKubernetesShellReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebsocketKubernetesShellOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWebsocketKubernetesShell: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetWebsocketPod executes a websocket on pod

	The request will be upgraded to the websocket protocol.

**Access policy**: authenticated
*/
func (a *Client) GetWebsocketPod(params *GetWebsocketPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebsocketPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsocketPodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWebsocketPod",
		Method:             "GET",
		PathPattern:        "/websocket/pod",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWebsocketPodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebsocketPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWebsocketPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
