// Code generated by go-swagger; DO NOT EDIT.

package websocket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWebsocketPodParams creates a new GetWebsocketPodParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWebsocketPodParams() *GetWebsocketPodParams {
	return &GetWebsocketPodParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWebsocketPodParamsWithTimeout creates a new GetWebsocketPodParams object
// with the ability to set a timeout on a request.
func NewGetWebsocketPodParamsWithTimeout(timeout time.Duration) *GetWebsocketPodParams {
	return &GetWebsocketPodParams{
		timeout: timeout,
	}
}

// NewGetWebsocketPodParamsWithContext creates a new GetWebsocketPodParams object
// with the ability to set a context for a request.
func NewGetWebsocketPodParamsWithContext(ctx context.Context) *GetWebsocketPodParams {
	return &GetWebsocketPodParams{
		Context: ctx,
	}
}

// NewGetWebsocketPodParamsWithHTTPClient creates a new GetWebsocketPodParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWebsocketPodParamsWithHTTPClient(client *http.Client) *GetWebsocketPodParams {
	return &GetWebsocketPodParams{
		HTTPClient: client,
	}
}

/* GetWebsocketPodParams contains all the parameters to send to the API endpoint
   for the get websocket pod operation.

   Typically these are written to a http.Request.
*/
type GetWebsocketPodParams struct {

	/* Command.

	   command to execute in the container
	*/
	Command string

	/* ContainerName.

	   name of the container
	*/
	ContainerName string

	/* EndpointID.

	   endpoint ID of the endpoint where the resource is located
	*/
	EndpointID int64

	/* Namespace.

	   namespace where the container is located
	*/
	Namespace string

	/* PodName.

	   name of the pod containing the container
	*/
	PodName string

	/* Token.

	   JWT token used for authentication against this endpoint
	*/
	Token string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get websocket pod params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebsocketPodParams) WithDefaults() *GetWebsocketPodParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get websocket pod params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebsocketPodParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get websocket pod params
func (o *GetWebsocketPodParams) WithTimeout(timeout time.Duration) *GetWebsocketPodParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get websocket pod params
func (o *GetWebsocketPodParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get websocket pod params
func (o *GetWebsocketPodParams) WithContext(ctx context.Context) *GetWebsocketPodParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get websocket pod params
func (o *GetWebsocketPodParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get websocket pod params
func (o *GetWebsocketPodParams) WithHTTPClient(client *http.Client) *GetWebsocketPodParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get websocket pod params
func (o *GetWebsocketPodParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommand adds the command to the get websocket pod params
func (o *GetWebsocketPodParams) WithCommand(command string) *GetWebsocketPodParams {
	o.SetCommand(command)
	return o
}

// SetCommand adds the command to the get websocket pod params
func (o *GetWebsocketPodParams) SetCommand(command string) {
	o.Command = command
}

// WithContainerName adds the containerName to the get websocket pod params
func (o *GetWebsocketPodParams) WithContainerName(containerName string) *GetWebsocketPodParams {
	o.SetContainerName(containerName)
	return o
}

// SetContainerName adds the containerName to the get websocket pod params
func (o *GetWebsocketPodParams) SetContainerName(containerName string) {
	o.ContainerName = containerName
}

// WithEndpointID adds the endpointID to the get websocket pod params
func (o *GetWebsocketPodParams) WithEndpointID(endpointID int64) *GetWebsocketPodParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the get websocket pod params
func (o *GetWebsocketPodParams) SetEndpointID(endpointID int64) {
	o.EndpointID = endpointID
}

// WithNamespace adds the namespace to the get websocket pod params
func (o *GetWebsocketPodParams) WithNamespace(namespace string) *GetWebsocketPodParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get websocket pod params
func (o *GetWebsocketPodParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPodName adds the podName to the get websocket pod params
func (o *GetWebsocketPodParams) WithPodName(podName string) *GetWebsocketPodParams {
	o.SetPodName(podName)
	return o
}

// SetPodName adds the podName to the get websocket pod params
func (o *GetWebsocketPodParams) SetPodName(podName string) {
	o.PodName = podName
}

// WithToken adds the token to the get websocket pod params
func (o *GetWebsocketPodParams) WithToken(token string) *GetWebsocketPodParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get websocket pod params
func (o *GetWebsocketPodParams) SetToken(token string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *GetWebsocketPodParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param command
	qrCommand := o.Command
	qCommand := qrCommand
	if qCommand != "" {

		if err := r.SetQueryParam("command", qCommand); err != nil {
			return err
		}
	}

	// query param containerName
	qrContainerName := o.ContainerName
	qContainerName := qrContainerName
	if qContainerName != "" {

		if err := r.SetQueryParam("containerName", qContainerName); err != nil {
			return err
		}
	}

	// query param endpointId
	qrEndpointID := o.EndpointID
	qEndpointID := swag.FormatInt64(qrEndpointID)
	if qEndpointID != "" {

		if err := r.SetQueryParam("endpointId", qEndpointID); err != nil {
			return err
		}
	}

	// query param namespace
	qrNamespace := o.Namespace
	qNamespace := qrNamespace
	if qNamespace != "" {

		if err := r.SetQueryParam("namespace", qNamespace); err != nil {
			return err
		}
	}

	// query param podName
	qrPodName := o.PodName
	qPodName := qrPodName
	if qPodName != "" {

		if err := r.SetQueryParam("podName", qPodName); err != nil {
			return err
		}
	}

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {

		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
