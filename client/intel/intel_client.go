// Code generated by go-swagger; DO NOT EDIT.

package intel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new intel API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new intel API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new intel API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for intel API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeviceAction(params *DeviceActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeviceActionNoContent, error)

	DeviceFeatures(params *DeviceFeaturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeviceFeaturesNoContent, error)

	OpenAMTConfigure(params *OpenAMTConfigureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTConfigureNoContent, error)

	OpenAMTDevices(params *OpenAMTDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTDevicesOK, error)

	OpenAMTHostInfo(params *OpenAMTHostInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTHostInfoOK, error)

	OpenAMTActivate(params *OpenAMTActivateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTActivateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	DeviceAction executes out of band action on an a m t managed device

	Execute out of band action on an AMT managed device

**Access policy**: administrator
*/
func (a *Client) DeviceAction(params *DeviceActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeviceActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeviceAction",
		Method:             "POST",
		PathPattern:        "/open_amt/{id}/devices/{deviceId}/action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeviceActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceActionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeviceFeatures enables features on an a m t managed device

	Enable features on an AMT managed device

**Access policy**: administrator
*/
func (a *Client) DeviceFeatures(params *DeviceFeaturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeviceFeaturesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeviceFeatures",
		Method:             "POST",
		PathPattern:        "/open_amt/{id}/devices_features/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeviceFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceFeaturesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	OpenAMTConfigure enables portainer s open a m t capabilities

	Enable Portainer's OpenAMT capabilities

**Access policy**: administrator
*/
func (a *Client) OpenAMTConfigure(params *OpenAMTConfigureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTConfigureNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAMTConfigureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OpenAMTConfigure",
		Method:             "POST",
		PathPattern:        "/open_amt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OpenAMTConfigureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAMTConfigureNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OpenAMTConfigure: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	OpenAMTDevices fetches open a m t managed devices information for endpoint

	Fetch OpenAMT managed devices information for endpoint

**Access policy**: administrator
*/
func (a *Client) OpenAMTDevices(params *OpenAMTDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAMTDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OpenAMTDevices",
		Method:             "GET",
		PathPattern:        "/open_amt/{id}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OpenAMTDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAMTDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OpenAMTDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	OpenAMTHostInfo requests open a m t info from a node

	Request OpenAMT info from a node

**Access policy**: administrator
*/
func (a *Client) OpenAMTHostInfo(params *OpenAMTHostInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTHostInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAMTHostInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OpenAMTHostInfo",
		Method:             "GET",
		PathPattern:        "/open_amt/{id}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OpenAMTHostInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAMTHostInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OpenAMTHostInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	OpenAMTActivate activates open a m t device and associate to agent endpoint

	Activate OpenAMT device and associate to agent endpoint

**Access policy**: administrator
*/
func (a *Client) OpenAMTActivate(params *OpenAMTActivateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenAMTActivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAMTActivateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openAMTActivate",
		Method:             "POST",
		PathPattern:        "/open_amt/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OpenAMTActivateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAMTActivateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openAMTActivate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
