// Code generated by go-swagger; DO NOT EDIT.

package intel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// OpenAMTDevicesReader is a Reader for the OpenAMTDevices structure.
type OpenAMTDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OpenAMTDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOpenAMTDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOpenAMTDevicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOpenAMTDevicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOpenAMTDevicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOpenAMTDevicesOK creates a OpenAMTDevicesOK with default headers values
func NewOpenAMTDevicesOK() *OpenAMTDevicesOK {
	return &OpenAMTDevicesOK{}
}

/* OpenAMTDevicesOK describes a response with status code 200, with default header values.

Success
*/
type OpenAMTDevicesOK struct {
}

func (o *OpenAMTDevicesOK) Error() string {
	return fmt.Sprintf("[GET /open_amt/{id}/devices][%d] openAMTDevicesOK ", 200)
}

func (o *OpenAMTDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOpenAMTDevicesBadRequest creates a OpenAMTDevicesBadRequest with default headers values
func NewOpenAMTDevicesBadRequest() *OpenAMTDevicesBadRequest {
	return &OpenAMTDevicesBadRequest{}
}

/* OpenAMTDevicesBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type OpenAMTDevicesBadRequest struct {
}

func (o *OpenAMTDevicesBadRequest) Error() string {
	return fmt.Sprintf("[GET /open_amt/{id}/devices][%d] openAMTDevicesBadRequest ", 400)
}

func (o *OpenAMTDevicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOpenAMTDevicesForbidden creates a OpenAMTDevicesForbidden with default headers values
func NewOpenAMTDevicesForbidden() *OpenAMTDevicesForbidden {
	return &OpenAMTDevicesForbidden{}
}

/* OpenAMTDevicesForbidden describes a response with status code 403, with default header values.

Permission denied to access settings
*/
type OpenAMTDevicesForbidden struct {
}

func (o *OpenAMTDevicesForbidden) Error() string {
	return fmt.Sprintf("[GET /open_amt/{id}/devices][%d] openAMTDevicesForbidden ", 403)
}

func (o *OpenAMTDevicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOpenAMTDevicesInternalServerError creates a OpenAMTDevicesInternalServerError with default headers values
func NewOpenAMTDevicesInternalServerError() *OpenAMTDevicesInternalServerError {
	return &OpenAMTDevicesInternalServerError{}
}

/* OpenAMTDevicesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type OpenAMTDevicesInternalServerError struct {
}

func (o *OpenAMTDevicesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /open_amt/{id}/devices][%d] openAMTDevicesInternalServerError ", 500)
}

func (o *OpenAMTDevicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
