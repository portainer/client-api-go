// Code generated by go-swagger; DO NOT EDIT.

package kaas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// VersionReader is a Reader for the Version structure.
type VersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewVersionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVersionOK creates a VersionOK with default headers values
func NewVersionOK() *VersionOK {
	return &VersionOK{}
}

/*
VersionOK describes a response with status code 200, with default header values.

Success
*/
type VersionOK struct {
}

// IsSuccess returns true when this version o k response has a 2xx status code
func (o *VersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this version o k response has a 3xx status code
func (o *VersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this version o k response has a 4xx status code
func (o *VersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this version o k response has a 5xx status code
func (o *VersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this version o k response a status code equal to that given
func (o *VersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *VersionOK) Error() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionOK ", 200)
}

func (o *VersionOK) String() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionOK ", 200)
}

func (o *VersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVersionBadRequest creates a VersionBadRequest with default headers values
func NewVersionBadRequest() *VersionBadRequest {
	return &VersionBadRequest{}
}

/*
VersionBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type VersionBadRequest struct {
}

// IsSuccess returns true when this version bad request response has a 2xx status code
func (o *VersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this version bad request response has a 3xx status code
func (o *VersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this version bad request response has a 4xx status code
func (o *VersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this version bad request response has a 5xx status code
func (o *VersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this version bad request response a status code equal to that given
func (o *VersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *VersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionBadRequest ", 400)
}

func (o *VersionBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionBadRequest ", 400)
}

func (o *VersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVersionForbidden creates a VersionForbidden with default headers values
func NewVersionForbidden() *VersionForbidden {
	return &VersionForbidden{}
}

/*
VersionForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type VersionForbidden struct {
}

// IsSuccess returns true when this version forbidden response has a 2xx status code
func (o *VersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this version forbidden response has a 3xx status code
func (o *VersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this version forbidden response has a 4xx status code
func (o *VersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this version forbidden response has a 5xx status code
func (o *VersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this version forbidden response a status code equal to that given
func (o *VersionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *VersionForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionForbidden ", 403)
}

func (o *VersionForbidden) String() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionForbidden ", 403)
}

func (o *VersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVersionInternalServerError creates a VersionInternalServerError with default headers values
func NewVersionInternalServerError() *VersionInternalServerError {
	return &VersionInternalServerError{}
}

/*
VersionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type VersionInternalServerError struct {
}

// IsSuccess returns true when this version internal server error response has a 2xx status code
func (o *VersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this version internal server error response has a 3xx status code
func (o *VersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this version internal server error response has a 4xx status code
func (o *VersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this version internal server error response has a 5xx status code
func (o *VersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this version internal server error response a status code equal to that given
func (o *VersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *VersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionInternalServerError ", 500)
}

func (o *VersionInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionInternalServerError ", 500)
}

func (o *VersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVersionServiceUnavailable creates a VersionServiceUnavailable with default headers values
func NewVersionServiceUnavailable() *VersionServiceUnavailable {
	return &VersionServiceUnavailable{}
}

/*
VersionServiceUnavailable describes a response with status code 503, with default header values.

Missing configuration
*/
type VersionServiceUnavailable struct {
}

// IsSuccess returns true when this version service unavailable response has a 2xx status code
func (o *VersionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this version service unavailable response has a 3xx status code
func (o *VersionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this version service unavailable response has a 4xx status code
func (o *VersionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this version service unavailable response has a 5xx status code
func (o *VersionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this version service unavailable response a status code equal to that given
func (o *VersionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *VersionServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionServiceUnavailable ", 503)
}

func (o *VersionServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /cloud/endpoints/{environmentid}/version][%d] versionServiceUnavailable ", 503)
}

func (o *VersionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
