// Code generated by go-swagger; DO NOT EDIT.

package kaas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Microk8sAddonsReader is a Reader for the Microk8sAddons structure.
type Microk8sAddonsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Microk8sAddonsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMicrok8sAddonsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMicrok8sAddonsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMicrok8sAddonsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMicrok8sAddonsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewMicrok8sAddonsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud/microk8s/addons] microk8sAddons", response, response.Code())
	}
}

// NewMicrok8sAddonsOK creates a Microk8sAddonsOK with default headers values
func NewMicrok8sAddonsOK() *Microk8sAddonsOK {
	return &Microk8sAddonsOK{}
}

/*
Microk8sAddonsOK describes a response with status code 200, with default header values.

Success
*/
type Microk8sAddonsOK struct {
}

// IsSuccess returns true when this microk8s addons o k response has a 2xx status code
func (o *Microk8sAddonsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this microk8s addons o k response has a 3xx status code
func (o *Microk8sAddonsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s addons o k response has a 4xx status code
func (o *Microk8sAddonsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this microk8s addons o k response has a 5xx status code
func (o *Microk8sAddonsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this microk8s addons o k response a status code equal to that given
func (o *Microk8sAddonsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the microk8s addons o k response
func (o *Microk8sAddonsOK) Code() int {
	return 200
}

func (o *Microk8sAddonsOK) Error() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsOK", 200)
}

func (o *Microk8sAddonsOK) String() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsOK", 200)
}

func (o *Microk8sAddonsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sAddonsBadRequest creates a Microk8sAddonsBadRequest with default headers values
func NewMicrok8sAddonsBadRequest() *Microk8sAddonsBadRequest {
	return &Microk8sAddonsBadRequest{}
}

/*
Microk8sAddonsBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type Microk8sAddonsBadRequest struct {
}

// IsSuccess returns true when this microk8s addons bad request response has a 2xx status code
func (o *Microk8sAddonsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s addons bad request response has a 3xx status code
func (o *Microk8sAddonsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s addons bad request response has a 4xx status code
func (o *Microk8sAddonsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this microk8s addons bad request response has a 5xx status code
func (o *Microk8sAddonsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this microk8s addons bad request response a status code equal to that given
func (o *Microk8sAddonsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the microk8s addons bad request response
func (o *Microk8sAddonsBadRequest) Code() int {
	return 400
}

func (o *Microk8sAddonsBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsBadRequest", 400)
}

func (o *Microk8sAddonsBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsBadRequest", 400)
}

func (o *Microk8sAddonsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sAddonsForbidden creates a Microk8sAddonsForbidden with default headers values
func NewMicrok8sAddonsForbidden() *Microk8sAddonsForbidden {
	return &Microk8sAddonsForbidden{}
}

/*
Microk8sAddonsForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type Microk8sAddonsForbidden struct {
}

// IsSuccess returns true when this microk8s addons forbidden response has a 2xx status code
func (o *Microk8sAddonsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s addons forbidden response has a 3xx status code
func (o *Microk8sAddonsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s addons forbidden response has a 4xx status code
func (o *Microk8sAddonsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this microk8s addons forbidden response has a 5xx status code
func (o *Microk8sAddonsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this microk8s addons forbidden response a status code equal to that given
func (o *Microk8sAddonsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the microk8s addons forbidden response
func (o *Microk8sAddonsForbidden) Code() int {
	return 403
}

func (o *Microk8sAddonsForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsForbidden", 403)
}

func (o *Microk8sAddonsForbidden) String() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsForbidden", 403)
}

func (o *Microk8sAddonsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sAddonsInternalServerError creates a Microk8sAddonsInternalServerError with default headers values
func NewMicrok8sAddonsInternalServerError() *Microk8sAddonsInternalServerError {
	return &Microk8sAddonsInternalServerError{}
}

/*
Microk8sAddonsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type Microk8sAddonsInternalServerError struct {
}

// IsSuccess returns true when this microk8s addons internal server error response has a 2xx status code
func (o *Microk8sAddonsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s addons internal server error response has a 3xx status code
func (o *Microk8sAddonsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s addons internal server error response has a 4xx status code
func (o *Microk8sAddonsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this microk8s addons internal server error response has a 5xx status code
func (o *Microk8sAddonsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this microk8s addons internal server error response a status code equal to that given
func (o *Microk8sAddonsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the microk8s addons internal server error response
func (o *Microk8sAddonsInternalServerError) Code() int {
	return 500
}

func (o *Microk8sAddonsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsInternalServerError", 500)
}

func (o *Microk8sAddonsInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsInternalServerError", 500)
}

func (o *Microk8sAddonsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sAddonsServiceUnavailable creates a Microk8sAddonsServiceUnavailable with default headers values
func NewMicrok8sAddonsServiceUnavailable() *Microk8sAddonsServiceUnavailable {
	return &Microk8sAddonsServiceUnavailable{}
}

/*
Microk8sAddonsServiceUnavailable describes a response with status code 503, with default header values.

Missing configuration
*/
type Microk8sAddonsServiceUnavailable struct {
}

// IsSuccess returns true when this microk8s addons service unavailable response has a 2xx status code
func (o *Microk8sAddonsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s addons service unavailable response has a 3xx status code
func (o *Microk8sAddonsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s addons service unavailable response has a 4xx status code
func (o *Microk8sAddonsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this microk8s addons service unavailable response has a 5xx status code
func (o *Microk8sAddonsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this microk8s addons service unavailable response a status code equal to that given
func (o *Microk8sAddonsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the microk8s addons service unavailable response
func (o *Microk8sAddonsServiceUnavailable) Code() int {
	return 503
}

func (o *Microk8sAddonsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsServiceUnavailable", 503)
}

func (o *Microk8sAddonsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /cloud/microk8s/addons][%d] microk8sAddonsServiceUnavailable", 503)
}

func (o *Microk8sAddonsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
