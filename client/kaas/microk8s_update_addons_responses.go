// Code generated by go-swagger; DO NOT EDIT.

package kaas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Microk8sUpdateAddonsReader is a Reader for the Microk8sUpdateAddons structure.
type Microk8sUpdateAddonsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Microk8sUpdateAddonsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMicrok8sUpdateAddonsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMicrok8sUpdateAddonsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMicrok8sUpdateAddonsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMicrok8sUpdateAddonsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewMicrok8sUpdateAddonsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud/endpoints/{environmentId}/addons] microk8sUpdateAddons", response, response.Code())
	}
}

// NewMicrok8sUpdateAddonsOK creates a Microk8sUpdateAddonsOK with default headers values
func NewMicrok8sUpdateAddonsOK() *Microk8sUpdateAddonsOK {
	return &Microk8sUpdateAddonsOK{}
}

/*
Microk8sUpdateAddonsOK describes a response with status code 200, with default header values.

Success
*/
type Microk8sUpdateAddonsOK struct {
}

// IsSuccess returns true when this microk8s update addons o k response has a 2xx status code
func (o *Microk8sUpdateAddonsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this microk8s update addons o k response has a 3xx status code
func (o *Microk8sUpdateAddonsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s update addons o k response has a 4xx status code
func (o *Microk8sUpdateAddonsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this microk8s update addons o k response has a 5xx status code
func (o *Microk8sUpdateAddonsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this microk8s update addons o k response a status code equal to that given
func (o *Microk8sUpdateAddonsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the microk8s update addons o k response
func (o *Microk8sUpdateAddonsOK) Code() int {
	return 200
}

func (o *Microk8sUpdateAddonsOK) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsOK ", 200)
}

func (o *Microk8sUpdateAddonsOK) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsOK ", 200)
}

func (o *Microk8sUpdateAddonsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sUpdateAddonsBadRequest creates a Microk8sUpdateAddonsBadRequest with default headers values
func NewMicrok8sUpdateAddonsBadRequest() *Microk8sUpdateAddonsBadRequest {
	return &Microk8sUpdateAddonsBadRequest{}
}

/*
Microk8sUpdateAddonsBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type Microk8sUpdateAddonsBadRequest struct {
}

// IsSuccess returns true when this microk8s update addons bad request response has a 2xx status code
func (o *Microk8sUpdateAddonsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s update addons bad request response has a 3xx status code
func (o *Microk8sUpdateAddonsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s update addons bad request response has a 4xx status code
func (o *Microk8sUpdateAddonsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this microk8s update addons bad request response has a 5xx status code
func (o *Microk8sUpdateAddonsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this microk8s update addons bad request response a status code equal to that given
func (o *Microk8sUpdateAddonsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the microk8s update addons bad request response
func (o *Microk8sUpdateAddonsBadRequest) Code() int {
	return 400
}

func (o *Microk8sUpdateAddonsBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsBadRequest ", 400)
}

func (o *Microk8sUpdateAddonsBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsBadRequest ", 400)
}

func (o *Microk8sUpdateAddonsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sUpdateAddonsForbidden creates a Microk8sUpdateAddonsForbidden with default headers values
func NewMicrok8sUpdateAddonsForbidden() *Microk8sUpdateAddonsForbidden {
	return &Microk8sUpdateAddonsForbidden{}
}

/*
Microk8sUpdateAddonsForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type Microk8sUpdateAddonsForbidden struct {
}

// IsSuccess returns true when this microk8s update addons forbidden response has a 2xx status code
func (o *Microk8sUpdateAddonsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s update addons forbidden response has a 3xx status code
func (o *Microk8sUpdateAddonsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s update addons forbidden response has a 4xx status code
func (o *Microk8sUpdateAddonsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this microk8s update addons forbidden response has a 5xx status code
func (o *Microk8sUpdateAddonsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this microk8s update addons forbidden response a status code equal to that given
func (o *Microk8sUpdateAddonsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the microk8s update addons forbidden response
func (o *Microk8sUpdateAddonsForbidden) Code() int {
	return 403
}

func (o *Microk8sUpdateAddonsForbidden) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsForbidden ", 403)
}

func (o *Microk8sUpdateAddonsForbidden) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsForbidden ", 403)
}

func (o *Microk8sUpdateAddonsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sUpdateAddonsInternalServerError creates a Microk8sUpdateAddonsInternalServerError with default headers values
func NewMicrok8sUpdateAddonsInternalServerError() *Microk8sUpdateAddonsInternalServerError {
	return &Microk8sUpdateAddonsInternalServerError{}
}

/*
Microk8sUpdateAddonsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type Microk8sUpdateAddonsInternalServerError struct {
}

// IsSuccess returns true when this microk8s update addons internal server error response has a 2xx status code
func (o *Microk8sUpdateAddonsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s update addons internal server error response has a 3xx status code
func (o *Microk8sUpdateAddonsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s update addons internal server error response has a 4xx status code
func (o *Microk8sUpdateAddonsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this microk8s update addons internal server error response has a 5xx status code
func (o *Microk8sUpdateAddonsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this microk8s update addons internal server error response a status code equal to that given
func (o *Microk8sUpdateAddonsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the microk8s update addons internal server error response
func (o *Microk8sUpdateAddonsInternalServerError) Code() int {
	return 500
}

func (o *Microk8sUpdateAddonsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsInternalServerError ", 500)
}

func (o *Microk8sUpdateAddonsInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsInternalServerError ", 500)
}

func (o *Microk8sUpdateAddonsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMicrok8sUpdateAddonsServiceUnavailable creates a Microk8sUpdateAddonsServiceUnavailable with default headers values
func NewMicrok8sUpdateAddonsServiceUnavailable() *Microk8sUpdateAddonsServiceUnavailable {
	return &Microk8sUpdateAddonsServiceUnavailable{}
}

/*
Microk8sUpdateAddonsServiceUnavailable describes a response with status code 503, with default header values.

Missing configuration
*/
type Microk8sUpdateAddonsServiceUnavailable struct {
}

// IsSuccess returns true when this microk8s update addons service unavailable response has a 2xx status code
func (o *Microk8sUpdateAddonsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this microk8s update addons service unavailable response has a 3xx status code
func (o *Microk8sUpdateAddonsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this microk8s update addons service unavailable response has a 4xx status code
func (o *Microk8sUpdateAddonsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this microk8s update addons service unavailable response has a 5xx status code
func (o *Microk8sUpdateAddonsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this microk8s update addons service unavailable response a status code equal to that given
func (o *Microk8sUpdateAddonsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the microk8s update addons service unavailable response
func (o *Microk8sUpdateAddonsServiceUnavailable) Code() int {
	return 503
}

func (o *Microk8sUpdateAddonsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsServiceUnavailable ", 503)
}

func (o *Microk8sUpdateAddonsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/addons][%d] microk8sUpdateAddonsServiceUnavailable ", 503)
}

func (o *Microk8sUpdateAddonsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
