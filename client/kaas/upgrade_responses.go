// Code generated by go-swagger; DO NOT EDIT.

package kaas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpgradeReader is a Reader for the Upgrade structure.
type UpgradeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpgradeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpgradeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpgradeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpgradeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpgradeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpgradeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud/endpoints/{environmentId}/upgrade] upgrade", response, response.Code())
	}
}

// NewUpgradeOK creates a UpgradeOK with default headers values
func NewUpgradeOK() *UpgradeOK {
	return &UpgradeOK{}
}

/*
UpgradeOK describes a response with status code 200, with default header values.

Success
*/
type UpgradeOK struct {
}

// IsSuccess returns true when this upgrade o k response has a 2xx status code
func (o *UpgradeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upgrade o k response has a 3xx status code
func (o *UpgradeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upgrade o k response has a 4xx status code
func (o *UpgradeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upgrade o k response has a 5xx status code
func (o *UpgradeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upgrade o k response a status code equal to that given
func (o *UpgradeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upgrade o k response
func (o *UpgradeOK) Code() int {
	return 200
}

func (o *UpgradeOK) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeOK", 200)
}

func (o *UpgradeOK) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeOK", 200)
}

func (o *UpgradeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeBadRequest creates a UpgradeBadRequest with default headers values
func NewUpgradeBadRequest() *UpgradeBadRequest {
	return &UpgradeBadRequest{}
}

/*
UpgradeBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UpgradeBadRequest struct {
}

// IsSuccess returns true when this upgrade bad request response has a 2xx status code
func (o *UpgradeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upgrade bad request response has a 3xx status code
func (o *UpgradeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upgrade bad request response has a 4xx status code
func (o *UpgradeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upgrade bad request response has a 5xx status code
func (o *UpgradeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upgrade bad request response a status code equal to that given
func (o *UpgradeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upgrade bad request response
func (o *UpgradeBadRequest) Code() int {
	return 400
}

func (o *UpgradeBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeBadRequest", 400)
}

func (o *UpgradeBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeBadRequest", 400)
}

func (o *UpgradeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeForbidden creates a UpgradeForbidden with default headers values
func NewUpgradeForbidden() *UpgradeForbidden {
	return &UpgradeForbidden{}
}

/*
UpgradeForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type UpgradeForbidden struct {
}

// IsSuccess returns true when this upgrade forbidden response has a 2xx status code
func (o *UpgradeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upgrade forbidden response has a 3xx status code
func (o *UpgradeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upgrade forbidden response has a 4xx status code
func (o *UpgradeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upgrade forbidden response has a 5xx status code
func (o *UpgradeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upgrade forbidden response a status code equal to that given
func (o *UpgradeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upgrade forbidden response
func (o *UpgradeForbidden) Code() int {
	return 403
}

func (o *UpgradeForbidden) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeForbidden", 403)
}

func (o *UpgradeForbidden) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeForbidden", 403)
}

func (o *UpgradeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeInternalServerError creates a UpgradeInternalServerError with default headers values
func NewUpgradeInternalServerError() *UpgradeInternalServerError {
	return &UpgradeInternalServerError{}
}

/*
UpgradeInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpgradeInternalServerError struct {
}

// IsSuccess returns true when this upgrade internal server error response has a 2xx status code
func (o *UpgradeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upgrade internal server error response has a 3xx status code
func (o *UpgradeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upgrade internal server error response has a 4xx status code
func (o *UpgradeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upgrade internal server error response has a 5xx status code
func (o *UpgradeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upgrade internal server error response a status code equal to that given
func (o *UpgradeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upgrade internal server error response
func (o *UpgradeInternalServerError) Code() int {
	return 500
}

func (o *UpgradeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeInternalServerError", 500)
}

func (o *UpgradeInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeInternalServerError", 500)
}

func (o *UpgradeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeServiceUnavailable creates a UpgradeServiceUnavailable with default headers values
func NewUpgradeServiceUnavailable() *UpgradeServiceUnavailable {
	return &UpgradeServiceUnavailable{}
}

/*
UpgradeServiceUnavailable describes a response with status code 503, with default header values.

Missing configuration
*/
type UpgradeServiceUnavailable struct {
}

// IsSuccess returns true when this upgrade service unavailable response has a 2xx status code
func (o *UpgradeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upgrade service unavailable response has a 3xx status code
func (o *UpgradeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upgrade service unavailable response has a 4xx status code
func (o *UpgradeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this upgrade service unavailable response has a 5xx status code
func (o *UpgradeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this upgrade service unavailable response a status code equal to that given
func (o *UpgradeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the upgrade service unavailable response
func (o *UpgradeServiceUnavailable) Code() int {
	return 503
}

func (o *UpgradeServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeServiceUnavailable", 503)
}

func (o *UpgradeServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /cloud/endpoints/{environmentId}/upgrade][%d] upgradeServiceUnavailable", 503)
}

func (o *UpgradeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
