// Code generated by go-swagger; DO NOT EDIT.

package kaas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/portainer/client-api-go/v2/models"
)

// NewMicrok8sUpdateAddonsParams creates a new Microk8sUpdateAddonsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMicrok8sUpdateAddonsParams() *Microk8sUpdateAddonsParams {
	return &Microk8sUpdateAddonsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMicrok8sUpdateAddonsParamsWithTimeout creates a new Microk8sUpdateAddonsParams object
// with the ability to set a timeout on a request.
func NewMicrok8sUpdateAddonsParamsWithTimeout(timeout time.Duration) *Microk8sUpdateAddonsParams {
	return &Microk8sUpdateAddonsParams{
		timeout: timeout,
	}
}

// NewMicrok8sUpdateAddonsParamsWithContext creates a new Microk8sUpdateAddonsParams object
// with the ability to set a context for a request.
func NewMicrok8sUpdateAddonsParamsWithContext(ctx context.Context) *Microk8sUpdateAddonsParams {
	return &Microk8sUpdateAddonsParams{
		Context: ctx,
	}
}

// NewMicrok8sUpdateAddonsParamsWithHTTPClient creates a new Microk8sUpdateAddonsParams object
// with the ability to set a custom HTTPClient for a request.
func NewMicrok8sUpdateAddonsParamsWithHTTPClient(client *http.Client) *Microk8sUpdateAddonsParams {
	return &Microk8sUpdateAddonsParams{
		HTTPClient: client,
	}
}

/*
Microk8sUpdateAddonsParams contains all the parameters to send to the API endpoint

	for the microk8s update addons operation.

	Typically these are written to a http.Request.
*/
type Microk8sUpdateAddonsParams struct {

	/* Addons.

	   The list of addons to install in the cluster.
	*/
	Addons *models.ProvidersMicrok8sUpdateAddonsPayload

	/* EnvironmentID.

	   Environment(Endpoint) identifier
	*/
	EnvironmentID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the microk8s update addons params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Microk8sUpdateAddonsParams) WithDefaults() *Microk8sUpdateAddonsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the microk8s update addons params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Microk8sUpdateAddonsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) WithTimeout(timeout time.Duration) *Microk8sUpdateAddonsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) WithContext(ctx context.Context) *Microk8sUpdateAddonsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) WithHTTPClient(client *http.Client) *Microk8sUpdateAddonsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddons adds the addons to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) WithAddons(addons *models.ProvidersMicrok8sUpdateAddonsPayload) *Microk8sUpdateAddonsParams {
	o.SetAddons(addons)
	return o
}

// SetAddons adds the addons to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) SetAddons(addons *models.ProvidersMicrok8sUpdateAddonsPayload) {
	o.Addons = addons
}

// WithEnvironmentID adds the environmentID to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) WithEnvironmentID(environmentID int64) *Microk8sUpdateAddonsParams {
	o.SetEnvironmentID(environmentID)
	return o
}

// SetEnvironmentID adds the environmentId to the microk8s update addons params
func (o *Microk8sUpdateAddonsParams) SetEnvironmentID(environmentID int64) {
	o.EnvironmentID = environmentID
}

// WriteToRequest writes these params to a swagger request
func (o *Microk8sUpdateAddonsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Addons != nil {
		if err := r.SetBodyParam(o.Addons); err != nil {
			return err
		}
	}

	// path param environmentId
	if err := r.SetPathParam("environmentId", swag.FormatInt64(o.EnvironmentID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
