// Code generated by go-swagger; DO NOT EDIT.

package ssl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api/models"
)

// SSLInspectReader is a Reader for the SSLInspect structure.
type SSLInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SSLInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSSLInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSSLInspectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSSLInspectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSSLInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSSLInspectOK creates a SSLInspectOK with default headers values
func NewSSLInspectOK() *SSLInspectOK {
	return &SSLInspectOK{}
}

/* SSLInspectOK describes a response with status code 200, with default header values.

Success
*/
type SSLInspectOK struct {
	Payload *models.PortainerSSLSettings
}

func (o *SSLInspectOK) Error() string {
	return fmt.Sprintf("[GET /ssl][%d] sSLInspectOK  %+v", 200, o.Payload)
}
func (o *SSLInspectOK) GetPayload() *models.PortainerSSLSettings {
	return o.Payload
}

func (o *SSLInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortainerSSLSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSSLInspectBadRequest creates a SSLInspectBadRequest with default headers values
func NewSSLInspectBadRequest() *SSLInspectBadRequest {
	return &SSLInspectBadRequest{}
}

/* SSLInspectBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type SSLInspectBadRequest struct {
}

func (o *SSLInspectBadRequest) Error() string {
	return fmt.Sprintf("[GET /ssl][%d] sSLInspectBadRequest ", 400)
}

func (o *SSLInspectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSSLInspectForbidden creates a SSLInspectForbidden with default headers values
func NewSSLInspectForbidden() *SSLInspectForbidden {
	return &SSLInspectForbidden{}
}

/* SSLInspectForbidden describes a response with status code 403, with default header values.

Permission denied to access settings
*/
type SSLInspectForbidden struct {
}

func (o *SSLInspectForbidden) Error() string {
	return fmt.Sprintf("[GET /ssl][%d] sSLInspectForbidden ", 403)
}

func (o *SSLInspectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSSLInspectInternalServerError creates a SSLInspectInternalServerError with default headers values
func NewSSLInspectInternalServerError() *SSLInspectInternalServerError {
	return &SSLInspectInternalServerError{}
}

/* SSLInspectInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type SSLInspectInternalServerError struct {
}

func (o *SSLInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ssl][%d] sSLInspectInternalServerError ", 500)
}

func (o *SSLInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
