// Code generated by go-swagger; DO NOT EDIT.

package ssl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SSLUpdateReader is a Reader for the SSLUpdate structure.
type SSLUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SSLUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSSLUpdateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSSLUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSSLUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSSLUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /ssl] SSLUpdate", response, response.Code())
	}
}

// NewSSLUpdateNoContent creates a SSLUpdateNoContent with default headers values
func NewSSLUpdateNoContent() *SSLUpdateNoContent {
	return &SSLUpdateNoContent{}
}

/*
SSLUpdateNoContent describes a response with status code 204, with default header values.

Success
*/
type SSLUpdateNoContent struct {
}

// IsSuccess returns true when this s s l update no content response has a 2xx status code
func (o *SSLUpdateNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this s s l update no content response has a 3xx status code
func (o *SSLUpdateNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this s s l update no content response has a 4xx status code
func (o *SSLUpdateNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this s s l update no content response has a 5xx status code
func (o *SSLUpdateNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this s s l update no content response a status code equal to that given
func (o *SSLUpdateNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the s s l update no content response
func (o *SSLUpdateNoContent) Code() int {
	return 204
}

func (o *SSLUpdateNoContent) Error() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateNoContent ", 204)
}

func (o *SSLUpdateNoContent) String() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateNoContent ", 204)
}

func (o *SSLUpdateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSSLUpdateBadRequest creates a SSLUpdateBadRequest with default headers values
func NewSSLUpdateBadRequest() *SSLUpdateBadRequest {
	return &SSLUpdateBadRequest{}
}

/*
SSLUpdateBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type SSLUpdateBadRequest struct {
}

// IsSuccess returns true when this s s l update bad request response has a 2xx status code
func (o *SSLUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this s s l update bad request response has a 3xx status code
func (o *SSLUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this s s l update bad request response has a 4xx status code
func (o *SSLUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this s s l update bad request response has a 5xx status code
func (o *SSLUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this s s l update bad request response a status code equal to that given
func (o *SSLUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the s s l update bad request response
func (o *SSLUpdateBadRequest) Code() int {
	return 400
}

func (o *SSLUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateBadRequest ", 400)
}

func (o *SSLUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateBadRequest ", 400)
}

func (o *SSLUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSSLUpdateForbidden creates a SSLUpdateForbidden with default headers values
func NewSSLUpdateForbidden() *SSLUpdateForbidden {
	return &SSLUpdateForbidden{}
}

/*
SSLUpdateForbidden describes a response with status code 403, with default header values.

Permission denied to access settings
*/
type SSLUpdateForbidden struct {
}

// IsSuccess returns true when this s s l update forbidden response has a 2xx status code
func (o *SSLUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this s s l update forbidden response has a 3xx status code
func (o *SSLUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this s s l update forbidden response has a 4xx status code
func (o *SSLUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this s s l update forbidden response has a 5xx status code
func (o *SSLUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this s s l update forbidden response a status code equal to that given
func (o *SSLUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the s s l update forbidden response
func (o *SSLUpdateForbidden) Code() int {
	return 403
}

func (o *SSLUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateForbidden ", 403)
}

func (o *SSLUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateForbidden ", 403)
}

func (o *SSLUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSSLUpdateInternalServerError creates a SSLUpdateInternalServerError with default headers values
func NewSSLUpdateInternalServerError() *SSLUpdateInternalServerError {
	return &SSLUpdateInternalServerError{}
}

/*
SSLUpdateInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type SSLUpdateInternalServerError struct {
}

// IsSuccess returns true when this s s l update internal server error response has a 2xx status code
func (o *SSLUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this s s l update internal server error response has a 3xx status code
func (o *SSLUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this s s l update internal server error response has a 4xx status code
func (o *SSLUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this s s l update internal server error response has a 5xx status code
func (o *SSLUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this s s l update internal server error response a status code equal to that given
func (o *SSLUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the s s l update internal server error response
func (o *SSLUpdateInternalServerError) Code() int {
	return 500
}

func (o *SSLUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateInternalServerError ", 500)
}

func (o *SSLUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /ssl][%d] sSLUpdateInternalServerError ", 500)
}

func (o *SSLUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
