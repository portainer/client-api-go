// Code generated by go-swagger; DO NOT EDIT.

package docker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStacksImageStatusClearParams creates a new StacksImageStatusClearParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStacksImageStatusClearParams() *StacksImageStatusClearParams {
	return &StacksImageStatusClearParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStacksImageStatusClearParamsWithTimeout creates a new StacksImageStatusClearParams object
// with the ability to set a timeout on a request.
func NewStacksImageStatusClearParamsWithTimeout(timeout time.Duration) *StacksImageStatusClearParams {
	return &StacksImageStatusClearParams{
		timeout: timeout,
	}
}

// NewStacksImageStatusClearParamsWithContext creates a new StacksImageStatusClearParams object
// with the ability to set a context for a request.
func NewStacksImageStatusClearParamsWithContext(ctx context.Context) *StacksImageStatusClearParams {
	return &StacksImageStatusClearParams{
		Context: ctx,
	}
}

// NewStacksImageStatusClearParamsWithHTTPClient creates a new StacksImageStatusClearParams object
// with the ability to set a custom HTTPClient for a request.
func NewStacksImageStatusClearParamsWithHTTPClient(client *http.Client) *StacksImageStatusClearParams {
	return &StacksImageStatusClearParams{
		HTTPClient: client,
	}
}

/*
StacksImageStatusClearParams contains all the parameters to send to the API endpoint

	for the stacks image status clear operation.

	Typically these are written to a http.Request.
*/
type StacksImageStatusClearParams struct {

	/* EnvironmentID.

	   Identifier of the environment(endpoint) that will be used to filter the stacks to clear the image status cache for
	*/
	EnvironmentID *int64

	/* SwarmID.

	   Identifier of the swarm cluster that will be used to filter the stacks to clear the image status cache for
	*/
	SwarmID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the stacks image status clear params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StacksImageStatusClearParams) WithDefaults() *StacksImageStatusClearParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the stacks image status clear params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StacksImageStatusClearParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the stacks image status clear params
func (o *StacksImageStatusClearParams) WithTimeout(timeout time.Duration) *StacksImageStatusClearParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stacks image status clear params
func (o *StacksImageStatusClearParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stacks image status clear params
func (o *StacksImageStatusClearParams) WithContext(ctx context.Context) *StacksImageStatusClearParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stacks image status clear params
func (o *StacksImageStatusClearParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stacks image status clear params
func (o *StacksImageStatusClearParams) WithHTTPClient(client *http.Client) *StacksImageStatusClearParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stacks image status clear params
func (o *StacksImageStatusClearParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentID adds the environmentID to the stacks image status clear params
func (o *StacksImageStatusClearParams) WithEnvironmentID(environmentID *int64) *StacksImageStatusClearParams {
	o.SetEnvironmentID(environmentID)
	return o
}

// SetEnvironmentID adds the environmentId to the stacks image status clear params
func (o *StacksImageStatusClearParams) SetEnvironmentID(environmentID *int64) {
	o.EnvironmentID = environmentID
}

// WithSwarmID adds the swarmID to the stacks image status clear params
func (o *StacksImageStatusClearParams) WithSwarmID(swarmID *string) *StacksImageStatusClearParams {
	o.SetSwarmID(swarmID)
	return o
}

// SetSwarmID adds the swarmId to the stacks image status clear params
func (o *StacksImageStatusClearParams) SetSwarmID(swarmID *string) {
	o.SwarmID = swarmID
}

// WriteToRequest writes these params to a swagger request
func (o *StacksImageStatusClearParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnvironmentID != nil {

		// query param environmentId
		var qrEnvironmentID int64

		if o.EnvironmentID != nil {
			qrEnvironmentID = *o.EnvironmentID
		}
		qEnvironmentID := swag.FormatInt64(qrEnvironmentID)
		if qEnvironmentID != "" {

			if err := r.SetQueryParam("environmentId", qEnvironmentID); err != nil {
				return err
			}
		}
	}

	if o.SwarmID != nil {

		// query param swarmId
		var qrSwarmID string

		if o.SwarmID != nil {
			qrSwarmID = *o.SwarmID
		}
		qSwarmID := qrSwarmID
		if qSwarmID != "" {

			if err := r.SetQueryParam("swarmId", qSwarmID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
