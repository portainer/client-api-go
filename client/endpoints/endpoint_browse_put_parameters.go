// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEndpointBrowsePutParams creates a new EndpointBrowsePutParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEndpointBrowsePutParams() *EndpointBrowsePutParams {
	return &EndpointBrowsePutParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEndpointBrowsePutParamsWithTimeout creates a new EndpointBrowsePutParams object
// with the ability to set a timeout on a request.
func NewEndpointBrowsePutParamsWithTimeout(timeout time.Duration) *EndpointBrowsePutParams {
	return &EndpointBrowsePutParams{
		timeout: timeout,
	}
}

// NewEndpointBrowsePutParamsWithContext creates a new EndpointBrowsePutParams object
// with the ability to set a context for a request.
func NewEndpointBrowsePutParamsWithContext(ctx context.Context) *EndpointBrowsePutParams {
	return &EndpointBrowsePutParams{
		Context: ctx,
	}
}

// NewEndpointBrowsePutParamsWithHTTPClient creates a new EndpointBrowsePutParams object
// with the ability to set a custom HTTPClient for a request.
func NewEndpointBrowsePutParamsWithHTTPClient(client *http.Client) *EndpointBrowsePutParams {
	return &EndpointBrowsePutParams{
		HTTPClient: client,
	}
}

/*
EndpointBrowsePutParams contains all the parameters to send to the API endpoint

	for the endpoint browse put operation.

	Typically these are written to a http.Request.
*/
type EndpointBrowsePutParams struct {

	/* File.

	   File to upload
	*/
	File runtime.NamedReadCloser

	/* ID.

	   Environment(Endpoint) identifier
	*/
	ID int64

	/* Path.

	   Path to upload the file
	*/
	Path string

	/* VolumeID.

	   Optional volume identifier to upload the file
	*/
	VolumeID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the endpoint browse put params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EndpointBrowsePutParams) WithDefaults() *EndpointBrowsePutParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the endpoint browse put params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EndpointBrowsePutParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the endpoint browse put params
func (o *EndpointBrowsePutParams) WithTimeout(timeout time.Duration) *EndpointBrowsePutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the endpoint browse put params
func (o *EndpointBrowsePutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the endpoint browse put params
func (o *EndpointBrowsePutParams) WithContext(ctx context.Context) *EndpointBrowsePutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the endpoint browse put params
func (o *EndpointBrowsePutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the endpoint browse put params
func (o *EndpointBrowsePutParams) WithHTTPClient(client *http.Client) *EndpointBrowsePutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the endpoint browse put params
func (o *EndpointBrowsePutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the endpoint browse put params
func (o *EndpointBrowsePutParams) WithFile(file runtime.NamedReadCloser) *EndpointBrowsePutParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the endpoint browse put params
func (o *EndpointBrowsePutParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithID adds the id to the endpoint browse put params
func (o *EndpointBrowsePutParams) WithID(id int64) *EndpointBrowsePutParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the endpoint browse put params
func (o *EndpointBrowsePutParams) SetID(id int64) {
	o.ID = id
}

// WithPath adds the path to the endpoint browse put params
func (o *EndpointBrowsePutParams) WithPath(path string) *EndpointBrowsePutParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the endpoint browse put params
func (o *EndpointBrowsePutParams) SetPath(path string) {
	o.Path = path
}

// WithVolumeID adds the volumeID to the endpoint browse put params
func (o *EndpointBrowsePutParams) WithVolumeID(volumeID *string) *EndpointBrowsePutParams {
	o.SetVolumeID(volumeID)
	return o
}

// SetVolumeID adds the volumeId to the endpoint browse put params
func (o *EndpointBrowsePutParams) SetVolumeID(volumeID *string) {
	o.VolumeID = volumeID
}

// WriteToRequest writes these params to a swagger request
func (o *EndpointBrowsePutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// form param path
	frPath := o.Path
	fPath := frPath
	if fPath != "" {
		if err := r.SetFormParam("path", fPath); err != nil {
			return err
		}
	}

	if o.VolumeID != nil {

		// query param volumeID
		var qrVolumeID string

		if o.VolumeID != nil {
			qrVolumeID = *o.VolumeID
		}
		qVolumeID := qrVolumeID
		if qVolumeID != "" {

			if err := r.SetQueryParam("volumeID", qVolumeID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
