// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEndpointListParams creates a new EndpointListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEndpointListParams() *EndpointListParams {
	return &EndpointListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEndpointListParamsWithTimeout creates a new EndpointListParams object
// with the ability to set a timeout on a request.
func NewEndpointListParamsWithTimeout(timeout time.Duration) *EndpointListParams {
	return &EndpointListParams{
		timeout: timeout,
	}
}

// NewEndpointListParamsWithContext creates a new EndpointListParams object
// with the ability to set a context for a request.
func NewEndpointListParamsWithContext(ctx context.Context) *EndpointListParams {
	return &EndpointListParams{
		Context: ctx,
	}
}

// NewEndpointListParamsWithHTTPClient creates a new EndpointListParams object
// with the ability to set a custom HTTPClient for a request.
func NewEndpointListParamsWithHTTPClient(client *http.Client) *EndpointListParams {
	return &EndpointListParams{
		HTTPClient: client,
	}
}

/* EndpointListParams contains all the parameters to send to the API endpoint
   for the endpoint list operation.

   Typically these are written to a http.Request.
*/
type EndpointListParams struct {

	/* EndpointIds.

	   will return only these endpoints
	*/
	EndpointIds []int64

	/* GroupID.

	   List endpoints of this group
	*/
	GroupID *int64

	/* Limit.

	   Limit results to this value
	*/
	Limit *int64

	/* Search.

	   Search query
	*/
	Search *string

	/* Start.

	   Start searching from
	*/
	Start *int64

	/* TagIds.

	   search endpoints with these tags (depends on tagsPartialMatch)
	*/
	TagIds []int64

	/* TagsPartialMatch.

	   If true, will return endpoint which has one of tagIds, if false (or missing) will return only endpoints that has all the tags
	*/
	TagsPartialMatch *bool

	/* Type.

	   List endpoints of this type
	*/
	Type *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the endpoint list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EndpointListParams) WithDefaults() *EndpointListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the endpoint list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EndpointListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the endpoint list params
func (o *EndpointListParams) WithTimeout(timeout time.Duration) *EndpointListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the endpoint list params
func (o *EndpointListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the endpoint list params
func (o *EndpointListParams) WithContext(ctx context.Context) *EndpointListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the endpoint list params
func (o *EndpointListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the endpoint list params
func (o *EndpointListParams) WithHTTPClient(client *http.Client) *EndpointListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the endpoint list params
func (o *EndpointListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndpointIds adds the endpointIds to the endpoint list params
func (o *EndpointListParams) WithEndpointIds(endpointIds []int64) *EndpointListParams {
	o.SetEndpointIds(endpointIds)
	return o
}

// SetEndpointIds adds the endpointIds to the endpoint list params
func (o *EndpointListParams) SetEndpointIds(endpointIds []int64) {
	o.EndpointIds = endpointIds
}

// WithGroupID adds the groupID to the endpoint list params
func (o *EndpointListParams) WithGroupID(groupID *int64) *EndpointListParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the endpoint list params
func (o *EndpointListParams) SetGroupID(groupID *int64) {
	o.GroupID = groupID
}

// WithLimit adds the limit to the endpoint list params
func (o *EndpointListParams) WithLimit(limit *int64) *EndpointListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the endpoint list params
func (o *EndpointListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSearch adds the search to the endpoint list params
func (o *EndpointListParams) WithSearch(search *string) *EndpointListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the endpoint list params
func (o *EndpointListParams) SetSearch(search *string) {
	o.Search = search
}

// WithStart adds the start to the endpoint list params
func (o *EndpointListParams) WithStart(start *int64) *EndpointListParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the endpoint list params
func (o *EndpointListParams) SetStart(start *int64) {
	o.Start = start
}

// WithTagIds adds the tagIds to the endpoint list params
func (o *EndpointListParams) WithTagIds(tagIds []int64) *EndpointListParams {
	o.SetTagIds(tagIds)
	return o
}

// SetTagIds adds the tagIds to the endpoint list params
func (o *EndpointListParams) SetTagIds(tagIds []int64) {
	o.TagIds = tagIds
}

// WithTagsPartialMatch adds the tagsPartialMatch to the endpoint list params
func (o *EndpointListParams) WithTagsPartialMatch(tagsPartialMatch *bool) *EndpointListParams {
	o.SetTagsPartialMatch(tagsPartialMatch)
	return o
}

// SetTagsPartialMatch adds the tagsPartialMatch to the endpoint list params
func (o *EndpointListParams) SetTagsPartialMatch(tagsPartialMatch *bool) {
	o.TagsPartialMatch = tagsPartialMatch
}

// WithType adds the typeVar to the endpoint list params
func (o *EndpointListParams) WithType(typeVar *int64) *EndpointListParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the endpoint list params
func (o *EndpointListParams) SetType(typeVar *int64) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *EndpointListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndpointIds != nil {

		// binding items for endpointIds
		joinedEndpointIds := o.bindParamEndpointIds(reg)

		// query array param endpointIds
		if err := r.SetQueryParam("endpointIds", joinedEndpointIds...); err != nil {
			return err
		}
	}

	if o.GroupID != nil {

		// query param groupId
		var qrGroupID int64

		if o.GroupID != nil {
			qrGroupID = *o.GroupID
		}
		qGroupID := swag.FormatInt64(qrGroupID)
		if qGroupID != "" {

			if err := r.SetQueryParam("groupId", qGroupID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if o.TagIds != nil {

		// binding items for tagIds
		joinedTagIds := o.bindParamTagIds(reg)

		// query array param tagIds
		if err := r.SetQueryParam("tagIds", joinedTagIds...); err != nil {
			return err
		}
	}

	if o.TagsPartialMatch != nil {

		// query param tagsPartialMatch
		var qrTagsPartialMatch bool

		if o.TagsPartialMatch != nil {
			qrTagsPartialMatch = *o.TagsPartialMatch
		}
		qTagsPartialMatch := swag.FormatBool(qrTagsPartialMatch)
		if qTagsPartialMatch != "" {

			if err := r.SetQueryParam("tagsPartialMatch", qTagsPartialMatch); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType int64

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := swag.FormatInt64(qrType)
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEndpointList binds the parameter endpointIds
func (o *EndpointListParams) bindParamEndpointIds(formats strfmt.Registry) []string {
	endpointIdsIR := o.EndpointIds

	var endpointIdsIC []string
	for _, endpointIdsIIR := range endpointIdsIR { // explode []int64

		endpointIdsIIV := swag.FormatInt64(endpointIdsIIR) // int64 as string
		endpointIdsIC = append(endpointIdsIC, endpointIdsIIV)
	}

	// items.CollectionFormat: ""
	endpointIdsIS := swag.JoinByFormat(endpointIdsIC, "")

	return endpointIdsIS
}

// bindParamEndpointList binds the parameter tagIds
func (o *EndpointListParams) bindParamTagIds(formats strfmt.Registry) []string {
	tagIdsIR := o.TagIds

	var tagIdsIC []string
	for _, tagIdsIIR := range tagIdsIR { // explode []int64

		tagIdsIIV := swag.FormatInt64(tagIdsIIR) // int64 as string
		tagIdsIC = append(tagIdsIC, tagIdsIIV)
	}

	// items.CollectionFormat: ""
	tagIdsIS := swag.JoinByFormat(tagIdsIC, "")

	return tagIdsIS
}
