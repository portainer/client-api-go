// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RestoreFromS3Reader is a Reader for the RestoreFromS3 structure.
type RestoreFromS3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestoreFromS3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRestoreFromS3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRestoreFromS3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRestoreFromS3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRestoreFromS3OK creates a RestoreFromS3OK with default headers values
func NewRestoreFromS3OK() *RestoreFromS3OK {
	return &RestoreFromS3OK{}
}

/*
RestoreFromS3OK describes a response with status code 200, with default header values.

Success
*/
type RestoreFromS3OK struct {
}

// IsSuccess returns true when this restore from s3 o k response has a 2xx status code
func (o *RestoreFromS3OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this restore from s3 o k response has a 3xx status code
func (o *RestoreFromS3OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore from s3 o k response has a 4xx status code
func (o *RestoreFromS3OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore from s3 o k response has a 5xx status code
func (o *RestoreFromS3OK) IsServerError() bool {
	return false
}

// IsCode returns true when this restore from s3 o k response a status code equal to that given
func (o *RestoreFromS3OK) IsCode(code int) bool {
	return code == 200
}

func (o *RestoreFromS3OK) Error() string {
	return fmt.Sprintf("[POST /backup/s3/restore][%d] restoreFromS3OK ", 200)
}

func (o *RestoreFromS3OK) String() string {
	return fmt.Sprintf("[POST /backup/s3/restore][%d] restoreFromS3OK ", 200)
}

func (o *RestoreFromS3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestoreFromS3BadRequest creates a RestoreFromS3BadRequest with default headers values
func NewRestoreFromS3BadRequest() *RestoreFromS3BadRequest {
	return &RestoreFromS3BadRequest{}
}

/*
RestoreFromS3BadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type RestoreFromS3BadRequest struct {
}

// IsSuccess returns true when this restore from s3 bad request response has a 2xx status code
func (o *RestoreFromS3BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore from s3 bad request response has a 3xx status code
func (o *RestoreFromS3BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore from s3 bad request response has a 4xx status code
func (o *RestoreFromS3BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore from s3 bad request response has a 5xx status code
func (o *RestoreFromS3BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this restore from s3 bad request response a status code equal to that given
func (o *RestoreFromS3BadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RestoreFromS3BadRequest) Error() string {
	return fmt.Sprintf("[POST /backup/s3/restore][%d] restoreFromS3BadRequest ", 400)
}

func (o *RestoreFromS3BadRequest) String() string {
	return fmt.Sprintf("[POST /backup/s3/restore][%d] restoreFromS3BadRequest ", 400)
}

func (o *RestoreFromS3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestoreFromS3InternalServerError creates a RestoreFromS3InternalServerError with default headers values
func NewRestoreFromS3InternalServerError() *RestoreFromS3InternalServerError {
	return &RestoreFromS3InternalServerError{}
}

/*
RestoreFromS3InternalServerError describes a response with status code 500, with default header values.

Server error
*/
type RestoreFromS3InternalServerError struct {
}

// IsSuccess returns true when this restore from s3 internal server error response has a 2xx status code
func (o *RestoreFromS3InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore from s3 internal server error response has a 3xx status code
func (o *RestoreFromS3InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore from s3 internal server error response has a 4xx status code
func (o *RestoreFromS3InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore from s3 internal server error response has a 5xx status code
func (o *RestoreFromS3InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this restore from s3 internal server error response a status code equal to that given
func (o *RestoreFromS3InternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RestoreFromS3InternalServerError) Error() string {
	return fmt.Sprintf("[POST /backup/s3/restore][%d] restoreFromS3InternalServerError ", 500)
}

func (o *RestoreFromS3InternalServerError) String() string {
	return fmt.Sprintf("[POST /backup/s3/restore][%d] restoreFromS3InternalServerError ", 500)
}

func (o *RestoreFromS3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
