// Code generated by go-swagger; DO NOT EDIT.

package gitops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api-go/v2/models"
)

// GitOperationRepoFilePreviewReader is a Reader for the GitOperationRepoFilePreview structure.
type GitOperationRepoFilePreviewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GitOperationRepoFilePreviewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGitOperationRepoFilePreviewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGitOperationRepoFilePreviewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGitOperationRepoFilePreviewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /gitops/repo/file/preview] GitOperationRepoFilePreview", response, response.Code())
	}
}

// NewGitOperationRepoFilePreviewOK creates a GitOperationRepoFilePreviewOK with default headers values
func NewGitOperationRepoFilePreviewOK() *GitOperationRepoFilePreviewOK {
	return &GitOperationRepoFilePreviewOK{}
}

/*
GitOperationRepoFilePreviewOK describes a response with status code 200, with default header values.

Success
*/
type GitOperationRepoFilePreviewOK struct {
	Payload *models.GitopsFileResponse
}

// IsSuccess returns true when this git operation repo file preview o k response has a 2xx status code
func (o *GitOperationRepoFilePreviewOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this git operation repo file preview o k response has a 3xx status code
func (o *GitOperationRepoFilePreviewOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this git operation repo file preview o k response has a 4xx status code
func (o *GitOperationRepoFilePreviewOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this git operation repo file preview o k response has a 5xx status code
func (o *GitOperationRepoFilePreviewOK) IsServerError() bool {
	return false
}

// IsCode returns true when this git operation repo file preview o k response a status code equal to that given
func (o *GitOperationRepoFilePreviewOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the git operation repo file preview o k response
func (o *GitOperationRepoFilePreviewOK) Code() int {
	return 200
}

func (o *GitOperationRepoFilePreviewOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /gitops/repo/file/preview][%d] gitOperationRepoFilePreviewOK %s", 200, payload)
}

func (o *GitOperationRepoFilePreviewOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /gitops/repo/file/preview][%d] gitOperationRepoFilePreviewOK %s", 200, payload)
}

func (o *GitOperationRepoFilePreviewOK) GetPayload() *models.GitopsFileResponse {
	return o.Payload
}

func (o *GitOperationRepoFilePreviewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitopsFileResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitOperationRepoFilePreviewBadRequest creates a GitOperationRepoFilePreviewBadRequest with default headers values
func NewGitOperationRepoFilePreviewBadRequest() *GitOperationRepoFilePreviewBadRequest {
	return &GitOperationRepoFilePreviewBadRequest{}
}

/*
GitOperationRepoFilePreviewBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type GitOperationRepoFilePreviewBadRequest struct {
}

// IsSuccess returns true when this git operation repo file preview bad request response has a 2xx status code
func (o *GitOperationRepoFilePreviewBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this git operation repo file preview bad request response has a 3xx status code
func (o *GitOperationRepoFilePreviewBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this git operation repo file preview bad request response has a 4xx status code
func (o *GitOperationRepoFilePreviewBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this git operation repo file preview bad request response has a 5xx status code
func (o *GitOperationRepoFilePreviewBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this git operation repo file preview bad request response a status code equal to that given
func (o *GitOperationRepoFilePreviewBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the git operation repo file preview bad request response
func (o *GitOperationRepoFilePreviewBadRequest) Code() int {
	return 400
}

func (o *GitOperationRepoFilePreviewBadRequest) Error() string {
	return fmt.Sprintf("[POST /gitops/repo/file/preview][%d] gitOperationRepoFilePreviewBadRequest", 400)
}

func (o *GitOperationRepoFilePreviewBadRequest) String() string {
	return fmt.Sprintf("[POST /gitops/repo/file/preview][%d] gitOperationRepoFilePreviewBadRequest", 400)
}

func (o *GitOperationRepoFilePreviewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGitOperationRepoFilePreviewInternalServerError creates a GitOperationRepoFilePreviewInternalServerError with default headers values
func NewGitOperationRepoFilePreviewInternalServerError() *GitOperationRepoFilePreviewInternalServerError {
	return &GitOperationRepoFilePreviewInternalServerError{}
}

/*
GitOperationRepoFilePreviewInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GitOperationRepoFilePreviewInternalServerError struct {
}

// IsSuccess returns true when this git operation repo file preview internal server error response has a 2xx status code
func (o *GitOperationRepoFilePreviewInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this git operation repo file preview internal server error response has a 3xx status code
func (o *GitOperationRepoFilePreviewInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this git operation repo file preview internal server error response has a 4xx status code
func (o *GitOperationRepoFilePreviewInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this git operation repo file preview internal server error response has a 5xx status code
func (o *GitOperationRepoFilePreviewInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this git operation repo file preview internal server error response a status code equal to that given
func (o *GitOperationRepoFilePreviewInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the git operation repo file preview internal server error response
func (o *GitOperationRepoFilePreviewInternalServerError) Code() int {
	return 500
}

func (o *GitOperationRepoFilePreviewInternalServerError) Error() string {
	return fmt.Sprintf("[POST /gitops/repo/file/preview][%d] gitOperationRepoFilePreviewInternalServerError", 500)
}

func (o *GitOperationRepoFilePreviewInternalServerError) String() string {
	return fmt.Sprintf("[POST /gitops/repo/file/preview][%d] gitOperationRepoFilePreviewInternalServerError", 500)
}

func (o *GitOperationRepoFilePreviewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
