// Code generated by go-swagger; DO NOT EDIT.

package cloud_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCloudCredsUpdateParams creates a new CloudCredsUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCloudCredsUpdateParams() *CloudCredsUpdateParams {
	return &CloudCredsUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCloudCredsUpdateParamsWithTimeout creates a new CloudCredsUpdateParams object
// with the ability to set a timeout on a request.
func NewCloudCredsUpdateParamsWithTimeout(timeout time.Duration) *CloudCredsUpdateParams {
	return &CloudCredsUpdateParams{
		timeout: timeout,
	}
}

// NewCloudCredsUpdateParamsWithContext creates a new CloudCredsUpdateParams object
// with the ability to set a context for a request.
func NewCloudCredsUpdateParamsWithContext(ctx context.Context) *CloudCredsUpdateParams {
	return &CloudCredsUpdateParams{
		Context: ctx,
	}
}

// NewCloudCredsUpdateParamsWithHTTPClient creates a new CloudCredsUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewCloudCredsUpdateParamsWithHTTPClient(client *http.Client) *CloudCredsUpdateParams {
	return &CloudCredsUpdateParams{
		HTTPClient: client,
	}
}

/*
CloudCredsUpdateParams contains all the parameters to send to the API endpoint

	for the cloud creds update operation.

	Typically these are written to a http.Request.
*/
type CloudCredsUpdateParams struct {

	/* Credentials.

	   credentials in json format
	*/
	Credentials string

	/* ID.

	   ID of the cloud credential
	*/
	ID string

	/* Name.

	   name of the credentials such as rnd-test-credential
	*/
	Name string

	/* Provider.

	   cloud provider such as aws, aks, civo, digitalocean, etc.
	*/
	Provider string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cloud creds update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudCredsUpdateParams) WithDefaults() *CloudCredsUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cloud creds update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudCredsUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cloud creds update params
func (o *CloudCredsUpdateParams) WithTimeout(timeout time.Duration) *CloudCredsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cloud creds update params
func (o *CloudCredsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cloud creds update params
func (o *CloudCredsUpdateParams) WithContext(ctx context.Context) *CloudCredsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cloud creds update params
func (o *CloudCredsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cloud creds update params
func (o *CloudCredsUpdateParams) WithHTTPClient(client *http.Client) *CloudCredsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cloud creds update params
func (o *CloudCredsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentials adds the credentials to the cloud creds update params
func (o *CloudCredsUpdateParams) WithCredentials(credentials string) *CloudCredsUpdateParams {
	o.SetCredentials(credentials)
	return o
}

// SetCredentials adds the credentials to the cloud creds update params
func (o *CloudCredsUpdateParams) SetCredentials(credentials string) {
	o.Credentials = credentials
}

// WithID adds the id to the cloud creds update params
func (o *CloudCredsUpdateParams) WithID(id string) *CloudCredsUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the cloud creds update params
func (o *CloudCredsUpdateParams) SetID(id string) {
	o.ID = id
}

// WithName adds the name to the cloud creds update params
func (o *CloudCredsUpdateParams) WithName(name string) *CloudCredsUpdateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the cloud creds update params
func (o *CloudCredsUpdateParams) SetName(name string) {
	o.Name = name
}

// WithProvider adds the provider to the cloud creds update params
func (o *CloudCredsUpdateParams) WithProvider(provider string) *CloudCredsUpdateParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the cloud creds update params
func (o *CloudCredsUpdateParams) SetProvider(provider string) {
	o.Provider = provider
}

// WriteToRequest writes these params to a swagger request
func (o *CloudCredsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param credentials
	frCredentials := o.Credentials
	fCredentials := frCredentials
	if fCredentials != "" {
		if err := r.SetFormParam("credentials", fCredentials); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	// form param provider
	frProvider := o.Provider
	fProvider := frProvider
	if fProvider != "" {
		if err := r.SetFormParam("provider", fProvider); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
