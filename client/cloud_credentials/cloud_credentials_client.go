// Code generated by go-swagger; DO NOT EDIT.

package cloud_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Create(params *CreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOK, error)

	Generate(params *GenerateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateOK, error)

	CloudCredsDelete(params *CloudCredsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredsDeleteOK, error)

	CloudCredsGetByID(params *CloudCredsGetByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredsGetByIDOK, error)

	CloudCredsUpdate(params *CloudCredsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredsUpdateOK, error)

	GetAll(params *GetAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	Create creates a cloud credential

	Create a cloud credential

**Access policy**: authenticated
*/
func (a *Client) Create(params *CreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Create",
		Method:             "POST",
		PathPattern:        "/cloud/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	Generate generates ssh keypair

	Generate an ssh public / private keypair

**Access policy**: authenticated
*/
func (a *Client) Generate(params *GenerateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Generate",
		Method:             "POST",
		PathPattern:        "/sshkeygen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GenerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Generate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CloudCredsDelete deletes delete a cloud credential by ID

	delete delete a cloud credential by ID

**Access policy**: authenticated
*/
func (a *Client) CloudCredsDelete(params *CloudCredsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloudCredsDelete",
		Method:             "POST",
		PathPattern:        "/cloud/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloudCredsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloudCredsDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CloudCredsGetByID gets by ID gets a cloud credential by ID

	getByID gets a cloud credential by ID

**Access policy**: authenticated
*/
func (a *Client) CloudCredsGetByID(params *CloudCredsGetByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsGetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloudCredsGetByID",
		Method:             "GET",
		PathPattern:        "/cloud/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloudCredsGetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsGetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloudCredsGetByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CloudCredsUpdate updates a cloud credential

	Update a cloud credential

**Access policy**: authenticated
*/
func (a *Client) CloudCredsUpdate(params *CloudCredsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloudCredsUpdate",
		Method:             "PUT",
		PathPattern:        "/cloud/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloudCredsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloudCredsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAll gets all cloud credentials

	getAll cloud credential

**Access policy**: authenticated
*/
func (a *Client) GetAll(params *GetAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAll",
		Method:             "GET",
		PathPattern:        "/cloud/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
