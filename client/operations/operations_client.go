// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TeamUpdate(params *TeamUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TeamUpdateOK, *TeamUpdateNoContent, error)

	UserAdminInit(params *UserAdminInitParams, opts ...ClientOption) (*UserAdminInitOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TeamUpdate updates a team

  Update a team.
**Access policy**: administrator
*/
func (a *Client) TeamUpdate(params *TeamUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TeamUpdateOK, *TeamUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TeamUpdate",
		Method:             "PUT",
		PathPattern:        "/team/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamUpdateOK:
		return value, nil, nil
	case *TeamUpdateNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserAdminInit initializes administrator account

  Initialize the 'admin' user account.
**Access policy**: public
*/
func (a *Client) UserAdminInit(params *UserAdminInitParams, opts ...ClientOption) (*UserAdminInitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAdminInitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAdminInit",
		Method:             "POST",
		PathPattern:        "/users/admin/init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserAdminInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAdminInitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAdminInit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
