// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetSettingsPublic(params *GetSettingsPublicParams, opts ...ClientOption) (*GetSettingsPublicOK, error)

	SettingsInspect(params *SettingsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SettingsInspectOK, error)

	SettingsLDAPCheck(params *SettingsLDAPCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SettingsLDAPCheckNoContent, error)

	SettingsUpdate(params *SettingsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SettingsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetSettingsPublic retrieves portainer public settings

  Retrieve public settings. Returns a small set of settings that are not reserved to administrators only.
**Access policy**: public
*/
func (a *Client) GetSettingsPublic(params *GetSettingsPublicParams, opts ...ClientOption) (*GetSettingsPublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsPublicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSettingsPublic",
		Method:             "GET",
		PathPattern:        "/settings/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSettingsPublicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSettingsPublicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSettingsPublic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SettingsInspect retrieves portainer settings

  Retrieve Portainer settings.
**Access policy**: administrator
*/
func (a *Client) SettingsInspect(params *SettingsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SettingsInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSettingsInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SettingsInspect",
		Method:             "GET",
		PathPattern:        "/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SettingsInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SettingsInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SettingsInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SettingsLDAPCheck tests l d a p connectivity

  Test LDAP connectivity using LDAP details
**Access policy**: administrator
*/
func (a *Client) SettingsLDAPCheck(params *SettingsLDAPCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SettingsLDAPCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSettingsLDAPCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SettingsLDAPCheck",
		Method:             "PUT",
		PathPattern:        "/settings/ldap/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SettingsLDAPCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SettingsLDAPCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SettingsLDAPCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SettingsUpdate updates portainer settings

  Update Portainer settings.
**Access policy**: administrator
*/
func (a *Client) SettingsUpdate(params *SettingsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SettingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSettingsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SettingsUpdate",
		Method:             "PUT",
		PathPattern:        "/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SettingsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SettingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SettingsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
