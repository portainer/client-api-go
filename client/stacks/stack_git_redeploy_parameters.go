// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/portainer/client-api-go/v2/models"
)

// NewStackGitRedeployParams creates a new StackGitRedeployParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStackGitRedeployParams() *StackGitRedeployParams {
	return &StackGitRedeployParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStackGitRedeployParamsWithTimeout creates a new StackGitRedeployParams object
// with the ability to set a timeout on a request.
func NewStackGitRedeployParamsWithTimeout(timeout time.Duration) *StackGitRedeployParams {
	return &StackGitRedeployParams{
		timeout: timeout,
	}
}

// NewStackGitRedeployParamsWithContext creates a new StackGitRedeployParams object
// with the ability to set a context for a request.
func NewStackGitRedeployParamsWithContext(ctx context.Context) *StackGitRedeployParams {
	return &StackGitRedeployParams{
		Context: ctx,
	}
}

// NewStackGitRedeployParamsWithHTTPClient creates a new StackGitRedeployParams object
// with the ability to set a custom HTTPClient for a request.
func NewStackGitRedeployParamsWithHTTPClient(client *http.Client) *StackGitRedeployParams {
	return &StackGitRedeployParams{
		HTTPClient: client,
	}
}

/*
StackGitRedeployParams contains all the parameters to send to the API endpoint

	for the stack git redeploy operation.

	Typically these are written to a http.Request.
*/
type StackGitRedeployParams struct {

	/* Body.

	   Git configs for pull and redeploy a stack
	*/
	Body *models.StacksStackGitRedployPayload

	/* EndpointID.

	   Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
	*/
	EndpointID *int64

	/* ID.

	   Stack identifier
	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the stack git redeploy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StackGitRedeployParams) WithDefaults() *StackGitRedeployParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the stack git redeploy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StackGitRedeployParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the stack git redeploy params
func (o *StackGitRedeployParams) WithTimeout(timeout time.Duration) *StackGitRedeployParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stack git redeploy params
func (o *StackGitRedeployParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stack git redeploy params
func (o *StackGitRedeployParams) WithContext(ctx context.Context) *StackGitRedeployParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stack git redeploy params
func (o *StackGitRedeployParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stack git redeploy params
func (o *StackGitRedeployParams) WithHTTPClient(client *http.Client) *StackGitRedeployParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stack git redeploy params
func (o *StackGitRedeployParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the stack git redeploy params
func (o *StackGitRedeployParams) WithBody(body *models.StacksStackGitRedployPayload) *StackGitRedeployParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the stack git redeploy params
func (o *StackGitRedeployParams) SetBody(body *models.StacksStackGitRedployPayload) {
	o.Body = body
}

// WithEndpointID adds the endpointID to the stack git redeploy params
func (o *StackGitRedeployParams) WithEndpointID(endpointID *int64) *StackGitRedeployParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the stack git redeploy params
func (o *StackGitRedeployParams) SetEndpointID(endpointID *int64) {
	o.EndpointID = endpointID
}

// WithID adds the id to the stack git redeploy params
func (o *StackGitRedeployParams) WithID(id int64) *StackGitRedeployParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the stack git redeploy params
func (o *StackGitRedeployParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *StackGitRedeployParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.EndpointID != nil {

		// query param endpointId
		var qrEndpointID int64

		if o.EndpointID != nil {
			qrEndpointID = *o.EndpointID
		}
		qEndpointID := swag.FormatInt64(qrEndpointID)
		if qEndpointID != "" {

			if err := r.SetQueryParam("endpointId", qEndpointID); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
