// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EdgeStackWebhookInvoke(params *EdgeStackWebhookInvokeParams, opts ...ClientOption) (*EdgeStackWebhookInvokeOK, error)

	StackAssociate(params *StackAssociateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackAssociateOK, error)

	StackCreateDockerStandaloneFile(params *StackCreateDockerStandaloneFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerStandaloneFileOK, error)

	StackCreateDockerStandaloneRepository(params *StackCreateDockerStandaloneRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerStandaloneRepositoryOK, error)

	StackCreateDockerStandaloneString(params *StackCreateDockerStandaloneStringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerStandaloneStringOK, error)

	StackCreateDockerSwarmFile(params *StackCreateDockerSwarmFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerSwarmFileOK, error)

	StackCreateDockerSwarmRepository(params *StackCreateDockerSwarmRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerSwarmRepositoryOK, error)

	StackCreateDockerSwarmString(params *StackCreateDockerSwarmStringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerSwarmStringOK, error)

	StackCreateKubernetesFile(params *StackCreateKubernetesFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateKubernetesFileOK, error)

	StackCreateKubernetesGit(params *StackCreateKubernetesGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateKubernetesGitOK, error)

	StackCreateKubernetesURL(params *StackCreateKubernetesURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateKubernetesURLOK, error)

	StackDelete(params *StackDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackDeleteNoContent, error)

	StackFileInspect(params *StackFileInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackFileInspectOK, error)

	StackGitRedeploy(params *StackGitRedeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackGitRedeployOK, error)

	StackInspect(params *StackInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackInspectOK, error)

	StackList(params *StackListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackListOK, *StackListNoContent, error)

	StackMigrate(params *StackMigrateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackMigrateOK, error)

	StackStart(params *StackStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackStartOK, error)

	StackStop(params *StackStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackStopOK, error)

	StackUpdate(params *StackUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackUpdateOK, error)

	StackUpdateGit(params *StackUpdateGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackUpdateGitOK, error)

	StacksWebhookInvoke(params *StacksWebhookInvokeParams, opts ...ClientOption) (*StacksWebhookInvokeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EdgeStackWebhookInvoke webhooks for triggering edge stack updates from git

**Access policy**: public
*/
func (a *Client) EdgeStackWebhookInvoke(params *EdgeStackWebhookInvokeParams, opts ...ClientOption) (*EdgeStackWebhookInvokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeStackWebhookInvokeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeStackWebhookInvoke",
		Method:             "POST",
		PathPattern:        "/edge_stacks/webhooks/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeStackWebhookInvokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeStackWebhookInvokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeStackWebhookInvoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StackAssociate associates an orphaned stack to a new environment endpoint

**Access policy**: administrator
*/
func (a *Client) StackAssociate(params *StackAssociateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackAssociateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackAssociateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackAssociate",
		Method:             "PUT",
		PathPattern:        "/stacks/{id}/associate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackAssociateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackAssociateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackAssociate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateDockerStandaloneFile deploys a new compose stack from a file

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateDockerStandaloneFile(params *StackCreateDockerStandaloneFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerStandaloneFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateDockerStandaloneFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateDockerStandaloneFile",
		Method:             "POST",
		PathPattern:        "/stacks/create/standalone/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateDockerStandaloneFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateDockerStandaloneFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateDockerStandaloneFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateDockerStandaloneRepository deploys a new compose stack from repository

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateDockerStandaloneRepository(params *StackCreateDockerStandaloneRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerStandaloneRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateDockerStandaloneRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateDockerStandaloneRepository",
		Method:             "POST",
		PathPattern:        "/stacks/create/standalone/repository",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateDockerStandaloneRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateDockerStandaloneRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateDockerStandaloneRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateDockerStandaloneString deploys a new compose stack from a text

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateDockerStandaloneString(params *StackCreateDockerStandaloneStringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerStandaloneStringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateDockerStandaloneStringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateDockerStandaloneString",
		Method:             "POST",
		PathPattern:        "/stacks/create/standalone/string",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateDockerStandaloneStringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateDockerStandaloneStringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateDockerStandaloneString: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateDockerSwarmFile deploys a new swarm stack from a file

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateDockerSwarmFile(params *StackCreateDockerSwarmFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerSwarmFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateDockerSwarmFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateDockerSwarmFile",
		Method:             "POST",
		PathPattern:        "/stacks/create/swarm/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateDockerSwarmFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateDockerSwarmFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateDockerSwarmFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateDockerSwarmRepository deploys a new swarm stack from a git repository

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateDockerSwarmRepository(params *StackCreateDockerSwarmRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerSwarmRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateDockerSwarmRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateDockerSwarmRepository",
		Method:             "POST",
		PathPattern:        "/stacks/create/swarm/repository",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateDockerSwarmRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateDockerSwarmRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateDockerSwarmRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateDockerSwarmString deploys a new swarm stack from a text

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateDockerSwarmString(params *StackCreateDockerSwarmStringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateDockerSwarmStringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateDockerSwarmStringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateDockerSwarmString",
		Method:             "POST",
		PathPattern:        "/stacks/create/swarm/string",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateDockerSwarmStringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateDockerSwarmStringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateDockerSwarmString: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateKubernetesFile deploys a new kubernetes stack from a file

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateKubernetesFile(params *StackCreateKubernetesFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateKubernetesFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateKubernetesFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateKubernetesFile",
		Method:             "POST",
		PathPattern:        "/stacks/create/kubernetes/string",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateKubernetesFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateKubernetesFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateKubernetesFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateKubernetesGit deploys a new kubernetes stack from a git repository

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateKubernetesGit(params *StackCreateKubernetesGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateKubernetesGitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateKubernetesGitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateKubernetesGit",
		Method:             "POST",
		PathPattern:        "/stacks/create/kubernetes/repository",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateKubernetesGitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateKubernetesGitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateKubernetesGit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackCreateKubernetesURL deploys a new kubernetes stack from a url

	Deploy a new stack into a Docker environment specified via the environment identifier.

**Access policy**: authenticated
*/
func (a *Client) StackCreateKubernetesURL(params *StackCreateKubernetesURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackCreateKubernetesURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateKubernetesURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackCreateKubernetesUrl",
		Method:             "POST",
		PathPattern:        "/stacks/create/kubernetes/url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateKubernetesURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackCreateKubernetesURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackCreateKubernetesUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackDelete removes a stack

	Remove a stack.

**Access policy**: restricted
*/
func (a *Client) StackDelete(params *StackDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackDelete",
		Method:             "DELETE",
		PathPattern:        "/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackFileInspect retrieves the content of the stack file for the specified stack

	Get Stack file content.

**Access policy**: restricted
*/
func (a *Client) StackFileInspect(params *StackFileInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackFileInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackFileInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackFileInspect",
		Method:             "GET",
		PathPattern:        "/stacks/{id}/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackFileInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackFileInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackFileInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackGitRedeploy redeploys a stack

	Pull and redeploy a stack via Git

**Access policy**: authenticated
*/
func (a *Client) StackGitRedeploy(params *StackGitRedeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackGitRedeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackGitRedeployParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackGitRedeploy",
		Method:             "PUT",
		PathPattern:        "/stacks/{id}/git/redeploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackGitRedeployReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackGitRedeployOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackGitRedeploy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackInspect inspects a stack

	Retrieve details about a stack.

**Access policy**: restricted
*/
func (a *Client) StackInspect(params *StackInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackInspect",
		Method:             "GET",
		PathPattern:        "/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackList lists stacks

	List all stacks based on the current user authorizations.

Will return all stacks if using an administrator account otherwise it
will only return the list of stacks the user have access to.
**Access policy**: authenticated
*/
func (a *Client) StackList(params *StackListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackListOK, *StackListNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackList",
		Method:             "GET",
		PathPattern:        "/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StackListOK:
		return value, nil, nil
	case *StackListNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackMigrate migrates a stack to another environment endpoint

	Migrate a stack from an environment(endpoint) to another environment(endpoint). It will re-create the stack inside the target environment(endpoint) before removing the original stack.

**Access policy**: authenticated
*/
func (a *Client) StackMigrate(params *StackMigrateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackMigrateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackMigrateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackMigrate",
		Method:             "POST",
		PathPattern:        "/stacks/{id}/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackMigrateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackMigrateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackStart starts a stopped stack

	Starts a stopped Stack.

**Access policy**: authenticated
*/
func (a *Client) StackStart(params *StackStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackStart",
		Method:             "POST",
		PathPattern:        "/stacks/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackStop stops a stopped stack

	Stops a stopped Stack.

**Access policy**: authenticated
*/
func (a *Client) StackStop(params *StackStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackStop",
		Method:             "POST",
		PathPattern:        "/stacks/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackUpdate updates a stack

	Update a stack, only for file based stacks.

**Access policy**: authenticated
*/
func (a *Client) StackUpdate(params *StackUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackUpdate",
		Method:             "PUT",
		PathPattern:        "/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	StackUpdateGit updates a stack s git configs

	Update the Git settings in a stack, e.g., RepositoryReferenceName and AutoUpdate

**Access policy**: authenticated
*/
func (a *Client) StackUpdateGit(params *StackUpdateGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackUpdateGitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackUpdateGitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StackUpdateGit",
		Method:             "POST",
		PathPattern:        "/stacks/{id}/git",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackUpdateGitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackUpdateGitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StackUpdateGit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StacksWebhookInvoke webhooks for triggering stack updates from git

**Access policy**: public
*/
func (a *Client) StacksWebhookInvoke(params *StacksWebhookInvokeParams, opts ...ClientOption) (*StacksWebhookInvokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStacksWebhookInvokeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StacksWebhookInvoke",
		Method:             "POST",
		PathPattern:        "/stacks/webhooks/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StacksWebhookInvokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StacksWebhookInvokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StacksWebhookInvoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
