// Code generated by go-swagger; DO NOT EDIT.

package support

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SupportBundleDownloadReader is a Reader for the SupportBundleDownload structure.
type SupportBundleDownloadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SupportBundleDownloadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSupportBundleDownloadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSupportBundleDownloadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSupportBundleDownloadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSupportBundleDownloadForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSupportBundleDownloadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /support/download] SupportBundleDownload", response, response.Code())
	}
}

// NewSupportBundleDownloadOK creates a SupportBundleDownloadOK with default headers values
func NewSupportBundleDownloadOK() *SupportBundleDownloadOK {
	return &SupportBundleDownloadOK{}
}

/*
SupportBundleDownloadOK describes a response with status code 200, with default header values.

Success
*/
type SupportBundleDownloadOK struct {
}

// IsSuccess returns true when this support bundle download o k response has a 2xx status code
func (o *SupportBundleDownloadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this support bundle download o k response has a 3xx status code
func (o *SupportBundleDownloadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundle download o k response has a 4xx status code
func (o *SupportBundleDownloadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this support bundle download o k response has a 5xx status code
func (o *SupportBundleDownloadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundle download o k response a status code equal to that given
func (o *SupportBundleDownloadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the support bundle download o k response
func (o *SupportBundleDownloadOK) Code() int {
	return 200
}

func (o *SupportBundleDownloadOK) Error() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadOK", 200)
}

func (o *SupportBundleDownloadOK) String() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadOK", 200)
}

func (o *SupportBundleDownloadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSupportBundleDownloadBadRequest creates a SupportBundleDownloadBadRequest with default headers values
func NewSupportBundleDownloadBadRequest() *SupportBundleDownloadBadRequest {
	return &SupportBundleDownloadBadRequest{}
}

/*
SupportBundleDownloadBadRequest describes a response with status code 400, with default header values.

Invalid request payload, such as missing required fields or fields not meeting validation criteria.
*/
type SupportBundleDownloadBadRequest struct {
}

// IsSuccess returns true when this support bundle download bad request response has a 2xx status code
func (o *SupportBundleDownloadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundle download bad request response has a 3xx status code
func (o *SupportBundleDownloadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundle download bad request response has a 4xx status code
func (o *SupportBundleDownloadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this support bundle download bad request response has a 5xx status code
func (o *SupportBundleDownloadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundle download bad request response a status code equal to that given
func (o *SupportBundleDownloadBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the support bundle download bad request response
func (o *SupportBundleDownloadBadRequest) Code() int {
	return 400
}

func (o *SupportBundleDownloadBadRequest) Error() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadBadRequest", 400)
}

func (o *SupportBundleDownloadBadRequest) String() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadBadRequest", 400)
}

func (o *SupportBundleDownloadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSupportBundleDownloadUnauthorized creates a SupportBundleDownloadUnauthorized with default headers values
func NewSupportBundleDownloadUnauthorized() *SupportBundleDownloadUnauthorized {
	return &SupportBundleDownloadUnauthorized{}
}

/*
SupportBundleDownloadUnauthorized describes a response with status code 401, with default header values.

Unauthorized access - the user is not authenticated or does not have the necessary permissions. Ensure that you have provided a valid API key or JWT token, and that you have the required permissions.
*/
type SupportBundleDownloadUnauthorized struct {
}

// IsSuccess returns true when this support bundle download unauthorized response has a 2xx status code
func (o *SupportBundleDownloadUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundle download unauthorized response has a 3xx status code
func (o *SupportBundleDownloadUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundle download unauthorized response has a 4xx status code
func (o *SupportBundleDownloadUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this support bundle download unauthorized response has a 5xx status code
func (o *SupportBundleDownloadUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundle download unauthorized response a status code equal to that given
func (o *SupportBundleDownloadUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the support bundle download unauthorized response
func (o *SupportBundleDownloadUnauthorized) Code() int {
	return 401
}

func (o *SupportBundleDownloadUnauthorized) Error() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadUnauthorized", 401)
}

func (o *SupportBundleDownloadUnauthorized) String() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadUnauthorized", 401)
}

func (o *SupportBundleDownloadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSupportBundleDownloadForbidden creates a SupportBundleDownloadForbidden with default headers values
func NewSupportBundleDownloadForbidden() *SupportBundleDownloadForbidden {
	return &SupportBundleDownloadForbidden{}
}

/*
SupportBundleDownloadForbidden describes a response with status code 403, with default header values.

Permission denied - the user is authenticated but does not have the necessary permissions to access the requested resource or perform the specified operation. Check your user roles and permissions.
*/
type SupportBundleDownloadForbidden struct {
}

// IsSuccess returns true when this support bundle download forbidden response has a 2xx status code
func (o *SupportBundleDownloadForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundle download forbidden response has a 3xx status code
func (o *SupportBundleDownloadForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundle download forbidden response has a 4xx status code
func (o *SupportBundleDownloadForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this support bundle download forbidden response has a 5xx status code
func (o *SupportBundleDownloadForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundle download forbidden response a status code equal to that given
func (o *SupportBundleDownloadForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the support bundle download forbidden response
func (o *SupportBundleDownloadForbidden) Code() int {
	return 403
}

func (o *SupportBundleDownloadForbidden) Error() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadForbidden", 403)
}

func (o *SupportBundleDownloadForbidden) String() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadForbidden", 403)
}

func (o *SupportBundleDownloadForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSupportBundleDownloadInternalServerError creates a SupportBundleDownloadInternalServerError with default headers values
func NewSupportBundleDownloadInternalServerError() *SupportBundleDownloadInternalServerError {
	return &SupportBundleDownloadInternalServerError{}
}

/*
SupportBundleDownloadInternalServerError describes a response with status code 500, with default header values.

Failed to create support archive
*/
type SupportBundleDownloadInternalServerError struct {
}

// IsSuccess returns true when this support bundle download internal server error response has a 2xx status code
func (o *SupportBundleDownloadInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundle download internal server error response has a 3xx status code
func (o *SupportBundleDownloadInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundle download internal server error response has a 4xx status code
func (o *SupportBundleDownloadInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this support bundle download internal server error response has a 5xx status code
func (o *SupportBundleDownloadInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this support bundle download internal server error response a status code equal to that given
func (o *SupportBundleDownloadInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the support bundle download internal server error response
func (o *SupportBundleDownloadInternalServerError) Code() int {
	return 500
}

func (o *SupportBundleDownloadInternalServerError) Error() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadInternalServerError", 500)
}

func (o *SupportBundleDownloadInternalServerError) String() string {
	return fmt.Sprintf("[POST /support/download][%d] supportBundleDownloadInternalServerError", 500)
}

func (o *SupportBundleDownloadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
