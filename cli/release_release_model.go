// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for ReleaseRelease

// register flags to command
func registerModelReleaseReleaseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReleaseReleaseChart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseHooks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseManifest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseReleaseChart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var chartFlagName string
	if cmdPrefix == "" {
		chartFlagName = "chart"
	} else {
		chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
	}

	if err := registerModelReleaseChartFlags(depth+1, chartFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseReleaseConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: config interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseReleaseHooks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: hooks []*ReleaseHook array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseReleaseManifest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	manifestDescription := `Manifest is the string representation of the rendered template.`

	var manifestFlagName string
	if cmdPrefix == "" {
		manifestFlagName = "manifest"
	} else {
		manifestFlagName = fmt.Sprintf("%v.manifest", cmdPrefix)
	}

	var manifestFlagDefault string

	_ = cmd.PersistentFlags().String(manifestFlagName, manifestFlagDefault, manifestDescription)

	return nil
}

func registerReleaseReleaseName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name is the name of the release`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerReleaseReleaseNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := `Namespace is the kubernetes namespace of the release.`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerReleaseReleaseVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Version is an int which represents the revision of the release.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReleaseReleaseFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, chartAdded := retrieveReleaseReleaseChartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded

	err, configAdded := retrieveReleaseReleaseConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configAdded

	err, hooksAdded := retrieveReleaseReleaseHooksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hooksAdded

	err, manifestAdded := retrieveReleaseReleaseManifestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || manifestAdded

	err, nameAdded := retrieveReleaseReleaseNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveReleaseReleaseNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, versionAdded := retrieveReleaseReleaseVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveReleaseReleaseChartFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chartFlagName := fmt.Sprintf("%v.chart", cmdPrefix)
	if cmd.Flags().Changed(chartFlagName) {
		// info: complex object chart ReleaseChart is retrieved outside this Changed() block
	}
	chartFlagValue := m.Chart
	if swag.IsZero(chartFlagValue) {
		chartFlagValue = &models.ReleaseChart{}
	}

	err, chartAdded := retrieveModelReleaseChartFlags(depth+1, chartFlagValue, chartFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded
	if chartAdded {
		m.Chart = chartFlagValue
	}

	return nil, retAdded
}

func retrieveReleaseReleaseConfigFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configFlagName := fmt.Sprintf("%v.config", cmdPrefix)
	if cmd.Flags().Changed(configFlagName) {
		// warning: config map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseReleaseHooksFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hooksFlagName := fmt.Sprintf("%v.hooks", cmdPrefix)
	if cmd.Flags().Changed(hooksFlagName) {
		// warning: hooks array type []*ReleaseHook is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseReleaseManifestFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	manifestFlagName := fmt.Sprintf("%v.manifest", cmdPrefix)
	if cmd.Flags().Changed(manifestFlagName) {

		var manifestFlagName string
		if cmdPrefix == "" {
			manifestFlagName = "manifest"
		} else {
			manifestFlagName = fmt.Sprintf("%v.manifest", cmdPrefix)
		}

		manifestFlagValue, err := cmd.Flags().GetString(manifestFlagName)
		if err != nil {
			return err, false
		}
		m.Manifest = manifestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseNameFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseNamespaceFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseVersionFlags(depth int, m *models.ReleaseRelease, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
