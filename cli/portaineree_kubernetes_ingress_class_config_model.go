// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeKubernetesIngressClassConfig

// register flags to command
func registerModelPortainereeKubernetesIngressClassConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeKubernetesIngressClassConfigBlocked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesIngressClassConfigBlockedNamespaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesIngressClassConfigName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesIngressClassConfigType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeKubernetesIngressClassConfigBlocked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	blockedDescription := ``

	var blockedFlagName string
	if cmdPrefix == "" {
		blockedFlagName = "Blocked"
	} else {
		blockedFlagName = fmt.Sprintf("%v.Blocked", cmdPrefix)
	}

	var blockedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(blockedFlagName, blockedFlagDefault, blockedDescription)

	return nil
}

func registerPortainereeKubernetesIngressClassConfigBlockedNamespaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: BlockedNamespaces []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeKubernetesIngressClassConfigName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeKubernetesIngressClassConfigType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeKubernetesIngressClassConfigFlags(depth int, m *models.PortainereeKubernetesIngressClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, blockedAdded := retrievePortainereeKubernetesIngressClassConfigBlockedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blockedAdded

	err, blockedNamespacesAdded := retrievePortainereeKubernetesIngressClassConfigBlockedNamespacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blockedNamespacesAdded

	err, nameAdded := retrievePortainereeKubernetesIngressClassConfigNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, typeAdded := retrievePortainereeKubernetesIngressClassConfigTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePortainereeKubernetesIngressClassConfigBlockedFlags(depth int, m *models.PortainereeKubernetesIngressClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	blockedFlagName := fmt.Sprintf("%v.Blocked", cmdPrefix)
	if cmd.Flags().Changed(blockedFlagName) {

		var blockedFlagName string
		if cmdPrefix == "" {
			blockedFlagName = "Blocked"
		} else {
			blockedFlagName = fmt.Sprintf("%v.Blocked", cmdPrefix)
		}

		blockedFlagValue, err := cmd.Flags().GetBool(blockedFlagName)
		if err != nil {
			return err, false
		}
		m.Blocked = &blockedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesIngressClassConfigBlockedNamespacesFlags(depth int, m *models.PortainereeKubernetesIngressClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	blockedNamespacesFlagName := fmt.Sprintf("%v.BlockedNamespaces", cmdPrefix)
	if cmd.Flags().Changed(blockedNamespacesFlagName) {
		// warning: BlockedNamespaces array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesIngressClassConfigNameFlags(depth int, m *models.PortainereeKubernetesIngressClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesIngressClassConfigTypeFlags(depth int, m *models.PortainereeKubernetesIngressClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
