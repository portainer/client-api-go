// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for RegistriesRegistryConfigurePayload

// register flags to command
func registerModelRegistriesRegistryConfigurePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistriesRegistryConfigurePayloadAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadTLS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadTlscacertFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadTlscertFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadTlskeyFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadTlsskipVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryConfigurePayloadUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryConfigurePayloadAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationDescription := `Required. Is authentication against this registry enabled`

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
	}

	var authenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(authenticationFlagName, authenticationFlagDefault, authenticationDescription)

	return nil
}

func registerRegistriesRegistryConfigurePayloadPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `Password used to authenticate against this registry. required when Authentication is true`

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerRegistriesRegistryConfigurePayloadRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	regionDescription := `ECR region`

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	var regionFlagDefault string

	_ = cmd.PersistentFlags().String(regionFlagName, regionFlagDefault, regionDescription)

	return nil
}

func registerRegistriesRegistryConfigurePayloadTLS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsDescription := `Use TLS`

	var tlsFlagName string
	if cmdPrefix == "" {
		tlsFlagName = "tls"
	} else {
		tlsFlagName = fmt.Sprintf("%v.tls", cmdPrefix)
	}

	var tlsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsFlagName, tlsFlagDefault, tlsDescription)

	return nil
}

func registerRegistriesRegistryConfigurePayloadTlscacertFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tlscacertFile []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerRegistriesRegistryConfigurePayloadTlscertFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tlscertFile []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerRegistriesRegistryConfigurePayloadTlskeyFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tlskeyFile []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerRegistriesRegistryConfigurePayloadTlsskipVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsskipVerifyDescription := `Skip the verification of the server TLS certificate`

	var tlsskipVerifyFlagName string
	if cmdPrefix == "" {
		tlsskipVerifyFlagName = "tlsskipVerify"
	} else {
		tlsskipVerifyFlagName = fmt.Sprintf("%v.tlsskipVerify", cmdPrefix)
	}

	var tlsskipVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsskipVerifyFlagName, tlsskipVerifyFlagDefault, tlsskipVerifyDescription)

	return nil
}

func registerRegistriesRegistryConfigurePayloadUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Username used to authenticate against this registry. Required when Authentication is true`

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistriesRegistryConfigurePayloadFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authenticationAdded := retrieveRegistriesRegistryConfigurePayloadAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, passwordAdded := retrieveRegistriesRegistryConfigurePayloadPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, regionAdded := retrieveRegistriesRegistryConfigurePayloadRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	err, tlsAdded := retrieveRegistriesRegistryConfigurePayloadTLSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsAdded

	err, tlscacertFileAdded := retrieveRegistriesRegistryConfigurePayloadTlscacertFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlscacertFileAdded

	err, tlscertFileAdded := retrieveRegistriesRegistryConfigurePayloadTlscertFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlscertFileAdded

	err, tlskeyFileAdded := retrieveRegistriesRegistryConfigurePayloadTlskeyFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlskeyFileAdded

	err, tlsskipVerifyAdded := retrieveRegistriesRegistryConfigurePayloadTlsskipVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsskipVerifyAdded

	err, usernameAdded := retrieveRegistriesRegistryConfigurePayloadUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadAuthenticationFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {

		var authenticationFlagName string
		if cmdPrefix == "" {
			authenticationFlagName = "authentication"
		} else {
			authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
		}

		authenticationFlagValue, err := cmd.Flags().GetBool(authenticationFlagName)
		if err != nil {
			return err, false
		}
		m.Authentication = &authenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadPasswordFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadRegionFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {

		var regionFlagName string
		if cmdPrefix == "" {
			regionFlagName = "region"
		} else {
			regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
		}

		regionFlagValue, err := cmd.Flags().GetString(regionFlagName)
		if err != nil {
			return err, false
		}
		m.Region = regionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadTLSFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsFlagName := fmt.Sprintf("%v.tls", cmdPrefix)
	if cmd.Flags().Changed(tlsFlagName) {

		var tlsFlagName string
		if cmdPrefix == "" {
			tlsFlagName = "tls"
		} else {
			tlsFlagName = fmt.Sprintf("%v.tls", cmdPrefix)
		}

		tlsFlagValue, err := cmd.Flags().GetBool(tlsFlagName)
		if err != nil {
			return err, false
		}
		m.TLS = &tlsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadTlscacertFileFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlscacertFileFlagName := fmt.Sprintf("%v.tlscacertFile", cmdPrefix)
	if cmd.Flags().Changed(tlscacertFileFlagName) {
		// warning: tlscacertFile array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadTlscertFileFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlscertFileFlagName := fmt.Sprintf("%v.tlscertFile", cmdPrefix)
	if cmd.Flags().Changed(tlscertFileFlagName) {
		// warning: tlscertFile array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadTlskeyFileFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlskeyFileFlagName := fmt.Sprintf("%v.tlskeyFile", cmdPrefix)
	if cmd.Flags().Changed(tlskeyFileFlagName) {
		// warning: tlskeyFile array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadTlsskipVerifyFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsskipVerifyFlagName := fmt.Sprintf("%v.tlsskipVerify", cmdPrefix)
	if cmd.Flags().Changed(tlsskipVerifyFlagName) {

		var tlsskipVerifyFlagName string
		if cmdPrefix == "" {
			tlsskipVerifyFlagName = "tlsskipVerify"
		} else {
			tlsskipVerifyFlagName = fmt.Sprintf("%v.tlsskipVerify", cmdPrefix)
		}

		tlsskipVerifyFlagValue, err := cmd.Flags().GetBool(tlsskipVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.TlsskipVerify = &tlsskipVerifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryConfigurePayloadUsernameFlags(depth int, m *models.RegistriesRegistryConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
