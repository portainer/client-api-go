// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainerOpenAMTDeviceEnabledFeatures

// register flags to command
func registerModelPortainerOpenAMTDeviceEnabledFeaturesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainerOpenAMTDeviceEnabledFeaturesIDER(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTDeviceEnabledFeaturesKVM(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTDeviceEnabledFeaturesSOL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTDeviceEnabledFeaturesRedirection(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTDeviceEnabledFeaturesUserConsent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainerOpenAMTDeviceEnabledFeaturesIDER(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idERDescription := ``

	var idERFlagName string
	if cmdPrefix == "" {
		idERFlagName = "IDER"
	} else {
		idERFlagName = fmt.Sprintf("%v.IDER", cmdPrefix)
	}

	var idERFlagDefault bool

	_ = cmd.PersistentFlags().Bool(idERFlagName, idERFlagDefault, idERDescription)

	return nil
}

func registerPortainerOpenAMTDeviceEnabledFeaturesKVM(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kVmDescription := ``

	var kVmFlagName string
	if cmdPrefix == "" {
		kVmFlagName = "KVM"
	} else {
		kVmFlagName = fmt.Sprintf("%v.KVM", cmdPrefix)
	}

	var kVmFlagDefault bool

	_ = cmd.PersistentFlags().Bool(kVmFlagName, kVmFlagDefault, kVmDescription)

	return nil
}

func registerPortainerOpenAMTDeviceEnabledFeaturesSOL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sOLDescription := ``

	var sOLFlagName string
	if cmdPrefix == "" {
		sOLFlagName = "SOL"
	} else {
		sOLFlagName = fmt.Sprintf("%v.SOL", cmdPrefix)
	}

	var sOLFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sOLFlagName, sOLFlagDefault, sOLDescription)

	return nil
}

func registerPortainerOpenAMTDeviceEnabledFeaturesRedirection(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirectionDescription := ``

	var redirectionFlagName string
	if cmdPrefix == "" {
		redirectionFlagName = "redirection"
	} else {
		redirectionFlagName = fmt.Sprintf("%v.redirection", cmdPrefix)
	}

	var redirectionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(redirectionFlagName, redirectionFlagDefault, redirectionDescription)

	return nil
}

func registerPortainerOpenAMTDeviceEnabledFeaturesUserConsent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userConsentDescription := ``

	var userConsentFlagName string
	if cmdPrefix == "" {
		userConsentFlagName = "userConsent"
	} else {
		userConsentFlagName = fmt.Sprintf("%v.userConsent", cmdPrefix)
	}

	var userConsentFlagDefault string

	_ = cmd.PersistentFlags().String(userConsentFlagName, userConsentFlagDefault, userConsentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainerOpenAMTDeviceEnabledFeaturesFlags(depth int, m *models.PortainerOpenAMTDeviceEnabledFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idERAdded := retrievePortainerOpenAMTDeviceEnabledFeaturesIDERFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idERAdded

	err, kVmAdded := retrievePortainerOpenAMTDeviceEnabledFeaturesKVMFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kVmAdded

	err, sOLAdded := retrievePortainerOpenAMTDeviceEnabledFeaturesSOLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sOLAdded

	err, redirectionAdded := retrievePortainerOpenAMTDeviceEnabledFeaturesRedirectionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirectionAdded

	err, userConsentAdded := retrievePortainerOpenAMTDeviceEnabledFeaturesUserConsentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userConsentAdded

	return nil, retAdded
}

func retrievePortainerOpenAMTDeviceEnabledFeaturesIDERFlags(depth int, m *models.PortainerOpenAMTDeviceEnabledFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idERFlagName := fmt.Sprintf("%v.IDER", cmdPrefix)
	if cmd.Flags().Changed(idERFlagName) {

		var idERFlagName string
		if cmdPrefix == "" {
			idERFlagName = "IDER"
		} else {
			idERFlagName = fmt.Sprintf("%v.IDER", cmdPrefix)
		}

		idERFlagValue, err := cmd.Flags().GetBool(idERFlagName)
		if err != nil {
			return err, false
		}
		m.IDER = &idERFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTDeviceEnabledFeaturesKVMFlags(depth int, m *models.PortainerOpenAMTDeviceEnabledFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kVmFlagName := fmt.Sprintf("%v.KVM", cmdPrefix)
	if cmd.Flags().Changed(kVmFlagName) {

		var kVmFlagName string
		if cmdPrefix == "" {
			kVmFlagName = "KVM"
		} else {
			kVmFlagName = fmt.Sprintf("%v.KVM", cmdPrefix)
		}

		kVmFlagValue, err := cmd.Flags().GetBool(kVmFlagName)
		if err != nil {
			return err, false
		}
		m.KVM = &kVmFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTDeviceEnabledFeaturesSOLFlags(depth int, m *models.PortainerOpenAMTDeviceEnabledFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sOLFlagName := fmt.Sprintf("%v.SOL", cmdPrefix)
	if cmd.Flags().Changed(sOLFlagName) {

		var sOLFlagName string
		if cmdPrefix == "" {
			sOLFlagName = "SOL"
		} else {
			sOLFlagName = fmt.Sprintf("%v.SOL", cmdPrefix)
		}

		sOLFlagValue, err := cmd.Flags().GetBool(sOLFlagName)
		if err != nil {
			return err, false
		}
		m.SOL = &sOLFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTDeviceEnabledFeaturesRedirectionFlags(depth int, m *models.PortainerOpenAMTDeviceEnabledFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirectionFlagName := fmt.Sprintf("%v.redirection", cmdPrefix)
	if cmd.Flags().Changed(redirectionFlagName) {

		var redirectionFlagName string
		if cmdPrefix == "" {
			redirectionFlagName = "redirection"
		} else {
			redirectionFlagName = fmt.Sprintf("%v.redirection", cmdPrefix)
		}

		redirectionFlagValue, err := cmd.Flags().GetBool(redirectionFlagName)
		if err != nil {
			return err, false
		}
		m.Redirection = &redirectionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTDeviceEnabledFeaturesUserConsentFlags(depth int, m *models.PortainerOpenAMTDeviceEnabledFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userConsentFlagName := fmt.Sprintf("%v.userConsent", cmdPrefix)
	if cmd.Flags().Changed(userConsentFlagName) {

		var userConsentFlagName string
		if cmdPrefix == "" {
			userConsentFlagName = "userConsent"
		} else {
			userConsentFlagName = fmt.Sprintf("%v.userConsent", cmdPrefix)
		}

		userConsentFlagValue, err := cmd.Flags().GetString(userConsentFlagName)
		if err != nil {
			return err, false
		}
		m.UserConsent = userConsentFlagValue

		retAdded = true
	}

	return nil, retAdded
}
