// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/endpoints"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEndpointsSnapshotContainerInspectCmd returns a cmd to handle operation snapshotContainerInspect
func makeOperationEndpointsSnapshotContainerInspectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "snapshotContainerInspect",
		Short: `**Access policy**:`,
		RunE:  runOperationEndpointsSnapshotContainerInspect,
	}

	if err := registerOperationEndpointsSnapshotContainerInspectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEndpointsSnapshotContainerInspect uses cmd flags to call endpoint api
func runOperationEndpointsSnapshotContainerInspect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := endpoints.NewSnapshotContainerInspectParams()
	if err, _ := retrieveOperationEndpointsSnapshotContainerInspectEnvironmentIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEndpointsSnapshotContainerInspectResult(appCli.Endpoints.SnapshotContainerInspect(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEndpointsSnapshotContainerInspectParamFlags registers all flags needed to fill params
func registerOperationEndpointsSnapshotContainerInspectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEndpointsSnapshotContainerInspectEnvironmentIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEndpointsSnapshotContainerInspectEnvironmentIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	environmentIdDescription := `Required. Environment identifier`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func retrieveOperationEndpointsSnapshotContainerInspectEnvironmentIDFlag(m *endpoints.SnapshotContainerInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("environmentId") {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetInt64(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = environmentIdFlagValue

	}
	return nil, retAdded
}

// parseOperationEndpointsSnapshotContainerInspectResult parses request result and return the string content
func parseOperationEndpointsSnapshotContainerInspectResult(resp0 *endpoints.SnapshotContainerInspectOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*endpoints.SnapshotContainerInspectOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning snapshotContainerInspectNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
