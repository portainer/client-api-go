// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeNomadSnapshotTask

// register flags to command
func registerModelPortainereeNomadSnapshotTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeNomadSnapshotTaskAllocationID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTaskJobID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTaskNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTaskStartedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTaskState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTaskTaskGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTaskTaskName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeNomadSnapshotTaskAllocationID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allocationIdDescription := ``

	var allocationIdFlagName string
	if cmdPrefix == "" {
		allocationIdFlagName = "AllocationID"
	} else {
		allocationIdFlagName = fmt.Sprintf("%v.AllocationID", cmdPrefix)
	}

	var allocationIdFlagDefault string

	_ = cmd.PersistentFlags().String(allocationIdFlagName, allocationIdFlagDefault, allocationIdDescription)

	return nil
}

func registerPortainereeNomadSnapshotTaskJobID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobIdDescription := ``

	var jobIdFlagName string
	if cmdPrefix == "" {
		jobIdFlagName = "JobID"
	} else {
		jobIdFlagName = fmt.Sprintf("%v.JobID", cmdPrefix)
	}

	var jobIdFlagDefault string

	_ = cmd.PersistentFlags().String(jobIdFlagName, jobIdFlagDefault, jobIdDescription)

	return nil
}

func registerPortainereeNomadSnapshotTaskNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "Namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.Namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerPortainereeNomadSnapshotTaskStartedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startedAtDescription := ``

	var startedAtFlagName string
	if cmdPrefix == "" {
		startedAtFlagName = "StartedAt"
	} else {
		startedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
	}

	var startedAtFlagDefault string

	_ = cmd.PersistentFlags().String(startedAtFlagName, startedAtFlagDefault, startedAtDescription)

	return nil
}

func registerPortainereeNomadSnapshotTaskState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stateDescription := ``

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "State"
	} else {
		stateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	return nil
}

func registerPortainereeNomadSnapshotTaskTaskGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskGroupDescription := ``

	var taskGroupFlagName string
	if cmdPrefix == "" {
		taskGroupFlagName = "TaskGroup"
	} else {
		taskGroupFlagName = fmt.Sprintf("%v.TaskGroup", cmdPrefix)
	}

	var taskGroupFlagDefault string

	_ = cmd.PersistentFlags().String(taskGroupFlagName, taskGroupFlagDefault, taskGroupDescription)

	return nil
}

func registerPortainereeNomadSnapshotTaskTaskName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskNameDescription := ``

	var taskNameFlagName string
	if cmdPrefix == "" {
		taskNameFlagName = "TaskName"
	} else {
		taskNameFlagName = fmt.Sprintf("%v.TaskName", cmdPrefix)
	}

	var taskNameFlagDefault string

	_ = cmd.PersistentFlags().String(taskNameFlagName, taskNameFlagDefault, taskNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeNomadSnapshotTaskFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allocationIdAdded := retrievePortainereeNomadSnapshotTaskAllocationIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allocationIdAdded

	err, jobIdAdded := retrievePortainereeNomadSnapshotTaskJobIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobIdAdded

	err, namespaceAdded := retrievePortainereeNomadSnapshotTaskNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, startedAtAdded := retrievePortainereeNomadSnapshotTaskStartedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startedAtAdded

	err, stateAdded := retrievePortainereeNomadSnapshotTaskStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	err, taskGroupAdded := retrievePortainereeNomadSnapshotTaskTaskGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskGroupAdded

	err, taskNameAdded := retrievePortainereeNomadSnapshotTaskTaskNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskNameAdded

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskAllocationIDFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allocationIdFlagName := fmt.Sprintf("%v.AllocationID", cmdPrefix)
	if cmd.Flags().Changed(allocationIdFlagName) {

		var allocationIdFlagName string
		if cmdPrefix == "" {
			allocationIdFlagName = "AllocationID"
		} else {
			allocationIdFlagName = fmt.Sprintf("%v.AllocationID", cmdPrefix)
		}

		allocationIdFlagValue, err := cmd.Flags().GetString(allocationIdFlagName)
		if err != nil {
			return err, false
		}
		m.AllocationID = allocationIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskJobIDFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobIdFlagName := fmt.Sprintf("%v.JobID", cmdPrefix)
	if cmd.Flags().Changed(jobIdFlagName) {

		var jobIdFlagName string
		if cmdPrefix == "" {
			jobIdFlagName = "JobID"
		} else {
			jobIdFlagName = fmt.Sprintf("%v.JobID", cmdPrefix)
		}

		jobIdFlagValue, err := cmd.Flags().GetString(jobIdFlagName)
		if err != nil {
			return err, false
		}
		m.JobID = jobIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskNamespaceFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.Namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "Namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.Namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskStartedAtFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startedAtFlagName := fmt.Sprintf("%v.StartedAt", cmdPrefix)
	if cmd.Flags().Changed(startedAtFlagName) {

		var startedAtFlagName string
		if cmdPrefix == "" {
			startedAtFlagName = "StartedAt"
		} else {
			startedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
		}

		startedAtFlagValue, err := cmd.Flags().GetString(startedAtFlagName)
		if err != nil {
			return err, false
		}
		m.StartedAt = startedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskStateFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stateFlagName := fmt.Sprintf("%v.State", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "State"
		} else {
			stateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = stateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskTaskGroupFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskGroupFlagName := fmt.Sprintf("%v.TaskGroup", cmdPrefix)
	if cmd.Flags().Changed(taskGroupFlagName) {

		var taskGroupFlagName string
		if cmdPrefix == "" {
			taskGroupFlagName = "TaskGroup"
		} else {
			taskGroupFlagName = fmt.Sprintf("%v.TaskGroup", cmdPrefix)
		}

		taskGroupFlagValue, err := cmd.Flags().GetString(taskGroupFlagName)
		if err != nil {
			return err, false
		}
		m.TaskGroup = taskGroupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskTaskNameFlags(depth int, m *models.PortainereeNomadSnapshotTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskNameFlagName := fmt.Sprintf("%v.TaskName", cmdPrefix)
	if cmd.Flags().Changed(taskNameFlagName) {

		var taskNameFlagName string
		if cmdPrefix == "" {
			taskNameFlagName = "TaskName"
		} else {
			taskNameFlagName = fmt.Sprintf("%v.TaskName", cmdPrefix)
		}

		taskNameFlagValue, err := cmd.Flags().GetString(taskNameFlagName)
		if err != nil {
			return err, false
		}
		m.TaskName = taskNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
