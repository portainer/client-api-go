// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeEdgeJob

// register flags to command
func registerModelPortainereeEdgeJobFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEdgeJobCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobCronExpression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobEdgeGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobEndpoints(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobRecurring(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobScriptPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeJobGroupLogsCollection(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEdgeJobCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdDescription := ``

	var createdFlagName string
	if cmdPrefix == "" {
		createdFlagName = "Created"
	} else {
		createdFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
	}

	var createdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(createdFlagName, createdFlagDefault, createdDescription)

	return nil
}

func registerPortainereeEdgeJobCronExpression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cronExpressionDescription := ``

	var cronExpressionFlagName string
	if cmdPrefix == "" {
		cronExpressionFlagName = "CronExpression"
	} else {
		cronExpressionFlagName = fmt.Sprintf("%v.CronExpression", cmdPrefix)
	}

	var cronExpressionFlagDefault string

	_ = cmd.PersistentFlags().String(cronExpressionFlagName, cronExpressionFlagDefault, cronExpressionDescription)

	return nil
}

func registerPortainereeEdgeJobEdgeGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: EdgeGroups []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEdgeJobEndpoints(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Endpoints map[string]PortainereeEdgeJobEndpointMeta map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEdgeJobID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `EdgeJob Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeEdgeJobName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeEdgeJobRecurring(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	recurringDescription := ``

	var recurringFlagName string
	if cmdPrefix == "" {
		recurringFlagName = "Recurring"
	} else {
		recurringFlagName = fmt.Sprintf("%v.Recurring", cmdPrefix)
	}

	var recurringFlagDefault bool

	_ = cmd.PersistentFlags().Bool(recurringFlagName, recurringFlagDefault, recurringDescription)

	return nil
}

func registerPortainereeEdgeJobScriptPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scriptPathDescription := ``

	var scriptPathFlagName string
	if cmdPrefix == "" {
		scriptPathFlagName = "ScriptPath"
	} else {
		scriptPathFlagName = fmt.Sprintf("%v.ScriptPath", cmdPrefix)
	}

	var scriptPathFlagDefault string

	_ = cmd.PersistentFlags().String(scriptPathFlagName, scriptPathFlagDefault, scriptPathDescription)

	return nil
}

func registerPortainereeEdgeJobVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "Version"
	} else {
		versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerPortainereeEdgeJobGroupLogsCollection(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: groupLogsCollection map[string]PortainereeEdgeJobEndpointMeta map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEdgeJobFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAdded := retrievePortainereeEdgeJobCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, cronExpressionAdded := retrievePortainereeEdgeJobCronExpressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cronExpressionAdded

	err, edgeGroupsAdded := retrievePortainereeEdgeJobEdgeGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeGroupsAdded

	err, endpointsAdded := retrievePortainereeEdgeJobEndpointsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointsAdded

	err, idAdded := retrievePortainereeEdgeJobIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrievePortainereeEdgeJobNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, recurringAdded := retrievePortainereeEdgeJobRecurringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || recurringAdded

	err, scriptPathAdded := retrievePortainereeEdgeJobScriptPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scriptPathAdded

	err, versionAdded := retrievePortainereeEdgeJobVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, groupLogsCollectionAdded := retrievePortainereeEdgeJobGroupLogsCollectionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupLogsCollectionAdded

	return nil, retAdded
}

func retrievePortainereeEdgeJobCreatedFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdFlagName := fmt.Sprintf("%v.Created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		var createdFlagName string
		if cmdPrefix == "" {
			createdFlagName = "Created"
		} else {
			createdFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
		}

		createdFlagValue, err := cmd.Flags().GetInt64(createdFlagName)
		if err != nil {
			return err, false
		}
		m.Created = createdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobCronExpressionFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cronExpressionFlagName := fmt.Sprintf("%v.CronExpression", cmdPrefix)
	if cmd.Flags().Changed(cronExpressionFlagName) {

		var cronExpressionFlagName string
		if cmdPrefix == "" {
			cronExpressionFlagName = "CronExpression"
		} else {
			cronExpressionFlagName = fmt.Sprintf("%v.CronExpression", cmdPrefix)
		}

		cronExpressionFlagValue, err := cmd.Flags().GetString(cronExpressionFlagName)
		if err != nil {
			return err, false
		}
		m.CronExpression = cronExpressionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobEdgeGroupsFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeGroupsFlagName := fmt.Sprintf("%v.EdgeGroups", cmdPrefix)
	if cmd.Flags().Changed(edgeGroupsFlagName) {
		// warning: EdgeGroups array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobEndpointsFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointsFlagName := fmt.Sprintf("%v.Endpoints", cmdPrefix)
	if cmd.Flags().Changed(endpointsFlagName) {
		// warning: Endpoints map type map[string]PortainereeEdgeJobEndpointMeta is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobIDFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobNameFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobRecurringFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	recurringFlagName := fmt.Sprintf("%v.Recurring", cmdPrefix)
	if cmd.Flags().Changed(recurringFlagName) {

		var recurringFlagName string
		if cmdPrefix == "" {
			recurringFlagName = "Recurring"
		} else {
			recurringFlagName = fmt.Sprintf("%v.Recurring", cmdPrefix)
		}

		recurringFlagValue, err := cmd.Flags().GetBool(recurringFlagName)
		if err != nil {
			return err, false
		}
		m.Recurring = &recurringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobScriptPathFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scriptPathFlagName := fmt.Sprintf("%v.ScriptPath", cmdPrefix)
	if cmd.Flags().Changed(scriptPathFlagName) {

		var scriptPathFlagName string
		if cmdPrefix == "" {
			scriptPathFlagName = "ScriptPath"
		} else {
			scriptPathFlagName = fmt.Sprintf("%v.ScriptPath", cmdPrefix)
		}

		scriptPathFlagValue, err := cmd.Flags().GetString(scriptPathFlagName)
		if err != nil {
			return err, false
		}
		m.ScriptPath = scriptPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobVersionFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "Version"
		} else {
			versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeJobGroupLogsCollectionFlags(depth int, m *models.PortainereeEdgeJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupLogsCollectionFlagName := fmt.Sprintf("%v.groupLogsCollection", cmdPrefix)
	if cmd.Flags().Changed(groupLogsCollectionFlagName) {
		// warning: groupLogsCollection map type map[string]PortainereeEdgeJobEndpointMeta is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
