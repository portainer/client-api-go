// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for StacksStackFileResponse

// register flags to command
func registerModelStacksStackFileResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksStackFileResponseStackFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksStackFileResponseStackFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackFileContentDescription := `Content of the Stack file`

	var stackFileContentFlagName string
	if cmdPrefix == "" {
		stackFileContentFlagName = "StackFileContent"
	} else {
		stackFileContentFlagName = fmt.Sprintf("%v.StackFileContent", cmdPrefix)
	}

	var stackFileContentFlagDefault string

	_ = cmd.PersistentFlags().String(stackFileContentFlagName, stackFileContentFlagDefault, stackFileContentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksStackFileResponseFlags(depth int, m *models.StacksStackFileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, stackFileContentAdded := retrieveStacksStackFileResponseStackFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackFileContentAdded

	return nil, retAdded
}

func retrieveStacksStackFileResponseStackFileContentFlags(depth int, m *models.StacksStackFileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackFileContentFlagName := fmt.Sprintf("%v.StackFileContent", cmdPrefix)
	if cmd.Flags().Changed(stackFileContentFlagName) {

		var stackFileContentFlagName string
		if cmdPrefix == "" {
			stackFileContentFlagName = "StackFileContent"
		} else {
			stackFileContentFlagName = fmt.Sprintf("%v.StackFileContent", cmdPrefix)
		}

		stackFileContentFlagValue, err := cmd.Flags().GetString(stackFileContentFlagName)
		if err != nil {
			return err, false
		}
		m.StackFileContent = stackFileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}
