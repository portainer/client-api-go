// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeResourceControl

// register flags to command
func registerModelPortainereeResourceControlFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeResourceControlAccessLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlAdministratorsOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlOwnerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlPublic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlResourceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlSubResourceIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlSystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlTeamAccesses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeResourceControlUserAccesses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeResourceControlAccessLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessLevelDescription := ``

	var accessLevelFlagName string
	if cmdPrefix == "" {
		accessLevelFlagName = "AccessLevel"
	} else {
		accessLevelFlagName = fmt.Sprintf("%v.AccessLevel", cmdPrefix)
	}

	var accessLevelFlagDefault int64

	_ = cmd.PersistentFlags().Int64(accessLevelFlagName, accessLevelFlagDefault, accessLevelDescription)

	return nil
}

func registerPortainereeResourceControlAdministratorsOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	administratorsOnlyDescription := `Permit access to resource only to admins`

	var administratorsOnlyFlagName string
	if cmdPrefix == "" {
		administratorsOnlyFlagName = "AdministratorsOnly"
	} else {
		administratorsOnlyFlagName = fmt.Sprintf("%v.AdministratorsOnly", cmdPrefix)
	}

	var administratorsOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(administratorsOnlyFlagName, administratorsOnlyFlagDefault, administratorsOnlyDescription)

	return nil
}

func registerPortainereeResourceControlID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `ResourceControl Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeResourceControlOwnerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerIdDescription := `Deprecated fields
Deprecated in DBVersion == 2`

	var ownerIdFlagName string
	if cmdPrefix == "" {
		ownerIdFlagName = "OwnerId"
	} else {
		ownerIdFlagName = fmt.Sprintf("%v.OwnerId", cmdPrefix)
	}

	var ownerIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ownerIdFlagName, ownerIdFlagDefault, ownerIdDescription)

	return nil
}

func registerPortainereeResourceControlPublic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicDescription := `Permit access to the associated resource to any user`

	var publicFlagName string
	if cmdPrefix == "" {
		publicFlagName = "Public"
	} else {
		publicFlagName = fmt.Sprintf("%v.Public", cmdPrefix)
	}

	var publicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publicFlagName, publicFlagDefault, publicDescription)

	return nil
}

func registerPortainereeResourceControlResourceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceIdDescription := `Docker resource identifier on which access control will be applied.\
In the case of a resource control applied to a stack, use the stack name as identifier`

	var resourceIdFlagName string
	if cmdPrefix == "" {
		resourceIdFlagName = "ResourceId"
	} else {
		resourceIdFlagName = fmt.Sprintf("%v.ResourceId", cmdPrefix)
	}

	var resourceIdFlagDefault string

	_ = cmd.PersistentFlags().String(resourceIdFlagName, resourceIdFlagDefault, resourceIdDescription)

	return nil
}

func registerPortainereeResourceControlSubResourceIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SubResourceIds []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeResourceControlSystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	systemDescription := ``

	var systemFlagName string
	if cmdPrefix == "" {
		systemFlagName = "System"
	} else {
		systemFlagName = fmt.Sprintf("%v.System", cmdPrefix)
	}

	var systemFlagDefault bool

	_ = cmd.PersistentFlags().Bool(systemFlagName, systemFlagDefault, systemDescription)

	return nil
}

func registerPortainereeResourceControlTeamAccesses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: TeamAccesses []*PortainereeTeamResourceAccess array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeResourceControlType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Type of Docker resource. Valid values are: 1- container, 2 -service
3 - volume, 4 - secret, 5 - stack, 6 - config or 7 - custom template`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerPortainereeResourceControlUserAccesses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: UserAccesses []*PortainereeUserResourceAccess array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeResourceControlFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessLevelAdded := retrievePortainereeResourceControlAccessLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessLevelAdded

	err, administratorsOnlyAdded := retrievePortainereeResourceControlAdministratorsOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || administratorsOnlyAdded

	err, idAdded := retrievePortainereeResourceControlIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, ownerIdAdded := retrievePortainereeResourceControlOwnerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerIdAdded

	err, publicAdded := retrievePortainereeResourceControlPublicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicAdded

	err, resourceIdAdded := retrievePortainereeResourceControlResourceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceIdAdded

	err, subResourceIdsAdded := retrievePortainereeResourceControlSubResourceIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subResourceIdsAdded

	err, systemAdded := retrievePortainereeResourceControlSystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || systemAdded

	err, teamAccessesAdded := retrievePortainereeResourceControlTeamAccessesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAccessesAdded

	err, typeAdded := retrievePortainereeResourceControlTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, userAccessesAdded := retrievePortainereeResourceControlUserAccessesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAccessesAdded

	return nil, retAdded
}

func retrievePortainereeResourceControlAccessLevelFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessLevelFlagName := fmt.Sprintf("%v.AccessLevel", cmdPrefix)
	if cmd.Flags().Changed(accessLevelFlagName) {

		var accessLevelFlagName string
		if cmdPrefix == "" {
			accessLevelFlagName = "AccessLevel"
		} else {
			accessLevelFlagName = fmt.Sprintf("%v.AccessLevel", cmdPrefix)
		}

		accessLevelFlagValue, err := cmd.Flags().GetInt64(accessLevelFlagName)
		if err != nil {
			return err, false
		}
		m.AccessLevel = accessLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlAdministratorsOnlyFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	administratorsOnlyFlagName := fmt.Sprintf("%v.AdministratorsOnly", cmdPrefix)
	if cmd.Flags().Changed(administratorsOnlyFlagName) {

		var administratorsOnlyFlagName string
		if cmdPrefix == "" {
			administratorsOnlyFlagName = "AdministratorsOnly"
		} else {
			administratorsOnlyFlagName = fmt.Sprintf("%v.AdministratorsOnly", cmdPrefix)
		}

		administratorsOnlyFlagValue, err := cmd.Flags().GetBool(administratorsOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.AdministratorsOnly = &administratorsOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlIDFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlOwnerIDFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerIdFlagName := fmt.Sprintf("%v.OwnerId", cmdPrefix)
	if cmd.Flags().Changed(ownerIdFlagName) {

		var ownerIdFlagName string
		if cmdPrefix == "" {
			ownerIdFlagName = "OwnerId"
		} else {
			ownerIdFlagName = fmt.Sprintf("%v.OwnerId", cmdPrefix)
		}

		ownerIdFlagValue, err := cmd.Flags().GetInt64(ownerIdFlagName)
		if err != nil {
			return err, false
		}
		m.OwnerID = ownerIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlPublicFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicFlagName := fmt.Sprintf("%v.Public", cmdPrefix)
	if cmd.Flags().Changed(publicFlagName) {

		var publicFlagName string
		if cmdPrefix == "" {
			publicFlagName = "Public"
		} else {
			publicFlagName = fmt.Sprintf("%v.Public", cmdPrefix)
		}

		publicFlagValue, err := cmd.Flags().GetBool(publicFlagName)
		if err != nil {
			return err, false
		}
		m.Public = &publicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlResourceIDFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceIdFlagName := fmt.Sprintf("%v.ResourceId", cmdPrefix)
	if cmd.Flags().Changed(resourceIdFlagName) {

		var resourceIdFlagName string
		if cmdPrefix == "" {
			resourceIdFlagName = "ResourceId"
		} else {
			resourceIdFlagName = fmt.Sprintf("%v.ResourceId", cmdPrefix)
		}

		resourceIdFlagValue, err := cmd.Flags().GetString(resourceIdFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceID = resourceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlSubResourceIdsFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subResourceIdsFlagName := fmt.Sprintf("%v.SubResourceIds", cmdPrefix)
	if cmd.Flags().Changed(subResourceIdsFlagName) {
		// warning: SubResourceIds array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlSystemFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	systemFlagName := fmt.Sprintf("%v.System", cmdPrefix)
	if cmd.Flags().Changed(systemFlagName) {

		var systemFlagName string
		if cmdPrefix == "" {
			systemFlagName = "System"
		} else {
			systemFlagName = fmt.Sprintf("%v.System", cmdPrefix)
		}

		systemFlagValue, err := cmd.Flags().GetBool(systemFlagName)
		if err != nil {
			return err, false
		}
		m.System = &systemFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlTeamAccessesFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamAccessesFlagName := fmt.Sprintf("%v.TeamAccesses", cmdPrefix)
	if cmd.Flags().Changed(teamAccessesFlagName) {
		// warning: TeamAccesses array type []*PortainereeTeamResourceAccess is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlTypeFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeResourceControlUserAccessesFlags(depth int, m *models.PortainereeResourceControl, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userAccessesFlagName := fmt.Sprintf("%v.UserAccesses", cmdPrefix)
	if cmd.Flags().Changed(userAccessesFlagName) {
		// warning: UserAccesses array type []*PortainereeUserResourceAccess is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
