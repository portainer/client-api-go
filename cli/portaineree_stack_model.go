// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeStack

// register flags to command
func registerModelPortainereeStackFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeStackAdditionalFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackAutoUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackEntryPoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackOption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackResourceControl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackSwarmID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackCreatedBy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackCreationDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackFilesystemPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackFromAppTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackGitConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackIsComposeFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackProjectPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackSupportRelativePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackUpdateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackUpdatedBy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackWebhook(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeStackAdditionalFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: AdditionalFiles []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeStackAutoUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var autoUpdateFlagName string
	if cmdPrefix == "" {
		autoUpdateFlagName = "AutoUpdate"
	} else {
		autoUpdateFlagName = fmt.Sprintf("%v.AutoUpdate", cmdPrefix)
	}

	if err := registerModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeStackEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := `Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "EndpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.EndpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerPortainereeStackEntryPoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entryPointDescription := `Path to the Stack file`

	var entryPointFlagName string
	if cmdPrefix == "" {
		entryPointFlagName = "EntryPoint"
	} else {
		entryPointFlagName = fmt.Sprintf("%v.EntryPoint", cmdPrefix)
	}

	var entryPointFlagDefault string

	_ = cmd.PersistentFlags().String(entryPointFlagName, entryPointFlagDefault, entryPointDescription)

	return nil
}

func registerPortainereeStackEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Env []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeStackID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Stack Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeStackName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Stack name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeStackOption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var optionFlagName string
	if cmdPrefix == "" {
		optionFlagName = "Option"
	} else {
		optionFlagName = fmt.Sprintf("%v.Option", cmdPrefix)
	}

	if err := registerModelPortainereeStackOptionFlags(depth+1, optionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeStackResourceControl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var resourceControlFlagName string
	if cmdPrefix == "" {
		resourceControlFlagName = "ResourceControl"
	} else {
		resourceControlFlagName = fmt.Sprintf("%v.ResourceControl", cmdPrefix)
	}

	if err := registerModelPortainereeResourceControlFlags(depth+1, resourceControlFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeStackStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Stack status (1 - active, 2 - inactive)`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "Status"
	} else {
		statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	var statusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerPortainereeStackSwarmID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	swarmIdDescription := `Cluster identifier of the Swarm cluster where the stack is deployed`

	var swarmIdFlagName string
	if cmdPrefix == "" {
		swarmIdFlagName = "SwarmId"
	} else {
		swarmIdFlagName = fmt.Sprintf("%v.SwarmId", cmdPrefix)
	}

	var swarmIdFlagDefault string

	_ = cmd.PersistentFlags().String(swarmIdFlagName, swarmIdFlagDefault, swarmIdDescription)

	return nil
}

func registerPortainereeStackType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Stack type. 1 for a Swarm stack, 2 for a Compose stack, 3 for a Kubernetes stack`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerPortainereeStackCreatedBy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdByDescription := `The username which created this stack`

	var createdByFlagName string
	if cmdPrefix == "" {
		createdByFlagName = "createdBy"
	} else {
		createdByFlagName = fmt.Sprintf("%v.createdBy", cmdPrefix)
	}

	var createdByFlagDefault string

	_ = cmd.PersistentFlags().String(createdByFlagName, createdByFlagDefault, createdByDescription)

	return nil
}

func registerPortainereeStackCreationDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationDateDescription := `The date in unix time when stack was created`

	var creationDateFlagName string
	if cmdPrefix == "" {
		creationDateFlagName = "creationDate"
	} else {
		creationDateFlagName = fmt.Sprintf("%v.creationDate", cmdPrefix)
	}

	var creationDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(creationDateFlagName, creationDateFlagDefault, creationDateDescription)

	return nil
}

func registerPortainereeStackFilesystemPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	filesystemPathDescription := `Network(Swarm) or local(Standalone) filesystem path`

	var filesystemPathFlagName string
	if cmdPrefix == "" {
		filesystemPathFlagName = "filesystemPath"
	} else {
		filesystemPathFlagName = fmt.Sprintf("%v.filesystemPath", cmdPrefix)
	}

	var filesystemPathFlagDefault string

	_ = cmd.PersistentFlags().String(filesystemPathFlagName, filesystemPathFlagDefault, filesystemPathDescription)

	return nil
}

func registerPortainereeStackFromAppTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fromAppTemplateDescription := `Whether the stack is from a app template`

	var fromAppTemplateFlagName string
	if cmdPrefix == "" {
		fromAppTemplateFlagName = "fromAppTemplate"
	} else {
		fromAppTemplateFlagName = fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
	}

	var fromAppTemplateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(fromAppTemplateFlagName, fromAppTemplateFlagDefault, fromAppTemplateDescription)

	return nil
}

func registerPortainereeStackGitConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var gitConfigFlagName string
	if cmdPrefix == "" {
		gitConfigFlagName = "gitConfig"
	} else {
		gitConfigFlagName = fmt.Sprintf("%v.gitConfig", cmdPrefix)
	}

	if err := registerModelGittypesRepoConfigFlags(depth+1, gitConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeStackIsComposeFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isComposeFormatDescription := `IsComposeFormat indicates if the Kubernetes stack is created from a Docker Compose file`

	var isComposeFormatFlagName string
	if cmdPrefix == "" {
		isComposeFormatFlagName = "isComposeFormat"
	} else {
		isComposeFormatFlagName = fmt.Sprintf("%v.isComposeFormat", cmdPrefix)
	}

	var isComposeFormatFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isComposeFormatFlagName, isComposeFormatFlagDefault, isComposeFormatDescription)

	return nil
}

func registerPortainereeStackNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := `Kubernetes namespace if stack is a kube application`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerPortainereeStackProjectPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectPathDescription := `Path on disk to the repository hosting the Stack file`

	var projectPathFlagName string
	if cmdPrefix == "" {
		projectPathFlagName = "projectPath"
	} else {
		projectPathFlagName = fmt.Sprintf("%v.projectPath", cmdPrefix)
	}

	var projectPathFlagDefault string

	_ = cmd.PersistentFlags().String(projectPathFlagName, projectPathFlagDefault, projectPathDescription)

	return nil
}

func registerPortainereeStackSupportRelativePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	supportRelativePathDescription := `If stack support relative path volume`

	var supportRelativePathFlagName string
	if cmdPrefix == "" {
		supportRelativePathFlagName = "supportRelativePath"
	} else {
		supportRelativePathFlagName = fmt.Sprintf("%v.supportRelativePath", cmdPrefix)
	}

	var supportRelativePathFlagDefault bool

	_ = cmd.PersistentFlags().Bool(supportRelativePathFlagName, supportRelativePathFlagDefault, supportRelativePathDescription)

	return nil
}

func registerPortainereeStackUpdateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateDateDescription := `The date in unix time when stack was last updated`

	var updateDateFlagName string
	if cmdPrefix == "" {
		updateDateFlagName = "updateDate"
	} else {
		updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
	}

	var updateDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(updateDateFlagName, updateDateFlagDefault, updateDateDescription)

	return nil
}

func registerPortainereeStackUpdatedBy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedByDescription := `The username which last updated this stack`

	var updatedByFlagName string
	if cmdPrefix == "" {
		updatedByFlagName = "updatedBy"
	} else {
		updatedByFlagName = fmt.Sprintf("%v.updatedBy", cmdPrefix)
	}

	var updatedByFlagDefault string

	_ = cmd.PersistentFlags().String(updatedByFlagName, updatedByFlagDefault, updatedByDescription)

	return nil
}

func registerPortainereeStackWebhook(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webhookDescription := `A UUID to identify a webhook. The stack will be force updated and pull the latest image when the webhook was invoked.`

	var webhookFlagName string
	if cmdPrefix == "" {
		webhookFlagName = "webhook"
	} else {
		webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
	}

	var webhookFlagDefault string

	_ = cmd.PersistentFlags().String(webhookFlagName, webhookFlagDefault, webhookDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeStackFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, additionalFilesAdded := retrievePortainereeStackAdditionalFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || additionalFilesAdded

	err, autoUpdateAdded := retrievePortainereeStackAutoUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded

	err, endpointIdAdded := retrievePortainereeStackEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, entryPointAdded := retrievePortainereeStackEntryPointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entryPointAdded

	err, envAdded := retrievePortainereeStackEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, idAdded := retrievePortainereeStackIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrievePortainereeStackNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, optionAdded := retrievePortainereeStackOptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optionAdded

	err, resourceControlAdded := retrievePortainereeStackResourceControlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceControlAdded

	err, statusAdded := retrievePortainereeStackStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, swarmIdAdded := retrievePortainereeStackSwarmIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || swarmIdAdded

	err, typeAdded := retrievePortainereeStackTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, createdByAdded := retrievePortainereeStackCreatedByFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdByAdded

	err, creationDateAdded := retrievePortainereeStackCreationDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationDateAdded

	err, filesystemPathAdded := retrievePortainereeStackFilesystemPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filesystemPathAdded

	err, fromAppTemplateAdded := retrievePortainereeStackFromAppTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fromAppTemplateAdded

	err, gitConfigAdded := retrievePortainereeStackGitConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitConfigAdded

	err, isComposeFormatAdded := retrievePortainereeStackIsComposeFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isComposeFormatAdded

	err, namespaceAdded := retrievePortainereeStackNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, projectPathAdded := retrievePortainereeStackProjectPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectPathAdded

	err, supportRelativePathAdded := retrievePortainereeStackSupportRelativePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || supportRelativePathAdded

	err, updateDateAdded := retrievePortainereeStackUpdateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateDateAdded

	err, updatedByAdded := retrievePortainereeStackUpdatedByFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedByAdded

	err, webhookAdded := retrievePortainereeStackWebhookFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webhookAdded

	return nil, retAdded
}

func retrievePortainereeStackAdditionalFilesFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	additionalFilesFlagName := fmt.Sprintf("%v.AdditionalFiles", cmdPrefix)
	if cmd.Flags().Changed(additionalFilesFlagName) {
		// warning: AdditionalFiles array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeStackAutoUpdateFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpdateFlagName := fmt.Sprintf("%v.AutoUpdate", cmdPrefix)
	if cmd.Flags().Changed(autoUpdateFlagName) {
		// info: complex object AutoUpdate PortainereeStackAutoUpdate is retrieved outside this Changed() block
	}
	autoUpdateFlagValue := m.AutoUpdate
	if swag.IsZero(autoUpdateFlagValue) {
		autoUpdateFlagValue = &models.PortainereeStackAutoUpdate{}
	}

	err, autoUpdateAdded := retrieveModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagValue, autoUpdateFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded
	if autoUpdateAdded {
		m.AutoUpdate = autoUpdateFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeStackEndpointIDFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.EndpointId", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "EndpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.EndpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackEntryPointFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entryPointFlagName := fmt.Sprintf("%v.EntryPoint", cmdPrefix)
	if cmd.Flags().Changed(entryPointFlagName) {

		var entryPointFlagName string
		if cmdPrefix == "" {
			entryPointFlagName = "EntryPoint"
		} else {
			entryPointFlagName = fmt.Sprintf("%v.EntryPoint", cmdPrefix)
		}

		entryPointFlagValue, err := cmd.Flags().GetString(entryPointFlagName)
		if err != nil {
			return err, false
		}
		m.EntryPoint = entryPointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackEnvFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.Env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: Env array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeStackIDFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackNameFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackOptionFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optionFlagName := fmt.Sprintf("%v.Option", cmdPrefix)
	if cmd.Flags().Changed(optionFlagName) {
		// info: complex object Option PortainereeStackOption is retrieved outside this Changed() block
	}
	optionFlagValue := m.Option
	if swag.IsZero(optionFlagValue) {
		optionFlagValue = &models.PortainereeStackOption{}
	}

	err, optionAdded := retrieveModelPortainereeStackOptionFlags(depth+1, optionFlagValue, optionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optionAdded
	if optionAdded {
		m.Option = optionFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeStackResourceControlFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceControlFlagName := fmt.Sprintf("%v.ResourceControl", cmdPrefix)
	if cmd.Flags().Changed(resourceControlFlagName) {
		// info: complex object ResourceControl PortainereeResourceControl is retrieved outside this Changed() block
	}
	resourceControlFlagValue := m.ResourceControl
	if swag.IsZero(resourceControlFlagValue) {
		resourceControlFlagValue = &models.PortainereeResourceControl{}
	}

	err, resourceControlAdded := retrieveModelPortainereeResourceControlFlags(depth+1, resourceControlFlagValue, resourceControlFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceControlAdded
	if resourceControlAdded {
		m.ResourceControl = resourceControlFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeStackStatusFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "Status"
		} else {
			statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt64(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackSwarmIDFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	swarmIdFlagName := fmt.Sprintf("%v.SwarmId", cmdPrefix)
	if cmd.Flags().Changed(swarmIdFlagName) {

		var swarmIdFlagName string
		if cmdPrefix == "" {
			swarmIdFlagName = "SwarmId"
		} else {
			swarmIdFlagName = fmt.Sprintf("%v.SwarmId", cmdPrefix)
		}

		swarmIdFlagValue, err := cmd.Flags().GetString(swarmIdFlagName)
		if err != nil {
			return err, false
		}
		m.SwarmID = swarmIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackTypeFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackCreatedByFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdByFlagName := fmt.Sprintf("%v.createdBy", cmdPrefix)
	if cmd.Flags().Changed(createdByFlagName) {

		var createdByFlagName string
		if cmdPrefix == "" {
			createdByFlagName = "createdBy"
		} else {
			createdByFlagName = fmt.Sprintf("%v.createdBy", cmdPrefix)
		}

		createdByFlagValue, err := cmd.Flags().GetString(createdByFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedBy = createdByFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackCreationDateFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationDateFlagName := fmt.Sprintf("%v.creationDate", cmdPrefix)
	if cmd.Flags().Changed(creationDateFlagName) {

		var creationDateFlagName string
		if cmdPrefix == "" {
			creationDateFlagName = "creationDate"
		} else {
			creationDateFlagName = fmt.Sprintf("%v.creationDate", cmdPrefix)
		}

		creationDateFlagValue, err := cmd.Flags().GetInt64(creationDateFlagName)
		if err != nil {
			return err, false
		}
		m.CreationDate = creationDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackFilesystemPathFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filesystemPathFlagName := fmt.Sprintf("%v.filesystemPath", cmdPrefix)
	if cmd.Flags().Changed(filesystemPathFlagName) {

		var filesystemPathFlagName string
		if cmdPrefix == "" {
			filesystemPathFlagName = "filesystemPath"
		} else {
			filesystemPathFlagName = fmt.Sprintf("%v.filesystemPath", cmdPrefix)
		}

		filesystemPathFlagValue, err := cmd.Flags().GetString(filesystemPathFlagName)
		if err != nil {
			return err, false
		}
		m.FilesystemPath = filesystemPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackFromAppTemplateFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fromAppTemplateFlagName := fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
	if cmd.Flags().Changed(fromAppTemplateFlagName) {

		var fromAppTemplateFlagName string
		if cmdPrefix == "" {
			fromAppTemplateFlagName = "fromAppTemplate"
		} else {
			fromAppTemplateFlagName = fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
		}

		fromAppTemplateFlagValue, err := cmd.Flags().GetBool(fromAppTemplateFlagName)
		if err != nil {
			return err, false
		}
		m.FromAppTemplate = &fromAppTemplateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackGitConfigFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gitConfigFlagName := fmt.Sprintf("%v.gitConfig", cmdPrefix)
	if cmd.Flags().Changed(gitConfigFlagName) {
		// info: complex object gitConfig GittypesRepoConfig is retrieved outside this Changed() block
	}
	gitConfigFlagValue := m.GitConfig
	if swag.IsZero(gitConfigFlagValue) {
		gitConfigFlagValue = &models.GittypesRepoConfig{}
	}

	err, gitConfigAdded := retrieveModelGittypesRepoConfigFlags(depth+1, gitConfigFlagValue, gitConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitConfigAdded
	if gitConfigAdded {
		m.GitConfig = gitConfigFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeStackIsComposeFormatFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isComposeFormatFlagName := fmt.Sprintf("%v.isComposeFormat", cmdPrefix)
	if cmd.Flags().Changed(isComposeFormatFlagName) {

		var isComposeFormatFlagName string
		if cmdPrefix == "" {
			isComposeFormatFlagName = "isComposeFormat"
		} else {
			isComposeFormatFlagName = fmt.Sprintf("%v.isComposeFormat", cmdPrefix)
		}

		isComposeFormatFlagValue, err := cmd.Flags().GetBool(isComposeFormatFlagName)
		if err != nil {
			return err, false
		}
		m.IsComposeFormat = &isComposeFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackNamespaceFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackProjectPathFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectPathFlagName := fmt.Sprintf("%v.projectPath", cmdPrefix)
	if cmd.Flags().Changed(projectPathFlagName) {

		var projectPathFlagName string
		if cmdPrefix == "" {
			projectPathFlagName = "projectPath"
		} else {
			projectPathFlagName = fmt.Sprintf("%v.projectPath", cmdPrefix)
		}

		projectPathFlagValue, err := cmd.Flags().GetString(projectPathFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectPath = projectPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackSupportRelativePathFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	supportRelativePathFlagName := fmt.Sprintf("%v.supportRelativePath", cmdPrefix)
	if cmd.Flags().Changed(supportRelativePathFlagName) {

		var supportRelativePathFlagName string
		if cmdPrefix == "" {
			supportRelativePathFlagName = "supportRelativePath"
		} else {
			supportRelativePathFlagName = fmt.Sprintf("%v.supportRelativePath", cmdPrefix)
		}

		supportRelativePathFlagValue, err := cmd.Flags().GetBool(supportRelativePathFlagName)
		if err != nil {
			return err, false
		}
		m.SupportRelativePath = &supportRelativePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackUpdateDateFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateDateFlagName := fmt.Sprintf("%v.updateDate", cmdPrefix)
	if cmd.Flags().Changed(updateDateFlagName) {

		var updateDateFlagName string
		if cmdPrefix == "" {
			updateDateFlagName = "updateDate"
		} else {
			updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
		}

		updateDateFlagValue, err := cmd.Flags().GetInt64(updateDateFlagName)
		if err != nil {
			return err, false
		}
		m.UpdateDate = updateDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackUpdatedByFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedByFlagName := fmt.Sprintf("%v.updatedBy", cmdPrefix)
	if cmd.Flags().Changed(updatedByFlagName) {

		var updatedByFlagName string
		if cmdPrefix == "" {
			updatedByFlagName = "updatedBy"
		} else {
			updatedByFlagName = fmt.Sprintf("%v.updatedBy", cmdPrefix)
		}

		updatedByFlagValue, err := cmd.Flags().GetString(updatedByFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedBy = updatedByFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackWebhookFlags(depth int, m *models.PortainereeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webhookFlagName := fmt.Sprintf("%v.webhook", cmdPrefix)
	if cmd.Flags().Changed(webhookFlagName) {

		var webhookFlagName string
		if cmdPrefix == "" {
			webhookFlagName = "webhook"
		} else {
			webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
		}

		webhookFlagValue, err := cmd.Flags().GetString(webhookFlagName)
		if err != nil {
			return err, false
		}
		m.Webhook = webhookFlagValue

		retAdded = true
	}

	return nil, retAdded
}
