// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for ResourcecontrolsResourceControlUpdatePayload

// register flags to command
func registerModelResourcecontrolsResourceControlUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResourcecontrolsResourceControlUpdatePayloadAdministratorsOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlUpdatePayloadPublic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlUpdatePayloadTeams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlUpdatePayloadUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResourcecontrolsResourceControlUpdatePayloadAdministratorsOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	administratorsOnlyDescription := `Permit access to resource only to admins`

	var administratorsOnlyFlagName string
	if cmdPrefix == "" {
		administratorsOnlyFlagName = "administratorsOnly"
	} else {
		administratorsOnlyFlagName = fmt.Sprintf("%v.administratorsOnly", cmdPrefix)
	}

	var administratorsOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(administratorsOnlyFlagName, administratorsOnlyFlagDefault, administratorsOnlyDescription)

	return nil
}

func registerResourcecontrolsResourceControlUpdatePayloadPublic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicDescription := `Permit access to the associated resource to any user`

	var publicFlagName string
	if cmdPrefix == "" {
		publicFlagName = "public"
	} else {
		publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
	}

	var publicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publicFlagName, publicFlagDefault, publicDescription)

	return nil
}

func registerResourcecontrolsResourceControlUpdatePayloadTeams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: teams []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcecontrolsResourceControlUpdatePayloadUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: users []int64 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResourcecontrolsResourceControlUpdatePayloadFlags(depth int, m *models.ResourcecontrolsResourceControlUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, administratorsOnlyAdded := retrieveResourcecontrolsResourceControlUpdatePayloadAdministratorsOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || administratorsOnlyAdded

	err, publicAdded := retrieveResourcecontrolsResourceControlUpdatePayloadPublicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicAdded

	err, teamsAdded := retrieveResourcecontrolsResourceControlUpdatePayloadTeamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamsAdded

	err, usersAdded := retrieveResourcecontrolsResourceControlUpdatePayloadUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usersAdded

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlUpdatePayloadAdministratorsOnlyFlags(depth int, m *models.ResourcecontrolsResourceControlUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	administratorsOnlyFlagName := fmt.Sprintf("%v.administratorsOnly", cmdPrefix)
	if cmd.Flags().Changed(administratorsOnlyFlagName) {

		var administratorsOnlyFlagName string
		if cmdPrefix == "" {
			administratorsOnlyFlagName = "administratorsOnly"
		} else {
			administratorsOnlyFlagName = fmt.Sprintf("%v.administratorsOnly", cmdPrefix)
		}

		administratorsOnlyFlagValue, err := cmd.Flags().GetBool(administratorsOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.AdministratorsOnly = &administratorsOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlUpdatePayloadPublicFlags(depth int, m *models.ResourcecontrolsResourceControlUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicFlagName := fmt.Sprintf("%v.public", cmdPrefix)
	if cmd.Flags().Changed(publicFlagName) {

		var publicFlagName string
		if cmdPrefix == "" {
			publicFlagName = "public"
		} else {
			publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
		}

		publicFlagValue, err := cmd.Flags().GetBool(publicFlagName)
		if err != nil {
			return err, false
		}
		m.Public = &publicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlUpdatePayloadTeamsFlags(depth int, m *models.ResourcecontrolsResourceControlUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamsFlagName := fmt.Sprintf("%v.teams", cmdPrefix)
	if cmd.Flags().Changed(teamsFlagName) {
		// warning: teams array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlUpdatePayloadUsersFlags(depth int, m *models.ResourcecontrolsResourceControlUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usersFlagName := fmt.Sprintf("%v.users", cmdPrefix)
	if cmd.Flags().Changed(usersFlagName) {
		// warning: users array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
