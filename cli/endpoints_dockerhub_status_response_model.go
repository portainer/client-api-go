// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointsDockerhubStatusResponse

// register flags to command
func registerModelEndpointsDockerhubStatusResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointsDockerhubStatusResponseLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsDockerhubStatusResponseRemaining(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsDockerhubStatusResponseLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	limitDescription := `Daily limit`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}

func registerEndpointsDockerhubStatusResponseRemaining(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remainingDescription := `Remaiming images to pull`

	var remainingFlagName string
	if cmdPrefix == "" {
		remainingFlagName = "remaining"
	} else {
		remainingFlagName = fmt.Sprintf("%v.remaining", cmdPrefix)
	}

	var remainingFlagDefault int64

	_ = cmd.PersistentFlags().Int64(remainingFlagName, remainingFlagDefault, remainingDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointsDockerhubStatusResponseFlags(depth int, m *models.EndpointsDockerhubStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, limitAdded := retrieveEndpointsDockerhubStatusResponseLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || limitAdded

	err, remainingAdded := retrieveEndpointsDockerhubStatusResponseRemainingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remainingAdded

	return nil, retAdded
}

func retrieveEndpointsDockerhubStatusResponseLimitFlags(depth int, m *models.EndpointsDockerhubStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	limitFlagName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(limitFlagName) {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt64(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = limitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsDockerhubStatusResponseRemainingFlags(depth int, m *models.EndpointsDockerhubStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remainingFlagName := fmt.Sprintf("%v.remaining", cmdPrefix)
	if cmd.Flags().Changed(remainingFlagName) {

		var remainingFlagName string
		if cmdPrefix == "" {
			remainingFlagName = "remaining"
		} else {
			remainingFlagName = fmt.Sprintf("%v.remaining", cmdPrefix)
		}

		remainingFlagValue, err := cmd.Flags().GetInt64(remainingFlagName)
		if err != nil {
			return err, false
		}
		m.Remaining = remainingFlagValue

		retAdded = true
	}

	return nil, retAdded
}
