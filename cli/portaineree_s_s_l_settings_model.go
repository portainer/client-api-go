// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeSSLSettings

// register flags to command
func registerModelPortainereeSSLSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeSSLSettingsCaCertPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSSLSettingsCertPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSSLSettingsHTTPEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSSLSettingsKeyPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSSLSettingsSelfSigned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSSLSettingsCaCertPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	caCertPathDescription := ``

	var caCertPathFlagName string
	if cmdPrefix == "" {
		caCertPathFlagName = "caCertPath"
	} else {
		caCertPathFlagName = fmt.Sprintf("%v.caCertPath", cmdPrefix)
	}

	var caCertPathFlagDefault string

	_ = cmd.PersistentFlags().String(caCertPathFlagName, caCertPathFlagDefault, caCertPathDescription)

	return nil
}

func registerPortainereeSSLSettingsCertPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certPathDescription := ``

	var certPathFlagName string
	if cmdPrefix == "" {
		certPathFlagName = "certPath"
	} else {
		certPathFlagName = fmt.Sprintf("%v.certPath", cmdPrefix)
	}

	var certPathFlagDefault string

	_ = cmd.PersistentFlags().String(certPathFlagName, certPathFlagDefault, certPathDescription)

	return nil
}

func registerPortainereeSSLSettingsHTTPEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpEnabledDescription := ``

	var httpEnabledFlagName string
	if cmdPrefix == "" {
		httpEnabledFlagName = "httpEnabled"
	} else {
		httpEnabledFlagName = fmt.Sprintf("%v.httpEnabled", cmdPrefix)
	}

	var httpEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(httpEnabledFlagName, httpEnabledFlagDefault, httpEnabledDescription)

	return nil
}

func registerPortainereeSSLSettingsKeyPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyPathDescription := ``

	var keyPathFlagName string
	if cmdPrefix == "" {
		keyPathFlagName = "keyPath"
	} else {
		keyPathFlagName = fmt.Sprintf("%v.keyPath", cmdPrefix)
	}

	var keyPathFlagDefault string

	_ = cmd.PersistentFlags().String(keyPathFlagName, keyPathFlagDefault, keyPathDescription)

	return nil
}

func registerPortainereeSSLSettingsSelfSigned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	selfSignedDescription := ``

	var selfSignedFlagName string
	if cmdPrefix == "" {
		selfSignedFlagName = "selfSigned"
	} else {
		selfSignedFlagName = fmt.Sprintf("%v.selfSigned", cmdPrefix)
	}

	var selfSignedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(selfSignedFlagName, selfSignedFlagDefault, selfSignedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeSSLSettingsFlags(depth int, m *models.PortainereeSSLSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, caCertPathAdded := retrievePortainereeSSLSettingsCaCertPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || caCertPathAdded

	err, certPathAdded := retrievePortainereeSSLSettingsCertPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certPathAdded

	err, httpEnabledAdded := retrievePortainereeSSLSettingsHTTPEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpEnabledAdded

	err, keyPathAdded := retrievePortainereeSSLSettingsKeyPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyPathAdded

	err, selfSignedAdded := retrievePortainereeSSLSettingsSelfSignedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || selfSignedAdded

	return nil, retAdded
}

func retrievePortainereeSSLSettingsCaCertPathFlags(depth int, m *models.PortainereeSSLSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	caCertPathFlagName := fmt.Sprintf("%v.caCertPath", cmdPrefix)
	if cmd.Flags().Changed(caCertPathFlagName) {

		var caCertPathFlagName string
		if cmdPrefix == "" {
			caCertPathFlagName = "caCertPath"
		} else {
			caCertPathFlagName = fmt.Sprintf("%v.caCertPath", cmdPrefix)
		}

		caCertPathFlagValue, err := cmd.Flags().GetString(caCertPathFlagName)
		if err != nil {
			return err, false
		}
		m.CaCertPath = caCertPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSSLSettingsCertPathFlags(depth int, m *models.PortainereeSSLSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certPathFlagName := fmt.Sprintf("%v.certPath", cmdPrefix)
	if cmd.Flags().Changed(certPathFlagName) {

		var certPathFlagName string
		if cmdPrefix == "" {
			certPathFlagName = "certPath"
		} else {
			certPathFlagName = fmt.Sprintf("%v.certPath", cmdPrefix)
		}

		certPathFlagValue, err := cmd.Flags().GetString(certPathFlagName)
		if err != nil {
			return err, false
		}
		m.CertPath = certPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSSLSettingsHTTPEnabledFlags(depth int, m *models.PortainereeSSLSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpEnabledFlagName := fmt.Sprintf("%v.httpEnabled", cmdPrefix)
	if cmd.Flags().Changed(httpEnabledFlagName) {

		var httpEnabledFlagName string
		if cmdPrefix == "" {
			httpEnabledFlagName = "httpEnabled"
		} else {
			httpEnabledFlagName = fmt.Sprintf("%v.httpEnabled", cmdPrefix)
		}

		httpEnabledFlagValue, err := cmd.Flags().GetBool(httpEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPEnabled = &httpEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSSLSettingsKeyPathFlags(depth int, m *models.PortainereeSSLSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyPathFlagName := fmt.Sprintf("%v.keyPath", cmdPrefix)
	if cmd.Flags().Changed(keyPathFlagName) {

		var keyPathFlagName string
		if cmdPrefix == "" {
			keyPathFlagName = "keyPath"
		} else {
			keyPathFlagName = fmt.Sprintf("%v.keyPath", cmdPrefix)
		}

		keyPathFlagValue, err := cmd.Flags().GetString(keyPathFlagName)
		if err != nil {
			return err, false
		}
		m.KeyPath = keyPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSSLSettingsSelfSignedFlags(depth int, m *models.PortainereeSSLSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	selfSignedFlagName := fmt.Sprintf("%v.selfSigned", cmdPrefix)
	if cmd.Flags().Changed(selfSignedFlagName) {

		var selfSignedFlagName string
		if cmdPrefix == "" {
			selfSignedFlagName = "selfSigned"
		} else {
			selfSignedFlagName = fmt.Sprintf("%v.selfSigned", cmdPrefix)
		}

		selfSignedFlagValue, err := cmd.Flags().GetBool(selfSignedFlagName)
		if err != nil {
			return err, false
		}
		m.SelfSigned = &selfSignedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
