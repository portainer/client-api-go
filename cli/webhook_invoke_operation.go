// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/stacks"

	"github.com/spf13/cobra"
)

// makeOperationStacksWebhookInvokeCmd returns a cmd to handle operation webhookInvoke
func makeOperationStacksWebhookInvokeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "WebhookInvoke",
		Short: `**Access policy**: public`,
		RunE:  runOperationStacksWebhookInvoke,
	}

	if err := registerOperationStacksWebhookInvokeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStacksWebhookInvoke uses cmd flags to call endpoint api
func runOperationStacksWebhookInvoke(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := stacks.NewWebhookInvokeParams()
	if err, _ := retrieveOperationStacksWebhookInvokeWebhookIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStacksWebhookInvokeResult(appCli.Stacks.WebhookInvoke(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationStacksWebhookInvokeParamFlags registers all flags needed to fill params
func registerOperationStacksWebhookInvokeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStacksWebhookInvokeWebhookIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStacksWebhookInvokeWebhookIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	webhookIdDescription := `Required. Stack identifier`

	var webhookIdFlagName string
	if cmdPrefix == "" {
		webhookIdFlagName = "webhookID"
	} else {
		webhookIdFlagName = fmt.Sprintf("%v.webhookID", cmdPrefix)
	}

	var webhookIdFlagDefault string

	_ = cmd.PersistentFlags().String(webhookIdFlagName, webhookIdFlagDefault, webhookIdDescription)

	return nil
}

func retrieveOperationStacksWebhookInvokeWebhookIDFlag(m *stacks.WebhookInvokeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("webhookID") {

		var webhookIdFlagName string
		if cmdPrefix == "" {
			webhookIdFlagName = "webhookID"
		} else {
			webhookIdFlagName = fmt.Sprintf("%v.webhookID", cmdPrefix)
		}

		webhookIdFlagValue, err := cmd.Flags().GetString(webhookIdFlagName)
		if err != nil {
			return err, false
		}
		m.WebhookID = webhookIdFlagValue

	}
	return nil, retAdded
}

// parseOperationStacksWebhookInvokeResult parses request result and return the string content
func parseOperationStacksWebhookInvokeResult(resp0 *stacks.WebhookInvokeOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning webhookInvokeOK is not supported

		// Non schema case: warning webhookInvokeBadRequest is not supported

		// Non schema case: warning webhookInvokeConflict is not supported

		// Non schema case: warning webhookInvokeInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response webhookInvokeOK is not supported by go-swagger cli yet.

	return "", nil
}
