// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/endpoints"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEndpointsEndpointRegistriesListCmd returns a cmd to handle operation endpointRegistriesList
func makeOperationEndpointsEndpointRegistriesListCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "endpointRegistriesList",
		Short: `List all registries based on the current user authorizations in current environment.
**Access policy**: authenticated`,
		RunE: runOperationEndpointsEndpointRegistriesList,
	}

	if err := registerOperationEndpointsEndpointRegistriesListParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEndpointsEndpointRegistriesList uses cmd flags to call endpoint api
func runOperationEndpointsEndpointRegistriesList(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := endpoints.NewEndpointRegistriesListParams()
	if err, _ := retrieveOperationEndpointsEndpointRegistriesListIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointRegistriesListNamespaceFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEndpointsEndpointRegistriesListResult(appCli.Endpoints.EndpointRegistriesList(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEndpointsEndpointRegistriesListParamFlags registers all flags needed to fill params
func registerOperationEndpointsEndpointRegistriesListParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEndpointsEndpointRegistriesListIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointRegistriesListNamespaceParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEndpointsEndpointRegistriesListIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Environment(Endpoint) identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationEndpointsEndpointRegistriesListNamespaceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	namespaceDescription := `required if kubernetes environment, will show registries by namespace`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func retrieveOperationEndpointsEndpointRegistriesListIDFlag(m *endpoints.EndpointRegistriesListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointRegistriesListNamespaceFlag(m *endpoints.EndpointRegistriesListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("namespace") {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = &namespaceFlagValue

	}
	return nil, retAdded
}

// parseOperationEndpointsEndpointRegistriesListResult parses request result and return the string content
func parseOperationEndpointsEndpointRegistriesListResult(resp0 *endpoints.EndpointRegistriesListOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*endpoints.EndpointRegistriesListOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning endpointRegistriesListInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
