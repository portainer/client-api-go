// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for BackupBackupStatus

// register flags to command
func registerModelBackupBackupStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBackupBackupStatusFailed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupBackupStatusTimestampUTC(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackupBackupStatusFailed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	failedDescription := ``

	var failedFlagName string
	if cmdPrefix == "" {
		failedFlagName = "failed"
	} else {
		failedFlagName = fmt.Sprintf("%v.failed", cmdPrefix)
	}

	var failedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(failedFlagName, failedFlagDefault, failedDescription)

	return nil
}

func registerBackupBackupStatusTimestampUTC(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timestampUTCDescription := ``

	var timestampUTCFlagName string
	if cmdPrefix == "" {
		timestampUTCFlagName = "timestampUTC"
	} else {
		timestampUTCFlagName = fmt.Sprintf("%v.timestampUTC", cmdPrefix)
	}

	var timestampUTCFlagDefault string

	_ = cmd.PersistentFlags().String(timestampUTCFlagName, timestampUTCFlagDefault, timestampUTCDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBackupBackupStatusFlags(depth int, m *models.BackupBackupStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, failedAdded := retrieveBackupBackupStatusFailedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || failedAdded

	err, timestampUTCAdded := retrieveBackupBackupStatusTimestampUTCFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampUTCAdded

	return nil, retAdded
}

func retrieveBackupBackupStatusFailedFlags(depth int, m *models.BackupBackupStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	failedFlagName := fmt.Sprintf("%v.failed", cmdPrefix)
	if cmd.Flags().Changed(failedFlagName) {

		var failedFlagName string
		if cmdPrefix == "" {
			failedFlagName = "failed"
		} else {
			failedFlagName = fmt.Sprintf("%v.failed", cmdPrefix)
		}

		failedFlagValue, err := cmd.Flags().GetBool(failedFlagName)
		if err != nil {
			return err, false
		}
		m.Failed = &failedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupBackupStatusTimestampUTCFlags(depth int, m *models.BackupBackupStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampUTCFlagName := fmt.Sprintf("%v.timestampUTC", cmdPrefix)
	if cmd.Flags().Changed(timestampUTCFlagName) {

		var timestampUTCFlagName string
		if cmdPrefix == "" {
			timestampUTCFlagName = "timestampUTC"
		} else {
			timestampUTCFlagName = fmt.Sprintf("%v.timestampUTC", cmdPrefix)
		}

		timestampUTCFlagValue, err := cmd.Flags().GetString(timestampUTCFlagName)
		if err != nil {
			return err, false
		}
		m.TimestampUTC = timestampUTCFlagValue

		retAdded = true
	}

	return nil, retAdded
}
