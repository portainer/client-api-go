// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointedgeEdgeJobResponse

// register flags to command
func registerModelEndpointedgeEdgeJobResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointedgeEdgeJobResponseCollectLogs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeJobResponseCronExpression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeJobResponseID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeJobResponseScript(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeJobResponseVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointedgeEdgeJobResponseCollectLogs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	collectLogsDescription := `Whether to collect logs`

	var collectLogsFlagName string
	if cmdPrefix == "" {
		collectLogsFlagName = "CollectLogs"
	} else {
		collectLogsFlagName = fmt.Sprintf("%v.CollectLogs", cmdPrefix)
	}

	var collectLogsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(collectLogsFlagName, collectLogsFlagDefault, collectLogsDescription)

	return nil
}

func registerEndpointedgeEdgeJobResponseCronExpression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cronExpressionDescription := `A cron expression to schedule this job`

	var cronExpressionFlagName string
	if cmdPrefix == "" {
		cronExpressionFlagName = "CronExpression"
	} else {
		cronExpressionFlagName = fmt.Sprintf("%v.CronExpression", cmdPrefix)
	}

	var cronExpressionFlagDefault string

	_ = cmd.PersistentFlags().String(cronExpressionFlagName, cronExpressionFlagDefault, cronExpressionDescription)

	return nil
}

func registerEndpointedgeEdgeJobResponseID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `EdgeJob Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerEndpointedgeEdgeJobResponseScript(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scriptDescription := `Script to run`

	var scriptFlagName string
	if cmdPrefix == "" {
		scriptFlagName = "Script"
	} else {
		scriptFlagName = fmt.Sprintf("%v.Script", cmdPrefix)
	}

	var scriptFlagDefault string

	_ = cmd.PersistentFlags().String(scriptFlagName, scriptFlagDefault, scriptDescription)

	return nil
}

func registerEndpointedgeEdgeJobResponseVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Version of this EdgeJob`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "Version"
	} else {
		versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointedgeEdgeJobResponseFlags(depth int, m *models.EndpointedgeEdgeJobResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, collectLogsAdded := retrieveEndpointedgeEdgeJobResponseCollectLogsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || collectLogsAdded

	err, cronExpressionAdded := retrieveEndpointedgeEdgeJobResponseCronExpressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cronExpressionAdded

	err, idAdded := retrieveEndpointedgeEdgeJobResponseIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, scriptAdded := retrieveEndpointedgeEdgeJobResponseScriptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scriptAdded

	err, versionAdded := retrieveEndpointedgeEdgeJobResponseVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveEndpointedgeEdgeJobResponseCollectLogsFlags(depth int, m *models.EndpointedgeEdgeJobResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	collectLogsFlagName := fmt.Sprintf("%v.CollectLogs", cmdPrefix)
	if cmd.Flags().Changed(collectLogsFlagName) {

		var collectLogsFlagName string
		if cmdPrefix == "" {
			collectLogsFlagName = "CollectLogs"
		} else {
			collectLogsFlagName = fmt.Sprintf("%v.CollectLogs", cmdPrefix)
		}

		collectLogsFlagValue, err := cmd.Flags().GetBool(collectLogsFlagName)
		if err != nil {
			return err, false
		}
		m.CollectLogs = &collectLogsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeJobResponseCronExpressionFlags(depth int, m *models.EndpointedgeEdgeJobResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cronExpressionFlagName := fmt.Sprintf("%v.CronExpression", cmdPrefix)
	if cmd.Flags().Changed(cronExpressionFlagName) {

		var cronExpressionFlagName string
		if cmdPrefix == "" {
			cronExpressionFlagName = "CronExpression"
		} else {
			cronExpressionFlagName = fmt.Sprintf("%v.CronExpression", cmdPrefix)
		}

		cronExpressionFlagValue, err := cmd.Flags().GetString(cronExpressionFlagName)
		if err != nil {
			return err, false
		}
		m.CronExpression = cronExpressionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeJobResponseIDFlags(depth int, m *models.EndpointedgeEdgeJobResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeJobResponseScriptFlags(depth int, m *models.EndpointedgeEdgeJobResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scriptFlagName := fmt.Sprintf("%v.Script", cmdPrefix)
	if cmd.Flags().Changed(scriptFlagName) {

		var scriptFlagName string
		if cmdPrefix == "" {
			scriptFlagName = "Script"
		} else {
			scriptFlagName = fmt.Sprintf("%v.Script", cmdPrefix)
		}

		scriptFlagValue, err := cmd.Flags().GetString(scriptFlagName)
		if err != nil {
			return err, false
		}
		m.Script = scriptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeJobResponseVersionFlags(depth int, m *models.EndpointedgeEdgeJobResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "Version"
		} else {
			versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
