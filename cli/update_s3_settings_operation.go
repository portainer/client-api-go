// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/backup"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBackupUpdateS3SettingsCmd returns a cmd to handle operation updateS3Settings
func makeOperationBackupUpdateS3SettingsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "UpdateS3Settings",
		Short: `Updates stored s3 backup settings and updates running cron jobs as needed
**Access policy**: administrator`,
		RunE: runOperationBackupUpdateS3Settings,
	}

	if err := registerOperationBackupUpdateS3SettingsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBackupUpdateS3Settings uses cmd flags to call endpoint api
func runOperationBackupUpdateS3Settings(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := backup.NewUpdateS3SettingsParams()
	if err, _ := retrieveOperationBackupUpdateS3SettingsS3BackupSettingsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBackupUpdateS3SettingsResult(appCli.Backup.UpdateS3Settings(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBackupUpdateS3SettingsParamFlags registers all flags needed to fill params
func registerOperationBackupUpdateS3SettingsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBackupUpdateS3SettingsS3BackupSettingsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBackupUpdateS3SettingsS3BackupSettingsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var s3BackupSettingsFlagName string
	if cmdPrefix == "" {
		s3BackupSettingsFlagName = "s3_backup_settings"
	} else {
		s3BackupSettingsFlagName = fmt.Sprintf("%v.s3_backup_settings", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(s3BackupSettingsFlagName, "", "Optional json string for [s3_backup_settings]. S3 backup settings")

	// add flags for body
	if err := registerModelPortainereeS3BackupSettingsFlags(0, "portainereeS3BackupSettings", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationBackupUpdateS3SettingsS3BackupSettingsFlag(m *backup.UpdateS3SettingsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("s3_backup_settings") {
		// Read s3_backup_settings string from cmd and unmarshal
		s3BackupSettingsValueStr, err := cmd.Flags().GetString("s3_backup_settings")
		if err != nil {
			return err, false
		}

		s3BackupSettingsValue := models.PortainereeS3BackupSettings{}
		if err := json.Unmarshal([]byte(s3BackupSettingsValueStr), &s3BackupSettingsValue); err != nil {
			return fmt.Errorf("cannot unmarshal s3_backup_settings string in models.PortainereeS3BackupSettings: %v", err), false
		}
		m.S3BackupSettings = &s3BackupSettingsValue
	}
	s3BackupSettingsValueModel := m.S3BackupSettings
	if swag.IsZero(s3BackupSettingsValueModel) {
		s3BackupSettingsValueModel = &models.PortainereeS3BackupSettings{}
	}
	err, added := retrieveModelPortainereeS3BackupSettingsFlags(0, s3BackupSettingsValueModel, "portainereeS3BackupSettings", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.S3BackupSettings = s3BackupSettingsValueModel
	}
	if dryRun && debug {

		s3BackupSettingsValueDebugBytes, err := json.Marshal(m.S3BackupSettings)
		if err != nil {
			return err, false
		}
		logDebugf("S3BackupSettings dry-run payload: %v", string(s3BackupSettingsValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationBackupUpdateS3SettingsResult parses request result and return the string content
func parseOperationBackupUpdateS3SettingsResult(resp0 *backup.UpdateS3SettingsOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateS3SettingsOK is not supported

		// Non schema case: warning updateS3SettingsBadRequest is not supported

		// Non schema case: warning updateS3SettingsInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response updateS3SettingsOK is not supported by go-swagger cli yet.

	return "", nil
}
