// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/kubernetes"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationKubernetesGetKubernetesApplicationsCmd returns a cmd to handle operation getKubernetesApplications
func makeOperationKubernetesGetKubernetesApplicationsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "getKubernetesApplications",
		Short: `Gets a list of Kubernetes deployments, statefulsets and daemonsets
**Access policy**: authenticated`,
		RunE: runOperationKubernetesGetKubernetesApplications,
	}

	if err := registerOperationKubernetesGetKubernetesApplicationsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationKubernetesGetKubernetesApplications uses cmd flags to call endpoint api
func runOperationKubernetesGetKubernetesApplications(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := kubernetes.NewGetKubernetesApplicationsParams()
	if err, _ := retrieveOperationKubernetesGetKubernetesApplicationsIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationKubernetesGetKubernetesApplicationsNamespaceFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationKubernetesGetKubernetesApplicationsResult(appCli.Kubernetes.GetKubernetesApplications(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationKubernetesGetKubernetesApplicationsParamFlags registers all flags needed to fill params
func registerOperationKubernetesGetKubernetesApplicationsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationKubernetesGetKubernetesApplicationsIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationKubernetesGetKubernetesApplicationsNamespaceParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationKubernetesGetKubernetesApplicationsIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Environment(Endpoint) identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationKubernetesGetKubernetesApplicationsNamespaceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	namespaceDescription := `Required. specify an optional namespace`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func retrieveOperationKubernetesGetKubernetesApplicationsIDFlag(m *kubernetes.GetKubernetesApplicationsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationKubernetesGetKubernetesApplicationsNamespaceFlag(m *kubernetes.GetKubernetesApplicationsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("namespace") {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

	}
	return nil, retAdded
}

// parseOperationKubernetesGetKubernetesApplicationsResult parses request result and return the string content
func parseOperationKubernetesGetKubernetesApplicationsResult(resp0 *kubernetes.GetKubernetesApplicationsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*kubernetes.GetKubernetesApplicationsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getKubernetesApplicationsBadRequest is not supported

		// Non schema case: warning getKubernetesApplicationsUnauthorized is not supported

		// Non schema case: warning getKubernetesApplicationsForbidden is not supported

		// Non schema case: warning getKubernetesApplicationsNotFound is not supported

		// Non schema case: warning getKubernetesApplicationsInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
