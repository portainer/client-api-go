// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/endpoints"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEndpointsEndpointListCmd returns a cmd to handle operation endpointList
func makeOperationEndpointsEndpointListCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "EndpointList",
		Short: `List all environments(endpoints) based on the current user authorizations. Will
return all environments(endpoints) if using an administrator or team leader account otherwise it will
only return authorized environments(endpoints).
**Access policy**: restricted`,
		RunE: runOperationEndpointsEndpointList,
	}

	if err := registerOperationEndpointsEndpointListParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEndpointsEndpointList uses cmd flags to call endpoint api
func runOperationEndpointsEndpointList(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := endpoints.NewEndpointListParams()
	if err, _ := retrieveOperationEndpointsEndpointListAgentVersionsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListEdgeDeviceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListEdgeDeviceUntrustedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListEndpointIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListGroupIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListOrderFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListProvisionedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListSearchFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListSortFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListStartFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListTagIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListTagsPartialMatchFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointListTypesFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEndpointsEndpointListResult(appCli.Endpoints.EndpointList(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEndpointsEndpointListParamFlags registers all flags needed to fill params
func registerOperationEndpointsEndpointListParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEndpointsEndpointListAgentVersionsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListEdgeDeviceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListEdgeDeviceUntrustedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListEndpointIdsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListGroupIdsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListOrderParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListProvisionedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListSearchParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListSortParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListStartParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListTagIdsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListTagsPartialMatchParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointListTypesParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEndpointsEndpointListAgentVersionsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	agentVersionsDescription := `will return only environments with on of these agent versions`

	var agentVersionsFlagName string
	if cmdPrefix == "" {
		agentVersionsFlagName = "agentVersions"
	} else {
		agentVersionsFlagName = fmt.Sprintf("%v.agentVersions", cmdPrefix)
	}

	var agentVersionsFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(agentVersionsFlagName, agentVersionsFlagDefault, agentVersionsDescription)

	return nil
}
func registerOperationEndpointsEndpointListEdgeDeviceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	edgeDeviceDescription := `if exists true show only edge devices, false show only regular edge endpoints. if missing, will show both types (relevant only for edge endpoints)`

	var edgeDeviceFlagName string
	if cmdPrefix == "" {
		edgeDeviceFlagName = "edgeDevice"
	} else {
		edgeDeviceFlagName = fmt.Sprintf("%v.edgeDevice", cmdPrefix)
	}

	var edgeDeviceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(edgeDeviceFlagName, edgeDeviceFlagDefault, edgeDeviceDescription)

	return nil
}
func registerOperationEndpointsEndpointListEdgeDeviceUntrustedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	edgeDeviceUntrustedDescription := `if true, show only untrusted endpoints, if false show only trusted (relevant only for edge devices, and if edgeDevice is true)`

	var edgeDeviceUntrustedFlagName string
	if cmdPrefix == "" {
		edgeDeviceUntrustedFlagName = "edgeDeviceUntrusted"
	} else {
		edgeDeviceUntrustedFlagName = fmt.Sprintf("%v.edgeDeviceUntrusted", cmdPrefix)
	}

	var edgeDeviceUntrustedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(edgeDeviceUntrustedFlagName, edgeDeviceUntrustedFlagDefault, edgeDeviceUntrustedDescription)

	return nil
}
func registerOperationEndpointsEndpointListEndpointIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdsDescription := `will return only these environments(endpoints)`

	var endpointIdsFlagName string
	if cmdPrefix == "" {
		endpointIdsFlagName = "endpointIds"
	} else {
		endpointIdsFlagName = fmt.Sprintf("%v.endpointIds", cmdPrefix)
	}

	var endpointIdsFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(endpointIdsFlagName, endpointIdsFlagDefault, endpointIdsDescription)

	return nil
}
func registerOperationEndpointsEndpointListGroupIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	groupIdsDescription := `List environments(endpoints) of these groups`

	var groupIdsFlagName string
	if cmdPrefix == "" {
		groupIdsFlagName = "groupIds"
	} else {
		groupIdsFlagName = fmt.Sprintf("%v.groupIds", cmdPrefix)
	}

	var groupIdsFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(groupIdsFlagName, groupIdsFlagDefault, groupIdsDescription)

	return nil
}
func registerOperationEndpointsEndpointListLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	limitDescription := `Limit results to this value`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}
func registerOperationEndpointsEndpointListNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `will return only environments(endpoints) with this name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationEndpointsEndpointListOrderParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	orderDescription := `Order sorted results by desc/asc`

	var orderFlagName string
	if cmdPrefix == "" {
		orderFlagName = "order"
	} else {
		orderFlagName = fmt.Sprintf("%v.order", cmdPrefix)
	}

	var orderFlagDefault int64

	_ = cmd.PersistentFlags().Int64(orderFlagName, orderFlagDefault, orderDescription)

	return nil
}
func registerOperationEndpointsEndpointListProvisionedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	provisionedDescription := `If true, will return environment(endpoint) that were provisioned`

	var provisionedFlagName string
	if cmdPrefix == "" {
		provisionedFlagName = "provisioned"
	} else {
		provisionedFlagName = fmt.Sprintf("%v.provisioned", cmdPrefix)
	}

	var provisionedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(provisionedFlagName, provisionedFlagDefault, provisionedDescription)

	return nil
}
func registerOperationEndpointsEndpointListSearchParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	searchDescription := `Search query`

	var searchFlagName string
	if cmdPrefix == "" {
		searchFlagName = "search"
	} else {
		searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
	}

	var searchFlagDefault string

	_ = cmd.PersistentFlags().String(searchFlagName, searchFlagDefault, searchDescription)

	return nil
}
func registerOperationEndpointsEndpointListSortParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortDescription := `Sort results by this value`

	var sortFlagName string
	if cmdPrefix == "" {
		sortFlagName = "sort"
	} else {
		sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
	}

	var sortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sortFlagName, sortFlagDefault, sortDescription)

	return nil
}
func registerOperationEndpointsEndpointListStartParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	startDescription := `Start searching from`

	var startFlagName string
	if cmdPrefix == "" {
		startFlagName = "start"
	} else {
		startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
	}

	var startFlagDefault int64

	_ = cmd.PersistentFlags().Int64(startFlagName, startFlagDefault, startDescription)

	return nil
}
func registerOperationEndpointsEndpointListStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	statusDescription := `List environments(endpoints) by this status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}
func registerOperationEndpointsEndpointListTagIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tagIdsDescription := `search environments(endpoints) with these tags (depends on tagsPartialMatch)`

	var tagIdsFlagName string
	if cmdPrefix == "" {
		tagIdsFlagName = "tagIds"
	} else {
		tagIdsFlagName = fmt.Sprintf("%v.tagIds", cmdPrefix)
	}

	var tagIdsFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(tagIdsFlagName, tagIdsFlagDefault, tagIdsDescription)

	return nil
}
func registerOperationEndpointsEndpointListTagsPartialMatchParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tagsPartialMatchDescription := `If true, will return environment(endpoint) which has one of tagIds, if false (or missing) will return only environments(endpoints) that has all the tags`

	var tagsPartialMatchFlagName string
	if cmdPrefix == "" {
		tagsPartialMatchFlagName = "tagsPartialMatch"
	} else {
		tagsPartialMatchFlagName = fmt.Sprintf("%v.tagsPartialMatch", cmdPrefix)
	}

	var tagsPartialMatchFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tagsPartialMatchFlagName, tagsPartialMatchFlagDefault, tagsPartialMatchDescription)

	return nil
}
func registerOperationEndpointsEndpointListTypesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typesDescription := `List environments(endpoints) of this type`

	var typesFlagName string
	if cmdPrefix == "" {
		typesFlagName = "types"
	} else {
		typesFlagName = fmt.Sprintf("%v.types", cmdPrefix)
	}

	var typesFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(typesFlagName, typesFlagDefault, typesDescription)

	return nil
}

func retrieveOperationEndpointsEndpointListAgentVersionsFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("agentVersions") {

		var agentVersionsFlagName string
		if cmdPrefix == "" {
			agentVersionsFlagName = "agentVersions"
		} else {
			agentVersionsFlagName = fmt.Sprintf("%v.agentVersions", cmdPrefix)
		}

		agentVersionsFlagValues, err := cmd.Flags().GetStringSlice(agentVersionsFlagName)
		if err != nil {
			return err, false
		}
		m.AgentVersions = agentVersionsFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListEdgeDeviceFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("edgeDevice") {

		var edgeDeviceFlagName string
		if cmdPrefix == "" {
			edgeDeviceFlagName = "edgeDevice"
		} else {
			edgeDeviceFlagName = fmt.Sprintf("%v.edgeDevice", cmdPrefix)
		}

		edgeDeviceFlagValue, err := cmd.Flags().GetBool(edgeDeviceFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeDevice = &edgeDeviceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListEdgeDeviceUntrustedFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("edgeDeviceUntrusted") {

		var edgeDeviceUntrustedFlagName string
		if cmdPrefix == "" {
			edgeDeviceUntrustedFlagName = "edgeDeviceUntrusted"
		} else {
			edgeDeviceUntrustedFlagName = fmt.Sprintf("%v.edgeDeviceUntrusted", cmdPrefix)
		}

		edgeDeviceUntrustedFlagValue, err := cmd.Flags().GetBool(edgeDeviceUntrustedFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeDeviceUntrusted = &edgeDeviceUntrustedFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListEndpointIdsFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpointIds") {

		var endpointIdsFlagName string
		if cmdPrefix == "" {
			endpointIdsFlagName = "endpointIds"
		} else {
			endpointIdsFlagName = fmt.Sprintf("%v.endpointIds", cmdPrefix)
		}

		endpointIdsFlagValues, err := cmd.Flags().GetInt64Slice(endpointIdsFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointIds = endpointIdsFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListGroupIdsFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("groupIds") {

		var groupIdsFlagName string
		if cmdPrefix == "" {
			groupIdsFlagName = "groupIds"
		} else {
			groupIdsFlagName = fmt.Sprintf("%v.groupIds", cmdPrefix)
		}

		groupIdsFlagValues, err := cmd.Flags().GetInt64Slice(groupIdsFlagName)
		if err != nil {
			return err, false
		}
		m.GroupIds = groupIdsFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListLimitFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt64(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = &limitFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListNameFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListOrderFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("order") {

		var orderFlagName string
		if cmdPrefix == "" {
			orderFlagName = "order"
		} else {
			orderFlagName = fmt.Sprintf("%v.order", cmdPrefix)
		}

		orderFlagValue, err := cmd.Flags().GetInt64(orderFlagName)
		if err != nil {
			return err, false
		}
		m.Order = &orderFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListProvisionedFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("provisioned") {

		var provisionedFlagName string
		if cmdPrefix == "" {
			provisionedFlagName = "provisioned"
		} else {
			provisionedFlagName = fmt.Sprintf("%v.provisioned", cmdPrefix)
		}

		provisionedFlagValue, err := cmd.Flags().GetBool(provisionedFlagName)
		if err != nil {
			return err, false
		}
		m.Provisioned = &provisionedFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListSearchFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("search") {

		var searchFlagName string
		if cmdPrefix == "" {
			searchFlagName = "search"
		} else {
			searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
		}

		searchFlagValue, err := cmd.Flags().GetString(searchFlagName)
		if err != nil {
			return err, false
		}
		m.Search = &searchFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListSortFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sort") {

		var sortFlagName string
		if cmdPrefix == "" {
			sortFlagName = "sort"
		} else {
			sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
		}

		sortFlagValue, err := cmd.Flags().GetInt64(sortFlagName)
		if err != nil {
			return err, false
		}
		m.Sort = &sortFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListStartFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("start") {

		var startFlagName string
		if cmdPrefix == "" {
			startFlagName = "start"
		} else {
			startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
		}

		startFlagValue, err := cmd.Flags().GetInt64(startFlagName)
		if err != nil {
			return err, false
		}
		m.Start = &startFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListStatusFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("status") {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValues, err := cmd.Flags().GetInt64Slice(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListTagIdsFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tagIds") {

		var tagIdsFlagName string
		if cmdPrefix == "" {
			tagIdsFlagName = "tagIds"
		} else {
			tagIdsFlagName = fmt.Sprintf("%v.tagIds", cmdPrefix)
		}

		tagIdsFlagValues, err := cmd.Flags().GetInt64Slice(tagIdsFlagName)
		if err != nil {
			return err, false
		}
		m.TagIds = tagIdsFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListTagsPartialMatchFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tagsPartialMatch") {

		var tagsPartialMatchFlagName string
		if cmdPrefix == "" {
			tagsPartialMatchFlagName = "tagsPartialMatch"
		} else {
			tagsPartialMatchFlagName = fmt.Sprintf("%v.tagsPartialMatch", cmdPrefix)
		}

		tagsPartialMatchFlagValue, err := cmd.Flags().GetBool(tagsPartialMatchFlagName)
		if err != nil {
			return err, false
		}
		m.TagsPartialMatch = &tagsPartialMatchFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointListTypesFlag(m *endpoints.EndpointListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("types") {

		var typesFlagName string
		if cmdPrefix == "" {
			typesFlagName = "types"
		} else {
			typesFlagName = fmt.Sprintf("%v.types", cmdPrefix)
		}

		typesFlagValues, err := cmd.Flags().GetInt64Slice(typesFlagName)
		if err != nil {
			return err, false
		}
		m.Types = typesFlagValues

	}
	return nil, retAdded
}

// parseOperationEndpointsEndpointListResult parses request result and return the string content
func parseOperationEndpointsEndpointListResult(resp0 *endpoints.EndpointListOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*endpoints.EndpointListOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning endpointListInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
