// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for TypesUpdateSchedule

// register flags to command
func registerModelTypesUpdateScheduleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTypesUpdateScheduleCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesUpdateScheduleCreatedBy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesUpdateScheduleEdgeStackID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesUpdateScheduleEnvironmentsPreviousVersions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesUpdateScheduleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesUpdateScheduleName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesUpdateScheduleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesUpdateScheduleVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTypesUpdateScheduleCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdDescription := `Created timestamp`

	var createdFlagName string
	if cmdPrefix == "" {
		createdFlagName = "created"
	} else {
		createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
	}

	var createdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(createdFlagName, createdFlagDefault, createdDescription)

	return nil
}

func registerTypesUpdateScheduleCreatedBy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdByDescription := `Created by user id`

	var createdByFlagName string
	if cmdPrefix == "" {
		createdByFlagName = "createdBy"
	} else {
		createdByFlagName = fmt.Sprintf("%v.createdBy", cmdPrefix)
	}

	var createdByFlagDefault int64

	_ = cmd.PersistentFlags().Int64(createdByFlagName, createdByFlagDefault, createdByDescription)

	return nil
}

func registerTypesUpdateScheduleEdgeStackID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeStackIdDescription := `EdgeStack Identifier`

	var edgeStackIdFlagName string
	if cmdPrefix == "" {
		edgeStackIdFlagName = "edgeStackId"
	} else {
		edgeStackIdFlagName = fmt.Sprintf("%v.edgeStackId", cmdPrefix)
	}

	var edgeStackIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeStackIdFlagName, edgeStackIdFlagDefault, edgeStackIdDescription)

	return nil
}

func registerTypesUpdateScheduleEnvironmentsPreviousVersions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: environmentsPreviousVersions map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTypesUpdateScheduleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `EdgeUpdateSchedule Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerTypesUpdateScheduleName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name of the schedule`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerTypesUpdateScheduleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: [1,2]. Type of the update (1 - update, 2 - rollback)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTypesUpdateScheduleVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTypesUpdateScheduleFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAdded := retrieveTypesUpdateScheduleCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, createdByAdded := retrieveTypesUpdateScheduleCreatedByFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdByAdded

	err, edgeStackIdAdded := retrieveTypesUpdateScheduleEdgeStackIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeStackIdAdded

	err, environmentsPreviousVersionsAdded := retrieveTypesUpdateScheduleEnvironmentsPreviousVersionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentsPreviousVersionsAdded

	err, idAdded := retrieveTypesUpdateScheduleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveTypesUpdateScheduleNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, typeAdded := retrieveTypesUpdateScheduleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, versionAdded := retrieveTypesUpdateScheduleVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveTypesUpdateScheduleCreatedFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdFlagName := fmt.Sprintf("%v.created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		var createdFlagName string
		if cmdPrefix == "" {
			createdFlagName = "created"
		} else {
			createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
		}

		createdFlagValue, err := cmd.Flags().GetInt64(createdFlagName)
		if err != nil {
			return err, false
		}
		m.Created = createdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesUpdateScheduleCreatedByFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdByFlagName := fmt.Sprintf("%v.createdBy", cmdPrefix)
	if cmd.Flags().Changed(createdByFlagName) {

		var createdByFlagName string
		if cmdPrefix == "" {
			createdByFlagName = "createdBy"
		} else {
			createdByFlagName = fmt.Sprintf("%v.createdBy", cmdPrefix)
		}

		createdByFlagValue, err := cmd.Flags().GetInt64(createdByFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedBy = createdByFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesUpdateScheduleEdgeStackIDFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeStackIdFlagName := fmt.Sprintf("%v.edgeStackId", cmdPrefix)
	if cmd.Flags().Changed(edgeStackIdFlagName) {

		var edgeStackIdFlagName string
		if cmdPrefix == "" {
			edgeStackIdFlagName = "edgeStackId"
		} else {
			edgeStackIdFlagName = fmt.Sprintf("%v.edgeStackId", cmdPrefix)
		}

		edgeStackIdFlagValue, err := cmd.Flags().GetInt64(edgeStackIdFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeStackID = edgeStackIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesUpdateScheduleEnvironmentsPreviousVersionsFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentsPreviousVersionsFlagName := fmt.Sprintf("%v.environmentsPreviousVersions", cmdPrefix)
	if cmd.Flags().Changed(environmentsPreviousVersionsFlagName) {
		// warning: environmentsPreviousVersions map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTypesUpdateScheduleIDFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesUpdateScheduleNameFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesUpdateScheduleTypeFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesUpdateScheduleVersionFlags(depth int, m *models.TypesUpdateSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
