// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeRegistryManagementConfiguration

// register flags to command
func registerModelPortainereeRegistryManagementConfigurationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeRegistryManagementConfigurationAccessToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRegistryManagementConfigurationAccessTokenExpiry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRegistryManagementConfigurationAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRegistryManagementConfigurationEcr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRegistryManagementConfigurationPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRegistryManagementConfigurationTLSConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRegistryManagementConfigurationType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRegistryManagementConfigurationUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeRegistryManagementConfigurationAccessToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessTokenDescription := ``

	var accessTokenFlagName string
	if cmdPrefix == "" {
		accessTokenFlagName = "AccessToken"
	} else {
		accessTokenFlagName = fmt.Sprintf("%v.AccessToken", cmdPrefix)
	}

	var accessTokenFlagDefault string

	_ = cmd.PersistentFlags().String(accessTokenFlagName, accessTokenFlagDefault, accessTokenDescription)

	return nil
}

func registerPortainereeRegistryManagementConfigurationAccessTokenExpiry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessTokenExpiryDescription := ``

	var accessTokenExpiryFlagName string
	if cmdPrefix == "" {
		accessTokenExpiryFlagName = "AccessTokenExpiry"
	} else {
		accessTokenExpiryFlagName = fmt.Sprintf("%v.AccessTokenExpiry", cmdPrefix)
	}

	var accessTokenExpiryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(accessTokenExpiryFlagName, accessTokenExpiryFlagDefault, accessTokenExpiryDescription)

	return nil
}

func registerPortainereeRegistryManagementConfigurationAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationDescription := ``

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "Authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.Authentication", cmdPrefix)
	}

	var authenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(authenticationFlagName, authenticationFlagDefault, authenticationDescription)

	return nil
}

func registerPortainereeRegistryManagementConfigurationEcr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ecrFlagName string
	if cmdPrefix == "" {
		ecrFlagName = "Ecr"
	} else {
		ecrFlagName = fmt.Sprintf("%v.Ecr", cmdPrefix)
	}

	if err := registerModelPortainereeEcrDataFlags(depth+1, ecrFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeRegistryManagementConfigurationPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "Password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.Password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerPortainereeRegistryManagementConfigurationTLSConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tlsConfigFlagName string
	if cmdPrefix == "" {
		tlsConfigFlagName = "TLSConfig"
	} else {
		tlsConfigFlagName = fmt.Sprintf("%v.TLSConfig", cmdPrefix)
	}

	if err := registerModelPortainereeTLSConfigurationFlags(depth+1, tlsConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeRegistryManagementConfigurationType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR, 8 - Github)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerPortainereeRegistryManagementConfigurationUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "Username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.Username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeRegistryManagementConfigurationFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessTokenAdded := retrievePortainereeRegistryManagementConfigurationAccessTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessTokenAdded

	err, accessTokenExpiryAdded := retrievePortainereeRegistryManagementConfigurationAccessTokenExpiryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessTokenExpiryAdded

	err, authenticationAdded := retrievePortainereeRegistryManagementConfigurationAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, ecrAdded := retrievePortainereeRegistryManagementConfigurationEcrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ecrAdded

	err, passwordAdded := retrievePortainereeRegistryManagementConfigurationPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, tlsConfigAdded := retrievePortainereeRegistryManagementConfigurationTLSConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsConfigAdded

	err, typeAdded := retrievePortainereeRegistryManagementConfigurationTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, usernameAdded := retrievePortainereeRegistryManagementConfigurationUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationAccessTokenFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessTokenFlagName := fmt.Sprintf("%v.AccessToken", cmdPrefix)
	if cmd.Flags().Changed(accessTokenFlagName) {

		var accessTokenFlagName string
		if cmdPrefix == "" {
			accessTokenFlagName = "AccessToken"
		} else {
			accessTokenFlagName = fmt.Sprintf("%v.AccessToken", cmdPrefix)
		}

		accessTokenFlagValue, err := cmd.Flags().GetString(accessTokenFlagName)
		if err != nil {
			return err, false
		}
		m.AccessToken = accessTokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationAccessTokenExpiryFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessTokenExpiryFlagName := fmt.Sprintf("%v.AccessTokenExpiry", cmdPrefix)
	if cmd.Flags().Changed(accessTokenExpiryFlagName) {

		var accessTokenExpiryFlagName string
		if cmdPrefix == "" {
			accessTokenExpiryFlagName = "AccessTokenExpiry"
		} else {
			accessTokenExpiryFlagName = fmt.Sprintf("%v.AccessTokenExpiry", cmdPrefix)
		}

		accessTokenExpiryFlagValue, err := cmd.Flags().GetInt64(accessTokenExpiryFlagName)
		if err != nil {
			return err, false
		}
		m.AccessTokenExpiry = accessTokenExpiryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationAuthenticationFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.Authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {

		var authenticationFlagName string
		if cmdPrefix == "" {
			authenticationFlagName = "Authentication"
		} else {
			authenticationFlagName = fmt.Sprintf("%v.Authentication", cmdPrefix)
		}

		authenticationFlagValue, err := cmd.Flags().GetBool(authenticationFlagName)
		if err != nil {
			return err, false
		}
		m.Authentication = &authenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationEcrFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ecrFlagName := fmt.Sprintf("%v.Ecr", cmdPrefix)
	if cmd.Flags().Changed(ecrFlagName) {
		// info: complex object Ecr PortainereeEcrData is retrieved outside this Changed() block
	}
	ecrFlagValue := m.Ecr
	if swag.IsZero(ecrFlagValue) {
		ecrFlagValue = &models.PortainereeEcrData{}
	}

	err, ecrAdded := retrieveModelPortainereeEcrDataFlags(depth+1, ecrFlagValue, ecrFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ecrAdded
	if ecrAdded {
		m.Ecr = ecrFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationPasswordFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.Password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "Password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.Password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationTLSConfigFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsConfigFlagName := fmt.Sprintf("%v.TLSConfig", cmdPrefix)
	if cmd.Flags().Changed(tlsConfigFlagName) {
		// info: complex object TLSConfig PortainereeTLSConfiguration is retrieved outside this Changed() block
	}
	tlsConfigFlagValue := m.TLSConfig
	if swag.IsZero(tlsConfigFlagValue) {
		tlsConfigFlagValue = &models.PortainereeTLSConfiguration{}
	}

	err, tlsConfigAdded := retrieveModelPortainereeTLSConfigurationFlags(depth+1, tlsConfigFlagValue, tlsConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsConfigAdded
	if tlsConfigAdded {
		m.TLSConfig = tlsConfigFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationTypeFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRegistryManagementConfigurationUsernameFlags(depth int, m *models.PortainereeRegistryManagementConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.Username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "Username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.Username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
