// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EdgestacksUpdateEdgeStackPayload

// register flags to command
func registerModelEdgestacksUpdateEdgeStackPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEdgestacksUpdateEdgeStackPayloadDeploymentType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksUpdateEdgeStackPayloadEdgeGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksUpdateEdgeStackPayloadPrePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksUpdateEdgeStackPayloadRePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksUpdateEdgeStackPayloadRegistries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksUpdateEdgeStackPayloadStackFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksUpdateEdgeStackPayloadUseManifestNamespaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksUpdateEdgeStackPayloadVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadDeploymentType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deploymentTypeDescription := `Deployment type to deploy this stack
Valid values are: 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
kubernetes deploy type is enabled only for kubernetes environments(endpoints)
nomad deploy type is enabled only for nomad environments(endpoints)`

	var deploymentTypeFlagName string
	if cmdPrefix == "" {
		deploymentTypeFlagName = "deploymentType"
	} else {
		deploymentTypeFlagName = fmt.Sprintf("%v.deploymentType", cmdPrefix)
	}

	var deploymentTypeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(deploymentTypeFlagName, deploymentTypeFlagDefault, deploymentTypeDescription)

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadEdgeGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: edgeGroups []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadPrePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prePullImageDescription := ``

	var prePullImageFlagName string
	if cmdPrefix == "" {
		prePullImageFlagName = "prePullImage"
	} else {
		prePullImageFlagName = fmt.Sprintf("%v.prePullImage", cmdPrefix)
	}

	var prePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(prePullImageFlagName, prePullImageFlagDefault, prePullImageDescription)

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadRePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rePullImageDescription := ``

	var rePullImageFlagName string
	if cmdPrefix == "" {
		rePullImageFlagName = "rePullImage"
	} else {
		rePullImageFlagName = fmt.Sprintf("%v.rePullImage", cmdPrefix)
	}

	var rePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rePullImageFlagName, rePullImageFlagDefault, rePullImageDescription)

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadRegistries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: registries []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadStackFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackFileContentDescription := ``

	var stackFileContentFlagName string
	if cmdPrefix == "" {
		stackFileContentFlagName = "stackFileContent"
	} else {
		stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	}

	var stackFileContentFlagDefault string

	_ = cmd.PersistentFlags().String(stackFileContentFlagName, stackFileContentFlagDefault, stackFileContentDescription)

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadUseManifestNamespaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useManifestNamespacesDescription := `Uses the manifest's namespaces instead of the default one`

	var useManifestNamespacesFlagName string
	if cmdPrefix == "" {
		useManifestNamespacesFlagName = "useManifestNamespaces"
	} else {
		useManifestNamespacesFlagName = fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
	}

	var useManifestNamespacesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useManifestNamespacesFlagName, useManifestNamespacesFlagDefault, useManifestNamespacesDescription)

	return nil
}

func registerEdgestacksUpdateEdgeStackPayloadVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEdgestacksUpdateEdgeStackPayloadFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deploymentTypeAdded := retrieveEdgestacksUpdateEdgeStackPayloadDeploymentTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentTypeAdded

	err, edgeGroupsAdded := retrieveEdgestacksUpdateEdgeStackPayloadEdgeGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeGroupsAdded

	err, prePullImageAdded := retrieveEdgestacksUpdateEdgeStackPayloadPrePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prePullImageAdded

	err, rePullImageAdded := retrieveEdgestacksUpdateEdgeStackPayloadRePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rePullImageAdded

	err, registriesAdded := retrieveEdgestacksUpdateEdgeStackPayloadRegistriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registriesAdded

	err, stackFileContentAdded := retrieveEdgestacksUpdateEdgeStackPayloadStackFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackFileContentAdded

	err, useManifestNamespacesAdded := retrieveEdgestacksUpdateEdgeStackPayloadUseManifestNamespacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useManifestNamespacesAdded

	err, versionAdded := retrieveEdgestacksUpdateEdgeStackPayloadVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadDeploymentTypeFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deploymentTypeFlagName := fmt.Sprintf("%v.deploymentType", cmdPrefix)
	if cmd.Flags().Changed(deploymentTypeFlagName) {

		var deploymentTypeFlagName string
		if cmdPrefix == "" {
			deploymentTypeFlagName = "deploymentType"
		} else {
			deploymentTypeFlagName = fmt.Sprintf("%v.deploymentType", cmdPrefix)
		}

		deploymentTypeFlagValue, err := cmd.Flags().GetInt64(deploymentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DeploymentType = deploymentTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadEdgeGroupsFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeGroupsFlagName := fmt.Sprintf("%v.edgeGroups", cmdPrefix)
	if cmd.Flags().Changed(edgeGroupsFlagName) {
		// warning: edgeGroups array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadPrePullImageFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prePullImageFlagName := fmt.Sprintf("%v.prePullImage", cmdPrefix)
	if cmd.Flags().Changed(prePullImageFlagName) {

		var prePullImageFlagName string
		if cmdPrefix == "" {
			prePullImageFlagName = "prePullImage"
		} else {
			prePullImageFlagName = fmt.Sprintf("%v.prePullImage", cmdPrefix)
		}

		prePullImageFlagValue, err := cmd.Flags().GetBool(prePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.PrePullImage = &prePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadRePullImageFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rePullImageFlagName := fmt.Sprintf("%v.rePullImage", cmdPrefix)
	if cmd.Flags().Changed(rePullImageFlagName) {

		var rePullImageFlagName string
		if cmdPrefix == "" {
			rePullImageFlagName = "rePullImage"
		} else {
			rePullImageFlagName = fmt.Sprintf("%v.rePullImage", cmdPrefix)
		}

		rePullImageFlagValue, err := cmd.Flags().GetBool(rePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.RePullImage = &rePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadRegistriesFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registriesFlagName := fmt.Sprintf("%v.registries", cmdPrefix)
	if cmd.Flags().Changed(registriesFlagName) {
		// warning: registries array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadStackFileContentFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackFileContentFlagName := fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	if cmd.Flags().Changed(stackFileContentFlagName) {

		var stackFileContentFlagName string
		if cmdPrefix == "" {
			stackFileContentFlagName = "stackFileContent"
		} else {
			stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
		}

		stackFileContentFlagValue, err := cmd.Flags().GetString(stackFileContentFlagName)
		if err != nil {
			return err, false
		}
		m.StackFileContent = stackFileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadUseManifestNamespacesFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useManifestNamespacesFlagName := fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
	if cmd.Flags().Changed(useManifestNamespacesFlagName) {

		var useManifestNamespacesFlagName string
		if cmdPrefix == "" {
			useManifestNamespacesFlagName = "useManifestNamespaces"
		} else {
			useManifestNamespacesFlagName = fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
		}

		useManifestNamespacesFlagValue, err := cmd.Flags().GetBool(useManifestNamespacesFlagName)
		if err != nil {
			return err, false
		}
		m.UseManifestNamespaces = &useManifestNamespacesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksUpdateEdgeStackPayloadVersionFlags(depth int, m *models.EdgestacksUpdateEdgeStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
