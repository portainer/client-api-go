// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for RegistriesRegistryUpdatePayload

// register flags to command
func registerModelRegistriesRegistryUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistriesRegistryUpdatePayloadAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadBaseURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadEcr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadGithub(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadQuay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadRegistryAccesses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryUpdatePayloadUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryUpdatePayloadAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationDescription := `Required. `

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
	}

	var authenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(authenticationFlagName, authenticationFlagDefault, authenticationDescription)

	return nil
}

func registerRegistriesRegistryUpdatePayloadBaseURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	baseUrlDescription := ``

	var baseUrlFlagName string
	if cmdPrefix == "" {
		baseUrlFlagName = "baseURL"
	} else {
		baseUrlFlagName = fmt.Sprintf("%v.baseURL", cmdPrefix)
	}

	var baseUrlFlagDefault string

	_ = cmd.PersistentFlags().String(baseUrlFlagName, baseUrlFlagDefault, baseUrlDescription)

	return nil
}

func registerRegistriesRegistryUpdatePayloadEcr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ecrFlagName string
	if cmdPrefix == "" {
		ecrFlagName = "ecr"
	} else {
		ecrFlagName = fmt.Sprintf("%v.ecr", cmdPrefix)
	}

	if err := registerModelPortainereeEcrDataFlags(depth+1, ecrFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryUpdatePayloadGithub(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var githubFlagName string
	if cmdPrefix == "" {
		githubFlagName = "github"
	} else {
		githubFlagName = fmt.Sprintf("%v.github", cmdPrefix)
	}

	if err := registerModelPortainereeGithubRegistryDataFlags(depth+1, githubFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryUpdatePayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerRegistriesRegistryUpdatePayloadPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerRegistriesRegistryUpdatePayloadQuay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var quayFlagName string
	if cmdPrefix == "" {
		quayFlagName = "quay"
	} else {
		quayFlagName = fmt.Sprintf("%v.quay", cmdPrefix)
	}

	if err := registerModelPortainereeQuayRegistryDataFlags(depth+1, quayFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryUpdatePayloadRegistryAccesses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: registryAccesses PortainereeRegistryAccesses map type is not supported by go-swagger cli yet

	return nil
}

func registerRegistriesRegistryUpdatePayloadURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `Required. `

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

func registerRegistriesRegistryUpdatePayloadUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistriesRegistryUpdatePayloadFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authenticationAdded := retrieveRegistriesRegistryUpdatePayloadAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, baseUrlAdded := retrieveRegistriesRegistryUpdatePayloadBaseURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || baseUrlAdded

	err, ecrAdded := retrieveRegistriesRegistryUpdatePayloadEcrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ecrAdded

	err, githubAdded := retrieveRegistriesRegistryUpdatePayloadGithubFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || githubAdded

	err, nameAdded := retrieveRegistriesRegistryUpdatePayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, passwordAdded := retrieveRegistriesRegistryUpdatePayloadPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, quayAdded := retrieveRegistriesRegistryUpdatePayloadQuayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quayAdded

	err, registryAccessesAdded := retrieveRegistriesRegistryUpdatePayloadRegistryAccessesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryAccessesAdded

	err, urlAdded := retrieveRegistriesRegistryUpdatePayloadURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	err, usernameAdded := retrieveRegistriesRegistryUpdatePayloadUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadAuthenticationFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {

		var authenticationFlagName string
		if cmdPrefix == "" {
			authenticationFlagName = "authentication"
		} else {
			authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
		}

		authenticationFlagValue, err := cmd.Flags().GetBool(authenticationFlagName)
		if err != nil {
			return err, false
		}
		m.Authentication = &authenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadBaseURLFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	baseUrlFlagName := fmt.Sprintf("%v.baseURL", cmdPrefix)
	if cmd.Flags().Changed(baseUrlFlagName) {

		var baseUrlFlagName string
		if cmdPrefix == "" {
			baseUrlFlagName = "baseURL"
		} else {
			baseUrlFlagName = fmt.Sprintf("%v.baseURL", cmdPrefix)
		}

		baseUrlFlagValue, err := cmd.Flags().GetString(baseUrlFlagName)
		if err != nil {
			return err, false
		}
		m.BaseURL = baseUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadEcrFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ecrFlagName := fmt.Sprintf("%v.ecr", cmdPrefix)
	if cmd.Flags().Changed(ecrFlagName) {
		// info: complex object ecr PortainereeEcrData is retrieved outside this Changed() block
	}
	ecrFlagValue := m.Ecr
	if swag.IsZero(ecrFlagValue) {
		ecrFlagValue = &models.PortainereeEcrData{}
	}

	err, ecrAdded := retrieveModelPortainereeEcrDataFlags(depth+1, ecrFlagValue, ecrFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ecrAdded
	if ecrAdded {
		m.Ecr = ecrFlagValue
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadGithubFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	githubFlagName := fmt.Sprintf("%v.github", cmdPrefix)
	if cmd.Flags().Changed(githubFlagName) {
		// info: complex object github PortainereeGithubRegistryData is retrieved outside this Changed() block
	}
	githubFlagValue := m.Github
	if swag.IsZero(githubFlagValue) {
		githubFlagValue = &models.PortainereeGithubRegistryData{}
	}

	err, githubAdded := retrieveModelPortainereeGithubRegistryDataFlags(depth+1, githubFlagValue, githubFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || githubAdded
	if githubAdded {
		m.Github = githubFlagValue
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadNameFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadPasswordFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadQuayFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quayFlagName := fmt.Sprintf("%v.quay", cmdPrefix)
	if cmd.Flags().Changed(quayFlagName) {
		// info: complex object quay PortainereeQuayRegistryData is retrieved outside this Changed() block
	}
	quayFlagValue := m.Quay
	if swag.IsZero(quayFlagValue) {
		quayFlagValue = &models.PortainereeQuayRegistryData{}
	}

	err, quayAdded := retrieveModelPortainereeQuayRegistryDataFlags(depth+1, quayFlagValue, quayFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quayAdded
	if quayAdded {
		m.Quay = quayFlagValue
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadRegistryAccessesFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryAccessesFlagName := fmt.Sprintf("%v.registryAccesses", cmdPrefix)
	if cmd.Flags().Changed(registryAccessesFlagName) {
		// warning: registryAccesses map type PortainereeRegistryAccesses is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadURLFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = &urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryUpdatePayloadUsernameFlags(depth int, m *models.RegistriesRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
