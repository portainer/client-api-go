// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/registries"

	"github.com/spf13/cobra"
)

// makeOperationRegistriesEcrDeleteRepositoryCmd returns a cmd to handle operation ecrDeleteRepository
func makeOperationRegistriesEcrDeleteRepositoryCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ecrDeleteRepository",
		Short: `Delete ECR repository.
**Access policy**: restricted`,
		RunE: runOperationRegistriesEcrDeleteRepository,
	}

	if err := registerOperationRegistriesEcrDeleteRepositoryParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRegistriesEcrDeleteRepository uses cmd flags to call endpoint api
func runOperationRegistriesEcrDeleteRepository(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := registries.NewEcrDeleteRepositoryParams()
	if err, _ := retrieveOperationRegistriesEcrDeleteRepositoryIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRegistriesEcrDeleteRepositoryRepositoryNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRegistriesEcrDeleteRepositoryResult(appCli.Registries.EcrDeleteRepository(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationRegistriesEcrDeleteRepositoryParamFlags registers all flags needed to fill params
func registerOperationRegistriesEcrDeleteRepositoryParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRegistriesEcrDeleteRepositoryIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRegistriesEcrDeleteRepositoryRepositoryNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRegistriesEcrDeleteRepositoryIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Registry identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationRegistriesEcrDeleteRepositoryRepositoryNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	repositoryNameDescription := `Required. Repository name`

	var repositoryNameFlagName string
	if cmdPrefix == "" {
		repositoryNameFlagName = "repositoryName"
	} else {
		repositoryNameFlagName = fmt.Sprintf("%v.repositoryName", cmdPrefix)
	}

	var repositoryNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryNameFlagName, repositoryNameFlagDefault, repositoryNameDescription)

	return nil
}

func retrieveOperationRegistriesEcrDeleteRepositoryIDFlag(m *registries.EcrDeleteRepositoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRegistriesEcrDeleteRepositoryRepositoryNameFlag(m *registries.EcrDeleteRepositoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repositoryName") {

		var repositoryNameFlagName string
		if cmdPrefix == "" {
			repositoryNameFlagName = "repositoryName"
		} else {
			repositoryNameFlagName = fmt.Sprintf("%v.repositoryName", cmdPrefix)
		}

		repositoryNameFlagValue, err := cmd.Flags().GetString(repositoryNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryName = repositoryNameFlagValue

	}
	return nil, retAdded
}

// parseOperationRegistriesEcrDeleteRepositoryResult parses request result and return the string content
func parseOperationRegistriesEcrDeleteRepositoryResult(resp0 *registries.EcrDeleteRepositoryOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning ecrDeleteRepositoryOK is not supported

		// Non schema case: warning ecrDeleteRepositoryBadRequest is not supported

		// Non schema case: warning ecrDeleteRepositoryForbidden is not supported

		// Non schema case: warning ecrDeleteRepositoryNotFound is not supported

		// Non schema case: warning ecrDeleteRepositoryInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response ecrDeleteRepositoryOK is not supported by go-swagger cli yet.

	return "", nil
}
