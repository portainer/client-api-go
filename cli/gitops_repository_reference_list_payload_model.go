// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for GitopsRepositoryReferenceListPayload

// register flags to command
func registerModelGitopsRepositoryReferenceListPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGitopsRepositoryReferenceListPayloadGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryReferenceListPayloadPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryReferenceListPayloadRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryReferenceListPayloadStackID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryReferenceListPayloadUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGitopsRepositoryReferenceListPayloadGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gitCredentialIdDescription := ``

	var gitCredentialIdFlagName string
	if cmdPrefix == "" {
		gitCredentialIdFlagName = "gitCredentialID"
	} else {
		gitCredentialIdFlagName = fmt.Sprintf("%v.gitCredentialID", cmdPrefix)
	}

	var gitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(gitCredentialIdFlagName, gitCredentialIdFlagDefault, gitCredentialIdDescription)

	return nil
}

func registerGitopsRepositoryReferenceListPayloadPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerGitopsRepositoryReferenceListPayloadRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryDescription := `Required. `

	var repositoryFlagName string
	if cmdPrefix == "" {
		repositoryFlagName = "repository"
	} else {
		repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
	}

	var repositoryFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryFlagName, repositoryFlagDefault, repositoryDescription)

	return nil
}

func registerGitopsRepositoryReferenceListPayloadStackID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackIdDescription := ``

	var stackIdFlagName string
	if cmdPrefix == "" {
		stackIdFlagName = "stackID"
	} else {
		stackIdFlagName = fmt.Sprintf("%v.stackID", cmdPrefix)
	}

	var stackIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(stackIdFlagName, stackIdFlagDefault, stackIdDescription)

	return nil
}

func registerGitopsRepositoryReferenceListPayloadUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGitopsRepositoryReferenceListPayloadFlags(depth int, m *models.GitopsRepositoryReferenceListPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, gitCredentialIdAdded := retrieveGitopsRepositoryReferenceListPayloadGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitCredentialIdAdded

	err, passwordAdded := retrieveGitopsRepositoryReferenceListPayloadPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, repositoryAdded := retrieveGitopsRepositoryReferenceListPayloadRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded

	err, stackIdAdded := retrieveGitopsRepositoryReferenceListPayloadStackIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackIdAdded

	err, usernameAdded := retrieveGitopsRepositoryReferenceListPayloadUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveGitopsRepositoryReferenceListPayloadGitCredentialIDFlags(depth int, m *models.GitopsRepositoryReferenceListPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gitCredentialIdFlagName := fmt.Sprintf("%v.gitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(gitCredentialIdFlagName) {

		var gitCredentialIdFlagName string
		if cmdPrefix == "" {
			gitCredentialIdFlagName = "gitCredentialID"
		} else {
			gitCredentialIdFlagName = fmt.Sprintf("%v.gitCredentialID", cmdPrefix)
		}

		gitCredentialIdFlagValue, err := cmd.Flags().GetInt64(gitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.GitCredentialID = gitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryReferenceListPayloadPasswordFlags(depth int, m *models.GitopsRepositoryReferenceListPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryReferenceListPayloadRepositoryFlags(depth int, m *models.GitopsRepositoryReferenceListPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryFlagName := fmt.Sprintf("%v.repository", cmdPrefix)
	if cmd.Flags().Changed(repositoryFlagName) {

		var repositoryFlagName string
		if cmdPrefix == "" {
			repositoryFlagName = "repository"
		} else {
			repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
		}

		repositoryFlagValue, err := cmd.Flags().GetString(repositoryFlagName)
		if err != nil {
			return err, false
		}
		m.Repository = &repositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryReferenceListPayloadStackIDFlags(depth int, m *models.GitopsRepositoryReferenceListPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackIdFlagName := fmt.Sprintf("%v.stackID", cmdPrefix)
	if cmd.Flags().Changed(stackIdFlagName) {

		var stackIdFlagName string
		if cmdPrefix == "" {
			stackIdFlagName = "stackID"
		} else {
			stackIdFlagName = fmt.Sprintf("%v.stackID", cmdPrefix)
		}

		stackIdFlagValue, err := cmd.Flags().GetInt64(stackIdFlagName)
		if err != nil {
			return err, false
		}
		m.StackID = stackIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryReferenceListPayloadUsernameFlags(depth int, m *models.GitopsRepositoryReferenceListPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
