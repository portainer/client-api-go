// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeAzureCredentials

// register flags to command
func registerModelPortainereeAzureCredentialsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeAzureCredentialsApplicationID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeAzureCredentialsAuthenticationKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeAzureCredentialsTenantID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeAzureCredentialsApplicationID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	applicationIdDescription := `Azure application ID`

	var applicationIdFlagName string
	if cmdPrefix == "" {
		applicationIdFlagName = "ApplicationID"
	} else {
		applicationIdFlagName = fmt.Sprintf("%v.ApplicationID", cmdPrefix)
	}

	var applicationIdFlagDefault string

	_ = cmd.PersistentFlags().String(applicationIdFlagName, applicationIdFlagDefault, applicationIdDescription)

	return nil
}

func registerPortainereeAzureCredentialsAuthenticationKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationKeyDescription := `Azure authentication key`

	var authenticationKeyFlagName string
	if cmdPrefix == "" {
		authenticationKeyFlagName = "AuthenticationKey"
	} else {
		authenticationKeyFlagName = fmt.Sprintf("%v.AuthenticationKey", cmdPrefix)
	}

	var authenticationKeyFlagDefault string

	_ = cmd.PersistentFlags().String(authenticationKeyFlagName, authenticationKeyFlagDefault, authenticationKeyDescription)

	return nil
}

func registerPortainereeAzureCredentialsTenantID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tenantIdDescription := `Azure tenant ID`

	var tenantIdFlagName string
	if cmdPrefix == "" {
		tenantIdFlagName = "TenantID"
	} else {
		tenantIdFlagName = fmt.Sprintf("%v.TenantID", cmdPrefix)
	}

	var tenantIdFlagDefault string

	_ = cmd.PersistentFlags().String(tenantIdFlagName, tenantIdFlagDefault, tenantIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeAzureCredentialsFlags(depth int, m *models.PortainereeAzureCredentials, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, applicationIdAdded := retrievePortainereeAzureCredentialsApplicationIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || applicationIdAdded

	err, authenticationKeyAdded := retrievePortainereeAzureCredentialsAuthenticationKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationKeyAdded

	err, tenantIdAdded := retrievePortainereeAzureCredentialsTenantIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tenantIdAdded

	return nil, retAdded
}

func retrievePortainereeAzureCredentialsApplicationIDFlags(depth int, m *models.PortainereeAzureCredentials, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	applicationIdFlagName := fmt.Sprintf("%v.ApplicationID", cmdPrefix)
	if cmd.Flags().Changed(applicationIdFlagName) {

		var applicationIdFlagName string
		if cmdPrefix == "" {
			applicationIdFlagName = "ApplicationID"
		} else {
			applicationIdFlagName = fmt.Sprintf("%v.ApplicationID", cmdPrefix)
		}

		applicationIdFlagValue, err := cmd.Flags().GetString(applicationIdFlagName)
		if err != nil {
			return err, false
		}
		m.ApplicationID = applicationIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeAzureCredentialsAuthenticationKeyFlags(depth int, m *models.PortainereeAzureCredentials, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationKeyFlagName := fmt.Sprintf("%v.AuthenticationKey", cmdPrefix)
	if cmd.Flags().Changed(authenticationKeyFlagName) {

		var authenticationKeyFlagName string
		if cmdPrefix == "" {
			authenticationKeyFlagName = "AuthenticationKey"
		} else {
			authenticationKeyFlagName = fmt.Sprintf("%v.AuthenticationKey", cmdPrefix)
		}

		authenticationKeyFlagValue, err := cmd.Flags().GetString(authenticationKeyFlagName)
		if err != nil {
			return err, false
		}
		m.AuthenticationKey = authenticationKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeAzureCredentialsTenantIDFlags(depth int, m *models.PortainereeAzureCredentials, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tenantIdFlagName := fmt.Sprintf("%v.TenantID", cmdPrefix)
	if cmd.Flags().Changed(tenantIdFlagName) {

		var tenantIdFlagName string
		if cmdPrefix == "" {
			tenantIdFlagName = "TenantID"
		} else {
			tenantIdFlagName = fmt.Sprintf("%v.TenantID", cmdPrefix)
		}

		tenantIdFlagValue, err := cmd.Flags().GetString(tenantIdFlagName)
		if err != nil {
			return err, false
		}
		m.TenantID = tenantIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
