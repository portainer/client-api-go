// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeEndpointSecuritySettings

// register flags to command
func registerModelPortainereeEndpointSecuritySettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEndpointSecuritySettingsAllowBindMountsForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsAllowContainerCapabilitiesForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsAllowDeviceMappingForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsAllowHostNamespaceForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsAllowPrivilegedModeForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsAllowStackManagementForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsAllowSysctlSettingForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsAllowVolumeBrowserForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettingsEnableHostManagementFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowBindMountsForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowBindMountsForRegularUsersDescription := `Whether non-administrator should be able to use bind mounts when creating containers`

	var allowBindMountsForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowBindMountsForRegularUsersFlagName = "allowBindMountsForRegularUsers"
	} else {
		allowBindMountsForRegularUsersFlagName = fmt.Sprintf("%v.allowBindMountsForRegularUsers", cmdPrefix)
	}

	var allowBindMountsForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowBindMountsForRegularUsersFlagName, allowBindMountsForRegularUsersFlagDefault, allowBindMountsForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowContainerCapabilitiesForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowContainerCapabilitiesForRegularUsersDescription := `Whether non-administrator should be able to use container capabilities`

	var allowContainerCapabilitiesForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowContainerCapabilitiesForRegularUsersFlagName = "allowContainerCapabilitiesForRegularUsers"
	} else {
		allowContainerCapabilitiesForRegularUsersFlagName = fmt.Sprintf("%v.allowContainerCapabilitiesForRegularUsers", cmdPrefix)
	}

	var allowContainerCapabilitiesForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowContainerCapabilitiesForRegularUsersFlagName, allowContainerCapabilitiesForRegularUsersFlagDefault, allowContainerCapabilitiesForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowDeviceMappingForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowDeviceMappingForRegularUsersDescription := `Whether non-administrator should be able to use device mapping`

	var allowDeviceMappingForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowDeviceMappingForRegularUsersFlagName = "allowDeviceMappingForRegularUsers"
	} else {
		allowDeviceMappingForRegularUsersFlagName = fmt.Sprintf("%v.allowDeviceMappingForRegularUsers", cmdPrefix)
	}

	var allowDeviceMappingForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowDeviceMappingForRegularUsersFlagName, allowDeviceMappingForRegularUsersFlagDefault, allowDeviceMappingForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowHostNamespaceForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowHostNamespaceForRegularUsersDescription := `Whether non-administrator should be able to use the host pid`

	var allowHostNamespaceForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowHostNamespaceForRegularUsersFlagName = "allowHostNamespaceForRegularUsers"
	} else {
		allowHostNamespaceForRegularUsersFlagName = fmt.Sprintf("%v.allowHostNamespaceForRegularUsers", cmdPrefix)
	}

	var allowHostNamespaceForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowHostNamespaceForRegularUsersFlagName, allowHostNamespaceForRegularUsersFlagDefault, allowHostNamespaceForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowPrivilegedModeForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowPrivilegedModeForRegularUsersDescription := `Whether non-administrator should be able to use privileged mode when creating containers`

	var allowPrivilegedModeForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowPrivilegedModeForRegularUsersFlagName = "allowPrivilegedModeForRegularUsers"
	} else {
		allowPrivilegedModeForRegularUsersFlagName = fmt.Sprintf("%v.allowPrivilegedModeForRegularUsers", cmdPrefix)
	}

	var allowPrivilegedModeForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowPrivilegedModeForRegularUsersFlagName, allowPrivilegedModeForRegularUsersFlagDefault, allowPrivilegedModeForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowStackManagementForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowStackManagementForRegularUsersDescription := `Whether non-administrator should be able to manage stacks`

	var allowStackManagementForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowStackManagementForRegularUsersFlagName = "allowStackManagementForRegularUsers"
	} else {
		allowStackManagementForRegularUsersFlagName = fmt.Sprintf("%v.allowStackManagementForRegularUsers", cmdPrefix)
	}

	var allowStackManagementForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowStackManagementForRegularUsersFlagName, allowStackManagementForRegularUsersFlagDefault, allowStackManagementForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowSysctlSettingForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowSysctlSettingForRegularUsersDescription := `Whether non-administrator should be able to use sysctl settings`

	var allowSysctlSettingForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowSysctlSettingForRegularUsersFlagName = "allowSysctlSettingForRegularUsers"
	} else {
		allowSysctlSettingForRegularUsersFlagName = fmt.Sprintf("%v.allowSysctlSettingForRegularUsers", cmdPrefix)
	}

	var allowSysctlSettingForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowSysctlSettingForRegularUsersFlagName, allowSysctlSettingForRegularUsersFlagDefault, allowSysctlSettingForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsAllowVolumeBrowserForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowVolumeBrowserForRegularUsersDescription := `Whether non-administrator should be able to browse volumes`

	var allowVolumeBrowserForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowVolumeBrowserForRegularUsersFlagName = "allowVolumeBrowserForRegularUsers"
	} else {
		allowVolumeBrowserForRegularUsersFlagName = fmt.Sprintf("%v.allowVolumeBrowserForRegularUsers", cmdPrefix)
	}

	var allowVolumeBrowserForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowVolumeBrowserForRegularUsersFlagName, allowVolumeBrowserForRegularUsersFlagDefault, allowVolumeBrowserForRegularUsersDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettingsEnableHostManagementFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableHostManagementFeaturesDescription := `Whether host management features are enabled`

	var enableHostManagementFeaturesFlagName string
	if cmdPrefix == "" {
		enableHostManagementFeaturesFlagName = "enableHostManagementFeatures"
	} else {
		enableHostManagementFeaturesFlagName = fmt.Sprintf("%v.enableHostManagementFeatures", cmdPrefix)
	}

	var enableHostManagementFeaturesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableHostManagementFeaturesFlagName, enableHostManagementFeaturesFlagDefault, enableHostManagementFeaturesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEndpointSecuritySettingsFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allowBindMountsForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowBindMountsForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowBindMountsForRegularUsersAdded

	err, allowContainerCapabilitiesForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowContainerCapabilitiesForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowContainerCapabilitiesForRegularUsersAdded

	err, allowDeviceMappingForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowDeviceMappingForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowDeviceMappingForRegularUsersAdded

	err, allowHostNamespaceForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowHostNamespaceForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowHostNamespaceForRegularUsersAdded

	err, allowPrivilegedModeForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowPrivilegedModeForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowPrivilegedModeForRegularUsersAdded

	err, allowStackManagementForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowStackManagementForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowStackManagementForRegularUsersAdded

	err, allowSysctlSettingForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowSysctlSettingForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowSysctlSettingForRegularUsersAdded

	err, allowVolumeBrowserForRegularUsersAdded := retrievePortainereeEndpointSecuritySettingsAllowVolumeBrowserForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowVolumeBrowserForRegularUsersAdded

	err, enableHostManagementFeaturesAdded := retrievePortainereeEndpointSecuritySettingsEnableHostManagementFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableHostManagementFeaturesAdded

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowBindMountsForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowBindMountsForRegularUsersFlagName := fmt.Sprintf("%v.allowBindMountsForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowBindMountsForRegularUsersFlagName) {

		var allowBindMountsForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowBindMountsForRegularUsersFlagName = "allowBindMountsForRegularUsers"
		} else {
			allowBindMountsForRegularUsersFlagName = fmt.Sprintf("%v.allowBindMountsForRegularUsers", cmdPrefix)
		}

		allowBindMountsForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowBindMountsForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowBindMountsForRegularUsers = &allowBindMountsForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowContainerCapabilitiesForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowContainerCapabilitiesForRegularUsersFlagName := fmt.Sprintf("%v.allowContainerCapabilitiesForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowContainerCapabilitiesForRegularUsersFlagName) {

		var allowContainerCapabilitiesForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowContainerCapabilitiesForRegularUsersFlagName = "allowContainerCapabilitiesForRegularUsers"
		} else {
			allowContainerCapabilitiesForRegularUsersFlagName = fmt.Sprintf("%v.allowContainerCapabilitiesForRegularUsers", cmdPrefix)
		}

		allowContainerCapabilitiesForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowContainerCapabilitiesForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowContainerCapabilitiesForRegularUsers = &allowContainerCapabilitiesForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowDeviceMappingForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowDeviceMappingForRegularUsersFlagName := fmt.Sprintf("%v.allowDeviceMappingForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowDeviceMappingForRegularUsersFlagName) {

		var allowDeviceMappingForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowDeviceMappingForRegularUsersFlagName = "allowDeviceMappingForRegularUsers"
		} else {
			allowDeviceMappingForRegularUsersFlagName = fmt.Sprintf("%v.allowDeviceMappingForRegularUsers", cmdPrefix)
		}

		allowDeviceMappingForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowDeviceMappingForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowDeviceMappingForRegularUsers = &allowDeviceMappingForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowHostNamespaceForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowHostNamespaceForRegularUsersFlagName := fmt.Sprintf("%v.allowHostNamespaceForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowHostNamespaceForRegularUsersFlagName) {

		var allowHostNamespaceForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowHostNamespaceForRegularUsersFlagName = "allowHostNamespaceForRegularUsers"
		} else {
			allowHostNamespaceForRegularUsersFlagName = fmt.Sprintf("%v.allowHostNamespaceForRegularUsers", cmdPrefix)
		}

		allowHostNamespaceForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowHostNamespaceForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowHostNamespaceForRegularUsers = &allowHostNamespaceForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowPrivilegedModeForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowPrivilegedModeForRegularUsersFlagName := fmt.Sprintf("%v.allowPrivilegedModeForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowPrivilegedModeForRegularUsersFlagName) {

		var allowPrivilegedModeForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowPrivilegedModeForRegularUsersFlagName = "allowPrivilegedModeForRegularUsers"
		} else {
			allowPrivilegedModeForRegularUsersFlagName = fmt.Sprintf("%v.allowPrivilegedModeForRegularUsers", cmdPrefix)
		}

		allowPrivilegedModeForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowPrivilegedModeForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowPrivilegedModeForRegularUsers = &allowPrivilegedModeForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowStackManagementForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowStackManagementForRegularUsersFlagName := fmt.Sprintf("%v.allowStackManagementForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowStackManagementForRegularUsersFlagName) {

		var allowStackManagementForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowStackManagementForRegularUsersFlagName = "allowStackManagementForRegularUsers"
		} else {
			allowStackManagementForRegularUsersFlagName = fmt.Sprintf("%v.allowStackManagementForRegularUsers", cmdPrefix)
		}

		allowStackManagementForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowStackManagementForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowStackManagementForRegularUsers = &allowStackManagementForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowSysctlSettingForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowSysctlSettingForRegularUsersFlagName := fmt.Sprintf("%v.allowSysctlSettingForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowSysctlSettingForRegularUsersFlagName) {

		var allowSysctlSettingForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowSysctlSettingForRegularUsersFlagName = "allowSysctlSettingForRegularUsers"
		} else {
			allowSysctlSettingForRegularUsersFlagName = fmt.Sprintf("%v.allowSysctlSettingForRegularUsers", cmdPrefix)
		}

		allowSysctlSettingForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowSysctlSettingForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowSysctlSettingForRegularUsers = &allowSysctlSettingForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsAllowVolumeBrowserForRegularUsersFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowVolumeBrowserForRegularUsersFlagName := fmt.Sprintf("%v.allowVolumeBrowserForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowVolumeBrowserForRegularUsersFlagName) {

		var allowVolumeBrowserForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowVolumeBrowserForRegularUsersFlagName = "allowVolumeBrowserForRegularUsers"
		} else {
			allowVolumeBrowserForRegularUsersFlagName = fmt.Sprintf("%v.allowVolumeBrowserForRegularUsers", cmdPrefix)
		}

		allowVolumeBrowserForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowVolumeBrowserForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowVolumeBrowserForRegularUsers = &allowVolumeBrowserForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsEnableHostManagementFeaturesFlags(depth int, m *models.PortainereeEndpointSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableHostManagementFeaturesFlagName := fmt.Sprintf("%v.enableHostManagementFeatures", cmdPrefix)
	if cmd.Flags().Changed(enableHostManagementFeaturesFlagName) {

		var enableHostManagementFeaturesFlagName string
		if cmdPrefix == "" {
			enableHostManagementFeaturesFlagName = "enableHostManagementFeatures"
		} else {
			enableHostManagementFeaturesFlagName = fmt.Sprintf("%v.enableHostManagementFeatures", cmdPrefix)
		}

		enableHostManagementFeaturesFlagValue, err := cmd.Flags().GetBool(enableHostManagementFeaturesFlagName)
		if err != nil {
			return err, false
		}
		m.EnableHostManagementFeatures = &enableHostManagementFeaturesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
