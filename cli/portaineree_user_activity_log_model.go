// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeUserActivityLog

// register flags to command
func registerModelPortainereeUserActivityLogFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeUserActivityLogAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserActivityLogContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserActivityLogID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserActivityLogPayload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserActivityLogTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserActivityLogUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeUserActivityLogAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := ``

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	return nil
}

func registerPortainereeUserActivityLogContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contextDescription := ``

	var contextFlagName string
	if cmdPrefix == "" {
		contextFlagName = "context"
	} else {
		contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
	}

	var contextFlagDefault string

	_ = cmd.PersistentFlags().String(contextFlagName, contextFlagDefault, contextDescription)

	return nil
}

func registerPortainereeUserActivityLogID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeUserActivityLogPayload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: payload []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeUserActivityLogTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timestampDescription := ``

	var timestampFlagName string
	if cmdPrefix == "" {
		timestampFlagName = "timestamp"
	} else {
		timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	var timestampFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timestampFlagName, timestampFlagDefault, timestampDescription)

	return nil
}

func registerPortainereeUserActivityLogUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeUserActivityLogFlags(depth int, m *models.PortainereeUserActivityLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrievePortainereeUserActivityLogActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, contextAdded := retrievePortainereeUserActivityLogContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextAdded

	err, idAdded := retrievePortainereeUserActivityLogIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, payloadAdded := retrievePortainereeUserActivityLogPayloadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || payloadAdded

	err, timestampAdded := retrievePortainereeUserActivityLogTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampAdded

	err, usernameAdded := retrievePortainereeUserActivityLogUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrievePortainereeUserActivityLogActionFlags(depth int, m *models.PortainereeUserActivityLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserActivityLogContextFlags(depth int, m *models.PortainereeUserActivityLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contextFlagName := fmt.Sprintf("%v.context", cmdPrefix)
	if cmd.Flags().Changed(contextFlagName) {

		var contextFlagName string
		if cmdPrefix == "" {
			contextFlagName = "context"
		} else {
			contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
		}

		contextFlagValue, err := cmd.Flags().GetString(contextFlagName)
		if err != nil {
			return err, false
		}
		m.Context = contextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserActivityLogIDFlags(depth int, m *models.PortainereeUserActivityLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserActivityLogPayloadFlags(depth int, m *models.PortainereeUserActivityLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	payloadFlagName := fmt.Sprintf("%v.payload", cmdPrefix)
	if cmd.Flags().Changed(payloadFlagName) {
		// warning: payload array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeUserActivityLogTimestampFlags(depth int, m *models.PortainereeUserActivityLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampFlagName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(timestampFlagName) {

		var timestampFlagName string
		if cmdPrefix == "" {
			timestampFlagName = "timestamp"
		} else {
			timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		timestampFlagValue, err := cmd.Flags().GetInt64(timestampFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamp = timestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserActivityLogUsernameFlags(depth int, m *models.PortainereeUserActivityLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
