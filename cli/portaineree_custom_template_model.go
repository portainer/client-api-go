// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeCustomTemplate

// register flags to command
func registerModelPortainereeCustomTemplateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeCustomTemplateCreatedByUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateEntryPoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateLogo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplatePlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateProjectPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateResourceControl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCustomTemplateVariables(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeCustomTemplateCreatedByUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdByUserIdDescription := `User identifier who created this template`

	var createdByUserIdFlagName string
	if cmdPrefix == "" {
		createdByUserIdFlagName = "CreatedByUserId"
	} else {
		createdByUserIdFlagName = fmt.Sprintf("%v.CreatedByUserId", cmdPrefix)
	}

	var createdByUserIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(createdByUserIdFlagName, createdByUserIdFlagDefault, createdByUserIdDescription)

	return nil
}

func registerPortainereeCustomTemplateDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description of the template`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "Description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerPortainereeCustomTemplateEntryPoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entryPointDescription := `Path to the Stack file`

	var entryPointFlagName string
	if cmdPrefix == "" {
		entryPointFlagName = "EntryPoint"
	} else {
		entryPointFlagName = fmt.Sprintf("%v.EntryPoint", cmdPrefix)
	}

	var entryPointFlagDefault string

	_ = cmd.PersistentFlags().String(entryPointFlagName, entryPointFlagDefault, entryPointDescription)

	return nil
}

func registerPortainereeCustomTemplateID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `CustomTemplate Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeCustomTemplateLogo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoDescription := `URL of the template's logo`

	var logoFlagName string
	if cmdPrefix == "" {
		logoFlagName = "Logo"
	} else {
		logoFlagName = fmt.Sprintf("%v.Logo", cmdPrefix)
	}

	var logoFlagDefault string

	_ = cmd.PersistentFlags().String(logoFlagName, logoFlagDefault, logoDescription)

	return nil
}

func registerPortainereeCustomTemplateNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noteDescription := `A note that will be displayed in the UI. Supports HTML content`

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "Note"
	} else {
		noteFlagName = fmt.Sprintf("%v.Note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}

func registerPortainereeCustomTemplatePlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformDescription := `Enum: [1,2]. Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'`

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "Platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
	}

	var platformFlagDefault int64

	_ = cmd.PersistentFlags().Int64(platformFlagName, platformFlagDefault, platformDescription)

	if err := cmd.RegisterFlagCompletionFunc(platformFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerPortainereeCustomTemplateProjectPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectPathDescription := `Path on disk to the repository hosting the Stack file`

	var projectPathFlagName string
	if cmdPrefix == "" {
		projectPathFlagName = "ProjectPath"
	} else {
		projectPathFlagName = fmt.Sprintf("%v.ProjectPath", cmdPrefix)
	}

	var projectPathFlagDefault string

	_ = cmd.PersistentFlags().String(projectPathFlagName, projectPathFlagDefault, projectPathDescription)

	return nil
}

func registerPortainereeCustomTemplateResourceControl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var resourceControlFlagName string
	if cmdPrefix == "" {
		resourceControlFlagName = "ResourceControl"
	} else {
		resourceControlFlagName = fmt.Sprintf("%v.ResourceControl", cmdPrefix)
	}

	if err := registerModelPortainereeResourceControlFlags(depth+1, resourceControlFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeCustomTemplateTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := `Title of the template`

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "Title"
	} else {
		titleFlagName = fmt.Sprintf("%v.Title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

func registerPortainereeCustomTemplateType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Type of created stack (1 - swarm, 2 - compose)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerPortainereeCustomTemplateVariables(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: variables []*PortainereeCustomTemplateVariableDefinition array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeCustomTemplateFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdByUserIdAdded := retrievePortainereeCustomTemplateCreatedByUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdByUserIdAdded

	err, descriptionAdded := retrievePortainereeCustomTemplateDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, entryPointAdded := retrievePortainereeCustomTemplateEntryPointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entryPointAdded

	err, idAdded := retrievePortainereeCustomTemplateIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, logoAdded := retrievePortainereeCustomTemplateLogoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoAdded

	err, noteAdded := retrievePortainereeCustomTemplateNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noteAdded

	err, platformAdded := retrievePortainereeCustomTemplatePlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	err, projectPathAdded := retrievePortainereeCustomTemplateProjectPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectPathAdded

	err, resourceControlAdded := retrievePortainereeCustomTemplateResourceControlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceControlAdded

	err, titleAdded := retrievePortainereeCustomTemplateTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	err, typeAdded := retrievePortainereeCustomTemplateTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, variablesAdded := retrievePortainereeCustomTemplateVariablesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || variablesAdded

	return nil, retAdded
}

func retrievePortainereeCustomTemplateCreatedByUserIDFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdByUserIdFlagName := fmt.Sprintf("%v.CreatedByUserId", cmdPrefix)
	if cmd.Flags().Changed(createdByUserIdFlagName) {

		var createdByUserIdFlagName string
		if cmdPrefix == "" {
			createdByUserIdFlagName = "CreatedByUserId"
		} else {
			createdByUserIdFlagName = fmt.Sprintf("%v.CreatedByUserId", cmdPrefix)
		}

		createdByUserIdFlagValue, err := cmd.Flags().GetInt64(createdByUserIdFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedByUserID = createdByUserIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateDescriptionFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "Description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateEntryPointFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entryPointFlagName := fmt.Sprintf("%v.EntryPoint", cmdPrefix)
	if cmd.Flags().Changed(entryPointFlagName) {

		var entryPointFlagName string
		if cmdPrefix == "" {
			entryPointFlagName = "EntryPoint"
		} else {
			entryPointFlagName = fmt.Sprintf("%v.EntryPoint", cmdPrefix)
		}

		entryPointFlagValue, err := cmd.Flags().GetString(entryPointFlagName)
		if err != nil {
			return err, false
		}
		m.EntryPoint = entryPointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateIDFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateLogoFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoFlagName := fmt.Sprintf("%v.Logo", cmdPrefix)
	if cmd.Flags().Changed(logoFlagName) {

		var logoFlagName string
		if cmdPrefix == "" {
			logoFlagName = "Logo"
		} else {
			logoFlagName = fmt.Sprintf("%v.Logo", cmdPrefix)
		}

		logoFlagValue, err := cmd.Flags().GetString(logoFlagName)
		if err != nil {
			return err, false
		}
		m.Logo = logoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateNoteFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noteFlagName := fmt.Sprintf("%v.Note", cmdPrefix)
	if cmd.Flags().Changed(noteFlagName) {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "Note"
		} else {
			noteFlagName = fmt.Sprintf("%v.Note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = noteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplatePlatformFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformFlagName := fmt.Sprintf("%v.Platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {

		var platformFlagName string
		if cmdPrefix == "" {
			platformFlagName = "Platform"
		} else {
			platformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
		}

		platformFlagValue, err := cmd.Flags().GetInt64(platformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = platformFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateProjectPathFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectPathFlagName := fmt.Sprintf("%v.ProjectPath", cmdPrefix)
	if cmd.Flags().Changed(projectPathFlagName) {

		var projectPathFlagName string
		if cmdPrefix == "" {
			projectPathFlagName = "ProjectPath"
		} else {
			projectPathFlagName = fmt.Sprintf("%v.ProjectPath", cmdPrefix)
		}

		projectPathFlagValue, err := cmd.Flags().GetString(projectPathFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectPath = projectPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateResourceControlFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceControlFlagName := fmt.Sprintf("%v.ResourceControl", cmdPrefix)
	if cmd.Flags().Changed(resourceControlFlagName) {
		// info: complex object ResourceControl PortainereeResourceControl is retrieved outside this Changed() block
	}
	resourceControlFlagValue := m.ResourceControl
	if swag.IsZero(resourceControlFlagValue) {
		resourceControlFlagValue = &models.PortainereeResourceControl{}
	}

	err, resourceControlAdded := retrieveModelPortainereeResourceControlFlags(depth+1, resourceControlFlagValue, resourceControlFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceControlAdded
	if resourceControlAdded {
		m.ResourceControl = resourceControlFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateTitleFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.Title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "Title"
		} else {
			titleFlagName = fmt.Sprintf("%v.Title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateTypeFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCustomTemplateVariablesFlags(depth int, m *models.PortainereeCustomTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	variablesFlagName := fmt.Sprintf("%v.variables", cmdPrefix)
	if cmd.Flags().Changed(variablesFlagName) {
		// warning: variables array type []*PortainereeCustomTemplateVariableDefinition is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
