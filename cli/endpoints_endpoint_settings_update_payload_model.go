// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for EndpointsEndpointSettingsUpdatePayload

// register flags to command
func registerModelEndpointsEndpointSettingsUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointsEndpointSettingsUpdatePayloadChangeWindow(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadDeploymentOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadEnableImageNotification(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadChangeWindow(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var changeWindowFlagName string
	if cmdPrefix == "" {
		changeWindowFlagName = "changeWindow"
	} else {
		changeWindowFlagName = fmt.Sprintf("%v.changeWindow", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointChangeWindowFlags(depth+1, changeWindowFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadDeploymentOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deploymentOptionsFlagName string
	if cmdPrefix == "" {
		deploymentOptionsFlagName = "deploymentOptions"
	} else {
		deploymentOptionsFlagName = fmt.Sprintf("%v.deploymentOptions", cmdPrefix)
	}

	if err := registerModelPortainereeDeploymentOptionsFlags(depth+1, deploymentOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadEnableImageNotification(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableImageNotificationDescription := ``

	var enableImageNotificationFlagName string
	if cmdPrefix == "" {
		enableImageNotificationFlagName = "enableImageNotification"
	} else {
		enableImageNotificationFlagName = fmt.Sprintf("%v.enableImageNotification", cmdPrefix)
	}

	var enableImageNotificationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableImageNotificationFlagName, enableImageNotificationFlagDefault, enableImageNotificationDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var securitySettingsFlagName string
	if cmdPrefix == "" {
		securitySettingsFlagName = "securitySettings"
	} else {
		securitySettingsFlagName = fmt.Sprintf("%v.securitySettings", cmdPrefix)
	}

	if err := registerModelEndpointsEndpointSettingsUpdatePayloadSecuritySettingsFlags(depth+1, securitySettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointsEndpointSettingsUpdatePayloadFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, changeWindowAdded := retrieveEndpointsEndpointSettingsUpdatePayloadChangeWindowFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || changeWindowAdded

	err, deploymentOptionsAdded := retrieveEndpointsEndpointSettingsUpdatePayloadDeploymentOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentOptionsAdded

	err, enableImageNotificationAdded := retrieveEndpointsEndpointSettingsUpdatePayloadEnableImageNotificationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableImageNotificationAdded

	err, securitySettingsAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securitySettingsAdded

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadChangeWindowFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	changeWindowFlagName := fmt.Sprintf("%v.changeWindow", cmdPrefix)
	if cmd.Flags().Changed(changeWindowFlagName) {
		// info: complex object changeWindow PortainereeEndpointChangeWindow is retrieved outside this Changed() block
	}
	changeWindowFlagValue := m.ChangeWindow
	if swag.IsZero(changeWindowFlagValue) {
		changeWindowFlagValue = &models.PortainereeEndpointChangeWindow{}
	}

	err, changeWindowAdded := retrieveModelPortainereeEndpointChangeWindowFlags(depth+1, changeWindowFlagValue, changeWindowFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || changeWindowAdded
	if changeWindowAdded {
		m.ChangeWindow = changeWindowFlagValue
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadDeploymentOptionsFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deploymentOptionsFlagName := fmt.Sprintf("%v.deploymentOptions", cmdPrefix)
	if cmd.Flags().Changed(deploymentOptionsFlagName) {
		// info: complex object deploymentOptions PortainereeDeploymentOptions is retrieved outside this Changed() block
	}
	deploymentOptionsFlagValue := m.DeploymentOptions
	if swag.IsZero(deploymentOptionsFlagValue) {
		deploymentOptionsFlagValue = &models.PortainereeDeploymentOptions{}
	}

	err, deploymentOptionsAdded := retrieveModelPortainereeDeploymentOptionsFlags(depth+1, deploymentOptionsFlagValue, deploymentOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentOptionsAdded
	if deploymentOptionsAdded {
		m.DeploymentOptions = deploymentOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadEnableImageNotificationFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableImageNotificationFlagName := fmt.Sprintf("%v.enableImageNotification", cmdPrefix)
	if cmd.Flags().Changed(enableImageNotificationFlagName) {

		var enableImageNotificationFlagName string
		if cmdPrefix == "" {
			enableImageNotificationFlagName = "enableImageNotification"
		} else {
			enableImageNotificationFlagName = fmt.Sprintf("%v.enableImageNotification", cmdPrefix)
		}

		enableImageNotificationFlagValue, err := cmd.Flags().GetBool(enableImageNotificationFlagName)
		if err != nil {
			return err, false
		}
		m.EnableImageNotification = &enableImageNotificationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securitySettingsFlagName := fmt.Sprintf("%v.securitySettings", cmdPrefix)
	if cmd.Flags().Changed(securitySettingsFlagName) {
		// info: complex object securitySettings EndpointsEndpointSettingsUpdatePayloadSecuritySettings is retrieved outside this Changed() block
	}
	securitySettingsFlagValue := m.SecuritySettings
	if swag.IsZero(securitySettingsFlagValue) {
		securitySettingsFlagValue = &models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings{}
	}

	err, securitySettingsAdded := retrieveModelEndpointsEndpointSettingsUpdatePayloadSecuritySettingsFlags(depth+1, securitySettingsFlagValue, securitySettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securitySettingsAdded
	if securitySettingsAdded {
		m.SecuritySettings = securitySettingsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for EndpointsEndpointSettingsUpdatePayloadSecuritySettings

// register flags to command
func registerModelEndpointsEndpointSettingsUpdatePayloadSecuritySettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowBindMountsForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowContainerCapabilitiesForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowDeviceMappingForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowHostNamespaceForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowPrivilegedModeForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowStackManagementForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowSysctlSettingForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowVolumeBrowserForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsEnableHostManagementFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowBindMountsForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowBindMountsForRegularUsersDescription := `Whether non-administrator should be able to use bind mounts when creating containers`

	var allowBindMountsForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowBindMountsForRegularUsersFlagName = "allowBindMountsForRegularUsers"
	} else {
		allowBindMountsForRegularUsersFlagName = fmt.Sprintf("%v.allowBindMountsForRegularUsers", cmdPrefix)
	}

	var allowBindMountsForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowBindMountsForRegularUsersFlagName, allowBindMountsForRegularUsersFlagDefault, allowBindMountsForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowContainerCapabilitiesForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowContainerCapabilitiesForRegularUsersDescription := `Whether non-administrator should be able to use container capabilities`

	var allowContainerCapabilitiesForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowContainerCapabilitiesForRegularUsersFlagName = "allowContainerCapabilitiesForRegularUsers"
	} else {
		allowContainerCapabilitiesForRegularUsersFlagName = fmt.Sprintf("%v.allowContainerCapabilitiesForRegularUsers", cmdPrefix)
	}

	var allowContainerCapabilitiesForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowContainerCapabilitiesForRegularUsersFlagName, allowContainerCapabilitiesForRegularUsersFlagDefault, allowContainerCapabilitiesForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowDeviceMappingForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowDeviceMappingForRegularUsersDescription := `Whether non-administrator should be able to use device mapping`

	var allowDeviceMappingForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowDeviceMappingForRegularUsersFlagName = "allowDeviceMappingForRegularUsers"
	} else {
		allowDeviceMappingForRegularUsersFlagName = fmt.Sprintf("%v.allowDeviceMappingForRegularUsers", cmdPrefix)
	}

	var allowDeviceMappingForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowDeviceMappingForRegularUsersFlagName, allowDeviceMappingForRegularUsersFlagDefault, allowDeviceMappingForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowHostNamespaceForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowHostNamespaceForRegularUsersDescription := `Whether non-administrator should be able to use the host pid`

	var allowHostNamespaceForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowHostNamespaceForRegularUsersFlagName = "allowHostNamespaceForRegularUsers"
	} else {
		allowHostNamespaceForRegularUsersFlagName = fmt.Sprintf("%v.allowHostNamespaceForRegularUsers", cmdPrefix)
	}

	var allowHostNamespaceForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowHostNamespaceForRegularUsersFlagName, allowHostNamespaceForRegularUsersFlagDefault, allowHostNamespaceForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowPrivilegedModeForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowPrivilegedModeForRegularUsersDescription := `Whether non-administrator should be able to use privileged mode when creating containers`

	var allowPrivilegedModeForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowPrivilegedModeForRegularUsersFlagName = "allowPrivilegedModeForRegularUsers"
	} else {
		allowPrivilegedModeForRegularUsersFlagName = fmt.Sprintf("%v.allowPrivilegedModeForRegularUsers", cmdPrefix)
	}

	var allowPrivilegedModeForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowPrivilegedModeForRegularUsersFlagName, allowPrivilegedModeForRegularUsersFlagDefault, allowPrivilegedModeForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowStackManagementForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowStackManagementForRegularUsersDescription := `Whether non-administrator should be able to manage stacks`

	var allowStackManagementForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowStackManagementForRegularUsersFlagName = "allowStackManagementForRegularUsers"
	} else {
		allowStackManagementForRegularUsersFlagName = fmt.Sprintf("%v.allowStackManagementForRegularUsers", cmdPrefix)
	}

	var allowStackManagementForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowStackManagementForRegularUsersFlagName, allowStackManagementForRegularUsersFlagDefault, allowStackManagementForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowSysctlSettingForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowSysctlSettingForRegularUsersDescription := `Whether non-administrator should be able to use sysctl settings`

	var allowSysctlSettingForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowSysctlSettingForRegularUsersFlagName = "allowSysctlSettingForRegularUsers"
	} else {
		allowSysctlSettingForRegularUsersFlagName = fmt.Sprintf("%v.allowSysctlSettingForRegularUsers", cmdPrefix)
	}

	var allowSysctlSettingForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowSysctlSettingForRegularUsersFlagName, allowSysctlSettingForRegularUsersFlagDefault, allowSysctlSettingForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowVolumeBrowserForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowVolumeBrowserForRegularUsersDescription := `Whether non-administrator should be able to browse volumes`

	var allowVolumeBrowserForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowVolumeBrowserForRegularUsersFlagName = "allowVolumeBrowserForRegularUsers"
	} else {
		allowVolumeBrowserForRegularUsersFlagName = fmt.Sprintf("%v.allowVolumeBrowserForRegularUsers", cmdPrefix)
	}

	var allowVolumeBrowserForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowVolumeBrowserForRegularUsersFlagName, allowVolumeBrowserForRegularUsersFlagDefault, allowVolumeBrowserForRegularUsersDescription)

	return nil
}

func registerEndpointsEndpointSettingsUpdatePayloadSecuritySettingsEnableHostManagementFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableHostManagementFeaturesDescription := `Whether host management features are enabled`

	var enableHostManagementFeaturesFlagName string
	if cmdPrefix == "" {
		enableHostManagementFeaturesFlagName = "enableHostManagementFeatures"
	} else {
		enableHostManagementFeaturesFlagName = fmt.Sprintf("%v.enableHostManagementFeatures", cmdPrefix)
	}

	var enableHostManagementFeaturesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableHostManagementFeaturesFlagName, enableHostManagementFeaturesFlagDefault, enableHostManagementFeaturesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointsEndpointSettingsUpdatePayloadSecuritySettingsFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allowBindMountsForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowBindMountsForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowBindMountsForRegularUsersAdded

	err, allowContainerCapabilitiesForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowContainerCapabilitiesForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowContainerCapabilitiesForRegularUsersAdded

	err, allowDeviceMappingForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowDeviceMappingForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowDeviceMappingForRegularUsersAdded

	err, allowHostNamespaceForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowHostNamespaceForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowHostNamespaceForRegularUsersAdded

	err, allowPrivilegedModeForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowPrivilegedModeForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowPrivilegedModeForRegularUsersAdded

	err, allowStackManagementForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowStackManagementForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowStackManagementForRegularUsersAdded

	err, allowSysctlSettingForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowSysctlSettingForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowSysctlSettingForRegularUsersAdded

	err, allowVolumeBrowserForRegularUsersAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowVolumeBrowserForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowVolumeBrowserForRegularUsersAdded

	err, enableHostManagementFeaturesAdded := retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsEnableHostManagementFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableHostManagementFeaturesAdded

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowBindMountsForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowBindMountsForRegularUsersFlagName := fmt.Sprintf("%v.allowBindMountsForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowBindMountsForRegularUsersFlagName) {

		var allowBindMountsForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowBindMountsForRegularUsersFlagName = "allowBindMountsForRegularUsers"
		} else {
			allowBindMountsForRegularUsersFlagName = fmt.Sprintf("%v.allowBindMountsForRegularUsers", cmdPrefix)
		}

		allowBindMountsForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowBindMountsForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowBindMountsForRegularUsers = &allowBindMountsForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowContainerCapabilitiesForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowContainerCapabilitiesForRegularUsersFlagName := fmt.Sprintf("%v.allowContainerCapabilitiesForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowContainerCapabilitiesForRegularUsersFlagName) {

		var allowContainerCapabilitiesForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowContainerCapabilitiesForRegularUsersFlagName = "allowContainerCapabilitiesForRegularUsers"
		} else {
			allowContainerCapabilitiesForRegularUsersFlagName = fmt.Sprintf("%v.allowContainerCapabilitiesForRegularUsers", cmdPrefix)
		}

		allowContainerCapabilitiesForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowContainerCapabilitiesForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowContainerCapabilitiesForRegularUsers = &allowContainerCapabilitiesForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowDeviceMappingForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowDeviceMappingForRegularUsersFlagName := fmt.Sprintf("%v.allowDeviceMappingForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowDeviceMappingForRegularUsersFlagName) {

		var allowDeviceMappingForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowDeviceMappingForRegularUsersFlagName = "allowDeviceMappingForRegularUsers"
		} else {
			allowDeviceMappingForRegularUsersFlagName = fmt.Sprintf("%v.allowDeviceMappingForRegularUsers", cmdPrefix)
		}

		allowDeviceMappingForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowDeviceMappingForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowDeviceMappingForRegularUsers = &allowDeviceMappingForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowHostNamespaceForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowHostNamespaceForRegularUsersFlagName := fmt.Sprintf("%v.allowHostNamespaceForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowHostNamespaceForRegularUsersFlagName) {

		var allowHostNamespaceForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowHostNamespaceForRegularUsersFlagName = "allowHostNamespaceForRegularUsers"
		} else {
			allowHostNamespaceForRegularUsersFlagName = fmt.Sprintf("%v.allowHostNamespaceForRegularUsers", cmdPrefix)
		}

		allowHostNamespaceForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowHostNamespaceForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowHostNamespaceForRegularUsers = &allowHostNamespaceForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowPrivilegedModeForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowPrivilegedModeForRegularUsersFlagName := fmt.Sprintf("%v.allowPrivilegedModeForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowPrivilegedModeForRegularUsersFlagName) {

		var allowPrivilegedModeForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowPrivilegedModeForRegularUsersFlagName = "allowPrivilegedModeForRegularUsers"
		} else {
			allowPrivilegedModeForRegularUsersFlagName = fmt.Sprintf("%v.allowPrivilegedModeForRegularUsers", cmdPrefix)
		}

		allowPrivilegedModeForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowPrivilegedModeForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowPrivilegedModeForRegularUsers = &allowPrivilegedModeForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowStackManagementForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowStackManagementForRegularUsersFlagName := fmt.Sprintf("%v.allowStackManagementForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowStackManagementForRegularUsersFlagName) {

		var allowStackManagementForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowStackManagementForRegularUsersFlagName = "allowStackManagementForRegularUsers"
		} else {
			allowStackManagementForRegularUsersFlagName = fmt.Sprintf("%v.allowStackManagementForRegularUsers", cmdPrefix)
		}

		allowStackManagementForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowStackManagementForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowStackManagementForRegularUsers = &allowStackManagementForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowSysctlSettingForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowSysctlSettingForRegularUsersFlagName := fmt.Sprintf("%v.allowSysctlSettingForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowSysctlSettingForRegularUsersFlagName) {

		var allowSysctlSettingForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowSysctlSettingForRegularUsersFlagName = "allowSysctlSettingForRegularUsers"
		} else {
			allowSysctlSettingForRegularUsersFlagName = fmt.Sprintf("%v.allowSysctlSettingForRegularUsers", cmdPrefix)
		}

		allowSysctlSettingForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowSysctlSettingForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowSysctlSettingForRegularUsers = &allowSysctlSettingForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsAllowVolumeBrowserForRegularUsersFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowVolumeBrowserForRegularUsersFlagName := fmt.Sprintf("%v.allowVolumeBrowserForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowVolumeBrowserForRegularUsersFlagName) {

		var allowVolumeBrowserForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowVolumeBrowserForRegularUsersFlagName = "allowVolumeBrowserForRegularUsers"
		} else {
			allowVolumeBrowserForRegularUsersFlagName = fmt.Sprintf("%v.allowVolumeBrowserForRegularUsers", cmdPrefix)
		}

		allowVolumeBrowserForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowVolumeBrowserForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowVolumeBrowserForRegularUsers = &allowVolumeBrowserForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointSettingsUpdatePayloadSecuritySettingsEnableHostManagementFeaturesFlags(depth int, m *models.EndpointsEndpointSettingsUpdatePayloadSecuritySettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableHostManagementFeaturesFlagName := fmt.Sprintf("%v.enableHostManagementFeatures", cmdPrefix)
	if cmd.Flags().Changed(enableHostManagementFeaturesFlagName) {

		var enableHostManagementFeaturesFlagName string
		if cmdPrefix == "" {
			enableHostManagementFeaturesFlagName = "enableHostManagementFeatures"
		} else {
			enableHostManagementFeaturesFlagName = fmt.Sprintf("%v.enableHostManagementFeatures", cmdPrefix)
		}

		enableHostManagementFeaturesFlagValue, err := cmd.Flags().GetBool(enableHostManagementFeaturesFlagName)
		if err != nil {
			return err, false
		}
		m.EnableHostManagementFeatures = &enableHostManagementFeaturesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
