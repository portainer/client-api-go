// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointedgeEdgeAsyncResponse

// register flags to command
func registerModelEndpointedgeEdgeAsyncResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointedgeEdgeAsyncResponseCommandInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeAsyncResponseCommands(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeAsyncResponseEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeAsyncResponseNeedFullSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeAsyncResponsePingInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEdgeAsyncResponseSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointedgeEdgeAsyncResponseCommandInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commandIntervalDescription := ``

	var commandIntervalFlagName string
	if cmdPrefix == "" {
		commandIntervalFlagName = "commandInterval"
	} else {
		commandIntervalFlagName = fmt.Sprintf("%v.commandInterval", cmdPrefix)
	}

	var commandIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(commandIntervalFlagName, commandIntervalFlagDefault, commandIntervalDescription)

	return nil
}

func registerEndpointedgeEdgeAsyncResponseCommands(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: commands []*PortainereeEdgeAsyncCommand array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointedgeEdgeAsyncResponseEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerEndpointedgeEdgeAsyncResponseNeedFullSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	needFullSnapshotDescription := ``

	var needFullSnapshotFlagName string
	if cmdPrefix == "" {
		needFullSnapshotFlagName = "needFullSnapshot"
	} else {
		needFullSnapshotFlagName = fmt.Sprintf("%v.needFullSnapshot", cmdPrefix)
	}

	var needFullSnapshotFlagDefault bool

	_ = cmd.PersistentFlags().Bool(needFullSnapshotFlagName, needFullSnapshotFlagDefault, needFullSnapshotDescription)

	return nil
}

func registerEndpointedgeEdgeAsyncResponsePingInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pingIntervalDescription := ``

	var pingIntervalFlagName string
	if cmdPrefix == "" {
		pingIntervalFlagName = "pingInterval"
	} else {
		pingIntervalFlagName = fmt.Sprintf("%v.pingInterval", cmdPrefix)
	}

	var pingIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pingIntervalFlagName, pingIntervalFlagDefault, pingIntervalDescription)

	return nil
}

func registerEndpointedgeEdgeAsyncResponseSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := ``

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "snapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.snapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointedgeEdgeAsyncResponseFlags(depth int, m *models.EndpointedgeEdgeAsyncResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commandIntervalAdded := retrieveEndpointedgeEdgeAsyncResponseCommandIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandIntervalAdded

	err, commandsAdded := retrieveEndpointedgeEdgeAsyncResponseCommandsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandsAdded

	err, endpointIdAdded := retrieveEndpointedgeEdgeAsyncResponseEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, needFullSnapshotAdded := retrieveEndpointedgeEdgeAsyncResponseNeedFullSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || needFullSnapshotAdded

	err, pingIntervalAdded := retrieveEndpointedgeEdgeAsyncResponsePingIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingIntervalAdded

	err, snapshotIntervalAdded := retrieveEndpointedgeEdgeAsyncResponseSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	return nil, retAdded
}

func retrieveEndpointedgeEdgeAsyncResponseCommandIntervalFlags(depth int, m *models.EndpointedgeEdgeAsyncResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandIntervalFlagName := fmt.Sprintf("%v.commandInterval", cmdPrefix)
	if cmd.Flags().Changed(commandIntervalFlagName) {

		var commandIntervalFlagName string
		if cmdPrefix == "" {
			commandIntervalFlagName = "commandInterval"
		} else {
			commandIntervalFlagName = fmt.Sprintf("%v.commandInterval", cmdPrefix)
		}

		commandIntervalFlagValue, err := cmd.Flags().GetInt64(commandIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.CommandInterval = commandIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeAsyncResponseCommandsFlags(depth int, m *models.EndpointedgeEdgeAsyncResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandsFlagName := fmt.Sprintf("%v.commands", cmdPrefix)
	if cmd.Flags().Changed(commandsFlagName) {
		// warning: commands array type []*PortainereeEdgeAsyncCommand is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeAsyncResponseEndpointIDFlags(depth int, m *models.EndpointedgeEdgeAsyncResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.endpointID", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeAsyncResponseNeedFullSnapshotFlags(depth int, m *models.EndpointedgeEdgeAsyncResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	needFullSnapshotFlagName := fmt.Sprintf("%v.needFullSnapshot", cmdPrefix)
	if cmd.Flags().Changed(needFullSnapshotFlagName) {

		var needFullSnapshotFlagName string
		if cmdPrefix == "" {
			needFullSnapshotFlagName = "needFullSnapshot"
		} else {
			needFullSnapshotFlagName = fmt.Sprintf("%v.needFullSnapshot", cmdPrefix)
		}

		needFullSnapshotFlagValue, err := cmd.Flags().GetBool(needFullSnapshotFlagName)
		if err != nil {
			return err, false
		}
		m.NeedFullSnapshot = &needFullSnapshotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeAsyncResponsePingIntervalFlags(depth int, m *models.EndpointedgeEdgeAsyncResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingIntervalFlagName := fmt.Sprintf("%v.pingInterval", cmdPrefix)
	if cmd.Flags().Changed(pingIntervalFlagName) {

		var pingIntervalFlagName string
		if cmdPrefix == "" {
			pingIntervalFlagName = "pingInterval"
		} else {
			pingIntervalFlagName = fmt.Sprintf("%v.pingInterval", cmdPrefix)
		}

		pingIntervalFlagValue, err := cmd.Flags().GetInt64(pingIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.PingInterval = pingIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEdgeAsyncResponseSnapshotIntervalFlags(depth int, m *models.EndpointedgeEdgeAsyncResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.snapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "snapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.snapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetInt64(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
