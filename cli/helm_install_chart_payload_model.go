// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for HelmInstallChartPayload

// register flags to command
func registerModelHelmInstallChartPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHelmInstallChartPayloadChart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHelmInstallChartPayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHelmInstallChartPayloadNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHelmInstallChartPayloadRepo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHelmInstallChartPayloadValues(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHelmInstallChartPayloadChart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chartDescription := ``

	var chartFlagName string
	if cmdPrefix == "" {
		chartFlagName = "chart"
	} else {
		chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
	}

	var chartFlagDefault string

	_ = cmd.PersistentFlags().String(chartFlagName, chartFlagDefault, chartDescription)

	return nil
}

func registerHelmInstallChartPayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerHelmInstallChartPayloadNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerHelmInstallChartPayloadRepo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repoDescription := ``

	var repoFlagName string
	if cmdPrefix == "" {
		repoFlagName = "repo"
	} else {
		repoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
	}

	var repoFlagDefault string

	_ = cmd.PersistentFlags().String(repoFlagName, repoFlagDefault, repoDescription)

	return nil
}

func registerHelmInstallChartPayloadValues(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valuesDescription := ``

	var valuesFlagName string
	if cmdPrefix == "" {
		valuesFlagName = "values"
	} else {
		valuesFlagName = fmt.Sprintf("%v.values", cmdPrefix)
	}

	var valuesFlagDefault string

	_ = cmd.PersistentFlags().String(valuesFlagName, valuesFlagDefault, valuesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHelmInstallChartPayloadFlags(depth int, m *models.HelmInstallChartPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, chartAdded := retrieveHelmInstallChartPayloadChartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded

	err, nameAdded := retrieveHelmInstallChartPayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveHelmInstallChartPayloadNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, repoAdded := retrieveHelmInstallChartPayloadRepoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repoAdded

	err, valuesAdded := retrieveHelmInstallChartPayloadValuesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valuesAdded

	return nil, retAdded
}

func retrieveHelmInstallChartPayloadChartFlags(depth int, m *models.HelmInstallChartPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chartFlagName := fmt.Sprintf("%v.chart", cmdPrefix)
	if cmd.Flags().Changed(chartFlagName) {

		var chartFlagName string
		if cmdPrefix == "" {
			chartFlagName = "chart"
		} else {
			chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
		}

		chartFlagValue, err := cmd.Flags().GetString(chartFlagName)
		if err != nil {
			return err, false
		}
		m.Chart = chartFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHelmInstallChartPayloadNameFlags(depth int, m *models.HelmInstallChartPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHelmInstallChartPayloadNamespaceFlags(depth int, m *models.HelmInstallChartPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHelmInstallChartPayloadRepoFlags(depth int, m *models.HelmInstallChartPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repoFlagName := fmt.Sprintf("%v.repo", cmdPrefix)
	if cmd.Flags().Changed(repoFlagName) {

		var repoFlagName string
		if cmdPrefix == "" {
			repoFlagName = "repo"
		} else {
			repoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
		}

		repoFlagValue, err := cmd.Flags().GetString(repoFlagName)
		if err != nil {
			return err, false
		}
		m.Repo = repoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHelmInstallChartPayloadValuesFlags(depth int, m *models.HelmInstallChartPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valuesFlagName := fmt.Sprintf("%v.values", cmdPrefix)
	if cmd.Flags().Changed(valuesFlagName) {

		var valuesFlagName string
		if cmdPrefix == "" {
			valuesFlagName = "values"
		} else {
			valuesFlagName = fmt.Sprintf("%v.values", cmdPrefix)
		}

		valuesFlagValue, err := cmd.Flags().GetString(valuesFlagName)
		if err != nil {
			return err, false
		}
		m.Values = valuesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
