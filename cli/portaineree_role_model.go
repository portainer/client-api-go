// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeRole

// register flags to command
func registerModelPortainereeRoleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeRoleAuthorizations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRoleDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRoleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRoleName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeRolePriority(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeRoleAuthorizations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Authorizations PortainereeAuthorizations map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeRoleDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Required. Role description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "Description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerPortainereeRoleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Role Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeRoleName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Role name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeRolePriority(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priorityDescription := `Required. `

	var priorityFlagName string
	if cmdPrefix == "" {
		priorityFlagName = "Priority"
	} else {
		priorityFlagName = fmt.Sprintf("%v.Priority", cmdPrefix)
	}

	var priorityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(priorityFlagName, priorityFlagDefault, priorityDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeRoleFlags(depth int, m *models.PortainereeRole, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authorizationsAdded := retrievePortainereeRoleAuthorizationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorizationsAdded

	err, descriptionAdded := retrievePortainereeRoleDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrievePortainereeRoleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrievePortainereeRoleNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, priorityAdded := retrievePortainereeRolePriorityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priorityAdded

	return nil, retAdded
}

func retrievePortainereeRoleAuthorizationsFlags(depth int, m *models.PortainereeRole, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorizationsFlagName := fmt.Sprintf("%v.Authorizations", cmdPrefix)
	if cmd.Flags().Changed(authorizationsFlagName) {
		// warning: Authorizations map type PortainereeAuthorizations is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeRoleDescriptionFlags(depth int, m *models.PortainereeRole, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "Description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRoleIDFlags(depth int, m *models.PortainereeRole, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRoleNameFlags(depth int, m *models.PortainereeRole, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeRolePriorityFlags(depth int, m *models.PortainereeRole, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priorityFlagName := fmt.Sprintf("%v.Priority", cmdPrefix)
	if cmd.Flags().Changed(priorityFlagName) {

		var priorityFlagName string
		if cmdPrefix == "" {
			priorityFlagName = "Priority"
		} else {
			priorityFlagName = fmt.Sprintf("%v.Priority", cmdPrefix)
		}

		priorityFlagValue, err := cmd.Flags().GetInt64(priorityFlagName)
		if err != nil {
			return err, false
		}
		m.Priority = &priorityFlagValue

		retAdded = true
	}

	return nil, retAdded
}
