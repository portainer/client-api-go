// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for SystemSystemInfoResponse

// register flags to command
func registerModelSystemSystemInfoResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemSystemInfoResponseAgents(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemSystemInfoResponseEdgeAgents(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemSystemInfoResponseEdgeDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemSystemInfoResponsePlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemSystemInfoResponseAgents(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentsDescription := ``

	var agentsFlagName string
	if cmdPrefix == "" {
		agentsFlagName = "agents"
	} else {
		agentsFlagName = fmt.Sprintf("%v.agents", cmdPrefix)
	}

	var agentsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(agentsFlagName, agentsFlagDefault, agentsDescription)

	return nil
}

func registerSystemSystemInfoResponseEdgeAgents(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeAgentsDescription := ``

	var edgeAgentsFlagName string
	if cmdPrefix == "" {
		edgeAgentsFlagName = "edgeAgents"
	} else {
		edgeAgentsFlagName = fmt.Sprintf("%v.edgeAgents", cmdPrefix)
	}

	var edgeAgentsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeAgentsFlagName, edgeAgentsFlagDefault, edgeAgentsDescription)

	return nil
}

func registerSystemSystemInfoResponseEdgeDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeDevicesDescription := ``

	var edgeDevicesFlagName string
	if cmdPrefix == "" {
		edgeDevicesFlagName = "edgeDevices"
	} else {
		edgeDevicesFlagName = fmt.Sprintf("%v.edgeDevices", cmdPrefix)
	}

	var edgeDevicesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeDevicesFlagName, edgeDevicesFlagDefault, edgeDevicesDescription)

	return nil
}

func registerSystemSystemInfoResponsePlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformDescription := ``

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	var platformFlagDefault string

	_ = cmd.PersistentFlags().String(platformFlagName, platformFlagDefault, platformDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemSystemInfoResponseFlags(depth int, m *models.SystemSystemInfoResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, agentsAdded := retrieveSystemSystemInfoResponseAgentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentsAdded

	err, edgeAgentsAdded := retrieveSystemSystemInfoResponseEdgeAgentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAgentsAdded

	err, edgeDevicesAdded := retrieveSystemSystemInfoResponseEdgeDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeDevicesAdded

	err, platformAdded := retrieveSystemSystemInfoResponsePlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	return nil, retAdded
}

func retrieveSystemSystemInfoResponseAgentsFlags(depth int, m *models.SystemSystemInfoResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentsFlagName := fmt.Sprintf("%v.agents", cmdPrefix)
	if cmd.Flags().Changed(agentsFlagName) {

		var agentsFlagName string
		if cmdPrefix == "" {
			agentsFlagName = "agents"
		} else {
			agentsFlagName = fmt.Sprintf("%v.agents", cmdPrefix)
		}

		agentsFlagValue, err := cmd.Flags().GetInt64(agentsFlagName)
		if err != nil {
			return err, false
		}
		m.Agents = agentsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemSystemInfoResponseEdgeAgentsFlags(depth int, m *models.SystemSystemInfoResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeAgentsFlagName := fmt.Sprintf("%v.edgeAgents", cmdPrefix)
	if cmd.Flags().Changed(edgeAgentsFlagName) {

		var edgeAgentsFlagName string
		if cmdPrefix == "" {
			edgeAgentsFlagName = "edgeAgents"
		} else {
			edgeAgentsFlagName = fmt.Sprintf("%v.edgeAgents", cmdPrefix)
		}

		edgeAgentsFlagValue, err := cmd.Flags().GetInt64(edgeAgentsFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeAgents = edgeAgentsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemSystemInfoResponseEdgeDevicesFlags(depth int, m *models.SystemSystemInfoResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeDevicesFlagName := fmt.Sprintf("%v.edgeDevices", cmdPrefix)
	if cmd.Flags().Changed(edgeDevicesFlagName) {

		var edgeDevicesFlagName string
		if cmdPrefix == "" {
			edgeDevicesFlagName = "edgeDevices"
		} else {
			edgeDevicesFlagName = fmt.Sprintf("%v.edgeDevices", cmdPrefix)
		}

		edgeDevicesFlagValue, err := cmd.Flags().GetInt64(edgeDevicesFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeDevices = edgeDevicesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemSystemInfoResponsePlatformFlags(depth int, m *models.SystemSystemInfoResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformFlagName := fmt.Sprintf("%v.platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {

		var platformFlagName string
		if cmdPrefix == "" {
			platformFlagName = "platform"
		} else {
			platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
		}

		platformFlagValue, err := cmd.Flags().GetString(platformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = platformFlagValue

		retAdded = true
	}

	return nil, retAdded
}
