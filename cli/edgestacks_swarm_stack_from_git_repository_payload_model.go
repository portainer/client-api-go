// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EdgestacksSwarmStackFromGitRepositoryPayload

// register flags to command
func registerModelEdgestacksSwarmStackFromGitRepositoryPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadDeploymentType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadEdgeGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadFilePathInRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadPrePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadRegistries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgestacksSwarmStackFromGitRepositoryPayloadUseManifestNamespaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadDeploymentType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deploymentTypeDescription := `Enum: [0,1,2]. Deployment type to deploy this stack
Valid values are: 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
kubernetes deploy type is enabled only for kubernetes environments(endpoints)
nomad deploy type is enabled only for nomad environments(endpoints)`

	var deploymentTypeFlagName string
	if cmdPrefix == "" {
		deploymentTypeFlagName = "deploymentType"
	} else {
		deploymentTypeFlagName = fmt.Sprintf("%v.deploymentType", cmdPrefix)
	}

	var deploymentTypeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(deploymentTypeFlagName, deploymentTypeFlagDefault, deploymentTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(deploymentTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadEdgeGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: edgeGroups []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadFilePathInRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	filePathInRepositoryDescription := `Path to the Stack file inside the Git repository`

	var filePathInRepositoryFlagName string
	if cmdPrefix == "" {
		filePathInRepositoryFlagName = "filePathInRepository"
	} else {
		filePathInRepositoryFlagName = fmt.Sprintf("%v.filePathInRepository", cmdPrefix)
	}

	var filePathInRepositoryFlagDefault string = "docker-compose.yml"

	_ = cmd.PersistentFlags().String(filePathInRepositoryFlagName, filePathInRepositoryFlagDefault, filePathInRepositoryDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name of the stack`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadPrePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prePullImageDescription := `Pre Pull image`

	var prePullImageFlagName string
	if cmdPrefix == "" {
		prePullImageFlagName = "prePullImage"
	} else {
		prePullImageFlagName = fmt.Sprintf("%v.prePullImage", cmdPrefix)
	}

	var prePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(prePullImageFlagName, prePullImageFlagDefault, prePullImageDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadRegistries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: registries []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryAuthenticationDescription := `Use basic authentication to clone the Git repository`

	var repositoryAuthenticationFlagName string
	if cmdPrefix == "" {
		repositoryAuthenticationFlagName = "repositoryAuthentication"
	} else {
		repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	}

	var repositoryAuthenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(repositoryAuthenticationFlagName, repositoryAuthenticationFlagDefault, repositoryAuthenticationDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryGitCredentialIdDescription := `GitCredentialID used to identify the binded git credential`

	var repositoryGitCredentialIdFlagName string
	if cmdPrefix == "" {
		repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
	} else {
		repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	}

	var repositoryGitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repositoryGitCredentialIdFlagName, repositoryGitCredentialIdFlagDefault, repositoryGitCredentialIdDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryPasswordDescription := `Password used in basic authentication. Required when RepositoryAuthentication is true.`

	var repositoryPasswordFlagName string
	if cmdPrefix == "" {
		repositoryPasswordFlagName = "repositoryPassword"
	} else {
		repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	}

	var repositoryPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryPasswordFlagName, repositoryPasswordFlagDefault, repositoryPasswordDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryReferenceNameDescription := `Reference name of a Git repository hosting the Stack file`

	var repositoryReferenceNameFlagName string
	if cmdPrefix == "" {
		repositoryReferenceNameFlagName = "repositoryReferenceName"
	} else {
		repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	}

	var repositoryReferenceNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryReferenceNameFlagName, repositoryReferenceNameFlagDefault, repositoryReferenceNameDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUrlDescription := `Required. URL of a Git repository hosting the Stack file`

	var repositoryUrlFlagName string
	if cmdPrefix == "" {
		repositoryUrlFlagName = "repositoryURL"
	} else {
		repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	}

	var repositoryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUrlFlagName, repositoryUrlFlagDefault, repositoryUrlDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUsernameDescription := `Username used in basic authentication. Required when RepositoryAuthentication is true.`

	var repositoryUsernameFlagName string
	if cmdPrefix == "" {
		repositoryUsernameFlagName = "repositoryUsername"
	} else {
		repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	}

	var repositoryUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUsernameFlagName, repositoryUsernameFlagDefault, repositoryUsernameDescription)

	return nil
}

func registerEdgestacksSwarmStackFromGitRepositoryPayloadUseManifestNamespaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useManifestNamespacesDescription := `Uses the manifest's namespaces instead of the default one`

	var useManifestNamespacesFlagName string
	if cmdPrefix == "" {
		useManifestNamespacesFlagName = "useManifestNamespaces"
	} else {
		useManifestNamespacesFlagName = fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
	}

	var useManifestNamespacesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useManifestNamespacesFlagName, useManifestNamespacesFlagDefault, useManifestNamespacesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEdgestacksSwarmStackFromGitRepositoryPayloadFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deploymentTypeAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadDeploymentTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentTypeAdded

	err, edgeGroupsAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadEdgeGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeGroupsAdded

	err, filePathInRepositoryAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadFilePathInRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filePathInRepositoryAdded

	err, nameAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, prePullImageAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadPrePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prePullImageAdded

	err, registriesAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRegistriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registriesAdded

	err, repositoryAuthenticationAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAuthenticationAdded

	err, repositoryGitCredentialIdAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryGitCredentialIdAdded

	err, repositoryPasswordAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryPasswordAdded

	err, repositoryReferenceNameAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryReferenceNameAdded

	err, repositoryUrlAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUrlAdded

	err, repositoryUsernameAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUsernameAdded

	err, useManifestNamespacesAdded := retrieveEdgestacksSwarmStackFromGitRepositoryPayloadUseManifestNamespacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useManifestNamespacesAdded

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadDeploymentTypeFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deploymentTypeFlagName := fmt.Sprintf("%v.deploymentType", cmdPrefix)
	if cmd.Flags().Changed(deploymentTypeFlagName) {

		var deploymentTypeFlagName string
		if cmdPrefix == "" {
			deploymentTypeFlagName = "deploymentType"
		} else {
			deploymentTypeFlagName = fmt.Sprintf("%v.deploymentType", cmdPrefix)
		}

		deploymentTypeFlagValue, err := cmd.Flags().GetInt64(deploymentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DeploymentType = deploymentTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadEdgeGroupsFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeGroupsFlagName := fmt.Sprintf("%v.edgeGroups", cmdPrefix)
	if cmd.Flags().Changed(edgeGroupsFlagName) {
		// warning: edgeGroups array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadFilePathInRepositoryFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filePathInRepositoryFlagName := fmt.Sprintf("%v.filePathInRepository", cmdPrefix)
	if cmd.Flags().Changed(filePathInRepositoryFlagName) {

		var filePathInRepositoryFlagName string
		if cmdPrefix == "" {
			filePathInRepositoryFlagName = "filePathInRepository"
		} else {
			filePathInRepositoryFlagName = fmt.Sprintf("%v.filePathInRepository", cmdPrefix)
		}

		filePathInRepositoryFlagValue, err := cmd.Flags().GetString(filePathInRepositoryFlagName)
		if err != nil {
			return err, false
		}
		m.FilePathInRepository = &filePathInRepositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadNameFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadPrePullImageFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prePullImageFlagName := fmt.Sprintf("%v.prePullImage", cmdPrefix)
	if cmd.Flags().Changed(prePullImageFlagName) {

		var prePullImageFlagName string
		if cmdPrefix == "" {
			prePullImageFlagName = "prePullImage"
		} else {
			prePullImageFlagName = fmt.Sprintf("%v.prePullImage", cmdPrefix)
		}

		prePullImageFlagValue, err := cmd.Flags().GetBool(prePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.PrePullImage = &prePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRegistriesFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registriesFlagName := fmt.Sprintf("%v.registries", cmdPrefix)
	if cmd.Flags().Changed(registriesFlagName) {
		// warning: registries array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryAuthenticationFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryAuthenticationFlagName := fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	if cmd.Flags().Changed(repositoryAuthenticationFlagName) {

		var repositoryAuthenticationFlagName string
		if cmdPrefix == "" {
			repositoryAuthenticationFlagName = "repositoryAuthentication"
		} else {
			repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
		}

		repositoryAuthenticationFlagValue, err := cmd.Flags().GetBool(repositoryAuthenticationFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryAuthentication = &repositoryAuthenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialIDFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryGitCredentialIdFlagName := fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(repositoryGitCredentialIdFlagName) {

		var repositoryGitCredentialIdFlagName string
		if cmdPrefix == "" {
			repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
		} else {
			repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
		}

		repositoryGitCredentialIdFlagValue, err := cmd.Flags().GetInt64(repositoryGitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryGitCredentialID = repositoryGitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryPasswordFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryPasswordFlagName := fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	if cmd.Flags().Changed(repositoryPasswordFlagName) {

		var repositoryPasswordFlagName string
		if cmdPrefix == "" {
			repositoryPasswordFlagName = "repositoryPassword"
		} else {
			repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
		}

		repositoryPasswordFlagValue, err := cmd.Flags().GetString(repositoryPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryPassword = repositoryPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceNameFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryReferenceNameFlagName := fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	if cmd.Flags().Changed(repositoryReferenceNameFlagName) {

		var repositoryReferenceNameFlagName string
		if cmdPrefix == "" {
			repositoryReferenceNameFlagName = "repositoryReferenceName"
		} else {
			repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
		}

		repositoryReferenceNameFlagValue, err := cmd.Flags().GetString(repositoryReferenceNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryReferenceName = repositoryReferenceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryURLFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUrlFlagName := fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	if cmd.Flags().Changed(repositoryUrlFlagName) {

		var repositoryUrlFlagName string
		if cmdPrefix == "" {
			repositoryUrlFlagName = "repositoryURL"
		} else {
			repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
		}

		repositoryUrlFlagValue, err := cmd.Flags().GetString(repositoryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryURL = &repositoryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadRepositoryUsernameFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUsernameFlagName := fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	if cmd.Flags().Changed(repositoryUsernameFlagName) {

		var repositoryUsernameFlagName string
		if cmdPrefix == "" {
			repositoryUsernameFlagName = "repositoryUsername"
		} else {
			repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
		}

		repositoryUsernameFlagValue, err := cmd.Flags().GetString(repositoryUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryUsername = repositoryUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgestacksSwarmStackFromGitRepositoryPayloadUseManifestNamespacesFlags(depth int, m *models.EdgestacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useManifestNamespacesFlagName := fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
	if cmd.Flags().Changed(useManifestNamespacesFlagName) {

		var useManifestNamespacesFlagName string
		if cmdPrefix == "" {
			useManifestNamespacesFlagName = "useManifestNamespaces"
		} else {
			useManifestNamespacesFlagName = fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
		}

		useManifestNamespacesFlagValue, err := cmd.Flags().GetBool(useManifestNamespacesFlagName)
		if err != nil {
			return err, false
		}
		m.UseManifestNamespaces = &useManifestNamespacesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
