// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/helm"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationHelmHelmInstallCmd returns a cmd to handle operation helmInstall
func makeOperationHelmHelmInstallCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "HelmInstall",
		Short: `**Access policy**: authenticated`,
		RunE:  runOperationHelmHelmInstall,
	}

	if err := registerOperationHelmHelmInstallParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationHelmHelmInstall uses cmd flags to call endpoint api
func runOperationHelmHelmInstall(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := helm.NewHelmInstallParams()
	if err, _ := retrieveOperationHelmHelmInstallIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationHelmHelmInstallPayloadFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationHelmHelmInstallResult(appCli.Helm.HelmInstall(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationHelmHelmInstallParamFlags registers all flags needed to fill params
func registerOperationHelmHelmInstallParamFlags(cmd *cobra.Command) error {
	if err := registerOperationHelmHelmInstallIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationHelmHelmInstallPayloadParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationHelmHelmInstallIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Environment(Endpoint) identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationHelmHelmInstallPayloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var payloadFlagName string
	if cmdPrefix == "" {
		payloadFlagName = "payload"
	} else {
		payloadFlagName = fmt.Sprintf("%v.payload", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(payloadFlagName, "", "Optional json string for [payload]. Chart details")

	// add flags for body
	if err := registerModelHelmInstallChartPayloadFlags(0, "helmInstallChartPayload", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationHelmHelmInstallIDFlag(m *helm.HelmInstallParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationHelmHelmInstallPayloadFlag(m *helm.HelmInstallParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("payload") {
		// Read payload string from cmd and unmarshal
		payloadValueStr, err := cmd.Flags().GetString("payload")
		if err != nil {
			return err, false
		}

		payloadValue := models.HelmInstallChartPayload{}
		if err := json.Unmarshal([]byte(payloadValueStr), &payloadValue); err != nil {
			return fmt.Errorf("cannot unmarshal payload string in models.HelmInstallChartPayload: %v", err), false
		}
		m.Payload = &payloadValue
	}
	payloadValueModel := m.Payload
	if swag.IsZero(payloadValueModel) {
		payloadValueModel = &models.HelmInstallChartPayload{}
	}
	err, added := retrieveModelHelmInstallChartPayloadFlags(0, payloadValueModel, "helmInstallChartPayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Payload = payloadValueModel
	}
	if dryRun && debug {

		payloadValueDebugBytes, err := json.Marshal(m.Payload)
		if err != nil {
			return err, false
		}
		logDebugf("Payload dry-run payload: %v", string(payloadValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationHelmHelmInstallResult parses request result and return the string content
func parseOperationHelmHelmInstallResult(resp0 *helm.HelmInstallCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*helm.HelmInstallCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning helmInstallUnauthorized is not supported

		// Non schema case: warning helmInstallNotFound is not supported

		// Non schema case: warning helmInstallInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
