// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for WebhooksWebhookReassignPayload

// register flags to command
func registerModelWebhooksWebhookReassignPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebhooksWebhookReassignPayloadResourceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhooksWebhookReassignPayloadWebhookType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebhooksWebhookReassignPayloadResourceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceIdDescription := ``

	var resourceIdFlagName string
	if cmdPrefix == "" {
		resourceIdFlagName = "resourceID"
	} else {
		resourceIdFlagName = fmt.Sprintf("%v.resourceID", cmdPrefix)
	}

	var resourceIdFlagDefault string

	_ = cmd.PersistentFlags().String(resourceIdFlagName, resourceIdFlagDefault, resourceIdDescription)

	return nil
}

func registerWebhooksWebhookReassignPayloadWebhookType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webhookTypeDescription := ``

	var webhookTypeFlagName string
	if cmdPrefix == "" {
		webhookTypeFlagName = "webhookType"
	} else {
		webhookTypeFlagName = fmt.Sprintf("%v.webhookType", cmdPrefix)
	}

	var webhookTypeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(webhookTypeFlagName, webhookTypeFlagDefault, webhookTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebhooksWebhookReassignPayloadFlags(depth int, m *models.WebhooksWebhookReassignPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, resourceIdAdded := retrieveWebhooksWebhookReassignPayloadResourceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceIdAdded

	err, webhookTypeAdded := retrieveWebhooksWebhookReassignPayloadWebhookTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webhookTypeAdded

	return nil, retAdded
}

func retrieveWebhooksWebhookReassignPayloadResourceIDFlags(depth int, m *models.WebhooksWebhookReassignPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceIdFlagName := fmt.Sprintf("%v.resourceID", cmdPrefix)
	if cmd.Flags().Changed(resourceIdFlagName) {

		var resourceIdFlagName string
		if cmdPrefix == "" {
			resourceIdFlagName = "resourceID"
		} else {
			resourceIdFlagName = fmt.Sprintf("%v.resourceID", cmdPrefix)
		}

		resourceIdFlagValue, err := cmd.Flags().GetString(resourceIdFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceID = resourceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhooksWebhookReassignPayloadWebhookTypeFlags(depth int, m *models.WebhooksWebhookReassignPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webhookTypeFlagName := fmt.Sprintf("%v.webhookType", cmdPrefix)
	if cmd.Flags().Changed(webhookTypeFlagName) {

		var webhookTypeFlagName string
		if cmdPrefix == "" {
			webhookTypeFlagName = "webhookType"
		} else {
			webhookTypeFlagName = fmt.Sprintf("%v.webhookType", cmdPrefix)
		}

		webhookTypeFlagValue, err := cmd.Flags().GetInt64(webhookTypeFlagName)
		if err != nil {
			return err, false
		}
		m.WebhookType = webhookTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
