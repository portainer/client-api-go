// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for LdapTestLoginPayload

// register flags to command
func registerModelLdapTestLoginPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLdapTestLoginPayloadLdapsettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapTestLoginPayloadPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapTestLoginPayloadUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLdapTestLoginPayloadLdapsettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapsettingsFlagName string
	if cmdPrefix == "" {
		ldapsettingsFlagName = "ldapsettings"
	} else {
		ldapsettingsFlagName = fmt.Sprintf("%v.ldapsettings", cmdPrefix)
	}

	if err := registerModelPortainereeLDAPSettingsFlags(depth+1, ldapsettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerLdapTestLoginPayloadPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerLdapTestLoginPayloadUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLdapTestLoginPayloadFlags(depth int, m *models.LdapTestLoginPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ldapsettingsAdded := retrieveLdapTestLoginPayloadLdapsettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapsettingsAdded

	err, passwordAdded := retrieveLdapTestLoginPayloadPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, usernameAdded := retrieveLdapTestLoginPayloadUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveLdapTestLoginPayloadLdapsettingsFlags(depth int, m *models.LdapTestLoginPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapsettingsFlagName := fmt.Sprintf("%v.ldapsettings", cmdPrefix)
	if cmd.Flags().Changed(ldapsettingsFlagName) {
		// info: complex object ldapsettings PortainereeLDAPSettings is retrieved outside this Changed() block
	}
	ldapsettingsFlagValue := m.Ldapsettings
	if swag.IsZero(ldapsettingsFlagValue) {
		ldapsettingsFlagValue = &models.PortainereeLDAPSettings{}
	}

	err, ldapsettingsAdded := retrieveModelPortainereeLDAPSettingsFlags(depth+1, ldapsettingsFlagValue, ldapsettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapsettingsAdded
	if ldapsettingsAdded {
		m.Ldapsettings = ldapsettingsFlagValue
	}

	return nil, retAdded
}

func retrieveLdapTestLoginPayloadPasswordFlags(depth int, m *models.LdapTestLoginPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapTestLoginPayloadUsernameFlags(depth int, m *models.LdapTestLoginPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
