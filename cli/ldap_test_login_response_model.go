// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for LdapTestLoginResponse

// register flags to command
func registerModelLdapTestLoginResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLdapTestLoginResponseValid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLdapTestLoginResponseValid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	validDescription := ``

	var validFlagName string
	if cmdPrefix == "" {
		validFlagName = "valid"
	} else {
		validFlagName = fmt.Sprintf("%v.valid", cmdPrefix)
	}

	var validFlagDefault bool

	_ = cmd.PersistentFlags().Bool(validFlagName, validFlagDefault, validDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLdapTestLoginResponseFlags(depth int, m *models.LdapTestLoginResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, validAdded := retrieveLdapTestLoginResponseValidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || validAdded

	return nil, retAdded
}

func retrieveLdapTestLoginResponseValidFlags(depth int, m *models.LdapTestLoginResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	validFlagName := fmt.Sprintf("%v.valid", cmdPrefix)
	if cmd.Flags().Changed(validFlagName) {

		var validFlagName string
		if cmdPrefix == "" {
			validFlagName = "valid"
		} else {
			validFlagName = fmt.Sprintf("%v.valid", cmdPrefix)
		}

		validFlagValue, err := cmd.Flags().GetBool(validFlagName)
		if err != nil {
			return err, false
		}
		m.Valid = &validFlagValue

		retAdded = true
	}

	return nil, retAdded
}
