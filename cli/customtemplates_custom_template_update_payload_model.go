// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for CustomtemplatesCustomTemplateUpdatePayload

// register flags to command
func registerModelCustomtemplatesCustomTemplateUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadLogo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateUpdatePayloadVariables(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Required. Description of the template`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileContentDescription := `Required. Content of stack file`

	var fileContentFlagName string
	if cmdPrefix == "" {
		fileContentFlagName = "fileContent"
	} else {
		fileContentFlagName = fmt.Sprintf("%v.fileContent", cmdPrefix)
	}

	var fileContentFlagDefault string

	_ = cmd.PersistentFlags().String(fileContentFlagName, fileContentFlagDefault, fileContentDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadLogo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoDescription := `URL of the template's logo`

	var logoFlagName string
	if cmdPrefix == "" {
		logoFlagName = "logo"
	} else {
		logoFlagName = fmt.Sprintf("%v.logo", cmdPrefix)
	}

	var logoFlagDefault string

	_ = cmd.PersistentFlags().String(logoFlagName, logoFlagDefault, logoDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noteDescription := `A note that will be displayed in the UI. Supports HTML content`

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "note"
	} else {
		noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformDescription := `Enum: [1,2]. Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks`

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	var platformFlagDefault int64

	_ = cmd.PersistentFlags().Int64(platformFlagName, platformFlagDefault, platformDescription)

	if err := cmd.RegisterFlagCompletionFunc(platformFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := `Required. Title of the template`

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "title"
	} else {
		titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: [1,2,3]. Required. Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerCustomtemplatesCustomTemplateUpdatePayloadVariables(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: variables []*PortainereeCustomTemplateVariableDefinition array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCustomtemplatesCustomTemplateUpdatePayloadFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, fileContentAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileContentAdded

	err, logoAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadLogoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoAdded

	err, noteAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noteAdded

	err, platformAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	err, titleAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	err, typeAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, variablesAdded := retrieveCustomtemplatesCustomTemplateUpdatePayloadVariablesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || variablesAdded

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadDescriptionFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadFileContentFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileContentFlagName := fmt.Sprintf("%v.fileContent", cmdPrefix)
	if cmd.Flags().Changed(fileContentFlagName) {

		var fileContentFlagName string
		if cmdPrefix == "" {
			fileContentFlagName = "fileContent"
		} else {
			fileContentFlagName = fmt.Sprintf("%v.fileContent", cmdPrefix)
		}

		fileContentFlagValue, err := cmd.Flags().GetString(fileContentFlagName)
		if err != nil {
			return err, false
		}
		m.FileContent = &fileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadLogoFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoFlagName := fmt.Sprintf("%v.logo", cmdPrefix)
	if cmd.Flags().Changed(logoFlagName) {

		var logoFlagName string
		if cmdPrefix == "" {
			logoFlagName = "logo"
		} else {
			logoFlagName = fmt.Sprintf("%v.logo", cmdPrefix)
		}

		logoFlagValue, err := cmd.Flags().GetString(logoFlagName)
		if err != nil {
			return err, false
		}
		m.Logo = logoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadNoteFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noteFlagName := fmt.Sprintf("%v.note", cmdPrefix)
	if cmd.Flags().Changed(noteFlagName) {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "note"
		} else {
			noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = noteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadPlatformFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformFlagName := fmt.Sprintf("%v.platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {

		var platformFlagName string
		if cmdPrefix == "" {
			platformFlagName = "platform"
		} else {
			platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
		}

		platformFlagValue, err := cmd.Flags().GetInt64(platformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = platformFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadTitleFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "title"
		} else {
			titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = &titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadTypeFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateUpdatePayloadVariablesFlags(depth int, m *models.CustomtemplatesCustomTemplateUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	variablesFlagName := fmt.Sprintf("%v.variables", cmdPrefix)
	if cmd.Flags().Changed(variablesFlagName) {
		// warning: variables array type []*PortainereeCustomTemplateVariableDefinition is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
