// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/edge_stacks"

	"github.com/spf13/cobra"
)

// makeOperationEdgeStacksEdgeStackLogsCollectCmd returns a cmd to handle operation edgeStackLogsCollect
func makeOperationEdgeStacksEdgeStackLogsCollectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "EdgeStackLogsCollect",
		Short: `**Access policy**: administrator`,
		RunE:  runOperationEdgeStacksEdgeStackLogsCollect,
	}

	if err := registerOperationEdgeStacksEdgeStackLogsCollectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEdgeStacksEdgeStackLogsCollect uses cmd flags to call endpoint api
func runOperationEdgeStacksEdgeStackLogsCollect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := edge_stacks.NewEdgeStackLogsCollectParams()
	if err, _ := retrieveOperationEdgeStacksEdgeStackLogsCollectEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEdgeStacksEdgeStackLogsCollectIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEdgeStacksEdgeStackLogsCollectTailFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEdgeStacksEdgeStackLogsCollectResult(appCli.EdgeStacks.EdgeStackLogsCollect(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEdgeStacksEdgeStackLogsCollectParamFlags registers all flags needed to fill params
func registerOperationEdgeStacksEdgeStackLogsCollectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEdgeStacksEdgeStackLogsCollectEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEdgeStacksEdgeStackLogsCollectIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEdgeStacksEdgeStackLogsCollectTailParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEdgeStacksEdgeStackLogsCollectEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := `Required. Environment Id`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpoint_id"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpoint_id", cmdPrefix)
	}

	var endpointIdFlagDefault string

	_ = cmd.PersistentFlags().String(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationEdgeStacksEdgeStackLogsCollectIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. EdgeStack Id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationEdgeStacksEdgeStackLogsCollectTailParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tailDescription := `Number of lines to request for the logs`

	var tailFlagName string
	if cmdPrefix == "" {
		tailFlagName = "tail"
	} else {
		tailFlagName = fmt.Sprintf("%v.tail", cmdPrefix)
	}

	var tailFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tailFlagName, tailFlagDefault, tailDescription)

	return nil
}

func retrieveOperationEdgeStacksEdgeStackLogsCollectEndpointIDFlag(m *edge_stacks.EdgeStackLogsCollectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpoint_id") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpoint_id"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpoint_id", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetString(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEdgeStacksEdgeStackLogsCollectIDFlag(m *edge_stacks.EdgeStackLogsCollectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEdgeStacksEdgeStackLogsCollectTailFlag(m *edge_stacks.EdgeStackLogsCollectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tail") {

		var tailFlagName string
		if cmdPrefix == "" {
			tailFlagName = "tail"
		} else {
			tailFlagName = fmt.Sprintf("%v.tail", cmdPrefix)
		}

		tailFlagValue, err := cmd.Flags().GetInt64(tailFlagName)
		if err != nil {
			return err, false
		}
		m.Tail = &tailFlagValue

	}
	return nil, retAdded
}

// parseOperationEdgeStacksEdgeStackLogsCollectResult parses request result and return the string content
func parseOperationEdgeStacksEdgeStackLogsCollectResult(resp0 *edge_stacks.EdgeStackLogsCollectNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning edgeStackLogsCollectNoContent is not supported

		// Non schema case: warning edgeStackLogsCollectBadRequest is not supported

		// Non schema case: warning edgeStackLogsCollectNotFound is not supported

		// Non schema case: warning edgeStackLogsCollectInternalServerError is not supported

		// Non schema case: warning edgeStackLogsCollectServiceUnavailable is not supported

		return "", respErr
	}

	// warning: non schema response edgeStackLogsCollectNoContent is not supported by go-swagger cli yet.

	return "", nil
}
