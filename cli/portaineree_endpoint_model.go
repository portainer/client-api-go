// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeEndpoint

// register flags to command
func registerModelPortainereeEndpointFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEndpointAMTDeviceGUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointAuthorizedTeams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointAuthorizedUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointAzureCredentials(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointChangeWindow(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointCloudProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointComposeSyntaxMaxVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointDeploymentOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEdgeCheckinInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEdgeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEdgeKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEnableImageNotification(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointGpus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointGroupID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointKubernetes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointNomad(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointPostInitMigrations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointPublicURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSnapshots(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointStatusMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTLS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTLSCACert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTLSCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTLSConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTLSKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTagIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointTeamAccessPolicies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointUserAccessPolicies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointAgent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEdge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointIsEdgeDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointLastCheckInDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointLocalTimeZone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointQueryDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointSecuritySettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointUserTrusted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointAMTDeviceGUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aMTDeviceGuidDescription := `The identifier of the AMT Device associated with this environment(endpoint)`

	var aMTDeviceGuidFlagName string
	if cmdPrefix == "" {
		aMTDeviceGuidFlagName = "AMTDeviceGUID"
	} else {
		aMTDeviceGuidFlagName = fmt.Sprintf("%v.AMTDeviceGUID", cmdPrefix)
	}

	var aMTDeviceGuidFlagDefault string

	_ = cmd.PersistentFlags().String(aMTDeviceGuidFlagName, aMTDeviceGuidFlagDefault, aMTDeviceGuidDescription)

	return nil
}

func registerPortainereeEndpointAuthorizedTeams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: AuthorizedTeams []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointAuthorizedUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: AuthorizedUsers []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointAzureCredentials(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var azureCredentialsFlagName string
	if cmdPrefix == "" {
		azureCredentialsFlagName = "AzureCredentials"
	} else {
		azureCredentialsFlagName = fmt.Sprintf("%v.AzureCredentials", cmdPrefix)
	}

	if err := registerModelPortainereeAzureCredentialsFlags(depth+1, azureCredentialsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointChangeWindow(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var changeWindowFlagName string
	if cmdPrefix == "" {
		changeWindowFlagName = "ChangeWindow"
	} else {
		changeWindowFlagName = fmt.Sprintf("%v.ChangeWindow", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointChangeWindowFlags(depth+1, changeWindowFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointCloudProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cloudProviderFlagName string
	if cmdPrefix == "" {
		cloudProviderFlagName = "CloudProvider"
	} else {
		cloudProviderFlagName = fmt.Sprintf("%v.CloudProvider", cmdPrefix)
	}

	if err := registerModelPortainereeCloudProviderFlags(depth+1, cloudProviderFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointComposeSyntaxMaxVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	composeSyntaxMaxVersionDescription := `Maximum version of docker-compose`

	var composeSyntaxMaxVersionFlagName string
	if cmdPrefix == "" {
		composeSyntaxMaxVersionFlagName = "ComposeSyntaxMaxVersion"
	} else {
		composeSyntaxMaxVersionFlagName = fmt.Sprintf("%v.ComposeSyntaxMaxVersion", cmdPrefix)
	}

	var composeSyntaxMaxVersionFlagDefault string

	_ = cmd.PersistentFlags().String(composeSyntaxMaxVersionFlagName, composeSyntaxMaxVersionFlagDefault, composeSyntaxMaxVersionDescription)

	return nil
}

func registerPortainereeEndpointDeploymentOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deploymentOptionsFlagName string
	if cmdPrefix == "" {
		deploymentOptionsFlagName = "DeploymentOptions"
	} else {
		deploymentOptionsFlagName = fmt.Sprintf("%v.DeploymentOptions", cmdPrefix)
	}

	if err := registerModelPortainereeDeploymentOptionsFlags(depth+1, deploymentOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointEdgeCheckinInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeCheckinIntervalDescription := `The check in interval for edge agent (in seconds)`

	var edgeCheckinIntervalFlagName string
	if cmdPrefix == "" {
		edgeCheckinIntervalFlagName = "EdgeCheckinInterval"
	} else {
		edgeCheckinIntervalFlagName = fmt.Sprintf("%v.EdgeCheckinInterval", cmdPrefix)
	}

	var edgeCheckinIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeCheckinIntervalFlagName, edgeCheckinIntervalFlagDefault, edgeCheckinIntervalDescription)

	return nil
}

func registerPortainereeEndpointEdgeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeIdDescription := `The identifier of the edge agent associated with this environment(endpoint)`

	var edgeIdFlagName string
	if cmdPrefix == "" {
		edgeIdFlagName = "EdgeID"
	} else {
		edgeIdFlagName = fmt.Sprintf("%v.EdgeID", cmdPrefix)
	}

	var edgeIdFlagDefault string

	_ = cmd.PersistentFlags().String(edgeIdFlagName, edgeIdFlagDefault, edgeIdDescription)

	return nil
}

func registerPortainereeEndpointEdgeKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeKeyDescription := `The key which is used to map the agent to Portainer`

	var edgeKeyFlagName string
	if cmdPrefix == "" {
		edgeKeyFlagName = "EdgeKey"
	} else {
		edgeKeyFlagName = fmt.Sprintf("%v.EdgeKey", cmdPrefix)
	}

	var edgeKeyFlagDefault string

	_ = cmd.PersistentFlags().String(edgeKeyFlagName, edgeKeyFlagDefault, edgeKeyDescription)

	return nil
}

func registerPortainereeEndpointEnableImageNotification(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableImageNotificationDescription := ``

	var enableImageNotificationFlagName string
	if cmdPrefix == "" {
		enableImageNotificationFlagName = "EnableImageNotification"
	} else {
		enableImageNotificationFlagName = fmt.Sprintf("%v.EnableImageNotification", cmdPrefix)
	}

	var enableImageNotificationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableImageNotificationFlagName, enableImageNotificationFlagDefault, enableImageNotificationDescription)

	return nil
}

func registerPortainereeEndpointGpus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Gpus []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointGroupID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupIdDescription := `Environment(Endpoint) group identifier`

	var groupIdFlagName string
	if cmdPrefix == "" {
		groupIdFlagName = "GroupId"
	} else {
		groupIdFlagName = fmt.Sprintf("%v.GroupId", cmdPrefix)
	}

	var groupIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(groupIdFlagName, groupIdFlagDefault, groupIdDescription)

	return nil
}

func registerPortainereeEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Environment(Endpoint) Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeEndpointKubernetes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var kubernetesFlagName string
	if cmdPrefix == "" {
		kubernetesFlagName = "Kubernetes"
	} else {
		kubernetesFlagName = fmt.Sprintf("%v.Kubernetes", cmdPrefix)
	}

	if err := registerModelPortainereeKubernetesDataFlags(depth+1, kubernetesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Environment(Endpoint) name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeEndpointNomad(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var nomadFlagName string
	if cmdPrefix == "" {
		nomadFlagName = "Nomad"
	} else {
		nomadFlagName = fmt.Sprintf("%v.Nomad", cmdPrefix)
	}

	if err := registerModelPortainereeNomadDataFlags(depth+1, nomadFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointPostInitMigrations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var postInitMigrationsFlagName string
	if cmdPrefix == "" {
		postInitMigrationsFlagName = "PostInitMigrations"
	} else {
		postInitMigrationsFlagName = fmt.Sprintf("%v.PostInitMigrations", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointPostInitMigrationsFlags(depth+1, postInitMigrationsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointPublicURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicUrlDescription := `URL or IP address where exposed containers will be reachable`

	var publicUrlFlagName string
	if cmdPrefix == "" {
		publicUrlFlagName = "PublicURL"
	} else {
		publicUrlFlagName = fmt.Sprintf("%v.PublicURL", cmdPrefix)
	}

	var publicUrlFlagDefault string

	_ = cmd.PersistentFlags().String(publicUrlFlagName, publicUrlFlagDefault, publicUrlDescription)

	return nil
}

func registerPortainereeEndpointSnapshots(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Snapshots []*PortainerDockerSnapshot array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The status of the environment(endpoint) (1 - up, 2 - down, 3 -
provisioning, 4 - error)`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "Status"
	} else {
		statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	var statusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerPortainereeEndpointStatusMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statusMessageFlagName string
	if cmdPrefix == "" {
		statusMessageFlagName = "StatusMessage"
	} else {
		statusMessageFlagName = fmt.Sprintf("%v.StatusMessage", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointStatusMessageFlags(depth+1, statusMessageFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointTLS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsDescription := `Deprecated fields
Deprecated in DBVersion == 4`

	var tlsFlagName string
	if cmdPrefix == "" {
		tlsFlagName = "TLS"
	} else {
		tlsFlagName = fmt.Sprintf("%v.TLS", cmdPrefix)
	}

	var tlsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsFlagName, tlsFlagDefault, tlsDescription)

	return nil
}

func registerPortainereeEndpointTLSCACert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsCACertDescription := ``

	var tlsCACertFlagName string
	if cmdPrefix == "" {
		tlsCACertFlagName = "TLSCACert"
	} else {
		tlsCACertFlagName = fmt.Sprintf("%v.TLSCACert", cmdPrefix)
	}

	var tlsCACertFlagDefault string

	_ = cmd.PersistentFlags().String(tlsCACertFlagName, tlsCACertFlagDefault, tlsCACertDescription)

	return nil
}

func registerPortainereeEndpointTLSCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsCertDescription := ``

	var tlsCertFlagName string
	if cmdPrefix == "" {
		tlsCertFlagName = "TLSCert"
	} else {
		tlsCertFlagName = fmt.Sprintf("%v.TLSCert", cmdPrefix)
	}

	var tlsCertFlagDefault string

	_ = cmd.PersistentFlags().String(tlsCertFlagName, tlsCertFlagDefault, tlsCertDescription)

	return nil
}

func registerPortainereeEndpointTLSConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tlsConfigFlagName string
	if cmdPrefix == "" {
		tlsConfigFlagName = "TLSConfig"
	} else {
		tlsConfigFlagName = fmt.Sprintf("%v.TLSConfig", cmdPrefix)
	}

	if err := registerModelPortainereeTLSConfigurationFlags(depth+1, tlsConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointTLSKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsKeyDescription := ``

	var tlsKeyFlagName string
	if cmdPrefix == "" {
		tlsKeyFlagName = "TLSKey"
	} else {
		tlsKeyFlagName = fmt.Sprintf("%v.TLSKey", cmdPrefix)
	}

	var tlsKeyFlagDefault string

	_ = cmd.PersistentFlags().String(tlsKeyFlagName, tlsKeyFlagDefault, tlsKeyDescription)

	return nil
}

func registerPortainereeEndpointTagIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: TagIds []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Tags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointTeamAccessPolicies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: TeamAccessPolicies PortainereeTeamAccessPolicies map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint).`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerPortainereeEndpointURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `URL or IP address of the Docker host associated to this environment(endpoint)`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "URL"
	} else {
		urlFlagName = fmt.Sprintf("%v.URL", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

func registerPortainereeEndpointUserAccessPolicies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: UserAccessPolicies PortainereeUserAccessPolicies map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEndpointAgent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var agentFlagName string
	if cmdPrefix == "" {
		agentFlagName = "agent"
	} else {
		agentFlagName = fmt.Sprintf("%v.agent", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointAgentFlags(depth+1, agentFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointEdge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var edgeFlagName string
	if cmdPrefix == "" {
		edgeFlagName = "edge"
	} else {
		edgeFlagName = fmt.Sprintf("%v.edge", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointEdgeFlags(depth+1, edgeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointIsEdgeDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isEdgeDeviceDescription := `IsEdgeDevice marks if the environment was created as an EdgeDevice`

	var isEdgeDeviceFlagName string
	if cmdPrefix == "" {
		isEdgeDeviceFlagName = "isEdgeDevice"
	} else {
		isEdgeDeviceFlagName = fmt.Sprintf("%v.isEdgeDevice", cmdPrefix)
	}

	var isEdgeDeviceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isEdgeDeviceFlagName, isEdgeDeviceFlagDefault, isEdgeDeviceDescription)

	return nil
}

func registerPortainereeEndpointLastCheckInDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastCheckInDateDescription := `LastCheckInDate mark last check-in date on checkin`

	var lastCheckInDateFlagName string
	if cmdPrefix == "" {
		lastCheckInDateFlagName = "lastCheckInDate"
	} else {
		lastCheckInDateFlagName = fmt.Sprintf("%v.lastCheckInDate", cmdPrefix)
	}

	var lastCheckInDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lastCheckInDateFlagName, lastCheckInDateFlagDefault, lastCheckInDateDescription)

	return nil
}

func registerPortainereeEndpointLocalTimeZone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	localTimeZoneDescription := `LocalTimeZone is the local time zone of the endpoint`

	var localTimeZoneFlagName string
	if cmdPrefix == "" {
		localTimeZoneFlagName = "localTimeZone"
	} else {
		localTimeZoneFlagName = fmt.Sprintf("%v.localTimeZone", cmdPrefix)
	}

	var localTimeZoneFlagDefault string

	_ = cmd.PersistentFlags().String(localTimeZoneFlagName, localTimeZoneFlagDefault, localTimeZoneDescription)

	return nil
}

func registerPortainereeEndpointQueryDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queryDateDescription := `QueryDate of each query with the endpoints list`

	var queryDateFlagName string
	if cmdPrefix == "" {
		queryDateFlagName = "queryDate"
	} else {
		queryDateFlagName = fmt.Sprintf("%v.queryDate", cmdPrefix)
	}

	var queryDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(queryDateFlagName, queryDateFlagDefault, queryDateDescription)

	return nil
}

func registerPortainereeEndpointSecuritySettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var securitySettingsFlagName string
	if cmdPrefix == "" {
		securitySettingsFlagName = "securitySettings"
	} else {
		securitySettingsFlagName = fmt.Sprintf("%v.securitySettings", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointSecuritySettingsFlags(depth+1, securitySettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointUserTrusted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userTrustedDescription := `Whether the device has been trusted or not by the user`

	var userTrustedFlagName string
	if cmdPrefix == "" {
		userTrustedFlagName = "userTrusted"
	} else {
		userTrustedFlagName = fmt.Sprintf("%v.userTrusted", cmdPrefix)
	}

	var userTrustedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(userTrustedFlagName, userTrustedFlagDefault, userTrustedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEndpointFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aMTDeviceGuidAdded := retrievePortainereeEndpointAMTDeviceGUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aMTDeviceGuidAdded

	err, authorizedTeamsAdded := retrievePortainereeEndpointAuthorizedTeamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorizedTeamsAdded

	err, authorizedUsersAdded := retrievePortainereeEndpointAuthorizedUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorizedUsersAdded

	err, azureCredentialsAdded := retrievePortainereeEndpointAzureCredentialsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || azureCredentialsAdded

	err, changeWindowAdded := retrievePortainereeEndpointChangeWindowFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || changeWindowAdded

	err, cloudProviderAdded := retrievePortainereeEndpointCloudProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cloudProviderAdded

	err, composeSyntaxMaxVersionAdded := retrievePortainereeEndpointComposeSyntaxMaxVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || composeSyntaxMaxVersionAdded

	err, deploymentOptionsAdded := retrievePortainereeEndpointDeploymentOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentOptionsAdded

	err, edgeCheckinIntervalAdded := retrievePortainereeEndpointEdgeCheckinIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeCheckinIntervalAdded

	err, edgeIdAdded := retrievePortainereeEndpointEdgeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeIdAdded

	err, edgeKeyAdded := retrievePortainereeEndpointEdgeKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeKeyAdded

	err, enableImageNotificationAdded := retrievePortainereeEndpointEnableImageNotificationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableImageNotificationAdded

	err, gpusAdded := retrievePortainereeEndpointGpusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpusAdded

	err, groupIdAdded := retrievePortainereeEndpointGroupIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupIdAdded

	err, idAdded := retrievePortainereeEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, kubernetesAdded := retrievePortainereeEndpointKubernetesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubernetesAdded

	err, nameAdded := retrievePortainereeEndpointNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, nomadAdded := retrievePortainereeEndpointNomadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nomadAdded

	err, postInitMigrationsAdded := retrievePortainereeEndpointPostInitMigrationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || postInitMigrationsAdded

	err, publicUrlAdded := retrievePortainereeEndpointPublicURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicUrlAdded

	err, snapshotsAdded := retrievePortainereeEndpointSnapshotsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotsAdded

	err, statusAdded := retrievePortainereeEndpointStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, statusMessageAdded := retrievePortainereeEndpointStatusMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusMessageAdded

	err, tlsAdded := retrievePortainereeEndpointTLSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsAdded

	err, tlsCACertAdded := retrievePortainereeEndpointTLSCACertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsCACertAdded

	err, tlsCertAdded := retrievePortainereeEndpointTLSCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsCertAdded

	err, tlsConfigAdded := retrievePortainereeEndpointTLSConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsConfigAdded

	err, tlsKeyAdded := retrievePortainereeEndpointTLSKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsKeyAdded

	err, tagIdsAdded := retrievePortainereeEndpointTagIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagIdsAdded

	err, tagsAdded := retrievePortainereeEndpointTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, teamAccessPoliciesAdded := retrievePortainereeEndpointTeamAccessPoliciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAccessPoliciesAdded

	err, typeAdded := retrievePortainereeEndpointTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, urlAdded := retrievePortainereeEndpointURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	err, userAccessPoliciesAdded := retrievePortainereeEndpointUserAccessPoliciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAccessPoliciesAdded

	err, agentAdded := retrievePortainereeEndpointAgentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentAdded

	err, edgeAdded := retrievePortainereeEndpointEdgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded

	err, isEdgeDeviceAdded := retrievePortainereeEndpointIsEdgeDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isEdgeDeviceAdded

	err, lastCheckInDateAdded := retrievePortainereeEndpointLastCheckInDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastCheckInDateAdded

	err, localTimeZoneAdded := retrievePortainereeEndpointLocalTimeZoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || localTimeZoneAdded

	err, queryDateAdded := retrievePortainereeEndpointQueryDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queryDateAdded

	err, securitySettingsAdded := retrievePortainereeEndpointSecuritySettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securitySettingsAdded

	err, userTrustedAdded := retrievePortainereeEndpointUserTrustedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userTrustedAdded

	return nil, retAdded
}

func retrievePortainereeEndpointAMTDeviceGUIDFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aMTDeviceGuidFlagName := fmt.Sprintf("%v.AMTDeviceGUID", cmdPrefix)
	if cmd.Flags().Changed(aMTDeviceGuidFlagName) {

		var aMTDeviceGuidFlagName string
		if cmdPrefix == "" {
			aMTDeviceGuidFlagName = "AMTDeviceGUID"
		} else {
			aMTDeviceGuidFlagName = fmt.Sprintf("%v.AMTDeviceGUID", cmdPrefix)
		}

		aMTDeviceGuidFlagValue, err := cmd.Flags().GetString(aMTDeviceGuidFlagName)
		if err != nil {
			return err, false
		}
		m.AMTDeviceGUID = aMTDeviceGuidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointAuthorizedTeamsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorizedTeamsFlagName := fmt.Sprintf("%v.AuthorizedTeams", cmdPrefix)
	if cmd.Flags().Changed(authorizedTeamsFlagName) {
		// warning: AuthorizedTeams array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointAuthorizedUsersFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorizedUsersFlagName := fmt.Sprintf("%v.AuthorizedUsers", cmdPrefix)
	if cmd.Flags().Changed(authorizedUsersFlagName) {
		// warning: AuthorizedUsers array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointAzureCredentialsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	azureCredentialsFlagName := fmt.Sprintf("%v.AzureCredentials", cmdPrefix)
	if cmd.Flags().Changed(azureCredentialsFlagName) {
		// info: complex object AzureCredentials PortainereeAzureCredentials is retrieved outside this Changed() block
	}
	azureCredentialsFlagValue := m.AzureCredentials
	if swag.IsZero(azureCredentialsFlagValue) {
		azureCredentialsFlagValue = &models.PortainereeAzureCredentials{}
	}

	err, azureCredentialsAdded := retrieveModelPortainereeAzureCredentialsFlags(depth+1, azureCredentialsFlagValue, azureCredentialsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || azureCredentialsAdded
	if azureCredentialsAdded {
		m.AzureCredentials = azureCredentialsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointChangeWindowFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	changeWindowFlagName := fmt.Sprintf("%v.ChangeWindow", cmdPrefix)
	if cmd.Flags().Changed(changeWindowFlagName) {
		// info: complex object ChangeWindow PortainereeEndpointChangeWindow is retrieved outside this Changed() block
	}
	changeWindowFlagValue := m.ChangeWindow
	if swag.IsZero(changeWindowFlagValue) {
		changeWindowFlagValue = &models.PortainereeEndpointChangeWindow{}
	}

	err, changeWindowAdded := retrieveModelPortainereeEndpointChangeWindowFlags(depth+1, changeWindowFlagValue, changeWindowFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || changeWindowAdded
	if changeWindowAdded {
		m.ChangeWindow = changeWindowFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointCloudProviderFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cloudProviderFlagName := fmt.Sprintf("%v.CloudProvider", cmdPrefix)
	if cmd.Flags().Changed(cloudProviderFlagName) {
		// info: complex object CloudProvider PortainereeCloudProvider is retrieved outside this Changed() block
	}
	cloudProviderFlagValue := m.CloudProvider
	if swag.IsZero(cloudProviderFlagValue) {
		cloudProviderFlagValue = &models.PortainereeCloudProvider{}
	}

	err, cloudProviderAdded := retrieveModelPortainereeCloudProviderFlags(depth+1, cloudProviderFlagValue, cloudProviderFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cloudProviderAdded
	if cloudProviderAdded {
		m.CloudProvider = cloudProviderFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointComposeSyntaxMaxVersionFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	composeSyntaxMaxVersionFlagName := fmt.Sprintf("%v.ComposeSyntaxMaxVersion", cmdPrefix)
	if cmd.Flags().Changed(composeSyntaxMaxVersionFlagName) {

		var composeSyntaxMaxVersionFlagName string
		if cmdPrefix == "" {
			composeSyntaxMaxVersionFlagName = "ComposeSyntaxMaxVersion"
		} else {
			composeSyntaxMaxVersionFlagName = fmt.Sprintf("%v.ComposeSyntaxMaxVersion", cmdPrefix)
		}

		composeSyntaxMaxVersionFlagValue, err := cmd.Flags().GetString(composeSyntaxMaxVersionFlagName)
		if err != nil {
			return err, false
		}
		m.ComposeSyntaxMaxVersion = composeSyntaxMaxVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointDeploymentOptionsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deploymentOptionsFlagName := fmt.Sprintf("%v.DeploymentOptions", cmdPrefix)
	if cmd.Flags().Changed(deploymentOptionsFlagName) {
		// info: complex object DeploymentOptions PortainereeDeploymentOptions is retrieved outside this Changed() block
	}
	deploymentOptionsFlagValue := m.DeploymentOptions
	if swag.IsZero(deploymentOptionsFlagValue) {
		deploymentOptionsFlagValue = &models.PortainereeDeploymentOptions{}
	}

	err, deploymentOptionsAdded := retrieveModelPortainereeDeploymentOptionsFlags(depth+1, deploymentOptionsFlagValue, deploymentOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentOptionsAdded
	if deploymentOptionsAdded {
		m.DeploymentOptions = deploymentOptionsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEdgeCheckinIntervalFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeCheckinIntervalFlagName := fmt.Sprintf("%v.EdgeCheckinInterval", cmdPrefix)
	if cmd.Flags().Changed(edgeCheckinIntervalFlagName) {

		var edgeCheckinIntervalFlagName string
		if cmdPrefix == "" {
			edgeCheckinIntervalFlagName = "EdgeCheckinInterval"
		} else {
			edgeCheckinIntervalFlagName = fmt.Sprintf("%v.EdgeCheckinInterval", cmdPrefix)
		}

		edgeCheckinIntervalFlagValue, err := cmd.Flags().GetInt64(edgeCheckinIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeCheckinInterval = edgeCheckinIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEdgeIDFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeIdFlagName := fmt.Sprintf("%v.EdgeID", cmdPrefix)
	if cmd.Flags().Changed(edgeIdFlagName) {

		var edgeIdFlagName string
		if cmdPrefix == "" {
			edgeIdFlagName = "EdgeID"
		} else {
			edgeIdFlagName = fmt.Sprintf("%v.EdgeID", cmdPrefix)
		}

		edgeIdFlagValue, err := cmd.Flags().GetString(edgeIdFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeID = edgeIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEdgeKeyFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeKeyFlagName := fmt.Sprintf("%v.EdgeKey", cmdPrefix)
	if cmd.Flags().Changed(edgeKeyFlagName) {

		var edgeKeyFlagName string
		if cmdPrefix == "" {
			edgeKeyFlagName = "EdgeKey"
		} else {
			edgeKeyFlagName = fmt.Sprintf("%v.EdgeKey", cmdPrefix)
		}

		edgeKeyFlagValue, err := cmd.Flags().GetString(edgeKeyFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeKey = edgeKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEnableImageNotificationFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableImageNotificationFlagName := fmt.Sprintf("%v.EnableImageNotification", cmdPrefix)
	if cmd.Flags().Changed(enableImageNotificationFlagName) {

		var enableImageNotificationFlagName string
		if cmdPrefix == "" {
			enableImageNotificationFlagName = "EnableImageNotification"
		} else {
			enableImageNotificationFlagName = fmt.Sprintf("%v.EnableImageNotification", cmdPrefix)
		}

		enableImageNotificationFlagValue, err := cmd.Flags().GetBool(enableImageNotificationFlagName)
		if err != nil {
			return err, false
		}
		m.EnableImageNotification = &enableImageNotificationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointGpusFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpusFlagName := fmt.Sprintf("%v.Gpus", cmdPrefix)
	if cmd.Flags().Changed(gpusFlagName) {
		// warning: Gpus array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointGroupIDFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupIdFlagName := fmt.Sprintf("%v.GroupId", cmdPrefix)
	if cmd.Flags().Changed(groupIdFlagName) {

		var groupIdFlagName string
		if cmdPrefix == "" {
			groupIdFlagName = "GroupId"
		} else {
			groupIdFlagName = fmt.Sprintf("%v.GroupId", cmdPrefix)
		}

		groupIdFlagValue, err := cmd.Flags().GetInt64(groupIdFlagName)
		if err != nil {
			return err, false
		}
		m.GroupID = groupIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointIDFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointKubernetesFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubernetesFlagName := fmt.Sprintf("%v.Kubernetes", cmdPrefix)
	if cmd.Flags().Changed(kubernetesFlagName) {
		// info: complex object Kubernetes PortainereeKubernetesData is retrieved outside this Changed() block
	}
	kubernetesFlagValue := m.Kubernetes
	if swag.IsZero(kubernetesFlagValue) {
		kubernetesFlagValue = &models.PortainereeKubernetesData{}
	}

	err, kubernetesAdded := retrieveModelPortainereeKubernetesDataFlags(depth+1, kubernetesFlagValue, kubernetesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubernetesAdded
	if kubernetesAdded {
		m.Kubernetes = kubernetesFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointNameFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointNomadFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nomadFlagName := fmt.Sprintf("%v.Nomad", cmdPrefix)
	if cmd.Flags().Changed(nomadFlagName) {
		// info: complex object Nomad PortainereeNomadData is retrieved outside this Changed() block
	}
	nomadFlagValue := m.Nomad
	if swag.IsZero(nomadFlagValue) {
		nomadFlagValue = &models.PortainereeNomadData{}
	}

	err, nomadAdded := retrieveModelPortainereeNomadDataFlags(depth+1, nomadFlagValue, nomadFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nomadAdded
	if nomadAdded {
		m.Nomad = nomadFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointPostInitMigrationsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	postInitMigrationsFlagName := fmt.Sprintf("%v.PostInitMigrations", cmdPrefix)
	if cmd.Flags().Changed(postInitMigrationsFlagName) {
		// info: complex object PostInitMigrations PortainereeEndpointPostInitMigrations is retrieved outside this Changed() block
	}
	postInitMigrationsFlagValue := m.PostInitMigrations
	if swag.IsZero(postInitMigrationsFlagValue) {
		postInitMigrationsFlagValue = &models.PortainereeEndpointPostInitMigrations{}
	}

	err, postInitMigrationsAdded := retrieveModelPortainereeEndpointPostInitMigrationsFlags(depth+1, postInitMigrationsFlagValue, postInitMigrationsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || postInitMigrationsAdded
	if postInitMigrationsAdded {
		m.PostInitMigrations = postInitMigrationsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointPublicURLFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicUrlFlagName := fmt.Sprintf("%v.PublicURL", cmdPrefix)
	if cmd.Flags().Changed(publicUrlFlagName) {

		var publicUrlFlagName string
		if cmdPrefix == "" {
			publicUrlFlagName = "PublicURL"
		} else {
			publicUrlFlagName = fmt.Sprintf("%v.PublicURL", cmdPrefix)
		}

		publicUrlFlagValue, err := cmd.Flags().GetString(publicUrlFlagName)
		if err != nil {
			return err, false
		}
		m.PublicURL = publicUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSnapshotsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotsFlagName := fmt.Sprintf("%v.Snapshots", cmdPrefix)
	if cmd.Flags().Changed(snapshotsFlagName) {
		// warning: Snapshots array type []*PortainerDockerSnapshot is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointStatusFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "Status"
		} else {
			statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt64(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointStatusMessageFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusMessageFlagName := fmt.Sprintf("%v.StatusMessage", cmdPrefix)
	if cmd.Flags().Changed(statusMessageFlagName) {
		// info: complex object StatusMessage PortainereeEndpointStatusMessage is retrieved outside this Changed() block
	}
	statusMessageFlagValue := m.StatusMessage
	if swag.IsZero(statusMessageFlagValue) {
		statusMessageFlagValue = &models.PortainereeEndpointStatusMessage{}
	}

	err, statusMessageAdded := retrieveModelPortainereeEndpointStatusMessageFlags(depth+1, statusMessageFlagValue, statusMessageFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusMessageAdded
	if statusMessageAdded {
		m.StatusMessage = statusMessageFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTLSFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsFlagName := fmt.Sprintf("%v.TLS", cmdPrefix)
	if cmd.Flags().Changed(tlsFlagName) {

		var tlsFlagName string
		if cmdPrefix == "" {
			tlsFlagName = "TLS"
		} else {
			tlsFlagName = fmt.Sprintf("%v.TLS", cmdPrefix)
		}

		tlsFlagValue, err := cmd.Flags().GetBool(tlsFlagName)
		if err != nil {
			return err, false
		}
		m.TLS = &tlsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTLSCACertFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsCACertFlagName := fmt.Sprintf("%v.TLSCACert", cmdPrefix)
	if cmd.Flags().Changed(tlsCACertFlagName) {

		var tlsCACertFlagName string
		if cmdPrefix == "" {
			tlsCACertFlagName = "TLSCACert"
		} else {
			tlsCACertFlagName = fmt.Sprintf("%v.TLSCACert", cmdPrefix)
		}

		tlsCACertFlagValue, err := cmd.Flags().GetString(tlsCACertFlagName)
		if err != nil {
			return err, false
		}
		m.TLSCACert = tlsCACertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTLSCertFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsCertFlagName := fmt.Sprintf("%v.TLSCert", cmdPrefix)
	if cmd.Flags().Changed(tlsCertFlagName) {

		var tlsCertFlagName string
		if cmdPrefix == "" {
			tlsCertFlagName = "TLSCert"
		} else {
			tlsCertFlagName = fmt.Sprintf("%v.TLSCert", cmdPrefix)
		}

		tlsCertFlagValue, err := cmd.Flags().GetString(tlsCertFlagName)
		if err != nil {
			return err, false
		}
		m.TLSCert = tlsCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTLSConfigFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsConfigFlagName := fmt.Sprintf("%v.TLSConfig", cmdPrefix)
	if cmd.Flags().Changed(tlsConfigFlagName) {
		// info: complex object TLSConfig PortainereeTLSConfiguration is retrieved outside this Changed() block
	}
	tlsConfigFlagValue := m.TLSConfig
	if swag.IsZero(tlsConfigFlagValue) {
		tlsConfigFlagValue = &models.PortainereeTLSConfiguration{}
	}

	err, tlsConfigAdded := retrieveModelPortainereeTLSConfigurationFlags(depth+1, tlsConfigFlagValue, tlsConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsConfigAdded
	if tlsConfigAdded {
		m.TLSConfig = tlsConfigFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTLSKeyFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsKeyFlagName := fmt.Sprintf("%v.TLSKey", cmdPrefix)
	if cmd.Flags().Changed(tlsKeyFlagName) {

		var tlsKeyFlagName string
		if cmdPrefix == "" {
			tlsKeyFlagName = "TLSKey"
		} else {
			tlsKeyFlagName = fmt.Sprintf("%v.TLSKey", cmdPrefix)
		}

		tlsKeyFlagValue, err := cmd.Flags().GetString(tlsKeyFlagName)
		if err != nil {
			return err, false
		}
		m.TLSKey = tlsKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTagIdsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagIdsFlagName := fmt.Sprintf("%v.TagIds", cmdPrefix)
	if cmd.Flags().Changed(tagIdsFlagName) {
		// warning: TagIds array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTagsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.Tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: Tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTeamAccessPoliciesFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamAccessPoliciesFlagName := fmt.Sprintf("%v.TeamAccessPolicies", cmdPrefix)
	if cmd.Flags().Changed(teamAccessPoliciesFlagName) {
		// warning: TeamAccessPolicies map type PortainereeTeamAccessPolicies is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointTypeFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointURLFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.URL", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "URL"
		} else {
			urlFlagName = fmt.Sprintf("%v.URL", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointUserAccessPoliciesFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userAccessPoliciesFlagName := fmt.Sprintf("%v.UserAccessPolicies", cmdPrefix)
	if cmd.Flags().Changed(userAccessPoliciesFlagName) {
		// warning: UserAccessPolicies map type PortainereeUserAccessPolicies is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEndpointAgentFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentFlagName := fmt.Sprintf("%v.agent", cmdPrefix)
	if cmd.Flags().Changed(agentFlagName) {
		// info: complex object agent PortainereeEndpointAgent is retrieved outside this Changed() block
	}
	agentFlagValue := m.Agent
	if swag.IsZero(agentFlagValue) {
		agentFlagValue = &models.PortainereeEndpointAgent{}
	}

	err, agentAdded := retrieveModelPortainereeEndpointAgentFlags(depth+1, agentFlagValue, agentFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentAdded
	if agentAdded {
		m.Agent = agentFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEdgeFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeFlagName := fmt.Sprintf("%v.edge", cmdPrefix)
	if cmd.Flags().Changed(edgeFlagName) {
		// info: complex object edge PortainereeEndpointEdge is retrieved outside this Changed() block
	}
	edgeFlagValue := m.Edge
	if swag.IsZero(edgeFlagValue) {
		edgeFlagValue = &models.PortainereeEndpointEdge{}
	}

	err, edgeAdded := retrieveModelPortainereeEndpointEdgeFlags(depth+1, edgeFlagValue, edgeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded
	if edgeAdded {
		m.Edge = edgeFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointIsEdgeDeviceFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isEdgeDeviceFlagName := fmt.Sprintf("%v.isEdgeDevice", cmdPrefix)
	if cmd.Flags().Changed(isEdgeDeviceFlagName) {

		var isEdgeDeviceFlagName string
		if cmdPrefix == "" {
			isEdgeDeviceFlagName = "isEdgeDevice"
		} else {
			isEdgeDeviceFlagName = fmt.Sprintf("%v.isEdgeDevice", cmdPrefix)
		}

		isEdgeDeviceFlagValue, err := cmd.Flags().GetBool(isEdgeDeviceFlagName)
		if err != nil {
			return err, false
		}
		m.IsEdgeDevice = &isEdgeDeviceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointLastCheckInDateFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastCheckInDateFlagName := fmt.Sprintf("%v.lastCheckInDate", cmdPrefix)
	if cmd.Flags().Changed(lastCheckInDateFlagName) {

		var lastCheckInDateFlagName string
		if cmdPrefix == "" {
			lastCheckInDateFlagName = "lastCheckInDate"
		} else {
			lastCheckInDateFlagName = fmt.Sprintf("%v.lastCheckInDate", cmdPrefix)
		}

		lastCheckInDateFlagValue, err := cmd.Flags().GetInt64(lastCheckInDateFlagName)
		if err != nil {
			return err, false
		}
		m.LastCheckInDate = lastCheckInDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointLocalTimeZoneFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	localTimeZoneFlagName := fmt.Sprintf("%v.localTimeZone", cmdPrefix)
	if cmd.Flags().Changed(localTimeZoneFlagName) {

		var localTimeZoneFlagName string
		if cmdPrefix == "" {
			localTimeZoneFlagName = "localTimeZone"
		} else {
			localTimeZoneFlagName = fmt.Sprintf("%v.localTimeZone", cmdPrefix)
		}

		localTimeZoneFlagValue, err := cmd.Flags().GetString(localTimeZoneFlagName)
		if err != nil {
			return err, false
		}
		m.LocalTimeZone = localTimeZoneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointQueryDateFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queryDateFlagName := fmt.Sprintf("%v.queryDate", cmdPrefix)
	if cmd.Flags().Changed(queryDateFlagName) {

		var queryDateFlagName string
		if cmdPrefix == "" {
			queryDateFlagName = "queryDate"
		} else {
			queryDateFlagName = fmt.Sprintf("%v.queryDate", cmdPrefix)
		}

		queryDateFlagValue, err := cmd.Flags().GetInt64(queryDateFlagName)
		if err != nil {
			return err, false
		}
		m.QueryDate = queryDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointSecuritySettingsFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securitySettingsFlagName := fmt.Sprintf("%v.securitySettings", cmdPrefix)
	if cmd.Flags().Changed(securitySettingsFlagName) {
		// info: complex object securitySettings PortainereeEndpointSecuritySettings is retrieved outside this Changed() block
	}
	securitySettingsFlagValue := m.SecuritySettings
	if swag.IsZero(securitySettingsFlagValue) {
		securitySettingsFlagValue = &models.PortainereeEndpointSecuritySettings{}
	}

	err, securitySettingsAdded := retrieveModelPortainereeEndpointSecuritySettingsFlags(depth+1, securitySettingsFlagValue, securitySettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securitySettingsAdded
	if securitySettingsAdded {
		m.SecuritySettings = securitySettingsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeEndpointUserTrustedFlags(depth int, m *models.PortainereeEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userTrustedFlagName := fmt.Sprintf("%v.userTrusted", cmdPrefix)
	if cmd.Flags().Changed(userTrustedFlagName) {

		var userTrustedFlagName string
		if cmdPrefix == "" {
			userTrustedFlagName = "userTrusted"
		} else {
			userTrustedFlagName = fmt.Sprintf("%v.userTrusted", cmdPrefix)
		}

		userTrustedFlagValue, err := cmd.Flags().GetBool(userTrustedFlagName)
		if err != nil {
			return err, false
		}
		m.UserTrusted = &userTrustedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PortainereeEndpointAgent

// register flags to command
func registerModelPortainereeEndpointAgentFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEndpointAgentVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointAgentVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEndpointAgentFlags(depth int, m *models.PortainereeEndpointAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, versionAdded := retrievePortainereeEndpointAgentVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrievePortainereeEndpointAgentVersionFlags(depth int, m *models.PortainereeEndpointAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PortainereeEndpointEdge

// register flags to command
func registerModelPortainereeEndpointEdgeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEndpointEdgeCommandInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEdgePingInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEdgeSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEndpointEdgeAsyncMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointEdgeCommandInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commandIntervalDescription := `The command list interval for edge agent - used in edge async mode [seconds]`

	var commandIntervalFlagName string
	if cmdPrefix == "" {
		commandIntervalFlagName = "CommandInterval"
	} else {
		commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	}

	var commandIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(commandIntervalFlagName, commandIntervalFlagDefault, commandIntervalDescription)

	return nil
}

func registerPortainereeEndpointEdgePingInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pingIntervalDescription := `The ping interval for edge agent - used in edge async mode [seconds]`

	var pingIntervalFlagName string
	if cmdPrefix == "" {
		pingIntervalFlagName = "PingInterval"
	} else {
		pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
	}

	var pingIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pingIntervalFlagName, pingIntervalFlagDefault, pingIntervalDescription)

	return nil
}

func registerPortainereeEndpointEdgeSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := `The snapshot interval for edge agent - used in edge async mode [seconds]`

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "SnapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

func registerPortainereeEndpointEdgeAsyncMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	asyncModeDescription := `Whether the device has been started in edge async mode`

	var asyncModeFlagName string
	if cmdPrefix == "" {
		asyncModeFlagName = "asyncMode"
	} else {
		asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
	}

	var asyncModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(asyncModeFlagName, asyncModeFlagDefault, asyncModeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEndpointEdgeFlags(depth int, m *models.PortainereeEndpointEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commandIntervalAdded := retrievePortainereeEndpointEdgeCommandIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandIntervalAdded

	err, pingIntervalAdded := retrievePortainereeEndpointEdgePingIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingIntervalAdded

	err, snapshotIntervalAdded := retrievePortainereeEndpointEdgeSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	err, asyncModeAdded := retrievePortainereeEndpointEdgeAsyncModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || asyncModeAdded

	return nil, retAdded
}

func retrievePortainereeEndpointEdgeCommandIntervalFlags(depth int, m *models.PortainereeEndpointEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandIntervalFlagName := fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	if cmd.Flags().Changed(commandIntervalFlagName) {

		var commandIntervalFlagName string
		if cmdPrefix == "" {
			commandIntervalFlagName = "CommandInterval"
		} else {
			commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
		}

		commandIntervalFlagValue, err := cmd.Flags().GetInt64(commandIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.CommandInterval = commandIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEdgePingIntervalFlags(depth int, m *models.PortainereeEndpointEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingIntervalFlagName := fmt.Sprintf("%v.PingInterval", cmdPrefix)
	if cmd.Flags().Changed(pingIntervalFlagName) {

		var pingIntervalFlagName string
		if cmdPrefix == "" {
			pingIntervalFlagName = "PingInterval"
		} else {
			pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
		}

		pingIntervalFlagValue, err := cmd.Flags().GetInt64(pingIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.PingInterval = pingIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEdgeSnapshotIntervalFlags(depth int, m *models.PortainereeEndpointEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "SnapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetInt64(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEndpointEdgeAsyncModeFlags(depth int, m *models.PortainereeEndpointEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	asyncModeFlagName := fmt.Sprintf("%v.asyncMode", cmdPrefix)
	if cmd.Flags().Changed(asyncModeFlagName) {

		var asyncModeFlagName string
		if cmdPrefix == "" {
			asyncModeFlagName = "asyncMode"
		} else {
			asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
		}

		asyncModeFlagValue, err := cmd.Flags().GetBool(asyncModeFlagName)
		if err != nil {
			return err, false
		}
		m.AsyncMode = asyncModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
