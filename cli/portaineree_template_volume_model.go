// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeTemplateVolume

// register flags to command
func registerModelPortainereeTemplateVolumeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeTemplateVolumeBind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateVolumeContainer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateVolumeReadonly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTemplateVolumeBind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bindDescription := `Path on the host`

	var bindFlagName string
	if cmdPrefix == "" {
		bindFlagName = "bind"
	} else {
		bindFlagName = fmt.Sprintf("%v.bind", cmdPrefix)
	}

	var bindFlagDefault string

	_ = cmd.PersistentFlags().String(bindFlagName, bindFlagDefault, bindDescription)

	return nil
}

func registerPortainereeTemplateVolumeContainer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	containerDescription := `Path inside the container`

	var containerFlagName string
	if cmdPrefix == "" {
		containerFlagName = "container"
	} else {
		containerFlagName = fmt.Sprintf("%v.container", cmdPrefix)
	}

	var containerFlagDefault string

	_ = cmd.PersistentFlags().String(containerFlagName, containerFlagDefault, containerDescription)

	return nil
}

func registerPortainereeTemplateVolumeReadonly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readonlyDescription := `Whether the volume used should be readonly`

	var readonlyFlagName string
	if cmdPrefix == "" {
		readonlyFlagName = "readonly"
	} else {
		readonlyFlagName = fmt.Sprintf("%v.readonly", cmdPrefix)
	}

	var readonlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(readonlyFlagName, readonlyFlagDefault, readonlyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeTemplateVolumeFlags(depth int, m *models.PortainereeTemplateVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bindAdded := retrievePortainereeTemplateVolumeBindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bindAdded

	err, containerAdded := retrievePortainereeTemplateVolumeContainerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containerAdded

	err, readonlyAdded := retrievePortainereeTemplateVolumeReadonlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readonlyAdded

	return nil, retAdded
}

func retrievePortainereeTemplateVolumeBindFlags(depth int, m *models.PortainereeTemplateVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bindFlagName := fmt.Sprintf("%v.bind", cmdPrefix)
	if cmd.Flags().Changed(bindFlagName) {

		var bindFlagName string
		if cmdPrefix == "" {
			bindFlagName = "bind"
		} else {
			bindFlagName = fmt.Sprintf("%v.bind", cmdPrefix)
		}

		bindFlagValue, err := cmd.Flags().GetString(bindFlagName)
		if err != nil {
			return err, false
		}
		m.Bind = bindFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateVolumeContainerFlags(depth int, m *models.PortainereeTemplateVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containerFlagName := fmt.Sprintf("%v.container", cmdPrefix)
	if cmd.Flags().Changed(containerFlagName) {

		var containerFlagName string
		if cmdPrefix == "" {
			containerFlagName = "container"
		} else {
			containerFlagName = fmt.Sprintf("%v.container", cmdPrefix)
		}

		containerFlagValue, err := cmd.Flags().GetString(containerFlagName)
		if err != nil {
			return err, false
		}
		m.Container = containerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateVolumeReadonlyFlags(depth int, m *models.PortainereeTemplateVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readonlyFlagName := fmt.Sprintf("%v.readonly", cmdPrefix)
	if cmd.Flags().Changed(readonlyFlagName) {

		var readonlyFlagName string
		if cmdPrefix == "" {
			readonlyFlagName = "readonly"
		} else {
			readonlyFlagName = fmt.Sprintf("%v.readonly", cmdPrefix)
		}

		readonlyFlagValue, err := cmd.Flags().GetBool(readonlyFlagName)
		if err != nil {
			return err, false
		}
		m.Readonly = &readonlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
