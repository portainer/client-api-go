// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for UsersAccessTokenResponse

// register flags to command
func registerModelUsersAccessTokenResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUsersAccessTokenResponseAPIKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUsersAccessTokenResponseRawAPIKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUsersAccessTokenResponseAPIKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var apiKeyFlagName string
	if cmdPrefix == "" {
		apiKeyFlagName = "apiKey"
	} else {
		apiKeyFlagName = fmt.Sprintf("%v.apiKey", cmdPrefix)
	}

	if err := registerModelPortainereeAPIKeyFlags(depth+1, apiKeyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUsersAccessTokenResponseRawAPIKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rawApiKeyDescription := ``

	var rawApiKeyFlagName string
	if cmdPrefix == "" {
		rawApiKeyFlagName = "rawAPIKey"
	} else {
		rawApiKeyFlagName = fmt.Sprintf("%v.rawAPIKey", cmdPrefix)
	}

	var rawApiKeyFlagDefault string

	_ = cmd.PersistentFlags().String(rawApiKeyFlagName, rawApiKeyFlagDefault, rawApiKeyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUsersAccessTokenResponseFlags(depth int, m *models.UsersAccessTokenResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, apiKeyAdded := retrieveUsersAccessTokenResponseAPIKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apiKeyAdded

	err, rawApiKeyAdded := retrieveUsersAccessTokenResponseRawAPIKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rawApiKeyAdded

	return nil, retAdded
}

func retrieveUsersAccessTokenResponseAPIKeyFlags(depth int, m *models.UsersAccessTokenResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apiKeyFlagName := fmt.Sprintf("%v.apiKey", cmdPrefix)
	if cmd.Flags().Changed(apiKeyFlagName) {
		// info: complex object apiKey PortainereeAPIKey is retrieved outside this Changed() block
	}
	apiKeyFlagValue := m.APIKey
	if swag.IsZero(apiKeyFlagValue) {
		apiKeyFlagValue = &models.PortainereeAPIKey{}
	}

	err, apiKeyAdded := retrieveModelPortainereeAPIKeyFlags(depth+1, apiKeyFlagValue, apiKeyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apiKeyAdded
	if apiKeyAdded {
		m.APIKey = apiKeyFlagValue
	}

	return nil, retAdded
}

func retrieveUsersAccessTokenResponseRawAPIKeyFlags(depth int, m *models.UsersAccessTokenResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rawApiKeyFlagName := fmt.Sprintf("%v.rawAPIKey", cmdPrefix)
	if cmd.Flags().Changed(rawApiKeyFlagName) {

		var rawApiKeyFlagName string
		if cmdPrefix == "" {
			rawApiKeyFlagName = "rawAPIKey"
		} else {
			rawApiKeyFlagName = fmt.Sprintf("%v.rawAPIKey", cmdPrefix)
		}

		rawApiKeyFlagValue, err := cmd.Flags().GetString(rawApiKeyFlagName)
		if err != nil {
			return err, false
		}
		m.RawAPIKey = rawApiKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
