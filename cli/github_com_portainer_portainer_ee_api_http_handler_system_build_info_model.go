// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo

// register flags to command
func registerModelGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoBuildNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoGoVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoImageTag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoNodejsVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoWebpackVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoYarnVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoBuildNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	buildNumberDescription := ``

	var buildNumberFlagName string
	if cmdPrefix == "" {
		buildNumberFlagName = "buildNumber"
	} else {
		buildNumberFlagName = fmt.Sprintf("%v.buildNumber", cmdPrefix)
	}

	var buildNumberFlagDefault string

	_ = cmd.PersistentFlags().String(buildNumberFlagName, buildNumberFlagDefault, buildNumberDescription)

	return nil
}

func registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoGoVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	goVersionDescription := ``

	var goVersionFlagName string
	if cmdPrefix == "" {
		goVersionFlagName = "goVersion"
	} else {
		goVersionFlagName = fmt.Sprintf("%v.goVersion", cmdPrefix)
	}

	var goVersionFlagDefault string

	_ = cmd.PersistentFlags().String(goVersionFlagName, goVersionFlagDefault, goVersionDescription)

	return nil
}

func registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoImageTag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageTagDescription := ``

	var imageTagFlagName string
	if cmdPrefix == "" {
		imageTagFlagName = "imageTag"
	} else {
		imageTagFlagName = fmt.Sprintf("%v.imageTag", cmdPrefix)
	}

	var imageTagFlagDefault string

	_ = cmd.PersistentFlags().String(imageTagFlagName, imageTagFlagDefault, imageTagDescription)

	return nil
}

func registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoNodejsVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodejsVersionDescription := ``

	var nodejsVersionFlagName string
	if cmdPrefix == "" {
		nodejsVersionFlagName = "nodejsVersion"
	} else {
		nodejsVersionFlagName = fmt.Sprintf("%v.nodejsVersion", cmdPrefix)
	}

	var nodejsVersionFlagDefault string

	_ = cmd.PersistentFlags().String(nodejsVersionFlagName, nodejsVersionFlagDefault, nodejsVersionDescription)

	return nil
}

func registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoWebpackVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webpackVersionDescription := ``

	var webpackVersionFlagName string
	if cmdPrefix == "" {
		webpackVersionFlagName = "webpackVersion"
	} else {
		webpackVersionFlagName = fmt.Sprintf("%v.webpackVersion", cmdPrefix)
	}

	var webpackVersionFlagDefault string

	_ = cmd.PersistentFlags().String(webpackVersionFlagName, webpackVersionFlagDefault, webpackVersionDescription)

	return nil
}

func registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoYarnVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	yarnVersionDescription := ``

	var yarnVersionFlagName string
	if cmdPrefix == "" {
		yarnVersionFlagName = "yarnVersion"
	} else {
		yarnVersionFlagName = fmt.Sprintf("%v.yarnVersion", cmdPrefix)
	}

	var yarnVersionFlagDefault string

	_ = cmd.PersistentFlags().String(yarnVersionFlagName, yarnVersionFlagDefault, yarnVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, buildNumberAdded := retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoBuildNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buildNumberAdded

	err, goVersionAdded := retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoGoVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || goVersionAdded

	err, imageTagAdded := retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoImageTagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageTagAdded

	err, nodejsVersionAdded := retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoNodejsVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodejsVersionAdded

	err, webpackVersionAdded := retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoWebpackVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webpackVersionAdded

	err, yarnVersionAdded := retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoYarnVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || yarnVersionAdded

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoBuildNumberFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buildNumberFlagName := fmt.Sprintf("%v.buildNumber", cmdPrefix)
	if cmd.Flags().Changed(buildNumberFlagName) {

		var buildNumberFlagName string
		if cmdPrefix == "" {
			buildNumberFlagName = "buildNumber"
		} else {
			buildNumberFlagName = fmt.Sprintf("%v.buildNumber", cmdPrefix)
		}

		buildNumberFlagValue, err := cmd.Flags().GetString(buildNumberFlagName)
		if err != nil {
			return err, false
		}
		m.BuildNumber = buildNumberFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoGoVersionFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	goVersionFlagName := fmt.Sprintf("%v.goVersion", cmdPrefix)
	if cmd.Flags().Changed(goVersionFlagName) {

		var goVersionFlagName string
		if cmdPrefix == "" {
			goVersionFlagName = "goVersion"
		} else {
			goVersionFlagName = fmt.Sprintf("%v.goVersion", cmdPrefix)
		}

		goVersionFlagValue, err := cmd.Flags().GetString(goVersionFlagName)
		if err != nil {
			return err, false
		}
		m.GoVersion = goVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoImageTagFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imageTagFlagName := fmt.Sprintf("%v.imageTag", cmdPrefix)
	if cmd.Flags().Changed(imageTagFlagName) {

		var imageTagFlagName string
		if cmdPrefix == "" {
			imageTagFlagName = "imageTag"
		} else {
			imageTagFlagName = fmt.Sprintf("%v.imageTag", cmdPrefix)
		}

		imageTagFlagValue, err := cmd.Flags().GetString(imageTagFlagName)
		if err != nil {
			return err, false
		}
		m.ImageTag = imageTagFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoNodejsVersionFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodejsVersionFlagName := fmt.Sprintf("%v.nodejsVersion", cmdPrefix)
	if cmd.Flags().Changed(nodejsVersionFlagName) {

		var nodejsVersionFlagName string
		if cmdPrefix == "" {
			nodejsVersionFlagName = "nodejsVersion"
		} else {
			nodejsVersionFlagName = fmt.Sprintf("%v.nodejsVersion", cmdPrefix)
		}

		nodejsVersionFlagValue, err := cmd.Flags().GetString(nodejsVersionFlagName)
		if err != nil {
			return err, false
		}
		m.NodejsVersion = nodejsVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoWebpackVersionFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webpackVersionFlagName := fmt.Sprintf("%v.webpackVersion", cmdPrefix)
	if cmd.Flags().Changed(webpackVersionFlagName) {

		var webpackVersionFlagName string
		if cmdPrefix == "" {
			webpackVersionFlagName = "webpackVersion"
		} else {
			webpackVersionFlagName = fmt.Sprintf("%v.webpackVersion", cmdPrefix)
		}

		webpackVersionFlagValue, err := cmd.Flags().GetString(webpackVersionFlagName)
		if err != nil {
			return err, false
		}
		m.WebpackVersion = webpackVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfoYarnVersionFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemBuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	yarnVersionFlagName := fmt.Sprintf("%v.yarnVersion", cmdPrefix)
	if cmd.Flags().Changed(yarnVersionFlagName) {

		var yarnVersionFlagName string
		if cmdPrefix == "" {
			yarnVersionFlagName = "yarnVersion"
		} else {
			yarnVersionFlagName = fmt.Sprintf("%v.yarnVersion", cmdPrefix)
		}

		yarnVersionFlagValue, err := cmd.Flags().GetString(yarnVersionFlagName)
		if err != nil {
			return err, false
		}
		m.YarnVersion = yarnVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
