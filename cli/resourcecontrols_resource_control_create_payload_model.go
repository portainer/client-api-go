// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for ResourcecontrolsResourceControlCreatePayload

// register flags to command
func registerModelResourcecontrolsResourceControlCreatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResourcecontrolsResourceControlCreatePayloadAdministratorsOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlCreatePayloadPublic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlCreatePayloadResourceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlCreatePayloadSubResourceIDs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlCreatePayloadTeams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlCreatePayloadType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcecontrolsResourceControlCreatePayloadUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResourcecontrolsResourceControlCreatePayloadAdministratorsOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	administratorsOnlyDescription := `Permit access to resource only to admins`

	var administratorsOnlyFlagName string
	if cmdPrefix == "" {
		administratorsOnlyFlagName = "administratorsOnly"
	} else {
		administratorsOnlyFlagName = fmt.Sprintf("%v.administratorsOnly", cmdPrefix)
	}

	var administratorsOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(administratorsOnlyFlagName, administratorsOnlyFlagDefault, administratorsOnlyDescription)

	return nil
}

func registerResourcecontrolsResourceControlCreatePayloadPublic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicDescription := `Permit access to the associated resource to any user`

	var publicFlagName string
	if cmdPrefix == "" {
		publicFlagName = "public"
	} else {
		publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
	}

	var publicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publicFlagName, publicFlagDefault, publicDescription)

	return nil
}

func registerResourcecontrolsResourceControlCreatePayloadResourceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceIdDescription := `Required. `

	var resourceIdFlagName string
	if cmdPrefix == "" {
		resourceIdFlagName = "resourceID"
	} else {
		resourceIdFlagName = fmt.Sprintf("%v.resourceID", cmdPrefix)
	}

	var resourceIdFlagDefault string

	_ = cmd.PersistentFlags().String(resourceIdFlagName, resourceIdFlagDefault, resourceIdDescription)

	return nil
}

func registerResourcecontrolsResourceControlCreatePayloadSubResourceIDs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: subResourceIDs []string array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcecontrolsResourceControlCreatePayloadTeams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: teams []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcecontrolsResourceControlCreatePayloadType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: [1,2,3,4,5,6,7,8,9]. Required. Type of Resource. Valid values are: 1 - container, 2 - service
3 - volume, 4 - network, 5 - secret, 6 - stack, 7 - config, 8 - custom template, 9 - azure-container-group`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7,8,9]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerResourcecontrolsResourceControlCreatePayloadUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: users []int64 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResourcecontrolsResourceControlCreatePayloadFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, administratorsOnlyAdded := retrieveResourcecontrolsResourceControlCreatePayloadAdministratorsOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || administratorsOnlyAdded

	err, publicAdded := retrieveResourcecontrolsResourceControlCreatePayloadPublicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicAdded

	err, resourceIdAdded := retrieveResourcecontrolsResourceControlCreatePayloadResourceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceIdAdded

	err, subResourceIDsAdded := retrieveResourcecontrolsResourceControlCreatePayloadSubResourceIDsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subResourceIDsAdded

	err, teamsAdded := retrieveResourcecontrolsResourceControlCreatePayloadTeamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamsAdded

	err, typeAdded := retrieveResourcecontrolsResourceControlCreatePayloadTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, usersAdded := retrieveResourcecontrolsResourceControlCreatePayloadUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usersAdded

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlCreatePayloadAdministratorsOnlyFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	administratorsOnlyFlagName := fmt.Sprintf("%v.administratorsOnly", cmdPrefix)
	if cmd.Flags().Changed(administratorsOnlyFlagName) {

		var administratorsOnlyFlagName string
		if cmdPrefix == "" {
			administratorsOnlyFlagName = "administratorsOnly"
		} else {
			administratorsOnlyFlagName = fmt.Sprintf("%v.administratorsOnly", cmdPrefix)
		}

		administratorsOnlyFlagValue, err := cmd.Flags().GetBool(administratorsOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.AdministratorsOnly = &administratorsOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlCreatePayloadPublicFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicFlagName := fmt.Sprintf("%v.public", cmdPrefix)
	if cmd.Flags().Changed(publicFlagName) {

		var publicFlagName string
		if cmdPrefix == "" {
			publicFlagName = "public"
		} else {
			publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
		}

		publicFlagValue, err := cmd.Flags().GetBool(publicFlagName)
		if err != nil {
			return err, false
		}
		m.Public = &publicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlCreatePayloadResourceIDFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceIdFlagName := fmt.Sprintf("%v.resourceID", cmdPrefix)
	if cmd.Flags().Changed(resourceIdFlagName) {

		var resourceIdFlagName string
		if cmdPrefix == "" {
			resourceIdFlagName = "resourceID"
		} else {
			resourceIdFlagName = fmt.Sprintf("%v.resourceID", cmdPrefix)
		}

		resourceIdFlagValue, err := cmd.Flags().GetString(resourceIdFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceID = &resourceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlCreatePayloadSubResourceIDsFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subResourceIDsFlagName := fmt.Sprintf("%v.subResourceIDs", cmdPrefix)
	if cmd.Flags().Changed(subResourceIDsFlagName) {
		// warning: subResourceIDs array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlCreatePayloadTeamsFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamsFlagName := fmt.Sprintf("%v.teams", cmdPrefix)
	if cmd.Flags().Changed(teamsFlagName) {
		// warning: teams array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlCreatePayloadTypeFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcecontrolsResourceControlCreatePayloadUsersFlags(depth int, m *models.ResourcecontrolsResourceControlCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usersFlagName := fmt.Sprintf("%v.users", cmdPrefix)
	if cmd.Flags().Changed(usersFlagName) {
		// warning: users array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
