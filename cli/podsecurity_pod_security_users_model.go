// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PodsecurityPodSecurityUsers

// register flags to command
func registerModelPodsecurityPodSecurityUsersFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPodsecurityPodSecurityUsersEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityUsersFsGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityUsersRunAsGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityUsersRunAsUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityUsersSupplementalGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityUsersEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerPodsecurityPodSecurityUsersFsGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var fsGroupsFlagName string
	if cmdPrefix == "" {
		fsGroupsFlagName = "fsGroups"
	} else {
		fsGroupsFlagName = fmt.Sprintf("%v.fsGroups", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityFsGroupsFlags(depth+1, fsGroupsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityUsersRunAsGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var runAsGroupFlagName string
	if cmdPrefix == "" {
		runAsGroupFlagName = "runAsGroup"
	} else {
		runAsGroupFlagName = fmt.Sprintf("%v.runAsGroup", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityRunAsGroupFlags(depth+1, runAsGroupFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityUsersRunAsUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var runAsUserFlagName string
	if cmdPrefix == "" {
		runAsUserFlagName = "runAsUser"
	} else {
		runAsUserFlagName = fmt.Sprintf("%v.runAsUser", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityRunAsUserFlags(depth+1, runAsUserFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityUsersSupplementalGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var supplementalGroupsFlagName string
	if cmdPrefix == "" {
		supplementalGroupsFlagName = "supplementalGroups"
	} else {
		supplementalGroupsFlagName = fmt.Sprintf("%v.supplementalGroups", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecuritySupplementalGroupsFlags(depth+1, supplementalGroupsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPodsecurityPodSecurityUsersFlags(depth int, m *models.PodsecurityPodSecurityUsers, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrievePodsecurityPodSecurityUsersEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, fsGroupsAdded := retrievePodsecurityPodSecurityUsersFsGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fsGroupsAdded

	err, runAsGroupAdded := retrievePodsecurityPodSecurityUsersRunAsGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runAsGroupAdded

	err, runAsUserAdded := retrievePodsecurityPodSecurityUsersRunAsUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runAsUserAdded

	err, supplementalGroupsAdded := retrievePodsecurityPodSecurityUsersSupplementalGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || supplementalGroupsAdded

	return nil, retAdded
}

func retrievePodsecurityPodSecurityUsersEnabledFlags(depth int, m *models.PodsecurityPodSecurityUsers, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityUsersFsGroupsFlags(depth int, m *models.PodsecurityPodSecurityUsers, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fsGroupsFlagName := fmt.Sprintf("%v.fsGroups", cmdPrefix)
	if cmd.Flags().Changed(fsGroupsFlagName) {
		// info: complex object fsGroups PodsecurityPodSecurityFsGroups is retrieved outside this Changed() block
	}
	fsGroupsFlagValue := m.FsGroups
	if swag.IsZero(fsGroupsFlagValue) {
		fsGroupsFlagValue = &models.PodsecurityPodSecurityFsGroups{}
	}

	err, fsGroupsAdded := retrieveModelPodsecurityPodSecurityFsGroupsFlags(depth+1, fsGroupsFlagValue, fsGroupsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fsGroupsAdded
	if fsGroupsAdded {
		m.FsGroups = fsGroupsFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityUsersRunAsGroupFlags(depth int, m *models.PodsecurityPodSecurityUsers, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runAsGroupFlagName := fmt.Sprintf("%v.runAsGroup", cmdPrefix)
	if cmd.Flags().Changed(runAsGroupFlagName) {
		// info: complex object runAsGroup PodsecurityPodSecurityRunAsGroup is retrieved outside this Changed() block
	}
	runAsGroupFlagValue := m.RunAsGroup
	if swag.IsZero(runAsGroupFlagValue) {
		runAsGroupFlagValue = &models.PodsecurityPodSecurityRunAsGroup{}
	}

	err, runAsGroupAdded := retrieveModelPodsecurityPodSecurityRunAsGroupFlags(depth+1, runAsGroupFlagValue, runAsGroupFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runAsGroupAdded
	if runAsGroupAdded {
		m.RunAsGroup = runAsGroupFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityUsersRunAsUserFlags(depth int, m *models.PodsecurityPodSecurityUsers, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runAsUserFlagName := fmt.Sprintf("%v.runAsUser", cmdPrefix)
	if cmd.Flags().Changed(runAsUserFlagName) {
		// info: complex object runAsUser PodsecurityPodSecurityRunAsUser is retrieved outside this Changed() block
	}
	runAsUserFlagValue := m.RunAsUser
	if swag.IsZero(runAsUserFlagValue) {
		runAsUserFlagValue = &models.PodsecurityPodSecurityRunAsUser{}
	}

	err, runAsUserAdded := retrieveModelPodsecurityPodSecurityRunAsUserFlags(depth+1, runAsUserFlagValue, runAsUserFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runAsUserAdded
	if runAsUserAdded {
		m.RunAsUser = runAsUserFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityUsersSupplementalGroupsFlags(depth int, m *models.PodsecurityPodSecurityUsers, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	supplementalGroupsFlagName := fmt.Sprintf("%v.supplementalGroups", cmdPrefix)
	if cmd.Flags().Changed(supplementalGroupsFlagName) {
		// info: complex object supplementalGroups PodsecurityPodSecuritySupplementalGroups is retrieved outside this Changed() block
	}
	supplementalGroupsFlagValue := m.SupplementalGroups
	if swag.IsZero(supplementalGroupsFlagValue) {
		supplementalGroupsFlagValue = &models.PodsecurityPodSecuritySupplementalGroups{}
	}

	err, supplementalGroupsAdded := retrieveModelPodsecurityPodSecuritySupplementalGroupsFlags(depth+1, supplementalGroupsFlagValue, supplementalGroupsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || supplementalGroupsAdded
	if supplementalGroupsAdded {
		m.SupplementalGroups = supplementalGroupsFlagValue
	}

	return nil, retAdded
}
