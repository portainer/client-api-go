// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/registries"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRegistriesRegistryConfigureCmd returns a cmd to handle operation registryConfigure
func makeOperationRegistriesRegistryConfigureCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "RegistryConfigure",
		Short: `Configures a registry.
**Access policy**: restricted`,
		RunE: runOperationRegistriesRegistryConfigure,
	}

	if err := registerOperationRegistriesRegistryConfigureParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRegistriesRegistryConfigure uses cmd flags to call endpoint api
func runOperationRegistriesRegistryConfigure(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := registries.NewRegistryConfigureParams()
	if err, _ := retrieveOperationRegistriesRegistryConfigureBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRegistriesRegistryConfigureIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRegistriesRegistryConfigureResult(appCli.Registries.RegistryConfigure(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationRegistriesRegistryConfigureParamFlags registers all flags needed to fill params
func registerOperationRegistriesRegistryConfigureParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRegistriesRegistryConfigureBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRegistriesRegistryConfigureIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRegistriesRegistryConfigureBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. Registry configuration")

	// add flags for body
	if err := registerModelRegistriesRegistryConfigurePayloadFlags(0, "registriesRegistryConfigurePayload", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationRegistriesRegistryConfigureIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Registry identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationRegistriesRegistryConfigureBodyFlag(m *registries.RegistryConfigureParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.RegistriesRegistryConfigurePayload{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.RegistriesRegistryConfigurePayload: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.RegistriesRegistryConfigurePayload{}
	}
	err, added := retrieveModelRegistriesRegistryConfigurePayloadFlags(0, bodyValueModel, "registriesRegistryConfigurePayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationRegistriesRegistryConfigureIDFlag(m *registries.RegistryConfigureParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationRegistriesRegistryConfigureResult parses request result and return the string content
func parseOperationRegistriesRegistryConfigureResult(resp0 *registries.RegistryConfigureNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning registryConfigureNoContent is not supported

		// Non schema case: warning registryConfigureBadRequest is not supported

		// Non schema case: warning registryConfigureForbidden is not supported

		// Non schema case: warning registryConfigureNotFound is not supported

		// Non schema case: warning registryConfigureInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response registryConfigureNoContent is not supported by go-swagger cli yet.

	return "", nil
}
