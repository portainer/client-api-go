// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PodsecurityPodSecurityHostNetworkingPorts

// register flags to command
func registerModelPodsecurityPodSecurityHostNetworkingPortsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPodsecurityPodSecurityHostNetworkingPortsEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityHostNetworkingPortsHostNetwork(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityHostNetworkingPortsMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityHostNetworkingPortsMin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityHostNetworkingPortsEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerPodsecurityPodSecurityHostNetworkingPortsHostNetwork(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostNetworkDescription := ``

	var hostNetworkFlagName string
	if cmdPrefix == "" {
		hostNetworkFlagName = "hostNetwork"
	} else {
		hostNetworkFlagName = fmt.Sprintf("%v.hostNetwork", cmdPrefix)
	}

	var hostNetworkFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hostNetworkFlagName, hostNetworkFlagDefault, hostNetworkDescription)

	return nil
}

func registerPodsecurityPodSecurityHostNetworkingPortsMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxDescription := ``

	var maxFlagName string
	if cmdPrefix == "" {
		maxFlagName = "max"
	} else {
		maxFlagName = fmt.Sprintf("%v.max", cmdPrefix)
	}

	var maxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxFlagName, maxFlagDefault, maxDescription)

	return nil
}

func registerPodsecurityPodSecurityHostNetworkingPortsMin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minDescription := ``

	var minFlagName string
	if cmdPrefix == "" {
		minFlagName = "min"
	} else {
		minFlagName = fmt.Sprintf("%v.min", cmdPrefix)
	}

	var minFlagDefault int64

	_ = cmd.PersistentFlags().Int64(minFlagName, minFlagDefault, minDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPodsecurityPodSecurityHostNetworkingPortsFlags(depth int, m *models.PodsecurityPodSecurityHostNetworkingPorts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrievePodsecurityPodSecurityHostNetworkingPortsEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, hostNetworkAdded := retrievePodsecurityPodSecurityHostNetworkingPortsHostNetworkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostNetworkAdded

	err, maxAdded := retrievePodsecurityPodSecurityHostNetworkingPortsMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxAdded

	err, minAdded := retrievePodsecurityPodSecurityHostNetworkingPortsMinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minAdded

	return nil, retAdded
}

func retrievePodsecurityPodSecurityHostNetworkingPortsEnabledFlags(depth int, m *models.PodsecurityPodSecurityHostNetworkingPorts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityHostNetworkingPortsHostNetworkFlags(depth int, m *models.PodsecurityPodSecurityHostNetworkingPorts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostNetworkFlagName := fmt.Sprintf("%v.hostNetwork", cmdPrefix)
	if cmd.Flags().Changed(hostNetworkFlagName) {

		var hostNetworkFlagName string
		if cmdPrefix == "" {
			hostNetworkFlagName = "hostNetwork"
		} else {
			hostNetworkFlagName = fmt.Sprintf("%v.hostNetwork", cmdPrefix)
		}

		hostNetworkFlagValue, err := cmd.Flags().GetBool(hostNetworkFlagName)
		if err != nil {
			return err, false
		}
		m.HostNetwork = &hostNetworkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityHostNetworkingPortsMaxFlags(depth int, m *models.PodsecurityPodSecurityHostNetworkingPorts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxFlagName := fmt.Sprintf("%v.max", cmdPrefix)
	if cmd.Flags().Changed(maxFlagName) {

		var maxFlagName string
		if cmdPrefix == "" {
			maxFlagName = "max"
		} else {
			maxFlagName = fmt.Sprintf("%v.max", cmdPrefix)
		}

		maxFlagValue, err := cmd.Flags().GetInt64(maxFlagName)
		if err != nil {
			return err, false
		}
		m.Max = maxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityHostNetworkingPortsMinFlags(depth int, m *models.PodsecurityPodSecurityHostNetworkingPorts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minFlagName := fmt.Sprintf("%v.min", cmdPrefix)
	if cmd.Flags().Changed(minFlagName) {

		var minFlagName string
		if cmdPrefix == "" {
			minFlagName = "min"
		} else {
			minFlagName = fmt.Sprintf("%v.min", cmdPrefix)
		}

		minFlagValue, err := cmd.Flags().GetInt64(minFlagName)
		if err != nil {
			return err, false
		}
		m.Min = minFlagValue

		retAdded = true
	}

	return nil, retAdded
}
