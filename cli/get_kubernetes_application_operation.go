// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/kubernetes"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationKubernetesGetKubernetesApplicationCmd returns a cmd to handle operation getKubernetesApplication
func makeOperationKubernetesGetKubernetesApplicationCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "getKubernetesApplication",
		Short: `Gets a Kubernetes deployment, statefulset and daemonset application details
**Access policy**: authenticated`,
		RunE: runOperationKubernetesGetKubernetesApplication,
	}

	if err := registerOperationKubernetesGetKubernetesApplicationParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationKubernetesGetKubernetesApplication uses cmd flags to call endpoint api
func runOperationKubernetesGetKubernetesApplication(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := kubernetes.NewGetKubernetesApplicationParams()
	if err, _ := retrieveOperationKubernetesGetKubernetesApplicationIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationKubernetesGetKubernetesApplicationKindFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationKubernetesGetKubernetesApplicationNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationKubernetesGetKubernetesApplicationNamespaceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationKubernetesGetKubernetesApplicationRolloutRestartFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationKubernetesGetKubernetesApplicationResult(appCli.Kubernetes.GetKubernetesApplication(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationKubernetesGetKubernetesApplicationParamFlags registers all flags needed to fill params
func registerOperationKubernetesGetKubernetesApplicationParamFlags(cmd *cobra.Command) error {
	if err := registerOperationKubernetesGetKubernetesApplicationIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationKubernetesGetKubernetesApplicationKindParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationKubernetesGetKubernetesApplicationNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationKubernetesGetKubernetesApplicationNamespaceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationKubernetesGetKubernetesApplicationRolloutRestartParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationKubernetesGetKubernetesApplicationIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Environment(Endpoint) identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationKubernetesGetKubernetesApplicationKindParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	kindDescription := `Required. deployment, statefulset or daemonset`

	var kindFlagName string
	if cmdPrefix == "" {
		kindFlagName = "kind"
	} else {
		kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
	}

	var kindFlagDefault string

	_ = cmd.PersistentFlags().String(kindFlagName, kindFlagDefault, kindDescription)

	return nil
}
func registerOperationKubernetesGetKubernetesApplicationNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. name of the application`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationKubernetesGetKubernetesApplicationNamespaceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	namespaceDescription := `Required. The namespace`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}
func registerOperationKubernetesGetKubernetesApplicationRolloutRestartParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	rolloutRestartDescription := `Required. specify true to perform a rolling restart of the application`

	var rolloutRestartFlagName string
	if cmdPrefix == "" {
		rolloutRestartFlagName = "rollout-restart"
	} else {
		rolloutRestartFlagName = fmt.Sprintf("%v.rollout-restart", cmdPrefix)
	}

	var rolloutRestartFlagDefault string

	_ = cmd.PersistentFlags().String(rolloutRestartFlagName, rolloutRestartFlagDefault, rolloutRestartDescription)

	return nil
}

func retrieveOperationKubernetesGetKubernetesApplicationIDFlag(m *kubernetes.GetKubernetesApplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationKubernetesGetKubernetesApplicationKindFlag(m *kubernetes.GetKubernetesApplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("kind") {

		var kindFlagName string
		if cmdPrefix == "" {
			kindFlagName = "kind"
		} else {
			kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
		}

		kindFlagValue, err := cmd.Flags().GetString(kindFlagName)
		if err != nil {
			return err, false
		}
		m.Kind = kindFlagValue

	}
	return nil, retAdded
}
func retrieveOperationKubernetesGetKubernetesApplicationNameFlag(m *kubernetes.GetKubernetesApplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationKubernetesGetKubernetesApplicationNamespaceFlag(m *kubernetes.GetKubernetesApplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("namespace") {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationKubernetesGetKubernetesApplicationRolloutRestartFlag(m *kubernetes.GetKubernetesApplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rollout-restart") {

		var rolloutRestartFlagName string
		if cmdPrefix == "" {
			rolloutRestartFlagName = "rollout-restart"
		} else {
			rolloutRestartFlagName = fmt.Sprintf("%v.rollout-restart", cmdPrefix)
		}

		rolloutRestartFlagValue, err := cmd.Flags().GetString(rolloutRestartFlagName)
		if err != nil {
			return err, false
		}
		m.RolloutRestart = rolloutRestartFlagValue

	}
	return nil, retAdded
}

// parseOperationKubernetesGetKubernetesApplicationResult parses request result and return the string content
func parseOperationKubernetesGetKubernetesApplicationResult(resp0 *kubernetes.GetKubernetesApplicationOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*kubernetes.GetKubernetesApplicationOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getKubernetesApplicationBadRequest is not supported

		// Non schema case: warning getKubernetesApplicationUnauthorized is not supported

		// Non schema case: warning getKubernetesApplicationForbidden is not supported

		// Non schema case: warning getKubernetesApplicationNotFound is not supported

		// Non schema case: warning getKubernetesApplicationInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
