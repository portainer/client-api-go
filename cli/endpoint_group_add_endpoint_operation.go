// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/endpoint_groups"

	"github.com/spf13/cobra"
)

// makeOperationEndpointGroupsEndpointGroupAddEndpointCmd returns a cmd to handle operation endpointGroupAddEndpoint
func makeOperationEndpointGroupsEndpointGroupAddEndpointCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "EndpointGroupAddEndpoint",
		Short: `Add an environment(endpoint) to an environment(endpoint) group
**Access policy**: administrator`,
		RunE: runOperationEndpointGroupsEndpointGroupAddEndpoint,
	}

	if err := registerOperationEndpointGroupsEndpointGroupAddEndpointParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEndpointGroupsEndpointGroupAddEndpoint uses cmd flags to call endpoint api
func runOperationEndpointGroupsEndpointGroupAddEndpoint(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := endpoint_groups.NewEndpointGroupAddEndpointParams()
	if err, _ := retrieveOperationEndpointGroupsEndpointGroupAddEndpointEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointGroupsEndpointGroupAddEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEndpointGroupsEndpointGroupAddEndpointResult(appCli.EndpointGroups.EndpointGroupAddEndpoint(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEndpointGroupsEndpointGroupAddEndpointParamFlags registers all flags needed to fill params
func registerOperationEndpointGroupsEndpointGroupAddEndpointParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEndpointGroupsEndpointGroupAddEndpointEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointGroupsEndpointGroupAddEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEndpointGroupsEndpointGroupAddEndpointEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := `Required. Environment(Endpoint) identifier`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationEndpointGroupsEndpointGroupAddEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. EndpointGroup identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationEndpointGroupsEndpointGroupAddEndpointEndpointIDFlag(m *endpoint_groups.EndpointGroupAddEndpointParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpointId") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointGroupsEndpointGroupAddEndpointIDFlag(m *endpoint_groups.EndpointGroupAddEndpointParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationEndpointGroupsEndpointGroupAddEndpointResult parses request result and return the string content
func parseOperationEndpointGroupsEndpointGroupAddEndpointResult(resp0 *endpoint_groups.EndpointGroupAddEndpointNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning endpointGroupAddEndpointNoContent is not supported

		// Non schema case: warning endpointGroupAddEndpointBadRequest is not supported

		// Non schema case: warning endpointGroupAddEndpointNotFound is not supported

		// Non schema case: warning endpointGroupAddEndpointInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response endpointGroupAddEndpointNoContent is not supported by go-swagger cli yet.

	return "", nil
}
