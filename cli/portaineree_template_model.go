// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeTemplate

// register flags to command
func registerModelPortainereeTemplateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeTemplateID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateAdministratorOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateCategories(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateCommand(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateInteractive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateLogo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateNetwork(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplatePlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplatePorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplatePrivileged(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateRegistry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateRestartPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateStackFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateVolumes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTemplateID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Mandatory container/stack fields
Template Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeTemplateAdministratorOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	administratorOnlyDescription := `Whether the template should be available to administrators only`

	var administratorOnlyFlagName string
	if cmdPrefix == "" {
		administratorOnlyFlagName = "administrator_only"
	} else {
		administratorOnlyFlagName = fmt.Sprintf("%v.administrator_only", cmdPrefix)
	}

	var administratorOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(administratorOnlyFlagName, administratorOnlyFlagDefault, administratorOnlyDescription)

	return nil
}

func registerPortainereeTemplateCategories(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: categories []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeTemplateCommand(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commandDescription := `The command that will be executed in a container template`

	var commandFlagName string
	if cmdPrefix == "" {
		commandFlagName = "command"
	} else {
		commandFlagName = fmt.Sprintf("%v.command", cmdPrefix)
	}

	var commandFlagDefault string

	_ = cmd.PersistentFlags().String(commandFlagName, commandFlagDefault, commandDescription)

	return nil
}

func registerPortainereeTemplateDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description of the template`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerPortainereeTemplateEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: env []*PortainereeTemplateEnv array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeTemplateHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `Container hostname`

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerPortainereeTemplateImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageDescription := `Mandatory container fields
Image associated to a container template. Mandatory for a container template`

	var imageFlagName string
	if cmdPrefix == "" {
		imageFlagName = "image"
	} else {
		imageFlagName = fmt.Sprintf("%v.image", cmdPrefix)
	}

	var imageFlagDefault string

	_ = cmd.PersistentFlags().String(imageFlagName, imageFlagDefault, imageDescription)

	return nil
}

func registerPortainereeTemplateInteractive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interactiveDescription := `Whether the container should be started in
interactive mode (-i -t equivalent on the CLI)`

	var interactiveFlagName string
	if cmdPrefix == "" {
		interactiveFlagName = "interactive"
	} else {
		interactiveFlagName = fmt.Sprintf("%v.interactive", cmdPrefix)
	}

	var interactiveFlagDefault bool

	_ = cmd.PersistentFlags().Bool(interactiveFlagName, interactiveFlagDefault, interactiveDescription)

	return nil
}

func registerPortainereeTemplateLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: labels []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeTemplateLogo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoDescription := `URL of the template's logo`

	var logoFlagName string
	if cmdPrefix == "" {
		logoFlagName = "logo"
	} else {
		logoFlagName = fmt.Sprintf("%v.logo", cmdPrefix)
	}

	var logoFlagDefault string

	_ = cmd.PersistentFlags().String(logoFlagName, logoFlagDefault, logoDescription)

	return nil
}

func registerPortainereeTemplateName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Optional stack/container fields
Default name for the stack/container to be used on deployment`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeTemplateNetwork(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	networkDescription := `Name of a network that will be used on container deployment if it exists inside the environment(endpoint)`

	var networkFlagName string
	if cmdPrefix == "" {
		networkFlagName = "network"
	} else {
		networkFlagName = fmt.Sprintf("%v.network", cmdPrefix)
	}

	var networkFlagDefault string

	_ = cmd.PersistentFlags().String(networkFlagName, networkFlagDefault, networkDescription)

	return nil
}

func registerPortainereeTemplateNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noteDescription := `A note that will be displayed in the UI. Supports HTML content`

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "note"
	} else {
		noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}

func registerPortainereeTemplatePlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformDescription := `Platform associated to the template.
Valid values are: 'linux', 'windows' or leave empty for multi-platform`

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	var platformFlagDefault string

	_ = cmd.PersistentFlags().String(platformFlagName, platformFlagDefault, platformDescription)

	return nil
}

func registerPortainereeTemplatePorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ports []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeTemplatePrivileged(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	privilegedDescription := `Whether the container should be started in privileged mode`

	var privilegedFlagName string
	if cmdPrefix == "" {
		privilegedFlagName = "privileged"
	} else {
		privilegedFlagName = fmt.Sprintf("%v.privileged", cmdPrefix)
	}

	var privilegedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(privilegedFlagName, privilegedFlagDefault, privilegedDescription)

	return nil
}

func registerPortainereeTemplateRegistry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registryDescription := `Optional container fields
The URL of a registry associated to the image for a container template`

	var registryFlagName string
	if cmdPrefix == "" {
		registryFlagName = "registry"
	} else {
		registryFlagName = fmt.Sprintf("%v.registry", cmdPrefix)
	}

	var registryFlagDefault string

	_ = cmd.PersistentFlags().String(registryFlagName, registryFlagDefault, registryDescription)

	return nil
}

func registerPortainereeTemplateRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var repositoryFlagName string
	if cmdPrefix == "" {
		repositoryFlagName = "repository"
	} else {
		repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
	}

	if err := registerModelPortainereeTemplateRepositoryFlags(depth+1, repositoryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTemplateRestartPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restartPolicyDescription := `Container restart policy`

	var restartPolicyFlagName string
	if cmdPrefix == "" {
		restartPolicyFlagName = "restart_policy"
	} else {
		restartPolicyFlagName = fmt.Sprintf("%v.restart_policy", cmdPrefix)
	}

	var restartPolicyFlagDefault string

	_ = cmd.PersistentFlags().String(restartPolicyFlagName, restartPolicyFlagDefault, restartPolicyDescription)

	return nil
}

func registerPortainereeTemplateStackFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackFileDescription := `Mandatory Edge stack fields
Stack file used for this template`

	var stackFileFlagName string
	if cmdPrefix == "" {
		stackFileFlagName = "stackFile"
	} else {
		stackFileFlagName = fmt.Sprintf("%v.stackFile", cmdPrefix)
	}

	var stackFileFlagDefault string

	_ = cmd.PersistentFlags().String(stackFileFlagName, stackFileFlagDefault, stackFileDescription)

	return nil
}

func registerPortainereeTemplateTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := `Title of the template`

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "title"
	} else {
		titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

func registerPortainereeTemplateType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Template type. Valid values are: 1 (container), 2 (Swarm stack) or 3 (Compose stack)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerPortainereeTemplateVolumes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volumes []*PortainereeTemplateVolume array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeTemplateFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrievePortainereeTemplateIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, administratorOnlyAdded := retrievePortainereeTemplateAdministratorOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || administratorOnlyAdded

	err, categoriesAdded := retrievePortainereeTemplateCategoriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || categoriesAdded

	err, commandAdded := retrievePortainereeTemplateCommandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandAdded

	err, descriptionAdded := retrievePortainereeTemplateDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, envAdded := retrievePortainereeTemplateEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, hostnameAdded := retrievePortainereeTemplateHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, imageAdded := retrievePortainereeTemplateImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageAdded

	err, interactiveAdded := retrievePortainereeTemplateInteractiveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interactiveAdded

	err, labelsAdded := retrievePortainereeTemplateLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, logoAdded := retrievePortainereeTemplateLogoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoAdded

	err, nameAdded := retrievePortainereeTemplateNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, networkAdded := retrievePortainereeTemplateNetworkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkAdded

	err, noteAdded := retrievePortainereeTemplateNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noteAdded

	err, platformAdded := retrievePortainereeTemplatePlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	err, portsAdded := retrievePortainereeTemplatePortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portsAdded

	err, privilegedAdded := retrievePortainereeTemplatePrivilegedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || privilegedAdded

	err, registryAdded := retrievePortainereeTemplateRegistryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryAdded

	err, repositoryAdded := retrievePortainereeTemplateRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded

	err, restartPolicyAdded := retrievePortainereeTemplateRestartPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restartPolicyAdded

	err, stackFileAdded := retrievePortainereeTemplateStackFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackFileAdded

	err, titleAdded := retrievePortainereeTemplateTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	err, typeAdded := retrievePortainereeTemplateTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, volumesAdded := retrievePortainereeTemplateVolumesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumesAdded

	return nil, retAdded
}

func retrievePortainereeTemplateIDFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateAdministratorOnlyFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	administratorOnlyFlagName := fmt.Sprintf("%v.administrator_only", cmdPrefix)
	if cmd.Flags().Changed(administratorOnlyFlagName) {

		var administratorOnlyFlagName string
		if cmdPrefix == "" {
			administratorOnlyFlagName = "administrator_only"
		} else {
			administratorOnlyFlagName = fmt.Sprintf("%v.administrator_only", cmdPrefix)
		}

		administratorOnlyFlagValue, err := cmd.Flags().GetBool(administratorOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.AdministratorOnly = &administratorOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateCategoriesFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	categoriesFlagName := fmt.Sprintf("%v.categories", cmdPrefix)
	if cmd.Flags().Changed(categoriesFlagName) {
		// warning: categories array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeTemplateCommandFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandFlagName := fmt.Sprintf("%v.command", cmdPrefix)
	if cmd.Flags().Changed(commandFlagName) {

		var commandFlagName string
		if cmdPrefix == "" {
			commandFlagName = "command"
		} else {
			commandFlagName = fmt.Sprintf("%v.command", cmdPrefix)
		}

		commandFlagValue, err := cmd.Flags().GetString(commandFlagName)
		if err != nil {
			return err, false
		}
		m.Command = commandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateDescriptionFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateEnvFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: env array type []*PortainereeTemplateEnv is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeTemplateHostnameFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateImageFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imageFlagName := fmt.Sprintf("%v.image", cmdPrefix)
	if cmd.Flags().Changed(imageFlagName) {

		var imageFlagName string
		if cmdPrefix == "" {
			imageFlagName = "image"
		} else {
			imageFlagName = fmt.Sprintf("%v.image", cmdPrefix)
		}

		imageFlagValue, err := cmd.Flags().GetString(imageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = imageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateInteractiveFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interactiveFlagName := fmt.Sprintf("%v.interactive", cmdPrefix)
	if cmd.Flags().Changed(interactiveFlagName) {

		var interactiveFlagName string
		if cmdPrefix == "" {
			interactiveFlagName = "interactive"
		} else {
			interactiveFlagName = fmt.Sprintf("%v.interactive", cmdPrefix)
		}

		interactiveFlagValue, err := cmd.Flags().GetBool(interactiveFlagName)
		if err != nil {
			return err, false
		}
		m.Interactive = &interactiveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateLabelsFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	labelsFlagName := fmt.Sprintf("%v.labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: labels array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeTemplateLogoFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoFlagName := fmt.Sprintf("%v.logo", cmdPrefix)
	if cmd.Flags().Changed(logoFlagName) {

		var logoFlagName string
		if cmdPrefix == "" {
			logoFlagName = "logo"
		} else {
			logoFlagName = fmt.Sprintf("%v.logo", cmdPrefix)
		}

		logoFlagValue, err := cmd.Flags().GetString(logoFlagName)
		if err != nil {
			return err, false
		}
		m.Logo = logoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateNameFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateNetworkFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkFlagName := fmt.Sprintf("%v.network", cmdPrefix)
	if cmd.Flags().Changed(networkFlagName) {

		var networkFlagName string
		if cmdPrefix == "" {
			networkFlagName = "network"
		} else {
			networkFlagName = fmt.Sprintf("%v.network", cmdPrefix)
		}

		networkFlagValue, err := cmd.Flags().GetString(networkFlagName)
		if err != nil {
			return err, false
		}
		m.Network = networkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateNoteFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noteFlagName := fmt.Sprintf("%v.note", cmdPrefix)
	if cmd.Flags().Changed(noteFlagName) {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "note"
		} else {
			noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = noteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplatePlatformFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformFlagName := fmt.Sprintf("%v.platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {

		var platformFlagName string
		if cmdPrefix == "" {
			platformFlagName = "platform"
		} else {
			platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
		}

		platformFlagValue, err := cmd.Flags().GetString(platformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = platformFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplatePortsFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portsFlagName := fmt.Sprintf("%v.ports", cmdPrefix)
	if cmd.Flags().Changed(portsFlagName) {
		// warning: ports array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeTemplatePrivilegedFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	privilegedFlagName := fmt.Sprintf("%v.privileged", cmdPrefix)
	if cmd.Flags().Changed(privilegedFlagName) {

		var privilegedFlagName string
		if cmdPrefix == "" {
			privilegedFlagName = "privileged"
		} else {
			privilegedFlagName = fmt.Sprintf("%v.privileged", cmdPrefix)
		}

		privilegedFlagValue, err := cmd.Flags().GetBool(privilegedFlagName)
		if err != nil {
			return err, false
		}
		m.Privileged = &privilegedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateRegistryFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryFlagName := fmt.Sprintf("%v.registry", cmdPrefix)
	if cmd.Flags().Changed(registryFlagName) {

		var registryFlagName string
		if cmdPrefix == "" {
			registryFlagName = "registry"
		} else {
			registryFlagName = fmt.Sprintf("%v.registry", cmdPrefix)
		}

		registryFlagValue, err := cmd.Flags().GetString(registryFlagName)
		if err != nil {
			return err, false
		}
		m.Registry = registryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateRepositoryFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryFlagName := fmt.Sprintf("%v.repository", cmdPrefix)
	if cmd.Flags().Changed(repositoryFlagName) {
		// info: complex object repository PortainereeTemplateRepository is retrieved outside this Changed() block
	}
	repositoryFlagValue := m.Repository
	if swag.IsZero(repositoryFlagValue) {
		repositoryFlagValue = &models.PortainereeTemplateRepository{}
	}

	err, repositoryAdded := retrieveModelPortainereeTemplateRepositoryFlags(depth+1, repositoryFlagValue, repositoryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded
	if repositoryAdded {
		m.Repository = repositoryFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeTemplateRestartPolicyFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	restartPolicyFlagName := fmt.Sprintf("%v.restart_policy", cmdPrefix)
	if cmd.Flags().Changed(restartPolicyFlagName) {

		var restartPolicyFlagName string
		if cmdPrefix == "" {
			restartPolicyFlagName = "restart_policy"
		} else {
			restartPolicyFlagName = fmt.Sprintf("%v.restart_policy", cmdPrefix)
		}

		restartPolicyFlagValue, err := cmd.Flags().GetString(restartPolicyFlagName)
		if err != nil {
			return err, false
		}
		m.RestartPolicy = restartPolicyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateStackFileFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackFileFlagName := fmt.Sprintf("%v.stackFile", cmdPrefix)
	if cmd.Flags().Changed(stackFileFlagName) {

		var stackFileFlagName string
		if cmdPrefix == "" {
			stackFileFlagName = "stackFile"
		} else {
			stackFileFlagName = fmt.Sprintf("%v.stackFile", cmdPrefix)
		}

		stackFileFlagValue, err := cmd.Flags().GetString(stackFileFlagName)
		if err != nil {
			return err, false
		}
		m.StackFile = stackFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateTitleFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "title"
		} else {
			titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateTypeFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateVolumesFlags(depth int, m *models.PortainereeTemplate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	volumesFlagName := fmt.Sprintf("%v.volumes", cmdPrefix)
	if cmd.Flags().Changed(volumesFlagName) {
		// warning: volumes array type []*PortainereeTemplateVolume is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
