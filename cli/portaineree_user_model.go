// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeUser

// register flags to command
func registerModelPortainereeUserFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeUserEndpointAuthorizations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserPortainerAuthorizations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserTokenIssueAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserThemeSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserUserTheme(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeUserEndpointAuthorizations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: EndpointAuthorizations PortainereeEndpointAuthorizations map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `User Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeUserPortainerAuthorizations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: PortainerAuthorizations PortainereeAuthorizations map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeUserRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := `User role (1 for administrator account and 2 for regular account)`

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "Role"
	} else {
		roleFlagName = fmt.Sprintf("%v.Role", cmdPrefix)
	}

	var roleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(roleFlagName, roleFlagDefault, roleDescription)

	return nil
}

func registerPortainereeUserTokenIssueAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenIssueAtDescription := ``

	var tokenIssueAtFlagName string
	if cmdPrefix == "" {
		tokenIssueAtFlagName = "TokenIssueAt"
	} else {
		tokenIssueAtFlagName = fmt.Sprintf("%v.TokenIssueAt", cmdPrefix)
	}

	var tokenIssueAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tokenIssueAtFlagName, tokenIssueAtFlagDefault, tokenIssueAtDescription)

	return nil
}

func registerPortainereeUserUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "Username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.Username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

func registerPortainereeUserThemeSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var themeSettingsFlagName string
	if cmdPrefix == "" {
		themeSettingsFlagName = "themeSettings"
	} else {
		themeSettingsFlagName = fmt.Sprintf("%v.themeSettings", cmdPrefix)
	}

	if err := registerModelPortainereeUserThemeSettingsFlags(depth+1, themeSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeUserUserTheme(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userThemeDescription := `Deprecated`

	var userThemeFlagName string
	if cmdPrefix == "" {
		userThemeFlagName = "userTheme"
	} else {
		userThemeFlagName = fmt.Sprintf("%v.userTheme", cmdPrefix)
	}

	var userThemeFlagDefault string

	_ = cmd.PersistentFlags().String(userThemeFlagName, userThemeFlagDefault, userThemeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeUserFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointAuthorizationsAdded := retrievePortainereeUserEndpointAuthorizationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointAuthorizationsAdded

	err, idAdded := retrievePortainereeUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, portainerAuthorizationsAdded := retrievePortainereeUserPortainerAuthorizationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portainerAuthorizationsAdded

	err, roleAdded := retrievePortainereeUserRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, tokenIssueAtAdded := retrievePortainereeUserTokenIssueAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenIssueAtAdded

	err, usernameAdded := retrievePortainereeUserUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	err, themeSettingsAdded := retrievePortainereeUserThemeSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || themeSettingsAdded

	err, userThemeAdded := retrievePortainereeUserUserThemeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userThemeAdded

	return nil, retAdded
}

func retrievePortainereeUserEndpointAuthorizationsFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointAuthorizationsFlagName := fmt.Sprintf("%v.EndpointAuthorizations", cmdPrefix)
	if cmd.Flags().Changed(endpointAuthorizationsFlagName) {
		// warning: EndpointAuthorizations map type PortainereeEndpointAuthorizations is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeUserIDFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserPortainerAuthorizationsFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portainerAuthorizationsFlagName := fmt.Sprintf("%v.PortainerAuthorizations", cmdPrefix)
	if cmd.Flags().Changed(portainerAuthorizationsFlagName) {
		// warning: PortainerAuthorizations map type PortainereeAuthorizations is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeUserRoleFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.Role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "Role"
		} else {
			roleFlagName = fmt.Sprintf("%v.Role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetInt64(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserTokenIssueAtFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenIssueAtFlagName := fmt.Sprintf("%v.TokenIssueAt", cmdPrefix)
	if cmd.Flags().Changed(tokenIssueAtFlagName) {

		var tokenIssueAtFlagName string
		if cmdPrefix == "" {
			tokenIssueAtFlagName = "TokenIssueAt"
		} else {
			tokenIssueAtFlagName = fmt.Sprintf("%v.TokenIssueAt", cmdPrefix)
		}

		tokenIssueAtFlagValue, err := cmd.Flags().GetInt64(tokenIssueAtFlagName)
		if err != nil {
			return err, false
		}
		m.TokenIssueAt = tokenIssueAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserUsernameFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.Username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "Username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.Username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserThemeSettingsFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	themeSettingsFlagName := fmt.Sprintf("%v.themeSettings", cmdPrefix)
	if cmd.Flags().Changed(themeSettingsFlagName) {
		// info: complex object themeSettings PortainereeUserThemeSettings is retrieved outside this Changed() block
	}
	themeSettingsFlagValue := m.ThemeSettings
	if swag.IsZero(themeSettingsFlagValue) {
		themeSettingsFlagValue = &models.PortainereeUserThemeSettings{}
	}

	err, themeSettingsAdded := retrieveModelPortainereeUserThemeSettingsFlags(depth+1, themeSettingsFlagValue, themeSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || themeSettingsAdded
	if themeSettingsAdded {
		m.ThemeSettings = themeSettingsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeUserUserThemeFlags(depth int, m *models.PortainereeUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userThemeFlagName := fmt.Sprintf("%v.userTheme", cmdPrefix)
	if cmd.Flags().Changed(userThemeFlagName) {

		var userThemeFlagName string
		if cmdPrefix == "" {
			userThemeFlagName = "userTheme"
		} else {
			userThemeFlagName = fmt.Sprintf("%v.userTheme", cmdPrefix)
		}

		userThemeFlagValue, err := cmd.Flags().GetString(userThemeFlagName)
		if err != nil {
			return err, false
		}
		m.UserTheme = userThemeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
