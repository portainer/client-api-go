// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/upload"

	"github.com/spf13/cobra"
)

// makeOperationUploadUploadTLSCmd returns a cmd to handle operation uploadTls
func makeOperationUploadUploadTLSCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "UploadTLS",
		Short: `Use this environment(endpoint) to upload TLS files.
**Access policy**: administrator`,
		RunE: runOperationUploadUploadTLS,
	}

	if err := registerOperationUploadUploadTLSParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUploadUploadTLS uses cmd flags to call endpoint api
func runOperationUploadUploadTLS(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := upload.NewUploadTLSParams()
	if err, _ := retrieveOperationUploadUploadTLSCertificateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUploadUploadTLSFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUploadUploadTLSFolderFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUploadUploadTLSResult(appCli.Upload.UploadTLS(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUploadUploadTLSParamFlags registers all flags needed to fill params
func registerOperationUploadUploadTLSParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUploadUploadTLSCertificateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUploadUploadTLSFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUploadUploadTLSFolderParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUploadUploadTLSCertificateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	certificateDescription := `Enum: ["ca","cert","key"]. Required. TLS file type. Valid values are 'ca', 'cert' or 'key'.`

	var certificateFlagName string
	if cmdPrefix == "" {
		certificateFlagName = "certificate"
	} else {
		certificateFlagName = fmt.Sprintf("%v.certificate", cmdPrefix)
	}

	var certificateFlagDefault string

	_ = cmd.PersistentFlags().String(certificateFlagName, certificateFlagDefault, certificateDescription)

	if err := cmd.RegisterFlagCompletionFunc(certificateFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ca","cert","key"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationUploadUploadTLSFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	return nil
}
func registerOperationUploadUploadTLSFolderParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	folderDescription := `Required. Folder where the TLS file will be stored. Will be created if not existing`

	var folderFlagName string
	if cmdPrefix == "" {
		folderFlagName = "folder"
	} else {
		folderFlagName = fmt.Sprintf("%v.folder", cmdPrefix)
	}

	var folderFlagDefault string

	_ = cmd.PersistentFlags().String(folderFlagName, folderFlagDefault, folderDescription)

	return nil
}

func retrieveOperationUploadUploadTLSCertificateFlag(m *upload.UploadTLSParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("certificate") {

		var certificateFlagName string
		if cmdPrefix == "" {
			certificateFlagName = "certificate"
		} else {
			certificateFlagName = fmt.Sprintf("%v.certificate", cmdPrefix)
		}

		certificateFlagValue, err := cmd.Flags().GetString(certificateFlagName)
		if err != nil {
			return err, false
		}
		m.Certificate = certificateFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUploadUploadTLSFileFlag(m *upload.UploadTLSParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("file") {

		// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	}
	return nil, retAdded
}
func retrieveOperationUploadUploadTLSFolderFlag(m *upload.UploadTLSParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("folder") {

		var folderFlagName string
		if cmdPrefix == "" {
			folderFlagName = "folder"
		} else {
			folderFlagName = fmt.Sprintf("%v.folder", cmdPrefix)
		}

		folderFlagValue, err := cmd.Flags().GetString(folderFlagName)
		if err != nil {
			return err, false
		}
		m.Folder = folderFlagValue

	}
	return nil, retAdded
}

// parseOperationUploadUploadTLSResult parses request result and return the string content
func parseOperationUploadUploadTLSResult(resp0 *upload.UploadTLSNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning uploadTlsNoContent is not supported

		// Non schema case: warning uploadTlsBadRequest is not supported

		// Non schema case: warning uploadTlsInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response uploadTlsNoContent is not supported by go-swagger cli yet.

	return "", nil
}
