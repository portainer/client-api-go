// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/stacks"

	"github.com/spf13/cobra"
)

// makeOperationStacksStackDeleteCmd returns a cmd to handle operation stackDelete
func makeOperationStacksStackDeleteCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "StackDelete",
		Short: `Remove a stack.
**Access policy**: restricted`,
		RunE: runOperationStacksStackDelete,
	}

	if err := registerOperationStacksStackDeleteParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStacksStackDelete uses cmd flags to call endpoint api
func runOperationStacksStackDelete(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := stacks.NewStackDeleteParams()
	if err, _ := retrieveOperationStacksStackDeleteEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStacksStackDeleteExternalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStacksStackDeleteIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStacksStackDeleteResult(appCli.Stacks.StackDelete(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationStacksStackDeleteParamFlags registers all flags needed to fill params
func registerOperationStacksStackDeleteParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStacksStackDeleteEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStacksStackDeleteExternalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStacksStackDeleteIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStacksStackDeleteEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := `Environment(Endpoint) identifier used to remove an external stack (required when external is set to true)`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationStacksStackDeleteExternalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	externalDescription := `Set to true to delete an external stack. Only external Swarm stacks are supported`

	var externalFlagName string
	if cmdPrefix == "" {
		externalFlagName = "external"
	} else {
		externalFlagName = fmt.Sprintf("%v.external", cmdPrefix)
	}

	var externalFlagDefault bool

	_ = cmd.PersistentFlags().Bool(externalFlagName, externalFlagDefault, externalDescription)

	return nil
}
func registerOperationStacksStackDeleteIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Stack identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationStacksStackDeleteEndpointIDFlag(m *stacks.StackDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpointId") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = &endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStacksStackDeleteExternalFlag(m *stacks.StackDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("external") {

		var externalFlagName string
		if cmdPrefix == "" {
			externalFlagName = "external"
		} else {
			externalFlagName = fmt.Sprintf("%v.external", cmdPrefix)
		}

		externalFlagValue, err := cmd.Flags().GetBool(externalFlagName)
		if err != nil {
			return err, false
		}
		m.External = &externalFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStacksStackDeleteIDFlag(m *stacks.StackDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationStacksStackDeleteResult parses request result and return the string content
func parseOperationStacksStackDeleteResult(resp0 *stacks.StackDeleteNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning stackDeleteNoContent is not supported

		// Non schema case: warning stackDeleteBadRequest is not supported

		// Non schema case: warning stackDeleteForbidden is not supported

		// Non schema case: warning stackDeleteNotFound is not supported

		// Non schema case: warning stackDeleteInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response stackDeleteNoContent is not supported by go-swagger cli yet.

	return "", nil
}
