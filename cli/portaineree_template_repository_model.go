// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeTemplateRepository

// register flags to command
func registerModelPortainereeTemplateRepositoryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeTemplateRepositoryStackfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTemplateRepositoryStackfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackfileDescription := `Path to the stack file inside the git repository`

	var stackfileFlagName string
	if cmdPrefix == "" {
		stackfileFlagName = "stackfile"
	} else {
		stackfileFlagName = fmt.Sprintf("%v.stackfile", cmdPrefix)
	}

	var stackfileFlagDefault string

	_ = cmd.PersistentFlags().String(stackfileFlagName, stackfileFlagDefault, stackfileDescription)

	return nil
}

func registerPortainereeTemplateRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `URL of a git repository used to deploy a stack template. Mandatory for a Swarm/Compose stack template`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeTemplateRepositoryFlags(depth int, m *models.PortainereeTemplateRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, stackfileAdded := retrievePortainereeTemplateRepositoryStackfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackfileAdded

	err, urlAdded := retrievePortainereeTemplateRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	return nil, retAdded
}

func retrievePortainereeTemplateRepositoryStackfileFlags(depth int, m *models.PortainereeTemplateRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackfileFlagName := fmt.Sprintf("%v.stackfile", cmdPrefix)
	if cmd.Flags().Changed(stackfileFlagName) {

		var stackfileFlagName string
		if cmdPrefix == "" {
			stackfileFlagName = "stackfile"
		} else {
			stackfileFlagName = fmt.Sprintf("%v.stackfile", cmdPrefix)
		}

		stackfileFlagValue, err := cmd.Flags().GetString(stackfileFlagName)
		if err != nil {
			return err, false
		}
		m.Stackfile = stackfileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateRepositoryURLFlags(depth int, m *models.PortainereeTemplateRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
