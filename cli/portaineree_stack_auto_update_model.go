// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeStackAutoUpdate

// register flags to command
func registerModelPortainereeStackAutoUpdateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeStackAutoUpdateForcePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackAutoUpdateForceUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackAutoUpdateInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackAutoUpdateJobID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeStackAutoUpdateWebhook(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeStackAutoUpdateForcePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forcePullImageDescription := `Pull latest image`

	var forcePullImageFlagName string
	if cmdPrefix == "" {
		forcePullImageFlagName = "forcePullImage"
	} else {
		forcePullImageFlagName = fmt.Sprintf("%v.forcePullImage", cmdPrefix)
	}

	var forcePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forcePullImageFlagName, forcePullImageFlagDefault, forcePullImageDescription)

	return nil
}

func registerPortainereeStackAutoUpdateForceUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceUpdateDescription := `Force update ignores repo changes`

	var forceUpdateFlagName string
	if cmdPrefix == "" {
		forceUpdateFlagName = "forceUpdate"
	} else {
		forceUpdateFlagName = fmt.Sprintf("%v.forceUpdate", cmdPrefix)
	}

	var forceUpdateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceUpdateFlagName, forceUpdateFlagDefault, forceUpdateDescription)

	return nil
}

func registerPortainereeStackAutoUpdateInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	intervalDescription := `Auto update interval`

	var intervalFlagName string
	if cmdPrefix == "" {
		intervalFlagName = "interval"
	} else {
		intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
	}

	var intervalFlagDefault string

	_ = cmd.PersistentFlags().String(intervalFlagName, intervalFlagDefault, intervalDescription)

	return nil
}

func registerPortainereeStackAutoUpdateJobID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobIdDescription := `Autoupdate job id`

	var jobIdFlagName string
	if cmdPrefix == "" {
		jobIdFlagName = "jobID"
	} else {
		jobIdFlagName = fmt.Sprintf("%v.jobID", cmdPrefix)
	}

	var jobIdFlagDefault string

	_ = cmd.PersistentFlags().String(jobIdFlagName, jobIdFlagDefault, jobIdDescription)

	return nil
}

func registerPortainereeStackAutoUpdateWebhook(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webhookDescription := `A UUID generated from client`

	var webhookFlagName string
	if cmdPrefix == "" {
		webhookFlagName = "webhook"
	} else {
		webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
	}

	var webhookFlagDefault string

	_ = cmd.PersistentFlags().String(webhookFlagName, webhookFlagDefault, webhookDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeStackAutoUpdateFlags(depth int, m *models.PortainereeStackAutoUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, forcePullImageAdded := retrievePortainereeStackAutoUpdateForcePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forcePullImageAdded

	err, forceUpdateAdded := retrievePortainereeStackAutoUpdateForceUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceUpdateAdded

	err, intervalAdded := retrievePortainereeStackAutoUpdateIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || intervalAdded

	err, jobIdAdded := retrievePortainereeStackAutoUpdateJobIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobIdAdded

	err, webhookAdded := retrievePortainereeStackAutoUpdateWebhookFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webhookAdded

	return nil, retAdded
}

func retrievePortainereeStackAutoUpdateForcePullImageFlags(depth int, m *models.PortainereeStackAutoUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forcePullImageFlagName := fmt.Sprintf("%v.forcePullImage", cmdPrefix)
	if cmd.Flags().Changed(forcePullImageFlagName) {

		var forcePullImageFlagName string
		if cmdPrefix == "" {
			forcePullImageFlagName = "forcePullImage"
		} else {
			forcePullImageFlagName = fmt.Sprintf("%v.forcePullImage", cmdPrefix)
		}

		forcePullImageFlagValue, err := cmd.Flags().GetBool(forcePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.ForcePullImage = &forcePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackAutoUpdateForceUpdateFlags(depth int, m *models.PortainereeStackAutoUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceUpdateFlagName := fmt.Sprintf("%v.forceUpdate", cmdPrefix)
	if cmd.Flags().Changed(forceUpdateFlagName) {

		var forceUpdateFlagName string
		if cmdPrefix == "" {
			forceUpdateFlagName = "forceUpdate"
		} else {
			forceUpdateFlagName = fmt.Sprintf("%v.forceUpdate", cmdPrefix)
		}

		forceUpdateFlagValue, err := cmd.Flags().GetBool(forceUpdateFlagName)
		if err != nil {
			return err, false
		}
		m.ForceUpdate = &forceUpdateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackAutoUpdateIntervalFlags(depth int, m *models.PortainereeStackAutoUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	intervalFlagName := fmt.Sprintf("%v.interval", cmdPrefix)
	if cmd.Flags().Changed(intervalFlagName) {

		var intervalFlagName string
		if cmdPrefix == "" {
			intervalFlagName = "interval"
		} else {
			intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
		}

		intervalFlagValue, err := cmd.Flags().GetString(intervalFlagName)
		if err != nil {
			return err, false
		}
		m.Interval = intervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackAutoUpdateJobIDFlags(depth int, m *models.PortainereeStackAutoUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobIdFlagName := fmt.Sprintf("%v.jobID", cmdPrefix)
	if cmd.Flags().Changed(jobIdFlagName) {

		var jobIdFlagName string
		if cmdPrefix == "" {
			jobIdFlagName = "jobID"
		} else {
			jobIdFlagName = fmt.Sprintf("%v.jobID", cmdPrefix)
		}

		jobIdFlagValue, err := cmd.Flags().GetString(jobIdFlagName)
		if err != nil {
			return err, false
		}
		m.JobID = jobIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeStackAutoUpdateWebhookFlags(depth int, m *models.PortainereeStackAutoUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webhookFlagName := fmt.Sprintf("%v.webhook", cmdPrefix)
	if cmd.Flags().Changed(webhookFlagName) {

		var webhookFlagName string
		if cmdPrefix == "" {
			webhookFlagName = "webhook"
		} else {
			webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
		}

		webhookFlagValue, err := cmd.Flags().GetString(webhookFlagName)
		if err != nil {
			return err, false
		}
		m.Webhook = webhookFlagValue

		retAdded = true
	}

	return nil, retAdded
}
