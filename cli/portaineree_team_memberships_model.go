// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeTeamMemberships

// register flags to command
func registerModelPortainereeTeamMembershipsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeTeamMembershipsAdminAutoPopulate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTeamMembershipsAdminGroupClaimsRegexList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTeamMembershipsOAuthClaimMappings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTeamMembershipsOAuthClaimName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTeamMembershipsAdminAutoPopulate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	adminAutoPopulateDescription := ``

	var adminAutoPopulateFlagName string
	if cmdPrefix == "" {
		adminAutoPopulateFlagName = "AdminAutoPopulate"
	} else {
		adminAutoPopulateFlagName = fmt.Sprintf("%v.AdminAutoPopulate", cmdPrefix)
	}

	var adminAutoPopulateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(adminAutoPopulateFlagName, adminAutoPopulateFlagDefault, adminAutoPopulateDescription)

	return nil
}

func registerPortainereeTeamMembershipsAdminGroupClaimsRegexList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: AdminGroupClaimsRegexList []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeTeamMembershipsOAuthClaimMappings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: OAuthClaimMappings []*PortainereeOAuthClaimMappings array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeTeamMembershipsOAuthClaimName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oAuthClaimNameDescription := ``

	var oAuthClaimNameFlagName string
	if cmdPrefix == "" {
		oAuthClaimNameFlagName = "OAuthClaimName"
	} else {
		oAuthClaimNameFlagName = fmt.Sprintf("%v.OAuthClaimName", cmdPrefix)
	}

	var oAuthClaimNameFlagDefault string

	_ = cmd.PersistentFlags().String(oAuthClaimNameFlagName, oAuthClaimNameFlagDefault, oAuthClaimNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeTeamMembershipsFlags(depth int, m *models.PortainereeTeamMemberships, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, adminAutoPopulateAdded := retrievePortainereeTeamMembershipsAdminAutoPopulateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminAutoPopulateAdded

	err, adminGroupClaimsRegexListAdded := retrievePortainereeTeamMembershipsAdminGroupClaimsRegexListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminGroupClaimsRegexListAdded

	err, oAuthClaimMappingsAdded := retrievePortainereeTeamMembershipsOAuthClaimMappingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthClaimMappingsAdded

	err, oAuthClaimNameAdded := retrievePortainereeTeamMembershipsOAuthClaimNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthClaimNameAdded

	return nil, retAdded
}

func retrievePortainereeTeamMembershipsAdminAutoPopulateFlags(depth int, m *models.PortainereeTeamMemberships, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	adminAutoPopulateFlagName := fmt.Sprintf("%v.AdminAutoPopulate", cmdPrefix)
	if cmd.Flags().Changed(adminAutoPopulateFlagName) {

		var adminAutoPopulateFlagName string
		if cmdPrefix == "" {
			adminAutoPopulateFlagName = "AdminAutoPopulate"
		} else {
			adminAutoPopulateFlagName = fmt.Sprintf("%v.AdminAutoPopulate", cmdPrefix)
		}

		adminAutoPopulateFlagValue, err := cmd.Flags().GetBool(adminAutoPopulateFlagName)
		if err != nil {
			return err, false
		}
		m.AdminAutoPopulate = &adminAutoPopulateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTeamMembershipsAdminGroupClaimsRegexListFlags(depth int, m *models.PortainereeTeamMemberships, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	adminGroupClaimsRegexListFlagName := fmt.Sprintf("%v.AdminGroupClaimsRegexList", cmdPrefix)
	if cmd.Flags().Changed(adminGroupClaimsRegexListFlagName) {
		// warning: AdminGroupClaimsRegexList array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeTeamMembershipsOAuthClaimMappingsFlags(depth int, m *models.PortainereeTeamMemberships, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthClaimMappingsFlagName := fmt.Sprintf("%v.OAuthClaimMappings", cmdPrefix)
	if cmd.Flags().Changed(oAuthClaimMappingsFlagName) {
		// warning: OAuthClaimMappings array type []*PortainereeOAuthClaimMappings is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeTeamMembershipsOAuthClaimNameFlags(depth int, m *models.PortainereeTeamMemberships, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthClaimNameFlagName := fmt.Sprintf("%v.OAuthClaimName", cmdPrefix)
	if cmd.Flags().Changed(oAuthClaimNameFlagName) {

		var oAuthClaimNameFlagName string
		if cmdPrefix == "" {
			oAuthClaimNameFlagName = "OAuthClaimName"
		} else {
			oAuthClaimNameFlagName = fmt.Sprintf("%v.OAuthClaimName", cmdPrefix)
		}

		oAuthClaimNameFlagValue, err := cmd.Flags().GetString(oAuthClaimNameFlagName)
		if err != nil {
			return err, false
		}
		m.OAuthClaimName = oAuthClaimNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
