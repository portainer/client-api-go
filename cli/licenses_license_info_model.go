// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for LicensesLicenseInfo

// register flags to command
func registerModelLicensesLicenseInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLicensesLicenseInfoCompany(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicensesLicenseInfoEnforcedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicensesLicenseInfoExpiresAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicensesLicenseInfoNodes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicensesLicenseInfoOveruseStartedTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicensesLicenseInfoType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicensesLicenseInfoValid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLicensesLicenseInfoCompany(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	companyDescription := ``

	var companyFlagName string
	if cmdPrefix == "" {
		companyFlagName = "company"
	} else {
		companyFlagName = fmt.Sprintf("%v.company", cmdPrefix)
	}

	var companyFlagDefault string

	_ = cmd.PersistentFlags().String(companyFlagName, companyFlagDefault, companyDescription)

	return nil
}

func registerLicensesLicenseInfoEnforcedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enforcedAtDescription := ``

	var enforcedAtFlagName string
	if cmdPrefix == "" {
		enforcedAtFlagName = "enforcedAt"
	} else {
		enforcedAtFlagName = fmt.Sprintf("%v.enforcedAt", cmdPrefix)
	}

	var enforcedAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(enforcedAtFlagName, enforcedAtFlagDefault, enforcedAtDescription)

	return nil
}

func registerLicensesLicenseInfoExpiresAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expiresAtDescription := ``

	var expiresAtFlagName string
	if cmdPrefix == "" {
		expiresAtFlagName = "expiresAt"
	} else {
		expiresAtFlagName = fmt.Sprintf("%v.expiresAt", cmdPrefix)
	}

	var expiresAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(expiresAtFlagName, expiresAtFlagDefault, expiresAtDescription)

	return nil
}

func registerLicensesLicenseInfoNodes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodesDescription := ``

	var nodesFlagName string
	if cmdPrefix == "" {
		nodesFlagName = "nodes"
	} else {
		nodesFlagName = fmt.Sprintf("%v.nodes", cmdPrefix)
	}

	var nodesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodesFlagName, nodesFlagDefault, nodesDescription)

	return nil
}

func registerLicensesLicenseInfoOveruseStartedTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	overuseStartedTimestampDescription := `unix timestamp when node usage exceeded avaiable license limit`

	var overuseStartedTimestampFlagName string
	if cmdPrefix == "" {
		overuseStartedTimestampFlagName = "overuseStartedTimestamp"
	} else {
		overuseStartedTimestampFlagName = fmt.Sprintf("%v.overuseStartedTimestamp", cmdPrefix)
	}

	var overuseStartedTimestampFlagDefault int64

	_ = cmd.PersistentFlags().Int64(overuseStartedTimestampFlagName, overuseStartedTimestampFlagDefault, overuseStartedTimestampDescription)

	return nil
}

func registerLicensesLicenseInfoType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerLicensesLicenseInfoValid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	validDescription := ``

	var validFlagName string
	if cmdPrefix == "" {
		validFlagName = "valid"
	} else {
		validFlagName = fmt.Sprintf("%v.valid", cmdPrefix)
	}

	var validFlagDefault bool

	_ = cmd.PersistentFlags().Bool(validFlagName, validFlagDefault, validDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLicensesLicenseInfoFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, companyAdded := retrieveLicensesLicenseInfoCompanyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || companyAdded

	err, enforcedAtAdded := retrieveLicensesLicenseInfoEnforcedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enforcedAtAdded

	err, expiresAtAdded := retrieveLicensesLicenseInfoExpiresAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expiresAtAdded

	err, nodesAdded := retrieveLicensesLicenseInfoNodesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodesAdded

	err, overuseStartedTimestampAdded := retrieveLicensesLicenseInfoOveruseStartedTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || overuseStartedTimestampAdded

	err, typeAdded := retrieveLicensesLicenseInfoTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, validAdded := retrieveLicensesLicenseInfoValidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || validAdded

	return nil, retAdded
}

func retrieveLicensesLicenseInfoCompanyFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	companyFlagName := fmt.Sprintf("%v.company", cmdPrefix)
	if cmd.Flags().Changed(companyFlagName) {

		var companyFlagName string
		if cmdPrefix == "" {
			companyFlagName = "company"
		} else {
			companyFlagName = fmt.Sprintf("%v.company", cmdPrefix)
		}

		companyFlagValue, err := cmd.Flags().GetString(companyFlagName)
		if err != nil {
			return err, false
		}
		m.Company = companyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicensesLicenseInfoEnforcedAtFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enforcedAtFlagName := fmt.Sprintf("%v.enforcedAt", cmdPrefix)
	if cmd.Flags().Changed(enforcedAtFlagName) {

		var enforcedAtFlagName string
		if cmdPrefix == "" {
			enforcedAtFlagName = "enforcedAt"
		} else {
			enforcedAtFlagName = fmt.Sprintf("%v.enforcedAt", cmdPrefix)
		}

		enforcedAtFlagValue, err := cmd.Flags().GetInt64(enforcedAtFlagName)
		if err != nil {
			return err, false
		}
		m.EnforcedAt = enforcedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicensesLicenseInfoExpiresAtFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expiresAtFlagName := fmt.Sprintf("%v.expiresAt", cmdPrefix)
	if cmd.Flags().Changed(expiresAtFlagName) {

		var expiresAtFlagName string
		if cmdPrefix == "" {
			expiresAtFlagName = "expiresAt"
		} else {
			expiresAtFlagName = fmt.Sprintf("%v.expiresAt", cmdPrefix)
		}

		expiresAtFlagValue, err := cmd.Flags().GetInt64(expiresAtFlagName)
		if err != nil {
			return err, false
		}
		m.ExpiresAt = expiresAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicensesLicenseInfoNodesFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodesFlagName := fmt.Sprintf("%v.nodes", cmdPrefix)
	if cmd.Flags().Changed(nodesFlagName) {

		var nodesFlagName string
		if cmdPrefix == "" {
			nodesFlagName = "nodes"
		} else {
			nodesFlagName = fmt.Sprintf("%v.nodes", cmdPrefix)
		}

		nodesFlagValue, err := cmd.Flags().GetInt64(nodesFlagName)
		if err != nil {
			return err, false
		}
		m.Nodes = nodesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicensesLicenseInfoOveruseStartedTimestampFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	overuseStartedTimestampFlagName := fmt.Sprintf("%v.overuseStartedTimestamp", cmdPrefix)
	if cmd.Flags().Changed(overuseStartedTimestampFlagName) {

		var overuseStartedTimestampFlagName string
		if cmdPrefix == "" {
			overuseStartedTimestampFlagName = "overuseStartedTimestamp"
		} else {
			overuseStartedTimestampFlagName = fmt.Sprintf("%v.overuseStartedTimestamp", cmdPrefix)
		}

		overuseStartedTimestampFlagValue, err := cmd.Flags().GetInt64(overuseStartedTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.OveruseStartedTimestamp = overuseStartedTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicensesLicenseInfoTypeFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicensesLicenseInfoValidFlags(depth int, m *models.LicensesLicenseInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	validFlagName := fmt.Sprintf("%v.valid", cmdPrefix)
	if cmd.Flags().Changed(validFlagName) {

		var validFlagName string
		if cmdPrefix == "" {
			validFlagName = "valid"
		} else {
			validFlagName = fmt.Sprintf("%v.valid", cmdPrefix)
		}

		validFlagValue, err := cmd.Flags().GetBool(validFlagName)
		if err != nil {
			return err, false
		}
		m.Valid = &validFlagValue

		retAdded = true
	}

	return nil, retAdded
}
