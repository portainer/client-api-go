// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainerOpenAMTConfiguration

// register flags to command
func registerModelPortainerOpenAMTConfigurationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainerOpenAMTConfigurationCertFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationCertFileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationCertFilePassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationDomainName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationMpsPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationMpsServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationMpsToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerOpenAMTConfigurationMpsUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainerOpenAMTConfigurationCertFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certFileContentDescription := ``

	var certFileContentFlagName string
	if cmdPrefix == "" {
		certFileContentFlagName = "certFileContent"
	} else {
		certFileContentFlagName = fmt.Sprintf("%v.certFileContent", cmdPrefix)
	}

	var certFileContentFlagDefault string

	_ = cmd.PersistentFlags().String(certFileContentFlagName, certFileContentFlagDefault, certFileContentDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationCertFileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certFileNameDescription := ``

	var certFileNameFlagName string
	if cmdPrefix == "" {
		certFileNameFlagName = "certFileName"
	} else {
		certFileNameFlagName = fmt.Sprintf("%v.certFileName", cmdPrefix)
	}

	var certFileNameFlagDefault string

	_ = cmd.PersistentFlags().String(certFileNameFlagName, certFileNameFlagDefault, certFileNameDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationCertFilePassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certFilePasswordDescription := ``

	var certFilePasswordFlagName string
	if cmdPrefix == "" {
		certFilePasswordFlagName = "certFilePassword"
	} else {
		certFilePasswordFlagName = fmt.Sprintf("%v.certFilePassword", cmdPrefix)
	}

	var certFilePasswordFlagDefault string

	_ = cmd.PersistentFlags().String(certFilePasswordFlagName, certFilePasswordFlagDefault, certFilePasswordDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationDomainName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	domainNameDescription := ``

	var domainNameFlagName string
	if cmdPrefix == "" {
		domainNameFlagName = "domainName"
	} else {
		domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
	}

	var domainNameFlagDefault string

	_ = cmd.PersistentFlags().String(domainNameFlagName, domainNameFlagDefault, domainNameDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationMpsPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mpsPasswordDescription := ``

	var mpsPasswordFlagName string
	if cmdPrefix == "" {
		mpsPasswordFlagName = "mpsPassword"
	} else {
		mpsPasswordFlagName = fmt.Sprintf("%v.mpsPassword", cmdPrefix)
	}

	var mpsPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(mpsPasswordFlagName, mpsPasswordFlagDefault, mpsPasswordDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationMpsServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mpsServerDescription := ``

	var mpsServerFlagName string
	if cmdPrefix == "" {
		mpsServerFlagName = "mpsServer"
	} else {
		mpsServerFlagName = fmt.Sprintf("%v.mpsServer", cmdPrefix)
	}

	var mpsServerFlagDefault string

	_ = cmd.PersistentFlags().String(mpsServerFlagName, mpsServerFlagDefault, mpsServerDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationMpsToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mpsTokenDescription := `retrieved from API`

	var mpsTokenFlagName string
	if cmdPrefix == "" {
		mpsTokenFlagName = "mpsToken"
	} else {
		mpsTokenFlagName = fmt.Sprintf("%v.mpsToken", cmdPrefix)
	}

	var mpsTokenFlagDefault string

	_ = cmd.PersistentFlags().String(mpsTokenFlagName, mpsTokenFlagDefault, mpsTokenDescription)

	return nil
}

func registerPortainerOpenAMTConfigurationMpsUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mpsUserDescription := ``

	var mpsUserFlagName string
	if cmdPrefix == "" {
		mpsUserFlagName = "mpsUser"
	} else {
		mpsUserFlagName = fmt.Sprintf("%v.mpsUser", cmdPrefix)
	}

	var mpsUserFlagDefault string

	_ = cmd.PersistentFlags().String(mpsUserFlagName, mpsUserFlagDefault, mpsUserDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainerOpenAMTConfigurationFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, certFileContentAdded := retrievePortainerOpenAMTConfigurationCertFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certFileContentAdded

	err, certFileNameAdded := retrievePortainerOpenAMTConfigurationCertFileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certFileNameAdded

	err, certFilePasswordAdded := retrievePortainerOpenAMTConfigurationCertFilePasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certFilePasswordAdded

	err, domainNameAdded := retrievePortainerOpenAMTConfigurationDomainNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainNameAdded

	err, enabledAdded := retrievePortainerOpenAMTConfigurationEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, mpsPasswordAdded := retrievePortainerOpenAMTConfigurationMpsPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mpsPasswordAdded

	err, mpsServerAdded := retrievePortainerOpenAMTConfigurationMpsServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mpsServerAdded

	err, mpsTokenAdded := retrievePortainerOpenAMTConfigurationMpsTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mpsTokenAdded

	err, mpsUserAdded := retrievePortainerOpenAMTConfigurationMpsUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mpsUserAdded

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationCertFileContentFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certFileContentFlagName := fmt.Sprintf("%v.certFileContent", cmdPrefix)
	if cmd.Flags().Changed(certFileContentFlagName) {

		var certFileContentFlagName string
		if cmdPrefix == "" {
			certFileContentFlagName = "certFileContent"
		} else {
			certFileContentFlagName = fmt.Sprintf("%v.certFileContent", cmdPrefix)
		}

		certFileContentFlagValue, err := cmd.Flags().GetString(certFileContentFlagName)
		if err != nil {
			return err, false
		}
		m.CertFileContent = certFileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationCertFileNameFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certFileNameFlagName := fmt.Sprintf("%v.certFileName", cmdPrefix)
	if cmd.Flags().Changed(certFileNameFlagName) {

		var certFileNameFlagName string
		if cmdPrefix == "" {
			certFileNameFlagName = "certFileName"
		} else {
			certFileNameFlagName = fmt.Sprintf("%v.certFileName", cmdPrefix)
		}

		certFileNameFlagValue, err := cmd.Flags().GetString(certFileNameFlagName)
		if err != nil {
			return err, false
		}
		m.CertFileName = certFileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationCertFilePasswordFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certFilePasswordFlagName := fmt.Sprintf("%v.certFilePassword", cmdPrefix)
	if cmd.Flags().Changed(certFilePasswordFlagName) {

		var certFilePasswordFlagName string
		if cmdPrefix == "" {
			certFilePasswordFlagName = "certFilePassword"
		} else {
			certFilePasswordFlagName = fmt.Sprintf("%v.certFilePassword", cmdPrefix)
		}

		certFilePasswordFlagValue, err := cmd.Flags().GetString(certFilePasswordFlagName)
		if err != nil {
			return err, false
		}
		m.CertFilePassword = certFilePasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationDomainNameFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainNameFlagName := fmt.Sprintf("%v.domainName", cmdPrefix)
	if cmd.Flags().Changed(domainNameFlagName) {

		var domainNameFlagName string
		if cmdPrefix == "" {
			domainNameFlagName = "domainName"
		} else {
			domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
		}

		domainNameFlagValue, err := cmd.Flags().GetString(domainNameFlagName)
		if err != nil {
			return err, false
		}
		m.DomainName = domainNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationEnabledFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationMpsPasswordFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mpsPasswordFlagName := fmt.Sprintf("%v.mpsPassword", cmdPrefix)
	if cmd.Flags().Changed(mpsPasswordFlagName) {

		var mpsPasswordFlagName string
		if cmdPrefix == "" {
			mpsPasswordFlagName = "mpsPassword"
		} else {
			mpsPasswordFlagName = fmt.Sprintf("%v.mpsPassword", cmdPrefix)
		}

		mpsPasswordFlagValue, err := cmd.Flags().GetString(mpsPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.MpsPassword = mpsPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationMpsServerFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mpsServerFlagName := fmt.Sprintf("%v.mpsServer", cmdPrefix)
	if cmd.Flags().Changed(mpsServerFlagName) {

		var mpsServerFlagName string
		if cmdPrefix == "" {
			mpsServerFlagName = "mpsServer"
		} else {
			mpsServerFlagName = fmt.Sprintf("%v.mpsServer", cmdPrefix)
		}

		mpsServerFlagValue, err := cmd.Flags().GetString(mpsServerFlagName)
		if err != nil {
			return err, false
		}
		m.MpsServer = mpsServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationMpsTokenFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mpsTokenFlagName := fmt.Sprintf("%v.mpsToken", cmdPrefix)
	if cmd.Flags().Changed(mpsTokenFlagName) {

		var mpsTokenFlagName string
		if cmdPrefix == "" {
			mpsTokenFlagName = "mpsToken"
		} else {
			mpsTokenFlagName = fmt.Sprintf("%v.mpsToken", cmdPrefix)
		}

		mpsTokenFlagValue, err := cmd.Flags().GetString(mpsTokenFlagName)
		if err != nil {
			return err, false
		}
		m.MpsToken = mpsTokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerOpenAMTConfigurationMpsUserFlags(depth int, m *models.PortainerOpenAMTConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mpsUserFlagName := fmt.Sprintf("%v.mpsUser", cmdPrefix)
	if cmd.Flags().Changed(mpsUserFlagName) {

		var mpsUserFlagName string
		if cmdPrefix == "" {
			mpsUserFlagName = "mpsUser"
		} else {
			mpsUserFlagName = fmt.Sprintf("%v.mpsUser", cmdPrefix)
		}

		mpsUserFlagValue, err := cmd.Flags().GetString(mpsUserFlagName)
		if err != nil {
			return err, false
		}
		m.MpsUser = mpsUserFlagValue

		retAdded = true
	}

	return nil, retAdded
}
