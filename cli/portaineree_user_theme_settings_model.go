// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeUserThemeSettings

// register flags to command
func registerModelPortainereeUserThemeSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeUserThemeSettingsColor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeUserThemeSettingsSubtleUpgradeButton(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeUserThemeSettingsColor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	colorDescription := `Enum: ["dark","light","highcontrast","auto"]. Color represents the color theme of the UI`

	var colorFlagName string
	if cmdPrefix == "" {
		colorFlagName = "color"
	} else {
		colorFlagName = fmt.Sprintf("%v.color", cmdPrefix)
	}

	var colorFlagDefault string

	_ = cmd.PersistentFlags().String(colorFlagName, colorFlagDefault, colorDescription)

	if err := cmd.RegisterFlagCompletionFunc(colorFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["dark","light","highcontrast","auto"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerPortainereeUserThemeSettingsSubtleUpgradeButton(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subtleUpgradeButtonDescription := `SubtleUpgradeButton indicates if the upgrade banner should be displayed in a subtle way`

	var subtleUpgradeButtonFlagName string
	if cmdPrefix == "" {
		subtleUpgradeButtonFlagName = "subtleUpgradeButton"
	} else {
		subtleUpgradeButtonFlagName = fmt.Sprintf("%v.subtleUpgradeButton", cmdPrefix)
	}

	var subtleUpgradeButtonFlagDefault bool

	_ = cmd.PersistentFlags().Bool(subtleUpgradeButtonFlagName, subtleUpgradeButtonFlagDefault, subtleUpgradeButtonDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeUserThemeSettingsFlags(depth int, m *models.PortainereeUserThemeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, colorAdded := retrievePortainereeUserThemeSettingsColorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || colorAdded

	err, subtleUpgradeButtonAdded := retrievePortainereeUserThemeSettingsSubtleUpgradeButtonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subtleUpgradeButtonAdded

	return nil, retAdded
}

func retrievePortainereeUserThemeSettingsColorFlags(depth int, m *models.PortainereeUserThemeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	colorFlagName := fmt.Sprintf("%v.color", cmdPrefix)
	if cmd.Flags().Changed(colorFlagName) {

		var colorFlagName string
		if cmdPrefix == "" {
			colorFlagName = "color"
		} else {
			colorFlagName = fmt.Sprintf("%v.color", cmdPrefix)
		}

		colorFlagValue, err := cmd.Flags().GetString(colorFlagName)
		if err != nil {
			return err, false
		}
		m.Color = colorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeUserThemeSettingsSubtleUpgradeButtonFlags(depth int, m *models.PortainereeUserThemeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subtleUpgradeButtonFlagName := fmt.Sprintf("%v.subtleUpgradeButton", cmdPrefix)
	if cmd.Flags().Changed(subtleUpgradeButtonFlagName) {

		var subtleUpgradeButtonFlagName string
		if cmdPrefix == "" {
			subtleUpgradeButtonFlagName = "subtleUpgradeButton"
		} else {
			subtleUpgradeButtonFlagName = fmt.Sprintf("%v.subtleUpgradeButton", cmdPrefix)
		}

		subtleUpgradeButtonFlagValue, err := cmd.Flags().GetBool(subtleUpgradeButtonFlagName)
		if err != nil {
			return err, false
		}
		m.SubtleUpgradeButton = &subtleUpgradeButtonFlagValue

		retAdded = true
	}

	return nil, retAdded
}
