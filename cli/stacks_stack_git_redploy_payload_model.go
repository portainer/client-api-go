// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for StacksStackGitRedployPayload

// register flags to command
func registerModelStacksStackGitRedployPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksStackGitRedployPayloadEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitRedployPayloadPrune(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitRedployPayloadPullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitRedployPayloadRepositoryAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitRedployPayloadRepositoryGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitRedployPayloadRepositoryPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitRedployPayloadRepositoryReferenceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitRedployPayloadRepositoryUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksStackGitRedployPayloadEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: env []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerStacksStackGitRedployPayloadPrune(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pruneDescription := ``

	var pruneFlagName string
	if cmdPrefix == "" {
		pruneFlagName = "prune"
	} else {
		pruneFlagName = fmt.Sprintf("%v.prune", cmdPrefix)
	}

	var pruneFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pruneFlagName, pruneFlagDefault, pruneDescription)

	return nil
}

func registerStacksStackGitRedployPayloadPullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pullImageDescription := `Force a pulling to current image with the original tag though the image is already the latest`

	var pullImageFlagName string
	if cmdPrefix == "" {
		pullImageFlagName = "pullImage"
	} else {
		pullImageFlagName = fmt.Sprintf("%v.pullImage", cmdPrefix)
	}

	var pullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pullImageFlagName, pullImageFlagDefault, pullImageDescription)

	return nil
}

func registerStacksStackGitRedployPayloadRepositoryAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryAuthenticationDescription := ``

	var repositoryAuthenticationFlagName string
	if cmdPrefix == "" {
		repositoryAuthenticationFlagName = "repositoryAuthentication"
	} else {
		repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	}

	var repositoryAuthenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(repositoryAuthenticationFlagName, repositoryAuthenticationFlagDefault, repositoryAuthenticationDescription)

	return nil
}

func registerStacksStackGitRedployPayloadRepositoryGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryGitCredentialIdDescription := ``

	var repositoryGitCredentialIdFlagName string
	if cmdPrefix == "" {
		repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
	} else {
		repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	}

	var repositoryGitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repositoryGitCredentialIdFlagName, repositoryGitCredentialIdFlagDefault, repositoryGitCredentialIdDescription)

	return nil
}

func registerStacksStackGitRedployPayloadRepositoryPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryPasswordDescription := ``

	var repositoryPasswordFlagName string
	if cmdPrefix == "" {
		repositoryPasswordFlagName = "repositoryPassword"
	} else {
		repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	}

	var repositoryPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryPasswordFlagName, repositoryPasswordFlagDefault, repositoryPasswordDescription)

	return nil
}

func registerStacksStackGitRedployPayloadRepositoryReferenceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryReferenceNameDescription := ``

	var repositoryReferenceNameFlagName string
	if cmdPrefix == "" {
		repositoryReferenceNameFlagName = "repositoryReferenceName"
	} else {
		repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	}

	var repositoryReferenceNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryReferenceNameFlagName, repositoryReferenceNameFlagDefault, repositoryReferenceNameDescription)

	return nil
}

func registerStacksStackGitRedployPayloadRepositoryUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUsernameDescription := ``

	var repositoryUsernameFlagName string
	if cmdPrefix == "" {
		repositoryUsernameFlagName = "repositoryUsername"
	} else {
		repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	}

	var repositoryUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUsernameFlagName, repositoryUsernameFlagDefault, repositoryUsernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksStackGitRedployPayloadFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, envAdded := retrieveStacksStackGitRedployPayloadEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, pruneAdded := retrieveStacksStackGitRedployPayloadPruneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pruneAdded

	err, pullImageAdded := retrieveStacksStackGitRedployPayloadPullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pullImageAdded

	err, repositoryAuthenticationAdded := retrieveStacksStackGitRedployPayloadRepositoryAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAuthenticationAdded

	err, repositoryGitCredentialIdAdded := retrieveStacksStackGitRedployPayloadRepositoryGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryGitCredentialIdAdded

	err, repositoryPasswordAdded := retrieveStacksStackGitRedployPayloadRepositoryPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryPasswordAdded

	err, repositoryReferenceNameAdded := retrieveStacksStackGitRedployPayloadRepositoryReferenceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryReferenceNameAdded

	err, repositoryUsernameAdded := retrieveStacksStackGitRedployPayloadRepositoryUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUsernameAdded

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadEnvFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: env array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadPruneFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pruneFlagName := fmt.Sprintf("%v.prune", cmdPrefix)
	if cmd.Flags().Changed(pruneFlagName) {

		var pruneFlagName string
		if cmdPrefix == "" {
			pruneFlagName = "prune"
		} else {
			pruneFlagName = fmt.Sprintf("%v.prune", cmdPrefix)
		}

		pruneFlagValue, err := cmd.Flags().GetBool(pruneFlagName)
		if err != nil {
			return err, false
		}
		m.Prune = &pruneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadPullImageFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pullImageFlagName := fmt.Sprintf("%v.pullImage", cmdPrefix)
	if cmd.Flags().Changed(pullImageFlagName) {

		var pullImageFlagName string
		if cmdPrefix == "" {
			pullImageFlagName = "pullImage"
		} else {
			pullImageFlagName = fmt.Sprintf("%v.pullImage", cmdPrefix)
		}

		pullImageFlagValue, err := cmd.Flags().GetBool(pullImageFlagName)
		if err != nil {
			return err, false
		}
		m.PullImage = &pullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadRepositoryAuthenticationFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryAuthenticationFlagName := fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	if cmd.Flags().Changed(repositoryAuthenticationFlagName) {

		var repositoryAuthenticationFlagName string
		if cmdPrefix == "" {
			repositoryAuthenticationFlagName = "repositoryAuthentication"
		} else {
			repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
		}

		repositoryAuthenticationFlagValue, err := cmd.Flags().GetBool(repositoryAuthenticationFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryAuthentication = &repositoryAuthenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadRepositoryGitCredentialIDFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryGitCredentialIdFlagName := fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(repositoryGitCredentialIdFlagName) {

		var repositoryGitCredentialIdFlagName string
		if cmdPrefix == "" {
			repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
		} else {
			repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
		}

		repositoryGitCredentialIdFlagValue, err := cmd.Flags().GetInt64(repositoryGitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryGitCredentialID = repositoryGitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadRepositoryPasswordFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryPasswordFlagName := fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	if cmd.Flags().Changed(repositoryPasswordFlagName) {

		var repositoryPasswordFlagName string
		if cmdPrefix == "" {
			repositoryPasswordFlagName = "repositoryPassword"
		} else {
			repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
		}

		repositoryPasswordFlagValue, err := cmd.Flags().GetString(repositoryPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryPassword = repositoryPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadRepositoryReferenceNameFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryReferenceNameFlagName := fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	if cmd.Flags().Changed(repositoryReferenceNameFlagName) {

		var repositoryReferenceNameFlagName string
		if cmdPrefix == "" {
			repositoryReferenceNameFlagName = "repositoryReferenceName"
		} else {
			repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
		}

		repositoryReferenceNameFlagValue, err := cmd.Flags().GetString(repositoryReferenceNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryReferenceName = repositoryReferenceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitRedployPayloadRepositoryUsernameFlags(depth int, m *models.StacksStackGitRedployPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUsernameFlagName := fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	if cmd.Flags().Changed(repositoryUsernameFlagName) {

		var repositoryUsernameFlagName string
		if cmdPrefix == "" {
			repositoryUsernameFlagName = "repositoryUsername"
		} else {
			repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
		}

		repositoryUsernameFlagValue, err := cmd.Flags().GetString(repositoryUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryUsername = repositoryUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
