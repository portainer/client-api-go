// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for TeammembershipsTeamMembershipCreatePayload

// register flags to command
func registerModelTeammembershipsTeamMembershipCreatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTeammembershipsTeamMembershipCreatePayloadRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTeammembershipsTeamMembershipCreatePayloadTeamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTeammembershipsTeamMembershipCreatePayloadUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTeammembershipsTeamMembershipCreatePayloadRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := `Enum: [1,2]. Required. Role for the user inside the team (1 for leader and 2 for regular member)`

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(roleFlagName, roleFlagDefault, roleDescription)

	if err := cmd.RegisterFlagCompletionFunc(roleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTeammembershipsTeamMembershipCreatePayloadTeamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	teamIdDescription := `Required. Team identifier`

	var teamIdFlagName string
	if cmdPrefix == "" {
		teamIdFlagName = "teamID"
	} else {
		teamIdFlagName = fmt.Sprintf("%v.teamID", cmdPrefix)
	}

	var teamIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(teamIdFlagName, teamIdFlagDefault, teamIdDescription)

	return nil
}

func registerTeammembershipsTeamMembershipCreatePayloadUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := `Required. User identifier`

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "userID"
	} else {
		userIdFlagName = fmt.Sprintf("%v.userID", cmdPrefix)
	}

	var userIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTeammembershipsTeamMembershipCreatePayloadFlags(depth int, m *models.TeammembershipsTeamMembershipCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, roleAdded := retrieveTeammembershipsTeamMembershipCreatePayloadRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, teamIdAdded := retrieveTeammembershipsTeamMembershipCreatePayloadTeamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamIdAdded

	err, userIdAdded := retrieveTeammembershipsTeamMembershipCreatePayloadUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	return nil, retAdded
}

func retrieveTeammembershipsTeamMembershipCreatePayloadRoleFlags(depth int, m *models.TeammembershipsTeamMembershipCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetInt64(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = &roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTeammembershipsTeamMembershipCreatePayloadTeamIDFlags(depth int, m *models.TeammembershipsTeamMembershipCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamIdFlagName := fmt.Sprintf("%v.teamID", cmdPrefix)
	if cmd.Flags().Changed(teamIdFlagName) {

		var teamIdFlagName string
		if cmdPrefix == "" {
			teamIdFlagName = "teamID"
		} else {
			teamIdFlagName = fmt.Sprintf("%v.teamID", cmdPrefix)
		}

		teamIdFlagValue, err := cmd.Flags().GetInt64(teamIdFlagName)
		if err != nil {
			return err, false
		}
		m.TeamID = &teamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTeammembershipsTeamMembershipCreatePayloadUserIDFlags(depth int, m *models.TeammembershipsTeamMembershipCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.userID", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "userID"
		} else {
			userIdFlagName = fmt.Sprintf("%v.userID", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetInt64(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = &userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
