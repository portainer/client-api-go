// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for HelmHelmUserRepositoryResponse

// register flags to command
func registerModelHelmHelmUserRepositoryResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHelmHelmUserRepositoryResponseGlobalRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHelmHelmUserRepositoryResponseUserRepositories(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHelmHelmUserRepositoryResponseGlobalRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	globalRepositoryDescription := ``

	var globalRepositoryFlagName string
	if cmdPrefix == "" {
		globalRepositoryFlagName = "GlobalRepository"
	} else {
		globalRepositoryFlagName = fmt.Sprintf("%v.GlobalRepository", cmdPrefix)
	}

	var globalRepositoryFlagDefault string

	_ = cmd.PersistentFlags().String(globalRepositoryFlagName, globalRepositoryFlagDefault, globalRepositoryDescription)

	return nil
}

func registerHelmHelmUserRepositoryResponseUserRepositories(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: UserRepositories []*PortainereeHelmUserRepository array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHelmHelmUserRepositoryResponseFlags(depth int, m *models.HelmHelmUserRepositoryResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, globalRepositoryAdded := retrieveHelmHelmUserRepositoryResponseGlobalRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalRepositoryAdded

	err, userRepositoriesAdded := retrieveHelmHelmUserRepositoryResponseUserRepositoriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userRepositoriesAdded

	return nil, retAdded
}

func retrieveHelmHelmUserRepositoryResponseGlobalRepositoryFlags(depth int, m *models.HelmHelmUserRepositoryResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalRepositoryFlagName := fmt.Sprintf("%v.GlobalRepository", cmdPrefix)
	if cmd.Flags().Changed(globalRepositoryFlagName) {

		var globalRepositoryFlagName string
		if cmdPrefix == "" {
			globalRepositoryFlagName = "GlobalRepository"
		} else {
			globalRepositoryFlagName = fmt.Sprintf("%v.GlobalRepository", cmdPrefix)
		}

		globalRepositoryFlagValue, err := cmd.Flags().GetString(globalRepositoryFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalRepository = globalRepositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHelmHelmUserRepositoryResponseUserRepositoriesFlags(depth int, m *models.HelmHelmUserRepositoryResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userRepositoriesFlagName := fmt.Sprintf("%v.UserRepositories", cmdPrefix)
	if cmd.Flags().Changed(userRepositoriesFlagName) {
		// warning: UserRepositories array type []*PortainereeHelmUserRepository is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
