// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/helm"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationHelmHelmShowCmd returns a cmd to handle operation helmShow
func makeOperationHelmHelmShowCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "HelmShow",
		Short: `**Access policy**: authenticated`,
		RunE:  runOperationHelmHelmShow,
	}

	if err := registerOperationHelmHelmShowParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationHelmHelmShow uses cmd flags to call endpoint api
func runOperationHelmHelmShow(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := helm.NewHelmShowParams()
	if err, _ := retrieveOperationHelmHelmShowChartFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationHelmHelmShowCommandFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationHelmHelmShowRepoFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationHelmHelmShowResult(appCli.Helm.HelmShow(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationHelmHelmShowParamFlags registers all flags needed to fill params
func registerOperationHelmHelmShowParamFlags(cmd *cobra.Command) error {
	if err := registerOperationHelmHelmShowChartParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationHelmHelmShowCommandParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationHelmHelmShowRepoParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationHelmHelmShowChartParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	chartDescription := `Required. Chart name`

	var chartFlagName string
	if cmdPrefix == "" {
		chartFlagName = "chart"
	} else {
		chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
	}

	var chartFlagDefault string

	_ = cmd.PersistentFlags().String(chartFlagName, chartFlagDefault, chartDescription)

	return nil
}
func registerOperationHelmHelmShowCommandParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	commandDescription := `Required. chart/values/readme`

	var commandFlagName string
	if cmdPrefix == "" {
		commandFlagName = "command"
	} else {
		commandFlagName = fmt.Sprintf("%v.command", cmdPrefix)
	}

	var commandFlagDefault string

	_ = cmd.PersistentFlags().String(commandFlagName, commandFlagDefault, commandDescription)

	return nil
}
func registerOperationHelmHelmShowRepoParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	repoDescription := `Required. Helm repository URL`

	var repoFlagName string
	if cmdPrefix == "" {
		repoFlagName = "repo"
	} else {
		repoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
	}

	var repoFlagDefault string

	_ = cmd.PersistentFlags().String(repoFlagName, repoFlagDefault, repoDescription)

	return nil
}

func retrieveOperationHelmHelmShowChartFlag(m *helm.HelmShowParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("chart") {

		var chartFlagName string
		if cmdPrefix == "" {
			chartFlagName = "chart"
		} else {
			chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
		}

		chartFlagValue, err := cmd.Flags().GetString(chartFlagName)
		if err != nil {
			return err, false
		}
		m.Chart = chartFlagValue

	}
	return nil, retAdded
}
func retrieveOperationHelmHelmShowCommandFlag(m *helm.HelmShowParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("command") {

		var commandFlagName string
		if cmdPrefix == "" {
			commandFlagName = "command"
		} else {
			commandFlagName = fmt.Sprintf("%v.command", cmdPrefix)
		}

		commandFlagValue, err := cmd.Flags().GetString(commandFlagName)
		if err != nil {
			return err, false
		}
		m.Command = commandFlagValue

	}
	return nil, retAdded
}
func retrieveOperationHelmHelmShowRepoFlag(m *helm.HelmShowParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repo") {

		var repoFlagName string
		if cmdPrefix == "" {
			repoFlagName = "repo"
		} else {
			repoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
		}

		repoFlagValue, err := cmd.Flags().GetString(repoFlagName)
		if err != nil {
			return err, false
		}
		m.Repo = repoFlagValue

	}
	return nil, retAdded
}

// parseOperationHelmHelmShowResult parses request result and return the string content
func parseOperationHelmHelmShowResult(resp0 *helm.HelmShowOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*helm.HelmShowOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning helmShowUnauthorized is not supported

		// Non schema case: warning helmShowNotFound is not supported

		// Non schema case: warning helmShowInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
