// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for ReleaseReleaseElement

// register flags to command
func registerModelReleaseReleaseElementFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReleaseReleaseElementAppVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseElementChart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseElementName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseElementNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseElementRevision(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseElementStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseReleaseElementUpdated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseReleaseElementAppVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	appVersionDescription := ``

	var appVersionFlagName string
	if cmdPrefix == "" {
		appVersionFlagName = "app_version"
	} else {
		appVersionFlagName = fmt.Sprintf("%v.app_version", cmdPrefix)
	}

	var appVersionFlagDefault string

	_ = cmd.PersistentFlags().String(appVersionFlagName, appVersionFlagDefault, appVersionDescription)

	return nil
}

func registerReleaseReleaseElementChart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chartDescription := ``

	var chartFlagName string
	if cmdPrefix == "" {
		chartFlagName = "chart"
	} else {
		chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
	}

	var chartFlagDefault string

	_ = cmd.PersistentFlags().String(chartFlagName, chartFlagDefault, chartDescription)

	return nil
}

func registerReleaseReleaseElementName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerReleaseReleaseElementNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerReleaseReleaseElementRevision(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	revisionDescription := ``

	var revisionFlagName string
	if cmdPrefix == "" {
		revisionFlagName = "revision"
	} else {
		revisionFlagName = fmt.Sprintf("%v.revision", cmdPrefix)
	}

	var revisionFlagDefault string

	_ = cmd.PersistentFlags().String(revisionFlagName, revisionFlagDefault, revisionDescription)

	return nil
}

func registerReleaseReleaseElementStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerReleaseReleaseElementUpdated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedDescription := ``

	var updatedFlagName string
	if cmdPrefix == "" {
		updatedFlagName = "updated"
	} else {
		updatedFlagName = fmt.Sprintf("%v.updated", cmdPrefix)
	}

	var updatedFlagDefault string

	_ = cmd.PersistentFlags().String(updatedFlagName, updatedFlagDefault, updatedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReleaseReleaseElementFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, appVersionAdded := retrieveReleaseReleaseElementAppVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appVersionAdded

	err, chartAdded := retrieveReleaseReleaseElementChartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded

	err, nameAdded := retrieveReleaseReleaseElementNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveReleaseReleaseElementNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, revisionAdded := retrieveReleaseReleaseElementRevisionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || revisionAdded

	err, statusAdded := retrieveReleaseReleaseElementStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updatedAdded := retrieveReleaseReleaseElementUpdatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAdded

	return nil, retAdded
}

func retrieveReleaseReleaseElementAppVersionFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appVersionFlagName := fmt.Sprintf("%v.app_version", cmdPrefix)
	if cmd.Flags().Changed(appVersionFlagName) {

		var appVersionFlagName string
		if cmdPrefix == "" {
			appVersionFlagName = "app_version"
		} else {
			appVersionFlagName = fmt.Sprintf("%v.app_version", cmdPrefix)
		}

		appVersionFlagValue, err := cmd.Flags().GetString(appVersionFlagName)
		if err != nil {
			return err, false
		}
		m.AppVersion = appVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseElementChartFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chartFlagName := fmt.Sprintf("%v.chart", cmdPrefix)
	if cmd.Flags().Changed(chartFlagName) {

		var chartFlagName string
		if cmdPrefix == "" {
			chartFlagName = "chart"
		} else {
			chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
		}

		chartFlagValue, err := cmd.Flags().GetString(chartFlagName)
		if err != nil {
			return err, false
		}
		m.Chart = chartFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseElementNameFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseElementNamespaceFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseElementRevisionFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	revisionFlagName := fmt.Sprintf("%v.revision", cmdPrefix)
	if cmd.Flags().Changed(revisionFlagName) {

		var revisionFlagName string
		if cmdPrefix == "" {
			revisionFlagName = "revision"
		} else {
			revisionFlagName = fmt.Sprintf("%v.revision", cmdPrefix)
		}

		revisionFlagValue, err := cmd.Flags().GetString(revisionFlagName)
		if err != nil {
			return err, false
		}
		m.Revision = revisionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseElementStatusFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseReleaseElementUpdatedFlags(depth int, m *models.ReleaseReleaseElement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedFlagName := fmt.Sprintf("%v.updated", cmdPrefix)
	if cmd.Flags().Changed(updatedFlagName) {

		var updatedFlagName string
		if cmdPrefix == "" {
			updatedFlagName = "updated"
		} else {
			updatedFlagName = fmt.Sprintf("%v.updated", cmdPrefix)
		}

		updatedFlagValue, err := cmd.Flags().GetString(updatedFlagName)
		if err != nil {
			return err, false
		}
		m.Updated = updatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
