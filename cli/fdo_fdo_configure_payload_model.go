// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for FdoFdoConfigurePayload

// register flags to command
func registerModelFdoFdoConfigurePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFdoFdoConfigurePayloadEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFdoFdoConfigurePayloadOwnerPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFdoFdoConfigurePayloadOwnerURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFdoFdoConfigurePayloadOwnerUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFdoFdoConfigurePayloadEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerFdoFdoConfigurePayloadOwnerPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerPasswordDescription := ``

	var ownerPasswordFlagName string
	if cmdPrefix == "" {
		ownerPasswordFlagName = "ownerPassword"
	} else {
		ownerPasswordFlagName = fmt.Sprintf("%v.ownerPassword", cmdPrefix)
	}

	var ownerPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(ownerPasswordFlagName, ownerPasswordFlagDefault, ownerPasswordDescription)

	return nil
}

func registerFdoFdoConfigurePayloadOwnerURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerUrlDescription := ``

	var ownerUrlFlagName string
	if cmdPrefix == "" {
		ownerUrlFlagName = "ownerURL"
	} else {
		ownerUrlFlagName = fmt.Sprintf("%v.ownerURL", cmdPrefix)
	}

	var ownerUrlFlagDefault string

	_ = cmd.PersistentFlags().String(ownerUrlFlagName, ownerUrlFlagDefault, ownerUrlDescription)

	return nil
}

func registerFdoFdoConfigurePayloadOwnerUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerUsernameDescription := ``

	var ownerUsernameFlagName string
	if cmdPrefix == "" {
		ownerUsernameFlagName = "ownerUsername"
	} else {
		ownerUsernameFlagName = fmt.Sprintf("%v.ownerUsername", cmdPrefix)
	}

	var ownerUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(ownerUsernameFlagName, ownerUsernameFlagDefault, ownerUsernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFdoFdoConfigurePayloadFlags(depth int, m *models.FdoFdoConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveFdoFdoConfigurePayloadEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, ownerPasswordAdded := retrieveFdoFdoConfigurePayloadOwnerPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerPasswordAdded

	err, ownerUrlAdded := retrieveFdoFdoConfigurePayloadOwnerURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerUrlAdded

	err, ownerUsernameAdded := retrieveFdoFdoConfigurePayloadOwnerUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerUsernameAdded

	return nil, retAdded
}

func retrieveFdoFdoConfigurePayloadEnabledFlags(depth int, m *models.FdoFdoConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFdoFdoConfigurePayloadOwnerPasswordFlags(depth int, m *models.FdoFdoConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerPasswordFlagName := fmt.Sprintf("%v.ownerPassword", cmdPrefix)
	if cmd.Flags().Changed(ownerPasswordFlagName) {

		var ownerPasswordFlagName string
		if cmdPrefix == "" {
			ownerPasswordFlagName = "ownerPassword"
		} else {
			ownerPasswordFlagName = fmt.Sprintf("%v.ownerPassword", cmdPrefix)
		}

		ownerPasswordFlagValue, err := cmd.Flags().GetString(ownerPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.OwnerPassword = ownerPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFdoFdoConfigurePayloadOwnerURLFlags(depth int, m *models.FdoFdoConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerUrlFlagName := fmt.Sprintf("%v.ownerURL", cmdPrefix)
	if cmd.Flags().Changed(ownerUrlFlagName) {

		var ownerUrlFlagName string
		if cmdPrefix == "" {
			ownerUrlFlagName = "ownerURL"
		} else {
			ownerUrlFlagName = fmt.Sprintf("%v.ownerURL", cmdPrefix)
		}

		ownerUrlFlagValue, err := cmd.Flags().GetString(ownerUrlFlagName)
		if err != nil {
			return err, false
		}
		m.OwnerURL = ownerUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFdoFdoConfigurePayloadOwnerUsernameFlags(depth int, m *models.FdoFdoConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerUsernameFlagName := fmt.Sprintf("%v.ownerUsername", cmdPrefix)
	if cmd.Flags().Changed(ownerUsernameFlagName) {

		var ownerUsernameFlagName string
		if cmdPrefix == "" {
			ownerUsernameFlagName = "ownerUsername"
		} else {
			ownerUsernameFlagName = fmt.Sprintf("%v.ownerUsername", cmdPrefix)
		}

		ownerUsernameFlagValue, err := cmd.Flags().GetString(ownerUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.OwnerUsername = ownerUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
