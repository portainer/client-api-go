// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeTeamResourceAccess

// register flags to command
func registerModelPortainereeTeamResourceAccessFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeTeamResourceAccessAccessLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTeamResourceAccessTeamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTeamResourceAccessAccessLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessLevelDescription := ``

	var accessLevelFlagName string
	if cmdPrefix == "" {
		accessLevelFlagName = "AccessLevel"
	} else {
		accessLevelFlagName = fmt.Sprintf("%v.AccessLevel", cmdPrefix)
	}

	var accessLevelFlagDefault int64

	_ = cmd.PersistentFlags().Int64(accessLevelFlagName, accessLevelFlagDefault, accessLevelDescription)

	return nil
}

func registerPortainereeTeamResourceAccessTeamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	teamIdDescription := ``

	var teamIdFlagName string
	if cmdPrefix == "" {
		teamIdFlagName = "TeamId"
	} else {
		teamIdFlagName = fmt.Sprintf("%v.TeamId", cmdPrefix)
	}

	var teamIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(teamIdFlagName, teamIdFlagDefault, teamIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeTeamResourceAccessFlags(depth int, m *models.PortainereeTeamResourceAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessLevelAdded := retrievePortainereeTeamResourceAccessAccessLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessLevelAdded

	err, teamIdAdded := retrievePortainereeTeamResourceAccessTeamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamIdAdded

	return nil, retAdded
}

func retrievePortainereeTeamResourceAccessAccessLevelFlags(depth int, m *models.PortainereeTeamResourceAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessLevelFlagName := fmt.Sprintf("%v.AccessLevel", cmdPrefix)
	if cmd.Flags().Changed(accessLevelFlagName) {

		var accessLevelFlagName string
		if cmdPrefix == "" {
			accessLevelFlagName = "AccessLevel"
		} else {
			accessLevelFlagName = fmt.Sprintf("%v.AccessLevel", cmdPrefix)
		}

		accessLevelFlagValue, err := cmd.Flags().GetInt64(accessLevelFlagName)
		if err != nil {
			return err, false
		}
		m.AccessLevel = accessLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTeamResourceAccessTeamIDFlags(depth int, m *models.PortainereeTeamResourceAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamIdFlagName := fmt.Sprintf("%v.TeamId", cmdPrefix)
	if cmd.Flags().Changed(teamIdFlagName) {

		var teamIdFlagName string
		if cmdPrefix == "" {
			teamIdFlagName = "TeamId"
		} else {
			teamIdFlagName = fmt.Sprintf("%v.TeamId", cmdPrefix)
		}

		teamIdFlagValue, err := cmd.Flags().GetInt64(teamIdFlagName)
		if err != nil {
			return err, false
		}
		m.TeamID = teamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
