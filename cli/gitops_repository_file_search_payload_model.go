// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for GitopsRepositoryFileSearchPayload

// register flags to command
func registerModelGitopsRepositoryFileSearchPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGitopsRepositoryFileSearchPayloadGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryFileSearchPayloadInclude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryFileSearchPayloadKeyword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryFileSearchPayloadPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryFileSearchPayloadReference(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryFileSearchPayloadRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGitopsRepositoryFileSearchPayloadUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGitopsRepositoryFileSearchPayloadGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gitCredentialIdDescription := ``

	var gitCredentialIdFlagName string
	if cmdPrefix == "" {
		gitCredentialIdFlagName = "gitCredentialID"
	} else {
		gitCredentialIdFlagName = fmt.Sprintf("%v.gitCredentialID", cmdPrefix)
	}

	var gitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(gitCredentialIdFlagName, gitCredentialIdFlagDefault, gitCredentialIdDescription)

	return nil
}

func registerGitopsRepositoryFileSearchPayloadInclude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	includeDescription := `Allow to provide specific file extension as the search result. If empty, the file extensions yml,yaml,hcl,json will be set by default`

	var includeFlagName string
	if cmdPrefix == "" {
		includeFlagName = "include"
	} else {
		includeFlagName = fmt.Sprintf("%v.include", cmdPrefix)
	}

	var includeFlagDefault string

	_ = cmd.PersistentFlags().String(includeFlagName, includeFlagDefault, includeDescription)

	return nil
}

func registerGitopsRepositoryFileSearchPayloadKeyword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keywordDescription := `Partial or completed file name. If empty, all filenames with included extensions will be returned`

	var keywordFlagName string
	if cmdPrefix == "" {
		keywordFlagName = "keyword"
	} else {
		keywordFlagName = fmt.Sprintf("%v.keyword", cmdPrefix)
	}

	var keywordFlagDefault string

	_ = cmd.PersistentFlags().String(keywordFlagName, keywordFlagDefault, keywordDescription)

	return nil
}

func registerGitopsRepositoryFileSearchPayloadPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerGitopsRepositoryFileSearchPayloadReference(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	referenceDescription := `Specific Git repository reference. If empty, the reference ref/heads/main will be set by default`

	var referenceFlagName string
	if cmdPrefix == "" {
		referenceFlagName = "reference"
	} else {
		referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
	}

	var referenceFlagDefault string

	_ = cmd.PersistentFlags().String(referenceFlagName, referenceFlagDefault, referenceDescription)

	return nil
}

func registerGitopsRepositoryFileSearchPayloadRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryDescription := `Required. `

	var repositoryFlagName string
	if cmdPrefix == "" {
		repositoryFlagName = "repository"
	} else {
		repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
	}

	var repositoryFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryFlagName, repositoryFlagDefault, repositoryDescription)

	return nil
}

func registerGitopsRepositoryFileSearchPayloadUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGitopsRepositoryFileSearchPayloadFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, gitCredentialIdAdded := retrieveGitopsRepositoryFileSearchPayloadGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitCredentialIdAdded

	err, includeAdded := retrieveGitopsRepositoryFileSearchPayloadIncludeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || includeAdded

	err, keywordAdded := retrieveGitopsRepositoryFileSearchPayloadKeywordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keywordAdded

	err, passwordAdded := retrieveGitopsRepositoryFileSearchPayloadPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, referenceAdded := retrieveGitopsRepositoryFileSearchPayloadReferenceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || referenceAdded

	err, repositoryAdded := retrieveGitopsRepositoryFileSearchPayloadRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded

	err, usernameAdded := retrieveGitopsRepositoryFileSearchPayloadUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveGitopsRepositoryFileSearchPayloadGitCredentialIDFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gitCredentialIdFlagName := fmt.Sprintf("%v.gitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(gitCredentialIdFlagName) {

		var gitCredentialIdFlagName string
		if cmdPrefix == "" {
			gitCredentialIdFlagName = "gitCredentialID"
		} else {
			gitCredentialIdFlagName = fmt.Sprintf("%v.gitCredentialID", cmdPrefix)
		}

		gitCredentialIdFlagValue, err := cmd.Flags().GetInt64(gitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.GitCredentialID = gitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryFileSearchPayloadIncludeFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	includeFlagName := fmt.Sprintf("%v.include", cmdPrefix)
	if cmd.Flags().Changed(includeFlagName) {

		var includeFlagName string
		if cmdPrefix == "" {
			includeFlagName = "include"
		} else {
			includeFlagName = fmt.Sprintf("%v.include", cmdPrefix)
		}

		includeFlagValue, err := cmd.Flags().GetString(includeFlagName)
		if err != nil {
			return err, false
		}
		m.Include = includeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryFileSearchPayloadKeywordFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keywordFlagName := fmt.Sprintf("%v.keyword", cmdPrefix)
	if cmd.Flags().Changed(keywordFlagName) {

		var keywordFlagName string
		if cmdPrefix == "" {
			keywordFlagName = "keyword"
		} else {
			keywordFlagName = fmt.Sprintf("%v.keyword", cmdPrefix)
		}

		keywordFlagValue, err := cmd.Flags().GetString(keywordFlagName)
		if err != nil {
			return err, false
		}
		m.Keyword = keywordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryFileSearchPayloadPasswordFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryFileSearchPayloadReferenceFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	referenceFlagName := fmt.Sprintf("%v.reference", cmdPrefix)
	if cmd.Flags().Changed(referenceFlagName) {

		var referenceFlagName string
		if cmdPrefix == "" {
			referenceFlagName = "reference"
		} else {
			referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
		}

		referenceFlagValue, err := cmd.Flags().GetString(referenceFlagName)
		if err != nil {
			return err, false
		}
		m.Reference = referenceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryFileSearchPayloadRepositoryFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryFlagName := fmt.Sprintf("%v.repository", cmdPrefix)
	if cmd.Flags().Changed(repositoryFlagName) {

		var repositoryFlagName string
		if cmdPrefix == "" {
			repositoryFlagName = "repository"
		} else {
			repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
		}

		repositoryFlagValue, err := cmd.Flags().GetString(repositoryFlagName)
		if err != nil {
			return err, false
		}
		m.Repository = &repositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGitopsRepositoryFileSearchPayloadUsernameFlags(depth int, m *models.GitopsRepositoryFileSearchPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
