// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for StacksStackGitUpdatePayload

// register flags to command
func registerModelStacksStackGitUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksStackGitUpdatePayloadAutoUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitUpdatePayloadEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitUpdatePayloadPrune(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitUpdatePayloadRepositoryAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitUpdatePayloadRepositoryGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitUpdatePayloadRepositoryPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitUpdatePayloadRepositoryReferenceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksStackGitUpdatePayloadRepositoryUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksStackGitUpdatePayloadAutoUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var autoUpdateFlagName string
	if cmdPrefix == "" {
		autoUpdateFlagName = "autoUpdate"
	} else {
		autoUpdateFlagName = fmt.Sprintf("%v.autoUpdate", cmdPrefix)
	}

	if err := registerModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksStackGitUpdatePayloadEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: env []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerStacksStackGitUpdatePayloadPrune(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pruneDescription := ``

	var pruneFlagName string
	if cmdPrefix == "" {
		pruneFlagName = "prune"
	} else {
		pruneFlagName = fmt.Sprintf("%v.prune", cmdPrefix)
	}

	var pruneFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pruneFlagName, pruneFlagDefault, pruneDescription)

	return nil
}

func registerStacksStackGitUpdatePayloadRepositoryAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryAuthenticationDescription := ``

	var repositoryAuthenticationFlagName string
	if cmdPrefix == "" {
		repositoryAuthenticationFlagName = "repositoryAuthentication"
	} else {
		repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	}

	var repositoryAuthenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(repositoryAuthenticationFlagName, repositoryAuthenticationFlagDefault, repositoryAuthenticationDescription)

	return nil
}

func registerStacksStackGitUpdatePayloadRepositoryGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryGitCredentialIdDescription := ``

	var repositoryGitCredentialIdFlagName string
	if cmdPrefix == "" {
		repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
	} else {
		repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	}

	var repositoryGitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repositoryGitCredentialIdFlagName, repositoryGitCredentialIdFlagDefault, repositoryGitCredentialIdDescription)

	return nil
}

func registerStacksStackGitUpdatePayloadRepositoryPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryPasswordDescription := ``

	var repositoryPasswordFlagName string
	if cmdPrefix == "" {
		repositoryPasswordFlagName = "repositoryPassword"
	} else {
		repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	}

	var repositoryPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryPasswordFlagName, repositoryPasswordFlagDefault, repositoryPasswordDescription)

	return nil
}

func registerStacksStackGitUpdatePayloadRepositoryReferenceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryReferenceNameDescription := ``

	var repositoryReferenceNameFlagName string
	if cmdPrefix == "" {
		repositoryReferenceNameFlagName = "repositoryReferenceName"
	} else {
		repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	}

	var repositoryReferenceNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryReferenceNameFlagName, repositoryReferenceNameFlagDefault, repositoryReferenceNameDescription)

	return nil
}

func registerStacksStackGitUpdatePayloadRepositoryUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUsernameDescription := ``

	var repositoryUsernameFlagName string
	if cmdPrefix == "" {
		repositoryUsernameFlagName = "repositoryUsername"
	} else {
		repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	}

	var repositoryUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUsernameFlagName, repositoryUsernameFlagDefault, repositoryUsernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksStackGitUpdatePayloadFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, autoUpdateAdded := retrieveStacksStackGitUpdatePayloadAutoUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded

	err, envAdded := retrieveStacksStackGitUpdatePayloadEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, pruneAdded := retrieveStacksStackGitUpdatePayloadPruneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pruneAdded

	err, repositoryAuthenticationAdded := retrieveStacksStackGitUpdatePayloadRepositoryAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAuthenticationAdded

	err, repositoryGitCredentialIdAdded := retrieveStacksStackGitUpdatePayloadRepositoryGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryGitCredentialIdAdded

	err, repositoryPasswordAdded := retrieveStacksStackGitUpdatePayloadRepositoryPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryPasswordAdded

	err, repositoryReferenceNameAdded := retrieveStacksStackGitUpdatePayloadRepositoryReferenceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryReferenceNameAdded

	err, repositoryUsernameAdded := retrieveStacksStackGitUpdatePayloadRepositoryUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUsernameAdded

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadAutoUpdateFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpdateFlagName := fmt.Sprintf("%v.autoUpdate", cmdPrefix)
	if cmd.Flags().Changed(autoUpdateFlagName) {
		// info: complex object autoUpdate PortainereeStackAutoUpdate is retrieved outside this Changed() block
	}
	autoUpdateFlagValue := m.AutoUpdate
	if swag.IsZero(autoUpdateFlagValue) {
		autoUpdateFlagValue = &models.PortainereeStackAutoUpdate{}
	}

	err, autoUpdateAdded := retrieveModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagValue, autoUpdateFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded
	if autoUpdateAdded {
		m.AutoUpdate = autoUpdateFlagValue
	}

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadEnvFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: env array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadPruneFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pruneFlagName := fmt.Sprintf("%v.prune", cmdPrefix)
	if cmd.Flags().Changed(pruneFlagName) {

		var pruneFlagName string
		if cmdPrefix == "" {
			pruneFlagName = "prune"
		} else {
			pruneFlagName = fmt.Sprintf("%v.prune", cmdPrefix)
		}

		pruneFlagValue, err := cmd.Flags().GetBool(pruneFlagName)
		if err != nil {
			return err, false
		}
		m.Prune = &pruneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadRepositoryAuthenticationFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryAuthenticationFlagName := fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	if cmd.Flags().Changed(repositoryAuthenticationFlagName) {

		var repositoryAuthenticationFlagName string
		if cmdPrefix == "" {
			repositoryAuthenticationFlagName = "repositoryAuthentication"
		} else {
			repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
		}

		repositoryAuthenticationFlagValue, err := cmd.Flags().GetBool(repositoryAuthenticationFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryAuthentication = &repositoryAuthenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadRepositoryGitCredentialIDFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryGitCredentialIdFlagName := fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(repositoryGitCredentialIdFlagName) {

		var repositoryGitCredentialIdFlagName string
		if cmdPrefix == "" {
			repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
		} else {
			repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
		}

		repositoryGitCredentialIdFlagValue, err := cmd.Flags().GetInt64(repositoryGitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryGitCredentialID = repositoryGitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadRepositoryPasswordFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryPasswordFlagName := fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	if cmd.Flags().Changed(repositoryPasswordFlagName) {

		var repositoryPasswordFlagName string
		if cmdPrefix == "" {
			repositoryPasswordFlagName = "repositoryPassword"
		} else {
			repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
		}

		repositoryPasswordFlagValue, err := cmd.Flags().GetString(repositoryPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryPassword = repositoryPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadRepositoryReferenceNameFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryReferenceNameFlagName := fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	if cmd.Flags().Changed(repositoryReferenceNameFlagName) {

		var repositoryReferenceNameFlagName string
		if cmdPrefix == "" {
			repositoryReferenceNameFlagName = "repositoryReferenceName"
		} else {
			repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
		}

		repositoryReferenceNameFlagValue, err := cmd.Flags().GetString(repositoryReferenceNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryReferenceName = repositoryReferenceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksStackGitUpdatePayloadRepositoryUsernameFlags(depth int, m *models.StacksStackGitUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUsernameFlagName := fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	if cmd.Flags().Changed(repositoryUsernameFlagName) {

		var repositoryUsernameFlagName string
		if cmdPrefix == "" {
			repositoryUsernameFlagName = "repositoryUsername"
		} else {
			repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
		}

		repositoryUsernameFlagValue, err := cmd.Flags().GetString(repositoryUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryUsername = repositoryUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
