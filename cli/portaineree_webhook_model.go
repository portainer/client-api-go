// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeWebhook

// register flags to command
func registerModelPortainereeWebhookFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeWebhookEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeWebhookID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeWebhookRegistryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeWebhookResourceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeWebhookToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeWebhookType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeWebhookEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := `Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "EndpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.EndpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerPortainereeWebhookID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Webhook Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeWebhookRegistryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registryIdDescription := `Registry Identifier`

	var registryIdFlagName string
	if cmdPrefix == "" {
		registryIdFlagName = "RegistryId"
	} else {
		registryIdFlagName = fmt.Sprintf("%v.RegistryId", cmdPrefix)
	}

	var registryIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(registryIdFlagName, registryIdFlagDefault, registryIdDescription)

	return nil
}

func registerPortainereeWebhookResourceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceIdDescription := ``

	var resourceIdFlagName string
	if cmdPrefix == "" {
		resourceIdFlagName = "ResourceId"
	} else {
		resourceIdFlagName = fmt.Sprintf("%v.ResourceId", cmdPrefix)
	}

	var resourceIdFlagDefault string

	_ = cmd.PersistentFlags().String(resourceIdFlagName, resourceIdFlagDefault, resourceIdDescription)

	return nil
}

func registerPortainereeWebhookToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenDescription := ``

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "Token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.Token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

func registerPortainereeWebhookType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeWebhookFlags(depth int, m *models.PortainereeWebhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointIdAdded := retrievePortainereeWebhookEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, idAdded := retrievePortainereeWebhookIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, registryIdAdded := retrievePortainereeWebhookRegistryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryIdAdded

	err, resourceIdAdded := retrievePortainereeWebhookResourceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceIdAdded

	err, tokenAdded := retrievePortainereeWebhookTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenAdded

	err, typeAdded := retrievePortainereeWebhookTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePortainereeWebhookEndpointIDFlags(depth int, m *models.PortainereeWebhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.EndpointId", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "EndpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.EndpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeWebhookIDFlags(depth int, m *models.PortainereeWebhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeWebhookRegistryIDFlags(depth int, m *models.PortainereeWebhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryIdFlagName := fmt.Sprintf("%v.RegistryId", cmdPrefix)
	if cmd.Flags().Changed(registryIdFlagName) {

		var registryIdFlagName string
		if cmdPrefix == "" {
			registryIdFlagName = "RegistryId"
		} else {
			registryIdFlagName = fmt.Sprintf("%v.RegistryId", cmdPrefix)
		}

		registryIdFlagValue, err := cmd.Flags().GetInt64(registryIdFlagName)
		if err != nil {
			return err, false
		}
		m.RegistryID = registryIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeWebhookResourceIDFlags(depth int, m *models.PortainereeWebhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceIdFlagName := fmt.Sprintf("%v.ResourceId", cmdPrefix)
	if cmd.Flags().Changed(resourceIdFlagName) {

		var resourceIdFlagName string
		if cmdPrefix == "" {
			resourceIdFlagName = "ResourceId"
		} else {
			resourceIdFlagName = fmt.Sprintf("%v.ResourceId", cmdPrefix)
		}

		resourceIdFlagValue, err := cmd.Flags().GetString(resourceIdFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceID = resourceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeWebhookTokenFlags(depth int, m *models.PortainereeWebhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenFlagName := fmt.Sprintf("%v.Token", cmdPrefix)
	if cmd.Flags().Changed(tokenFlagName) {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "Token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.Token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeWebhookTypeFlags(depth int, m *models.PortainereeWebhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
