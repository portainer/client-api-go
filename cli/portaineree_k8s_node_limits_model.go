// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeK8sNodeLimits

// register flags to command
func registerModelPortainereeK8sNodeLimitsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeK8sNodeLimitsCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeK8sNodeLimitsMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeK8sNodeLimitsCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuDescription := ``

	var cpuFlagName string
	if cmdPrefix == "" {
		cpuFlagName = "CPU"
	} else {
		cpuFlagName = fmt.Sprintf("%v.CPU", cmdPrefix)
	}

	var cpuFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuFlagName, cpuFlagDefault, cpuDescription)

	return nil
}

func registerPortainereeK8sNodeLimitsMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memoryDescription := ``

	var memoryFlagName string
	if cmdPrefix == "" {
		memoryFlagName = "Memory"
	} else {
		memoryFlagName = fmt.Sprintf("%v.Memory", cmdPrefix)
	}

	var memoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memoryFlagName, memoryFlagDefault, memoryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeK8sNodeLimitsFlags(depth int, m *models.PortainereeK8sNodeLimits, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuAdded := retrievePortainereeK8sNodeLimitsCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuAdded

	err, memoryAdded := retrievePortainereeK8sNodeLimitsMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryAdded

	return nil, retAdded
}

func retrievePortainereeK8sNodeLimitsCPUFlags(depth int, m *models.PortainereeK8sNodeLimits, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuFlagName := fmt.Sprintf("%v.CPU", cmdPrefix)
	if cmd.Flags().Changed(cpuFlagName) {

		var cpuFlagName string
		if cmdPrefix == "" {
			cpuFlagName = "CPU"
		} else {
			cpuFlagName = fmt.Sprintf("%v.CPU", cmdPrefix)
		}

		cpuFlagValue, err := cmd.Flags().GetInt64(cpuFlagName)
		if err != nil {
			return err, false
		}
		m.CPU = cpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeK8sNodeLimitsMemoryFlags(depth int, m *models.PortainereeK8sNodeLimits, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	memoryFlagName := fmt.Sprintf("%v.Memory", cmdPrefix)
	if cmd.Flags().Changed(memoryFlagName) {

		var memoryFlagName string
		if cmdPrefix == "" {
			memoryFlagName = "Memory"
		} else {
			memoryFlagName = fmt.Sprintf("%v.Memory", cmdPrefix)
		}

		memoryFlagValue, err := cmd.Flags().GetInt64(memoryFlagName)
		if err != nil {
			return err, false
		}
		m.Memory = memoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}
