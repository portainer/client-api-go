// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for StacksSwarmStackFromGitRepositoryPayload

// register flags to command
func registerModelStacksSwarmStackFromGitRepositoryPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksSwarmStackFromGitRepositoryPayloadAdditionalFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadAutoUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadComposeFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadFilesystemPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadFromAppTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadRepositoryAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadRepositoryPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadRepositoryUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadSupportRelativePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromGitRepositoryPayloadSwarmID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadAdditionalFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: additionalFiles []string array type is not supported by go-swagger cli yet

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadAutoUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var autoUpdateFlagName string
	if cmdPrefix == "" {
		autoUpdateFlagName = "autoUpdate"
	} else {
		autoUpdateFlagName = fmt.Sprintf("%v.autoUpdate", cmdPrefix)
	}

	if err := registerModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadComposeFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	composeFileDescription := `Path to the Stack file inside the Git repository`

	var composeFileFlagName string
	if cmdPrefix == "" {
		composeFileFlagName = "composeFile"
	} else {
		composeFileFlagName = fmt.Sprintf("%v.composeFile", cmdPrefix)
	}

	var composeFileFlagDefault string = "docker-compose.yml"

	_ = cmd.PersistentFlags().String(composeFileFlagName, composeFileFlagDefault, composeFileDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: env []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadFilesystemPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	filesystemPathDescription := `Network filesystem path`

	var filesystemPathFlagName string
	if cmdPrefix == "" {
		filesystemPathFlagName = "filesystemPath"
	} else {
		filesystemPathFlagName = fmt.Sprintf("%v.filesystemPath", cmdPrefix)
	}

	var filesystemPathFlagDefault string

	_ = cmd.PersistentFlags().String(filesystemPathFlagName, filesystemPathFlagDefault, filesystemPathDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadFromAppTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fromAppTemplateDescription := `Whether the stack is from a app template`

	var fromAppTemplateFlagName string
	if cmdPrefix == "" {
		fromAppTemplateFlagName = "fromAppTemplate"
	} else {
		fromAppTemplateFlagName = fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
	}

	var fromAppTemplateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(fromAppTemplateFlagName, fromAppTemplateFlagDefault, fromAppTemplateDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name of the stack`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadRepositoryAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryAuthenticationDescription := `Use basic authentication to clone the Git repository`

	var repositoryAuthenticationFlagName string
	if cmdPrefix == "" {
		repositoryAuthenticationFlagName = "repositoryAuthentication"
	} else {
		repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	}

	var repositoryAuthenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(repositoryAuthenticationFlagName, repositoryAuthenticationFlagDefault, repositoryAuthenticationDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryGitCredentialIdDescription := `GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication
is true and RepositoryUsername/RepositoryPassword are not provided`

	var repositoryGitCredentialIdFlagName string
	if cmdPrefix == "" {
		repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
	} else {
		repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	}

	var repositoryGitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repositoryGitCredentialIdFlagName, repositoryGitCredentialIdFlagDefault, repositoryGitCredentialIdDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadRepositoryPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryPasswordDescription := `Password used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0`

	var repositoryPasswordFlagName string
	if cmdPrefix == "" {
		repositoryPasswordFlagName = "repositoryPassword"
	} else {
		repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	}

	var repositoryPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryPasswordFlagName, repositoryPasswordFlagDefault, repositoryPasswordDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryReferenceNameDescription := `Reference name of a Git repository hosting the Stack file`

	var repositoryReferenceNameFlagName string
	if cmdPrefix == "" {
		repositoryReferenceNameFlagName = "repositoryReferenceName"
	} else {
		repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	}

	var repositoryReferenceNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryReferenceNameFlagName, repositoryReferenceNameFlagDefault, repositoryReferenceNameDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUrlDescription := `Required. URL of a Git repository hosting the Stack file`

	var repositoryUrlFlagName string
	if cmdPrefix == "" {
		repositoryUrlFlagName = "repositoryURL"
	} else {
		repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	}

	var repositoryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUrlFlagName, repositoryUrlFlagDefault, repositoryUrlDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadRepositoryUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUsernameDescription := `Username used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0`

	var repositoryUsernameFlagName string
	if cmdPrefix == "" {
		repositoryUsernameFlagName = "repositoryUsername"
	} else {
		repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	}

	var repositoryUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUsernameFlagName, repositoryUsernameFlagDefault, repositoryUsernameDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadSupportRelativePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	supportRelativePathDescription := `Whether the stack suppors relative path volume`

	var supportRelativePathFlagName string
	if cmdPrefix == "" {
		supportRelativePathFlagName = "supportRelativePath"
	} else {
		supportRelativePathFlagName = fmt.Sprintf("%v.supportRelativePath", cmdPrefix)
	}

	var supportRelativePathFlagDefault bool

	_ = cmd.PersistentFlags().Bool(supportRelativePathFlagName, supportRelativePathFlagDefault, supportRelativePathDescription)

	return nil
}

func registerStacksSwarmStackFromGitRepositoryPayloadSwarmID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	swarmIdDescription := `Required. Swarm cluster identifier`

	var swarmIdFlagName string
	if cmdPrefix == "" {
		swarmIdFlagName = "swarmID"
	} else {
		swarmIdFlagName = fmt.Sprintf("%v.swarmID", cmdPrefix)
	}

	var swarmIdFlagDefault string

	_ = cmd.PersistentFlags().String(swarmIdFlagName, swarmIdFlagDefault, swarmIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksSwarmStackFromGitRepositoryPayloadFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, additionalFilesAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadAdditionalFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || additionalFilesAdded

	err, autoUpdateAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadAutoUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded

	err, composeFileAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadComposeFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || composeFileAdded

	err, envAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, filesystemPathAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadFilesystemPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filesystemPathAdded

	err, fromAppTemplateAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadFromAppTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fromAppTemplateAdded

	err, nameAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, repositoryAuthenticationAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAuthenticationAdded

	err, repositoryGitCredentialIdAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryGitCredentialIdAdded

	err, repositoryPasswordAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryPasswordAdded

	err, repositoryReferenceNameAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryReferenceNameAdded

	err, repositoryUrlAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUrlAdded

	err, repositoryUsernameAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUsernameAdded

	err, supportRelativePathAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadSupportRelativePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || supportRelativePathAdded

	err, swarmIdAdded := retrieveStacksSwarmStackFromGitRepositoryPayloadSwarmIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || swarmIdAdded

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadAdditionalFilesFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	additionalFilesFlagName := fmt.Sprintf("%v.additionalFiles", cmdPrefix)
	if cmd.Flags().Changed(additionalFilesFlagName) {
		// warning: additionalFiles array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadAutoUpdateFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpdateFlagName := fmt.Sprintf("%v.autoUpdate", cmdPrefix)
	if cmd.Flags().Changed(autoUpdateFlagName) {
		// info: complex object autoUpdate PortainereeStackAutoUpdate is retrieved outside this Changed() block
	}
	autoUpdateFlagValue := m.AutoUpdate
	if swag.IsZero(autoUpdateFlagValue) {
		autoUpdateFlagValue = &models.PortainereeStackAutoUpdate{}
	}

	err, autoUpdateAdded := retrieveModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagValue, autoUpdateFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded
	if autoUpdateAdded {
		m.AutoUpdate = autoUpdateFlagValue
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadComposeFileFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	composeFileFlagName := fmt.Sprintf("%v.composeFile", cmdPrefix)
	if cmd.Flags().Changed(composeFileFlagName) {

		var composeFileFlagName string
		if cmdPrefix == "" {
			composeFileFlagName = "composeFile"
		} else {
			composeFileFlagName = fmt.Sprintf("%v.composeFile", cmdPrefix)
		}

		composeFileFlagValue, err := cmd.Flags().GetString(composeFileFlagName)
		if err != nil {
			return err, false
		}
		m.ComposeFile = &composeFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadEnvFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: env array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadFilesystemPathFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filesystemPathFlagName := fmt.Sprintf("%v.filesystemPath", cmdPrefix)
	if cmd.Flags().Changed(filesystemPathFlagName) {

		var filesystemPathFlagName string
		if cmdPrefix == "" {
			filesystemPathFlagName = "filesystemPath"
		} else {
			filesystemPathFlagName = fmt.Sprintf("%v.filesystemPath", cmdPrefix)
		}

		filesystemPathFlagValue, err := cmd.Flags().GetString(filesystemPathFlagName)
		if err != nil {
			return err, false
		}
		m.FilesystemPath = filesystemPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadFromAppTemplateFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fromAppTemplateFlagName := fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
	if cmd.Flags().Changed(fromAppTemplateFlagName) {

		var fromAppTemplateFlagName string
		if cmdPrefix == "" {
			fromAppTemplateFlagName = "fromAppTemplate"
		} else {
			fromAppTemplateFlagName = fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
		}

		fromAppTemplateFlagValue, err := cmd.Flags().GetBool(fromAppTemplateFlagName)
		if err != nil {
			return err, false
		}
		m.FromAppTemplate = &fromAppTemplateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadNameFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryAuthenticationFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryAuthenticationFlagName := fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	if cmd.Flags().Changed(repositoryAuthenticationFlagName) {

		var repositoryAuthenticationFlagName string
		if cmdPrefix == "" {
			repositoryAuthenticationFlagName = "repositoryAuthentication"
		} else {
			repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
		}

		repositoryAuthenticationFlagValue, err := cmd.Flags().GetBool(repositoryAuthenticationFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryAuthentication = &repositoryAuthenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryGitCredentialIDFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryGitCredentialIdFlagName := fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(repositoryGitCredentialIdFlagName) {

		var repositoryGitCredentialIdFlagName string
		if cmdPrefix == "" {
			repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
		} else {
			repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
		}

		repositoryGitCredentialIdFlagValue, err := cmd.Flags().GetInt64(repositoryGitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryGitCredentialID = repositoryGitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryPasswordFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryPasswordFlagName := fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	if cmd.Flags().Changed(repositoryPasswordFlagName) {

		var repositoryPasswordFlagName string
		if cmdPrefix == "" {
			repositoryPasswordFlagName = "repositoryPassword"
		} else {
			repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
		}

		repositoryPasswordFlagValue, err := cmd.Flags().GetString(repositoryPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryPassword = repositoryPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryReferenceNameFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryReferenceNameFlagName := fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	if cmd.Flags().Changed(repositoryReferenceNameFlagName) {

		var repositoryReferenceNameFlagName string
		if cmdPrefix == "" {
			repositoryReferenceNameFlagName = "repositoryReferenceName"
		} else {
			repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
		}

		repositoryReferenceNameFlagValue, err := cmd.Flags().GetString(repositoryReferenceNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryReferenceName = repositoryReferenceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryURLFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUrlFlagName := fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	if cmd.Flags().Changed(repositoryUrlFlagName) {

		var repositoryUrlFlagName string
		if cmdPrefix == "" {
			repositoryUrlFlagName = "repositoryURL"
		} else {
			repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
		}

		repositoryUrlFlagValue, err := cmd.Flags().GetString(repositoryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryURL = &repositoryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadRepositoryUsernameFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUsernameFlagName := fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	if cmd.Flags().Changed(repositoryUsernameFlagName) {

		var repositoryUsernameFlagName string
		if cmdPrefix == "" {
			repositoryUsernameFlagName = "repositoryUsername"
		} else {
			repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
		}

		repositoryUsernameFlagValue, err := cmd.Flags().GetString(repositoryUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryUsername = repositoryUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadSupportRelativePathFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	supportRelativePathFlagName := fmt.Sprintf("%v.supportRelativePath", cmdPrefix)
	if cmd.Flags().Changed(supportRelativePathFlagName) {

		var supportRelativePathFlagName string
		if cmdPrefix == "" {
			supportRelativePathFlagName = "supportRelativePath"
		} else {
			supportRelativePathFlagName = fmt.Sprintf("%v.supportRelativePath", cmdPrefix)
		}

		supportRelativePathFlagValue, err := cmd.Flags().GetBool(supportRelativePathFlagName)
		if err != nil {
			return err, false
		}
		m.SupportRelativePath = &supportRelativePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromGitRepositoryPayloadSwarmIDFlags(depth int, m *models.StacksSwarmStackFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	swarmIdFlagName := fmt.Sprintf("%v.swarmID", cmdPrefix)
	if cmd.Flags().Changed(swarmIdFlagName) {

		var swarmIdFlagName string
		if cmdPrefix == "" {
			swarmIdFlagName = "swarmID"
		} else {
			swarmIdFlagName = fmt.Sprintf("%v.swarmID", cmdPrefix)
		}

		swarmIdFlagValue, err := cmd.Flags().GetString(swarmIdFlagName)
		if err != nil {
			return err, false
		}
		m.SwarmID = &swarmIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
