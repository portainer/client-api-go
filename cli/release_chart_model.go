// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for ReleaseChart

// register flags to command
func registerModelReleaseChartFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReleaseChartFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseChartLock(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseChartMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseChartSchema(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseChartTemplates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseChartValues(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseChartFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: files []*ReleaseFile array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseChartLock(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lockFlagName string
	if cmdPrefix == "" {
		lockFlagName = "lock"
	} else {
		lockFlagName = fmt.Sprintf("%v.lock", cmdPrefix)
	}

	if err := registerModelReleaseLockFlags(depth+1, lockFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseChartMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metadataFlagName string
	if cmdPrefix == "" {
		metadataFlagName = "metadata"
	} else {
		metadataFlagName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	if err := registerModelReleaseMetadataFlags(depth+1, metadataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseChartSchema(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: schema []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseChartTemplates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: templates []*ReleaseFile array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseChartValues(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: values interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReleaseChartFlags(depth int, m *models.ReleaseChart, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, filesAdded := retrieveReleaseChartFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filesAdded

	err, lockAdded := retrieveReleaseChartLockFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lockAdded

	err, metadataAdded := retrieveReleaseChartMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, schemaAdded := retrieveReleaseChartSchemaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaAdded

	err, templatesAdded := retrieveReleaseChartTemplatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || templatesAdded

	err, valuesAdded := retrieveReleaseChartValuesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valuesAdded

	return nil, retAdded
}

func retrieveReleaseChartFilesFlags(depth int, m *models.ReleaseChart, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filesFlagName := fmt.Sprintf("%v.files", cmdPrefix)
	if cmd.Flags().Changed(filesFlagName) {
		// warning: files array type []*ReleaseFile is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseChartLockFlags(depth int, m *models.ReleaseChart, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lockFlagName := fmt.Sprintf("%v.lock", cmdPrefix)
	if cmd.Flags().Changed(lockFlagName) {
		// info: complex object lock ReleaseLock is retrieved outside this Changed() block
	}
	lockFlagValue := m.Lock
	if swag.IsZero(lockFlagValue) {
		lockFlagValue = &models.ReleaseLock{}
	}

	err, lockAdded := retrieveModelReleaseLockFlags(depth+1, lockFlagValue, lockFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lockAdded
	if lockAdded {
		m.Lock = lockFlagValue
	}

	return nil, retAdded
}

func retrieveReleaseChartMetadataFlags(depth int, m *models.ReleaseChart, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// info: complex object metadata ReleaseMetadata is retrieved outside this Changed() block
	}
	metadataFlagValue := m.Metadata
	if swag.IsZero(metadataFlagValue) {
		metadataFlagValue = &models.ReleaseMetadata{}
	}

	err, metadataAdded := retrieveModelReleaseMetadataFlags(depth+1, metadataFlagValue, metadataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded
	if metadataAdded {
		m.Metadata = metadataFlagValue
	}

	return nil, retAdded
}

func retrieveReleaseChartSchemaFlags(depth int, m *models.ReleaseChart, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaFlagName := fmt.Sprintf("%v.schema", cmdPrefix)
	if cmd.Flags().Changed(schemaFlagName) {
		// warning: schema array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseChartTemplatesFlags(depth int, m *models.ReleaseChart, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	templatesFlagName := fmt.Sprintf("%v.templates", cmdPrefix)
	if cmd.Flags().Changed(templatesFlagName) {
		// warning: templates array type []*ReleaseFile is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseChartValuesFlags(depth int, m *models.ReleaseChart, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valuesFlagName := fmt.Sprintf("%v.values", cmdPrefix)
	if cmd.Flags().Changed(valuesFlagName) {
		// warning: values map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
