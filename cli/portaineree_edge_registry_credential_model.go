// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeEdgeRegistryCredential

// register flags to command
func registerModelPortainereeEdgeRegistryCredentialFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEdgeRegistryCredentialSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeRegistryCredentialServerURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeRegistryCredentialUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEdgeRegistryCredentialSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	secretDescription := ``

	var secretFlagName string
	if cmdPrefix == "" {
		secretFlagName = "secret"
	} else {
		secretFlagName = fmt.Sprintf("%v.secret", cmdPrefix)
	}

	var secretFlagDefault string

	_ = cmd.PersistentFlags().String(secretFlagName, secretFlagDefault, secretDescription)

	return nil
}

func registerPortainereeEdgeRegistryCredentialServerURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverUrlDescription := ``

	var serverUrlFlagName string
	if cmdPrefix == "" {
		serverUrlFlagName = "serverURL"
	} else {
		serverUrlFlagName = fmt.Sprintf("%v.serverURL", cmdPrefix)
	}

	var serverUrlFlagDefault string

	_ = cmd.PersistentFlags().String(serverUrlFlagName, serverUrlFlagDefault, serverUrlDescription)

	return nil
}

func registerPortainereeEdgeRegistryCredentialUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEdgeRegistryCredentialFlags(depth int, m *models.PortainereeEdgeRegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, secretAdded := retrievePortainereeEdgeRegistryCredentialSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secretAdded

	err, serverUrlAdded := retrievePortainereeEdgeRegistryCredentialServerURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverUrlAdded

	err, usernameAdded := retrievePortainereeEdgeRegistryCredentialUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrievePortainereeEdgeRegistryCredentialSecretFlags(depth int, m *models.PortainereeEdgeRegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	secretFlagName := fmt.Sprintf("%v.secret", cmdPrefix)
	if cmd.Flags().Changed(secretFlagName) {

		var secretFlagName string
		if cmdPrefix == "" {
			secretFlagName = "secret"
		} else {
			secretFlagName = fmt.Sprintf("%v.secret", cmdPrefix)
		}

		secretFlagValue, err := cmd.Flags().GetString(secretFlagName)
		if err != nil {
			return err, false
		}
		m.Secret = secretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeRegistryCredentialServerURLFlags(depth int, m *models.PortainereeEdgeRegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverUrlFlagName := fmt.Sprintf("%v.serverURL", cmdPrefix)
	if cmd.Flags().Changed(serverUrlFlagName) {

		var serverUrlFlagName string
		if cmdPrefix == "" {
			serverUrlFlagName = "serverURL"
		} else {
			serverUrlFlagName = fmt.Sprintf("%v.serverURL", cmdPrefix)
		}

		serverUrlFlagValue, err := cmd.Flags().GetString(serverUrlFlagName)
		if err != nil {
			return err, false
		}
		m.ServerURL = serverUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeRegistryCredentialUsernameFlags(depth int, m *models.PortainereeEdgeRegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
