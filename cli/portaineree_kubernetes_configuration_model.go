// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeKubernetesConfiguration

// register flags to command
func registerModelPortainereeKubernetesConfigurationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeKubernetesConfigurationAllowNoneIngressClass(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationEnableResourceOverCommit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationIngressAvailabilityPerNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationIngressClasses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationResourceOverCommitPercentage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationRestrictDefaultNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationRestrictStandardUserIngressW(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationStorageClasses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationUseLoadBalancer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesConfigurationUseServerMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeKubernetesConfigurationAllowNoneIngressClass(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowNoneIngressClassDescription := ``

	var allowNoneIngressClassFlagName string
	if cmdPrefix == "" {
		allowNoneIngressClassFlagName = "AllowNoneIngressClass"
	} else {
		allowNoneIngressClassFlagName = fmt.Sprintf("%v.AllowNoneIngressClass", cmdPrefix)
	}

	var allowNoneIngressClassFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowNoneIngressClassFlagName, allowNoneIngressClassFlagDefault, allowNoneIngressClassDescription)

	return nil
}

func registerPortainereeKubernetesConfigurationEnableResourceOverCommit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableResourceOverCommitDescription := ``

	var enableResourceOverCommitFlagName string
	if cmdPrefix == "" {
		enableResourceOverCommitFlagName = "EnableResourceOverCommit"
	} else {
		enableResourceOverCommitFlagName = fmt.Sprintf("%v.EnableResourceOverCommit", cmdPrefix)
	}

	var enableResourceOverCommitFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableResourceOverCommitFlagName, enableResourceOverCommitFlagDefault, enableResourceOverCommitDescription)

	return nil
}

func registerPortainereeKubernetesConfigurationIngressAvailabilityPerNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ingressAvailabilityPerNamespaceDescription := ``

	var ingressAvailabilityPerNamespaceFlagName string
	if cmdPrefix == "" {
		ingressAvailabilityPerNamespaceFlagName = "IngressAvailabilityPerNamespace"
	} else {
		ingressAvailabilityPerNamespaceFlagName = fmt.Sprintf("%v.IngressAvailabilityPerNamespace", cmdPrefix)
	}

	var ingressAvailabilityPerNamespaceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ingressAvailabilityPerNamespaceFlagName, ingressAvailabilityPerNamespaceFlagDefault, ingressAvailabilityPerNamespaceDescription)

	return nil
}

func registerPortainereeKubernetesConfigurationIngressClasses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: IngressClasses []*PortainereeKubernetesIngressClassConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeKubernetesConfigurationResourceOverCommitPercentage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceOverCommitPercentageDescription := ``

	var resourceOverCommitPercentageFlagName string
	if cmdPrefix == "" {
		resourceOverCommitPercentageFlagName = "ResourceOverCommitPercentage"
	} else {
		resourceOverCommitPercentageFlagName = fmt.Sprintf("%v.ResourceOverCommitPercentage", cmdPrefix)
	}

	var resourceOverCommitPercentageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(resourceOverCommitPercentageFlagName, resourceOverCommitPercentageFlagDefault, resourceOverCommitPercentageDescription)

	return nil
}

func registerPortainereeKubernetesConfigurationRestrictDefaultNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restrictDefaultNamespaceDescription := ``

	var restrictDefaultNamespaceFlagName string
	if cmdPrefix == "" {
		restrictDefaultNamespaceFlagName = "RestrictDefaultNamespace"
	} else {
		restrictDefaultNamespaceFlagName = fmt.Sprintf("%v.RestrictDefaultNamespace", cmdPrefix)
	}

	var restrictDefaultNamespaceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(restrictDefaultNamespaceFlagName, restrictDefaultNamespaceFlagDefault, restrictDefaultNamespaceDescription)

	return nil
}

func registerPortainereeKubernetesConfigurationRestrictStandardUserIngressW(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restrictStandardUserIngressWDescription := ``

	var restrictStandardUserIngressWFlagName string
	if cmdPrefix == "" {
		restrictStandardUserIngressWFlagName = "RestrictStandardUserIngressW"
	} else {
		restrictStandardUserIngressWFlagName = fmt.Sprintf("%v.RestrictStandardUserIngressW", cmdPrefix)
	}

	var restrictStandardUserIngressWFlagDefault bool

	_ = cmd.PersistentFlags().Bool(restrictStandardUserIngressWFlagName, restrictStandardUserIngressWFlagDefault, restrictStandardUserIngressWDescription)

	return nil
}

func registerPortainereeKubernetesConfigurationStorageClasses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: StorageClasses []*PortainereeKubernetesStorageClassConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeKubernetesConfigurationUseLoadBalancer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useLoadBalancerDescription := ``

	var useLoadBalancerFlagName string
	if cmdPrefix == "" {
		useLoadBalancerFlagName = "UseLoadBalancer"
	} else {
		useLoadBalancerFlagName = fmt.Sprintf("%v.UseLoadBalancer", cmdPrefix)
	}

	var useLoadBalancerFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useLoadBalancerFlagName, useLoadBalancerFlagDefault, useLoadBalancerDescription)

	return nil
}

func registerPortainereeKubernetesConfigurationUseServerMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useServerMetricsDescription := ``

	var useServerMetricsFlagName string
	if cmdPrefix == "" {
		useServerMetricsFlagName = "UseServerMetrics"
	} else {
		useServerMetricsFlagName = fmt.Sprintf("%v.UseServerMetrics", cmdPrefix)
	}

	var useServerMetricsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useServerMetricsFlagName, useServerMetricsFlagDefault, useServerMetricsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeKubernetesConfigurationFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allowNoneIngressClassAdded := retrievePortainereeKubernetesConfigurationAllowNoneIngressClassFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowNoneIngressClassAdded

	err, enableResourceOverCommitAdded := retrievePortainereeKubernetesConfigurationEnableResourceOverCommitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableResourceOverCommitAdded

	err, ingressAvailabilityPerNamespaceAdded := retrievePortainereeKubernetesConfigurationIngressAvailabilityPerNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingressAvailabilityPerNamespaceAdded

	err, ingressClassesAdded := retrievePortainereeKubernetesConfigurationIngressClassesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingressClassesAdded

	err, resourceOverCommitPercentageAdded := retrievePortainereeKubernetesConfigurationResourceOverCommitPercentageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceOverCommitPercentageAdded

	err, restrictDefaultNamespaceAdded := retrievePortainereeKubernetesConfigurationRestrictDefaultNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restrictDefaultNamespaceAdded

	err, restrictStandardUserIngressWAdded := retrievePortainereeKubernetesConfigurationRestrictStandardUserIngressWFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restrictStandardUserIngressWAdded

	err, storageClassesAdded := retrievePortainereeKubernetesConfigurationStorageClassesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageClassesAdded

	err, useLoadBalancerAdded := retrievePortainereeKubernetesConfigurationUseLoadBalancerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useLoadBalancerAdded

	err, useServerMetricsAdded := retrievePortainereeKubernetesConfigurationUseServerMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useServerMetricsAdded

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationAllowNoneIngressClassFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowNoneIngressClassFlagName := fmt.Sprintf("%v.AllowNoneIngressClass", cmdPrefix)
	if cmd.Flags().Changed(allowNoneIngressClassFlagName) {

		var allowNoneIngressClassFlagName string
		if cmdPrefix == "" {
			allowNoneIngressClassFlagName = "AllowNoneIngressClass"
		} else {
			allowNoneIngressClassFlagName = fmt.Sprintf("%v.AllowNoneIngressClass", cmdPrefix)
		}

		allowNoneIngressClassFlagValue, err := cmd.Flags().GetBool(allowNoneIngressClassFlagName)
		if err != nil {
			return err, false
		}
		m.AllowNoneIngressClass = &allowNoneIngressClassFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationEnableResourceOverCommitFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableResourceOverCommitFlagName := fmt.Sprintf("%v.EnableResourceOverCommit", cmdPrefix)
	if cmd.Flags().Changed(enableResourceOverCommitFlagName) {

		var enableResourceOverCommitFlagName string
		if cmdPrefix == "" {
			enableResourceOverCommitFlagName = "EnableResourceOverCommit"
		} else {
			enableResourceOverCommitFlagName = fmt.Sprintf("%v.EnableResourceOverCommit", cmdPrefix)
		}

		enableResourceOverCommitFlagValue, err := cmd.Flags().GetBool(enableResourceOverCommitFlagName)
		if err != nil {
			return err, false
		}
		m.EnableResourceOverCommit = &enableResourceOverCommitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationIngressAvailabilityPerNamespaceFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ingressAvailabilityPerNamespaceFlagName := fmt.Sprintf("%v.IngressAvailabilityPerNamespace", cmdPrefix)
	if cmd.Flags().Changed(ingressAvailabilityPerNamespaceFlagName) {

		var ingressAvailabilityPerNamespaceFlagName string
		if cmdPrefix == "" {
			ingressAvailabilityPerNamespaceFlagName = "IngressAvailabilityPerNamespace"
		} else {
			ingressAvailabilityPerNamespaceFlagName = fmt.Sprintf("%v.IngressAvailabilityPerNamespace", cmdPrefix)
		}

		ingressAvailabilityPerNamespaceFlagValue, err := cmd.Flags().GetBool(ingressAvailabilityPerNamespaceFlagName)
		if err != nil {
			return err, false
		}
		m.IngressAvailabilityPerNamespace = &ingressAvailabilityPerNamespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationIngressClassesFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ingressClassesFlagName := fmt.Sprintf("%v.IngressClasses", cmdPrefix)
	if cmd.Flags().Changed(ingressClassesFlagName) {
		// warning: IngressClasses array type []*PortainereeKubernetesIngressClassConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationResourceOverCommitPercentageFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceOverCommitPercentageFlagName := fmt.Sprintf("%v.ResourceOverCommitPercentage", cmdPrefix)
	if cmd.Flags().Changed(resourceOverCommitPercentageFlagName) {

		var resourceOverCommitPercentageFlagName string
		if cmdPrefix == "" {
			resourceOverCommitPercentageFlagName = "ResourceOverCommitPercentage"
		} else {
			resourceOverCommitPercentageFlagName = fmt.Sprintf("%v.ResourceOverCommitPercentage", cmdPrefix)
		}

		resourceOverCommitPercentageFlagValue, err := cmd.Flags().GetInt64(resourceOverCommitPercentageFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceOverCommitPercentage = resourceOverCommitPercentageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationRestrictDefaultNamespaceFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	restrictDefaultNamespaceFlagName := fmt.Sprintf("%v.RestrictDefaultNamespace", cmdPrefix)
	if cmd.Flags().Changed(restrictDefaultNamespaceFlagName) {

		var restrictDefaultNamespaceFlagName string
		if cmdPrefix == "" {
			restrictDefaultNamespaceFlagName = "RestrictDefaultNamespace"
		} else {
			restrictDefaultNamespaceFlagName = fmt.Sprintf("%v.RestrictDefaultNamespace", cmdPrefix)
		}

		restrictDefaultNamespaceFlagValue, err := cmd.Flags().GetBool(restrictDefaultNamespaceFlagName)
		if err != nil {
			return err, false
		}
		m.RestrictDefaultNamespace = &restrictDefaultNamespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationRestrictStandardUserIngressWFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	restrictStandardUserIngressWFlagName := fmt.Sprintf("%v.RestrictStandardUserIngressW", cmdPrefix)
	if cmd.Flags().Changed(restrictStandardUserIngressWFlagName) {

		var restrictStandardUserIngressWFlagName string
		if cmdPrefix == "" {
			restrictStandardUserIngressWFlagName = "RestrictStandardUserIngressW"
		} else {
			restrictStandardUserIngressWFlagName = fmt.Sprintf("%v.RestrictStandardUserIngressW", cmdPrefix)
		}

		restrictStandardUserIngressWFlagValue, err := cmd.Flags().GetBool(restrictStandardUserIngressWFlagName)
		if err != nil {
			return err, false
		}
		m.RestrictStandardUserIngressW = &restrictStandardUserIngressWFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationStorageClassesFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageClassesFlagName := fmt.Sprintf("%v.StorageClasses", cmdPrefix)
	if cmd.Flags().Changed(storageClassesFlagName) {
		// warning: StorageClasses array type []*PortainereeKubernetesStorageClassConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationUseLoadBalancerFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useLoadBalancerFlagName := fmt.Sprintf("%v.UseLoadBalancer", cmdPrefix)
	if cmd.Flags().Changed(useLoadBalancerFlagName) {

		var useLoadBalancerFlagName string
		if cmdPrefix == "" {
			useLoadBalancerFlagName = "UseLoadBalancer"
		} else {
			useLoadBalancerFlagName = fmt.Sprintf("%v.UseLoadBalancer", cmdPrefix)
		}

		useLoadBalancerFlagValue, err := cmd.Flags().GetBool(useLoadBalancerFlagName)
		if err != nil {
			return err, false
		}
		m.UseLoadBalancer = &useLoadBalancerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesConfigurationUseServerMetricsFlags(depth int, m *models.PortainereeKubernetesConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useServerMetricsFlagName := fmt.Sprintf("%v.UseServerMetrics", cmdPrefix)
	if cmd.Flags().Changed(useServerMetricsFlagName) {

		var useServerMetricsFlagName string
		if cmdPrefix == "" {
			useServerMetricsFlagName = "UseServerMetrics"
		} else {
			useServerMetricsFlagName = fmt.Sprintf("%v.UseServerMetrics", cmdPrefix)
		}

		useServerMetricsFlagValue, err := cmd.Flags().GetBool(useServerMetricsFlagName)
		if err != nil {
			return err, false
		}
		m.UseServerMetrics = &useServerMetricsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
