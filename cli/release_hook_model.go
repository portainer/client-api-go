// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for ReleaseHook

// register flags to command
func registerModelReleaseHookFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReleaseHookDeletePolicies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookEvents(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookKind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookLastRun(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookManifest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookWeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseHookDeletePolicies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: delete_policies []string array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseHookEvents(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: events []string array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseHookKind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kindDescription := `Kind is the Kubernetes kind.`

	var kindFlagName string
	if cmdPrefix == "" {
		kindFlagName = "kind"
	} else {
		kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
	}

	var kindFlagDefault string

	_ = cmd.PersistentFlags().String(kindFlagName, kindFlagDefault, kindDescription)

	return nil
}

func registerReleaseHookLastRun(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lastRunFlagName string
	if cmdPrefix == "" {
		lastRunFlagName = "last_run"
	} else {
		lastRunFlagName = fmt.Sprintf("%v.last_run", cmdPrefix)
	}

	if err := registerModelReleaseHookExecutionFlags(depth+1, lastRunFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseHookManifest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	manifestDescription := `Manifest is the manifest contents.`

	var manifestFlagName string
	if cmdPrefix == "" {
		manifestFlagName = "manifest"
	} else {
		manifestFlagName = fmt.Sprintf("%v.manifest", cmdPrefix)
	}

	var manifestFlagDefault string

	_ = cmd.PersistentFlags().String(manifestFlagName, manifestFlagDefault, manifestDescription)

	return nil
}

func registerReleaseHookName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerReleaseHookPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := `Path is the chart-relative path to the template.`

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func registerReleaseHookWeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	weightDescription := `Weight indicates the sort order for execution among similar Hook type`

	var weightFlagName string
	if cmdPrefix == "" {
		weightFlagName = "weight"
	} else {
		weightFlagName = fmt.Sprintf("%v.weight", cmdPrefix)
	}

	var weightFlagDefault int64

	_ = cmd.PersistentFlags().Int64(weightFlagName, weightFlagDefault, weightDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReleaseHookFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deletePoliciesAdded := retrieveReleaseHookDeletePoliciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletePoliciesAdded

	err, eventsAdded := retrieveReleaseHookEventsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eventsAdded

	err, kindAdded := retrieveReleaseHookKindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kindAdded

	err, lastRunAdded := retrieveReleaseHookLastRunFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastRunAdded

	err, manifestAdded := retrieveReleaseHookManifestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || manifestAdded

	err, nameAdded := retrieveReleaseHookNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pathAdded := retrieveReleaseHookPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	err, weightAdded := retrieveReleaseHookWeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || weightAdded

	return nil, retAdded
}

func retrieveReleaseHookDeletePoliciesFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletePoliciesFlagName := fmt.Sprintf("%v.delete_policies", cmdPrefix)
	if cmd.Flags().Changed(deletePoliciesFlagName) {
		// warning: delete_policies array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseHookEventsFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eventsFlagName := fmt.Sprintf("%v.events", cmdPrefix)
	if cmd.Flags().Changed(eventsFlagName) {
		// warning: events array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseHookKindFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kindFlagName := fmt.Sprintf("%v.kind", cmdPrefix)
	if cmd.Flags().Changed(kindFlagName) {

		var kindFlagName string
		if cmdPrefix == "" {
			kindFlagName = "kind"
		} else {
			kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
		}

		kindFlagValue, err := cmd.Flags().GetString(kindFlagName)
		if err != nil {
			return err, false
		}
		m.Kind = kindFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseHookLastRunFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastRunFlagName := fmt.Sprintf("%v.last_run", cmdPrefix)
	if cmd.Flags().Changed(lastRunFlagName) {
		// info: complex object last_run ReleaseHookExecution is retrieved outside this Changed() block
	}
	lastRunFlagValue := m.LastRun
	if swag.IsZero(lastRunFlagValue) {
		lastRunFlagValue = &models.ReleaseHookExecution{}
	}

	err, lastRunAdded := retrieveModelReleaseHookExecutionFlags(depth+1, lastRunFlagValue, lastRunFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastRunAdded
	if lastRunAdded {
		m.LastRun = lastRunFlagValue
	}

	return nil, retAdded
}

func retrieveReleaseHookManifestFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	manifestFlagName := fmt.Sprintf("%v.manifest", cmdPrefix)
	if cmd.Flags().Changed(manifestFlagName) {

		var manifestFlagName string
		if cmdPrefix == "" {
			manifestFlagName = "manifest"
		} else {
			manifestFlagName = fmt.Sprintf("%v.manifest", cmdPrefix)
		}

		manifestFlagValue, err := cmd.Flags().GetString(manifestFlagName)
		if err != nil {
			return err, false
		}
		m.Manifest = manifestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseHookNameFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseHookPathFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathFlagName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseHookWeightFlags(depth int, m *models.ReleaseHook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	weightFlagName := fmt.Sprintf("%v.weight", cmdPrefix)
	if cmd.Flags().Changed(weightFlagName) {

		var weightFlagName string
		if cmdPrefix == "" {
			weightFlagName = "weight"
		} else {
			weightFlagName = fmt.Sprintf("%v.weight", cmdPrefix)
		}

		weightFlagValue, err := cmd.Flags().GetInt64(weightFlagName)
		if err != nil {
			return err, false
		}
		m.Weight = weightFlagValue

		retAdded = true
	}

	return nil, retAdded
}
