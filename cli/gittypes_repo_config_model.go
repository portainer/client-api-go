// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for GittypesRepoConfig

// register flags to command
func registerModelGittypesRepoConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGittypesRepoConfigAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGittypesRepoConfigConfigFilePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGittypesRepoConfigConfigHash(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGittypesRepoConfigReferenceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGittypesRepoConfigURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGittypesRepoConfigAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
	}

	if err := registerModelGittypesGitAuthenticationFlags(depth+1, authenticationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGittypesRepoConfigConfigFilePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	configFilePathDescription := `Path to where the config file is in this url/refName`

	var configFilePathFlagName string
	if cmdPrefix == "" {
		configFilePathFlagName = "configFilePath"
	} else {
		configFilePathFlagName = fmt.Sprintf("%v.configFilePath", cmdPrefix)
	}

	var configFilePathFlagDefault string

	_ = cmd.PersistentFlags().String(configFilePathFlagName, configFilePathFlagDefault, configFilePathDescription)

	return nil
}

func registerGittypesRepoConfigConfigHash(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	configHashDescription := `Repository hash`

	var configHashFlagName string
	if cmdPrefix == "" {
		configHashFlagName = "configHash"
	} else {
		configHashFlagName = fmt.Sprintf("%v.configHash", cmdPrefix)
	}

	var configHashFlagDefault string

	_ = cmd.PersistentFlags().String(configHashFlagName, configHashFlagDefault, configHashDescription)

	return nil
}

func registerGittypesRepoConfigReferenceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	referenceNameDescription := `The reference name`

	var referenceNameFlagName string
	if cmdPrefix == "" {
		referenceNameFlagName = "referenceName"
	} else {
		referenceNameFlagName = fmt.Sprintf("%v.referenceName", cmdPrefix)
	}

	var referenceNameFlagDefault string

	_ = cmd.PersistentFlags().String(referenceNameFlagName, referenceNameFlagDefault, referenceNameDescription)

	return nil
}

func registerGittypesRepoConfigURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `The repo url`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGittypesRepoConfigFlags(depth int, m *models.GittypesRepoConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authenticationAdded := retrieveGittypesRepoConfigAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, configFilePathAdded := retrieveGittypesRepoConfigConfigFilePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configFilePathAdded

	err, configHashAdded := retrieveGittypesRepoConfigConfigHashFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configHashAdded

	err, referenceNameAdded := retrieveGittypesRepoConfigReferenceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || referenceNameAdded

	err, urlAdded := retrieveGittypesRepoConfigURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	return nil, retAdded
}

func retrieveGittypesRepoConfigAuthenticationFlags(depth int, m *models.GittypesRepoConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {
		// info: complex object authentication GittypesGitAuthentication is retrieved outside this Changed() block
	}
	authenticationFlagValue := m.Authentication
	if swag.IsZero(authenticationFlagValue) {
		authenticationFlagValue = &models.GittypesGitAuthentication{}
	}

	err, authenticationAdded := retrieveModelGittypesGitAuthenticationFlags(depth+1, authenticationFlagValue, authenticationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded
	if authenticationAdded {
		m.Authentication = authenticationFlagValue
	}

	return nil, retAdded
}

func retrieveGittypesRepoConfigConfigFilePathFlags(depth int, m *models.GittypesRepoConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configFilePathFlagName := fmt.Sprintf("%v.configFilePath", cmdPrefix)
	if cmd.Flags().Changed(configFilePathFlagName) {

		var configFilePathFlagName string
		if cmdPrefix == "" {
			configFilePathFlagName = "configFilePath"
		} else {
			configFilePathFlagName = fmt.Sprintf("%v.configFilePath", cmdPrefix)
		}

		configFilePathFlagValue, err := cmd.Flags().GetString(configFilePathFlagName)
		if err != nil {
			return err, false
		}
		m.ConfigFilePath = configFilePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGittypesRepoConfigConfigHashFlags(depth int, m *models.GittypesRepoConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configHashFlagName := fmt.Sprintf("%v.configHash", cmdPrefix)
	if cmd.Flags().Changed(configHashFlagName) {

		var configHashFlagName string
		if cmdPrefix == "" {
			configHashFlagName = "configHash"
		} else {
			configHashFlagName = fmt.Sprintf("%v.configHash", cmdPrefix)
		}

		configHashFlagValue, err := cmd.Flags().GetString(configHashFlagName)
		if err != nil {
			return err, false
		}
		m.ConfigHash = configHashFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGittypesRepoConfigReferenceNameFlags(depth int, m *models.GittypesRepoConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	referenceNameFlagName := fmt.Sprintf("%v.referenceName", cmdPrefix)
	if cmd.Flags().Changed(referenceNameFlagName) {

		var referenceNameFlagName string
		if cmdPrefix == "" {
			referenceNameFlagName = "referenceName"
		} else {
			referenceNameFlagName = fmt.Sprintf("%v.referenceName", cmdPrefix)
		}

		referenceNameFlagValue, err := cmd.Flags().GetString(referenceNameFlagName)
		if err != nil {
			return err, false
		}
		m.ReferenceName = referenceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGittypesRepoConfigURLFlags(depth int, m *models.GittypesRepoConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
