// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for ModelsK8sApplication

// register flags to command
func registerModelModelsK8sApplicationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModelsK8sApplicationKind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsK8sApplicationLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsK8sApplicationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsK8sApplicationNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsK8sApplicationUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModelsK8sApplicationKind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kindDescription := ``

	var kindFlagName string
	if cmdPrefix == "" {
		kindFlagName = "kind"
	} else {
		kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
	}

	var kindFlagDefault string

	_ = cmd.PersistentFlags().String(kindFlagName, kindFlagDefault, kindDescription)

	return nil
}

func registerModelsK8sApplicationLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerModelsK8sApplicationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerModelsK8sApplicationNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerModelsK8sApplicationUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uidDescription := ``

	var uidFlagName string
	if cmdPrefix == "" {
		uidFlagName = "uid"
	} else {
		uidFlagName = fmt.Sprintf("%v.uid", cmdPrefix)
	}

	var uidFlagDefault string

	_ = cmd.PersistentFlags().String(uidFlagName, uidFlagDefault, uidDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModelsK8sApplicationFlags(depth int, m *models.ModelsK8sApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, kindAdded := retrieveModelsK8sApplicationKindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kindAdded

	err, labelsAdded := retrieveModelsK8sApplicationLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, nameAdded := retrieveModelsK8sApplicationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveModelsK8sApplicationNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, uidAdded := retrieveModelsK8sApplicationUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uidAdded

	return nil, retAdded
}

func retrieveModelsK8sApplicationKindFlags(depth int, m *models.ModelsK8sApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kindFlagName := fmt.Sprintf("%v.kind", cmdPrefix)
	if cmd.Flags().Changed(kindFlagName) {

		var kindFlagName string
		if cmdPrefix == "" {
			kindFlagName = "kind"
		} else {
			kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
		}

		kindFlagValue, err := cmd.Flags().GetString(kindFlagName)
		if err != nil {
			return err, false
		}
		m.Kind = kindFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModelsK8sApplicationLabelsFlags(depth int, m *models.ModelsK8sApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	labelsFlagName := fmt.Sprintf("%v.labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModelsK8sApplicationNameFlags(depth int, m *models.ModelsK8sApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModelsK8sApplicationNamespaceFlags(depth int, m *models.ModelsK8sApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModelsK8sApplicationUIDFlags(depth int, m *models.ModelsK8sApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uidFlagName := fmt.Sprintf("%v.uid", cmdPrefix)
	if cmd.Flags().Changed(uidFlagName) {

		var uidFlagName string
		if cmdPrefix == "" {
			uidFlagName = "uid"
		} else {
			uidFlagName = fmt.Sprintf("%v.uid", cmdPrefix)
		}

		uidFlagValue, err := cmd.Flags().GetString(uidFlagName)
		if err != nil {
			return err, false
		}
		m.UID = uidFlagValue

		retAdded = true
	}

	return nil, retAdded
}
