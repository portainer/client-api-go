// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/webhooks"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationWebhooksGetWebhooksCmd returns a cmd to handle operation getWebhooks
func makeOperationWebhooksGetWebhooksCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetWebhooks",
		Short: `**Access policy**: authenticated`,
		RunE:  runOperationWebhooksGetWebhooks,
	}

	if err := registerOperationWebhooksGetWebhooksParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWebhooksGetWebhooks uses cmd flags to call endpoint api
func runOperationWebhooksGetWebhooks(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := webhooks.NewGetWebhooksParams()
	if err, _ := retrieveOperationWebhooksGetWebhooksEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebhooksGetWebhooksResourceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWebhooksGetWebhooksResult(appCli.Webhooks.GetWebhooks(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationWebhooksGetWebhooksParamFlags registers all flags needed to fill params
func registerOperationWebhooksGetWebhooksParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWebhooksGetWebhooksEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebhooksGetWebhooksResourceIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWebhooksGetWebhooksEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "EndpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationWebhooksGetWebhooksResourceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	resourceIdDescription := ``

	var resourceIdFlagName string
	if cmdPrefix == "" {
		resourceIdFlagName = "ResourceID"
	} else {
		resourceIdFlagName = fmt.Sprintf("%v.ResourceID", cmdPrefix)
	}

	var resourceIdFlagDefault string

	_ = cmd.PersistentFlags().String(resourceIdFlagName, resourceIdFlagDefault, resourceIdDescription)

	return nil
}

func retrieveOperationWebhooksGetWebhooksEndpointIDFlag(m *webhooks.GetWebhooksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("EndpointID") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "EndpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = &endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebhooksGetWebhooksResourceIDFlag(m *webhooks.GetWebhooksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("ResourceID") {

		var resourceIdFlagName string
		if cmdPrefix == "" {
			resourceIdFlagName = "ResourceID"
		} else {
			resourceIdFlagName = fmt.Sprintf("%v.ResourceID", cmdPrefix)
		}

		resourceIdFlagValue, err := cmd.Flags().GetString(resourceIdFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceID = &resourceIdFlagValue

	}
	return nil, retAdded
}

// parseOperationWebhooksGetWebhooksResult parses request result and return the string content
func parseOperationWebhooksGetWebhooksResult(resp0 *webhooks.GetWebhooksOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*webhooks.GetWebhooksOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getWebhooksBadRequest is not supported

		// Non schema case: warning getWebhooksInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
