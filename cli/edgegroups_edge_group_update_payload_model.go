// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EdgegroupsEdgeGroupUpdatePayload

// register flags to command
func registerModelEdgegroupsEdgeGroupUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEdgegroupsEdgeGroupUpdatePayloadDynamic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsEdgeGroupUpdatePayloadEndpoints(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsEdgeGroupUpdatePayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsEdgeGroupUpdatePayloadPartialMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsEdgeGroupUpdatePayloadTagIDs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEdgegroupsEdgeGroupUpdatePayloadDynamic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dynamicDescription := ``

	var dynamicFlagName string
	if cmdPrefix == "" {
		dynamicFlagName = "dynamic"
	} else {
		dynamicFlagName = fmt.Sprintf("%v.dynamic", cmdPrefix)
	}

	var dynamicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dynamicFlagName, dynamicFlagDefault, dynamicDescription)

	return nil
}

func registerEdgegroupsEdgeGroupUpdatePayloadEndpoints(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: endpoints []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgegroupsEdgeGroupUpdatePayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEdgegroupsEdgeGroupUpdatePayloadPartialMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	partialMatchDescription := ``

	var partialMatchFlagName string
	if cmdPrefix == "" {
		partialMatchFlagName = "partialMatch"
	} else {
		partialMatchFlagName = fmt.Sprintf("%v.partialMatch", cmdPrefix)
	}

	var partialMatchFlagDefault bool

	_ = cmd.PersistentFlags().Bool(partialMatchFlagName, partialMatchFlagDefault, partialMatchDescription)

	return nil
}

func registerEdgegroupsEdgeGroupUpdatePayloadTagIDs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tagIDs []int64 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEdgegroupsEdgeGroupUpdatePayloadFlags(depth int, m *models.EdgegroupsEdgeGroupUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dynamicAdded := retrieveEdgegroupsEdgeGroupUpdatePayloadDynamicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dynamicAdded

	err, endpointsAdded := retrieveEdgegroupsEdgeGroupUpdatePayloadEndpointsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointsAdded

	err, nameAdded := retrieveEdgegroupsEdgeGroupUpdatePayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, partialMatchAdded := retrieveEdgegroupsEdgeGroupUpdatePayloadPartialMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partialMatchAdded

	err, tagIDsAdded := retrieveEdgegroupsEdgeGroupUpdatePayloadTagIDsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagIDsAdded

	return nil, retAdded
}

func retrieveEdgegroupsEdgeGroupUpdatePayloadDynamicFlags(depth int, m *models.EdgegroupsEdgeGroupUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dynamicFlagName := fmt.Sprintf("%v.dynamic", cmdPrefix)
	if cmd.Flags().Changed(dynamicFlagName) {

		var dynamicFlagName string
		if cmdPrefix == "" {
			dynamicFlagName = "dynamic"
		} else {
			dynamicFlagName = fmt.Sprintf("%v.dynamic", cmdPrefix)
		}

		dynamicFlagValue, err := cmd.Flags().GetBool(dynamicFlagName)
		if err != nil {
			return err, false
		}
		m.Dynamic = &dynamicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsEdgeGroupUpdatePayloadEndpointsFlags(depth int, m *models.EdgegroupsEdgeGroupUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointsFlagName := fmt.Sprintf("%v.endpoints", cmdPrefix)
	if cmd.Flags().Changed(endpointsFlagName) {
		// warning: endpoints array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgegroupsEdgeGroupUpdatePayloadNameFlags(depth int, m *models.EdgegroupsEdgeGroupUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsEdgeGroupUpdatePayloadPartialMatchFlags(depth int, m *models.EdgegroupsEdgeGroupUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partialMatchFlagName := fmt.Sprintf("%v.partialMatch", cmdPrefix)
	if cmd.Flags().Changed(partialMatchFlagName) {

		var partialMatchFlagName string
		if cmdPrefix == "" {
			partialMatchFlagName = "partialMatch"
		} else {
			partialMatchFlagName = fmt.Sprintf("%v.partialMatch", cmdPrefix)
		}

		partialMatchFlagValue, err := cmd.Flags().GetBool(partialMatchFlagName)
		if err != nil {
			return err, false
		}
		m.PartialMatch = &partialMatchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsEdgeGroupUpdatePayloadTagIDsFlags(depth int, m *models.EdgegroupsEdgeGroupUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagIDsFlagName := fmt.Sprintf("%v.tagIDs", cmdPrefix)
	if cmd.Flags().Changed(tagIDsFlagName) {
		// warning: tagIDs array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
