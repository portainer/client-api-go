// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for CustomtemplatesCustomTemplateFromGitRepositoryPayload

// register flags to command
func registerModelCustomtemplatesCustomTemplateFromGitRepositoryPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadComposeFilePathInRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadLogo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryReferenceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadVariables(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadComposeFilePathInRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	composeFilePathInRepositoryDescription := `Path to the Stack file inside the Git repository`

	var composeFilePathInRepositoryFlagName string
	if cmdPrefix == "" {
		composeFilePathInRepositoryFlagName = "composeFilePathInRepository"
	} else {
		composeFilePathInRepositoryFlagName = fmt.Sprintf("%v.composeFilePathInRepository", cmdPrefix)
	}

	var composeFilePathInRepositoryFlagDefault string = "docker-compose.yml"

	_ = cmd.PersistentFlags().String(composeFilePathInRepositoryFlagName, composeFilePathInRepositoryFlagDefault, composeFilePathInRepositoryDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Required. Description of the template`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadLogo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoDescription := `URL of the template's logo`

	var logoFlagName string
	if cmdPrefix == "" {
		logoFlagName = "logo"
	} else {
		logoFlagName = fmt.Sprintf("%v.logo", cmdPrefix)
	}

	var logoFlagDefault string

	_ = cmd.PersistentFlags().String(logoFlagName, logoFlagDefault, logoDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noteDescription := `A note that will be displayed in the UI. Supports HTML content`

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "note"
	} else {
		noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformDescription := `Enum: [1,2]. Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks`

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	var platformFlagDefault int64

	_ = cmd.PersistentFlags().Int64(platformFlagName, platformFlagDefault, platformDescription)

	if err := cmd.RegisterFlagCompletionFunc(platformFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryAuthenticationDescription := `Use basic authentication to clone the Git repository`

	var repositoryAuthenticationFlagName string
	if cmdPrefix == "" {
		repositoryAuthenticationFlagName = "repositoryAuthentication"
	} else {
		repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	}

	var repositoryAuthenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(repositoryAuthenticationFlagName, repositoryAuthenticationFlagDefault, repositoryAuthenticationDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryGitCredentialIdDescription := `GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication
is true and RepositoryUsername/RepositoryPassword are not provided`

	var repositoryGitCredentialIdFlagName string
	if cmdPrefix == "" {
		repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
	} else {
		repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	}

	var repositoryGitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repositoryGitCredentialIdFlagName, repositoryGitCredentialIdFlagDefault, repositoryGitCredentialIdDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryPasswordDescription := `Password used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0`

	var repositoryPasswordFlagName string
	if cmdPrefix == "" {
		repositoryPasswordFlagName = "repositoryPassword"
	} else {
		repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	}

	var repositoryPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryPasswordFlagName, repositoryPasswordFlagDefault, repositoryPasswordDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryReferenceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryReferenceNameDescription := `Reference name of a Git repository hosting the Stack file`

	var repositoryReferenceNameFlagName string
	if cmdPrefix == "" {
		repositoryReferenceNameFlagName = "repositoryReferenceName"
	} else {
		repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	}

	var repositoryReferenceNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryReferenceNameFlagName, repositoryReferenceNameFlagDefault, repositoryReferenceNameDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUrlDescription := `Required. URL of a Git repository hosting the Stack file`

	var repositoryUrlFlagName string
	if cmdPrefix == "" {
		repositoryUrlFlagName = "repositoryURL"
	} else {
		repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	}

	var repositoryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUrlFlagName, repositoryUrlFlagDefault, repositoryUrlDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUsernameDescription := `Username used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0`

	var repositoryUsernameFlagName string
	if cmdPrefix == "" {
		repositoryUsernameFlagName = "repositoryUsername"
	} else {
		repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	}

	var repositoryUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUsernameFlagName, repositoryUsernameFlagDefault, repositoryUsernameDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := `Required. Title of the template`

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "title"
	} else {
		titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: [1,2]. Required. Type of created stack (1 - swarm, 2 - compose)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerCustomtemplatesCustomTemplateFromGitRepositoryPayloadVariables(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: variables []*PortainereeCustomTemplateVariableDefinition array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCustomtemplatesCustomTemplateFromGitRepositoryPayloadFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, composeFilePathInRepositoryAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadComposeFilePathInRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || composeFilePathInRepositoryAdded

	err, descriptionAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, logoAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadLogoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoAdded

	err, noteAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noteAdded

	err, platformAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	err, repositoryAuthenticationAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAuthenticationAdded

	err, repositoryGitCredentialIdAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryGitCredentialIdAdded

	err, repositoryPasswordAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryPasswordAdded

	err, repositoryReferenceNameAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryReferenceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryReferenceNameAdded

	err, repositoryUrlAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUrlAdded

	err, repositoryUsernameAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUsernameAdded

	err, titleAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	err, typeAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, variablesAdded := retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadVariablesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || variablesAdded

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadComposeFilePathInRepositoryFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	composeFilePathInRepositoryFlagName := fmt.Sprintf("%v.composeFilePathInRepository", cmdPrefix)
	if cmd.Flags().Changed(composeFilePathInRepositoryFlagName) {

		var composeFilePathInRepositoryFlagName string
		if cmdPrefix == "" {
			composeFilePathInRepositoryFlagName = "composeFilePathInRepository"
		} else {
			composeFilePathInRepositoryFlagName = fmt.Sprintf("%v.composeFilePathInRepository", cmdPrefix)
		}

		composeFilePathInRepositoryFlagValue, err := cmd.Flags().GetString(composeFilePathInRepositoryFlagName)
		if err != nil {
			return err, false
		}
		m.ComposeFilePathInRepository = &composeFilePathInRepositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadDescriptionFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadLogoFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoFlagName := fmt.Sprintf("%v.logo", cmdPrefix)
	if cmd.Flags().Changed(logoFlagName) {

		var logoFlagName string
		if cmdPrefix == "" {
			logoFlagName = "logo"
		} else {
			logoFlagName = fmt.Sprintf("%v.logo", cmdPrefix)
		}

		logoFlagValue, err := cmd.Flags().GetString(logoFlagName)
		if err != nil {
			return err, false
		}
		m.Logo = logoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadNoteFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noteFlagName := fmt.Sprintf("%v.note", cmdPrefix)
	if cmd.Flags().Changed(noteFlagName) {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "note"
		} else {
			noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = noteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatformFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformFlagName := fmt.Sprintf("%v.platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {

		var platformFlagName string
		if cmdPrefix == "" {
			platformFlagName = "platform"
		} else {
			platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
		}

		platformFlagValue, err := cmd.Flags().GetInt64(platformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = platformFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryAuthenticationFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryAuthenticationFlagName := fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	if cmd.Flags().Changed(repositoryAuthenticationFlagName) {

		var repositoryAuthenticationFlagName string
		if cmdPrefix == "" {
			repositoryAuthenticationFlagName = "repositoryAuthentication"
		} else {
			repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
		}

		repositoryAuthenticationFlagValue, err := cmd.Flags().GetBool(repositoryAuthenticationFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryAuthentication = &repositoryAuthenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryGitCredentialIDFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryGitCredentialIdFlagName := fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(repositoryGitCredentialIdFlagName) {

		var repositoryGitCredentialIdFlagName string
		if cmdPrefix == "" {
			repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
		} else {
			repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
		}

		repositoryGitCredentialIdFlagValue, err := cmd.Flags().GetInt64(repositoryGitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryGitCredentialID = repositoryGitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryPasswordFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryPasswordFlagName := fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	if cmd.Flags().Changed(repositoryPasswordFlagName) {

		var repositoryPasswordFlagName string
		if cmdPrefix == "" {
			repositoryPasswordFlagName = "repositoryPassword"
		} else {
			repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
		}

		repositoryPasswordFlagValue, err := cmd.Flags().GetString(repositoryPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryPassword = repositoryPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryReferenceNameFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryReferenceNameFlagName := fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	if cmd.Flags().Changed(repositoryReferenceNameFlagName) {

		var repositoryReferenceNameFlagName string
		if cmdPrefix == "" {
			repositoryReferenceNameFlagName = "repositoryReferenceName"
		} else {
			repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
		}

		repositoryReferenceNameFlagValue, err := cmd.Flags().GetString(repositoryReferenceNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryReferenceName = repositoryReferenceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryURLFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUrlFlagName := fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	if cmd.Flags().Changed(repositoryUrlFlagName) {

		var repositoryUrlFlagName string
		if cmdPrefix == "" {
			repositoryUrlFlagName = "repositoryURL"
		} else {
			repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
		}

		repositoryUrlFlagValue, err := cmd.Flags().GetString(repositoryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryURL = &repositoryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadRepositoryUsernameFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUsernameFlagName := fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	if cmd.Flags().Changed(repositoryUsernameFlagName) {

		var repositoryUsernameFlagName string
		if cmdPrefix == "" {
			repositoryUsernameFlagName = "repositoryUsername"
		} else {
			repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
		}

		repositoryUsernameFlagValue, err := cmd.Flags().GetString(repositoryUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryUsername = repositoryUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadTitleFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "title"
		} else {
			titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = &titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadTypeFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCustomtemplatesCustomTemplateFromGitRepositoryPayloadVariablesFlags(depth int, m *models.CustomtemplatesCustomTemplateFromGitRepositoryPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	variablesFlagName := fmt.Sprintf("%v.variables", cmdPrefix)
	if cmd.Flags().Changed(variablesFlagName) {
		// warning: variables array type []*PortainereeCustomTemplateVariableDefinition is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
