// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeEdgeStack

// register flags to command
func registerModelPortainereeEdgeStackFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEdgeStackCreationDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackDeploymentType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackEdgeGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackEntryPoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackManifestPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackNumDeployments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackPrePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackProjectPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackPrune(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackRePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackRegistries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackEdgeUpdateID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackScheduledTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeStackUseManifestNamespaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEdgeStackCreationDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationDateDescription := ``

	var creationDateFlagName string
	if cmdPrefix == "" {
		creationDateFlagName = "CreationDate"
	} else {
		creationDateFlagName = fmt.Sprintf("%v.CreationDate", cmdPrefix)
	}

	var creationDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(creationDateFlagName, creationDateFlagDefault, creationDateDescription)

	return nil
}

func registerPortainereeEdgeStackDeploymentType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deploymentTypeDescription := `Deployment type to deploy this stack
Valid values are: 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
kubernetes deploy type is enabled only for kubernetes environments(endpoints)
nomad deploy type is enabled only for nomad environments(endpoints)`

	var deploymentTypeFlagName string
	if cmdPrefix == "" {
		deploymentTypeFlagName = "DeploymentType"
	} else {
		deploymentTypeFlagName = fmt.Sprintf("%v.DeploymentType", cmdPrefix)
	}

	var deploymentTypeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(deploymentTypeFlagName, deploymentTypeFlagDefault, deploymentTypeDescription)

	return nil
}

func registerPortainereeEdgeStackEdgeGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: EdgeGroups []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEdgeStackEntryPoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entryPointDescription := ``

	var entryPointFlagName string
	if cmdPrefix == "" {
		entryPointFlagName = "EntryPoint"
	} else {
		entryPointFlagName = fmt.Sprintf("%v.EntryPoint", cmdPrefix)
	}

	var entryPointFlagDefault string

	_ = cmd.PersistentFlags().String(entryPointFlagName, entryPointFlagDefault, entryPointDescription)

	return nil
}

func registerPortainereeEdgeStackID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `EdgeStack Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeEdgeStackManifestPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	manifestPathDescription := ``

	var manifestPathFlagName string
	if cmdPrefix == "" {
		manifestPathFlagName = "ManifestPath"
	} else {
		manifestPathFlagName = fmt.Sprintf("%v.ManifestPath", cmdPrefix)
	}

	var manifestPathFlagDefault string

	_ = cmd.PersistentFlags().String(manifestPathFlagName, manifestPathFlagDefault, manifestPathDescription)

	return nil
}

func registerPortainereeEdgeStackName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeEdgeStackNumDeployments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numDeploymentsDescription := ``

	var numDeploymentsFlagName string
	if cmdPrefix == "" {
		numDeploymentsFlagName = "NumDeployments"
	} else {
		numDeploymentsFlagName = fmt.Sprintf("%v.NumDeployments", cmdPrefix)
	}

	var numDeploymentsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(numDeploymentsFlagName, numDeploymentsFlagDefault, numDeploymentsDescription)

	return nil
}

func registerPortainereeEdgeStackPrePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prePullImageDescription := `Pre Pull Image`

	var prePullImageFlagName string
	if cmdPrefix == "" {
		prePullImageFlagName = "PrePullImage"
	} else {
		prePullImageFlagName = fmt.Sprintf("%v.PrePullImage", cmdPrefix)
	}

	var prePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(prePullImageFlagName, prePullImageFlagDefault, prePullImageDescription)

	return nil
}

func registerPortainereeEdgeStackProjectPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectPathDescription := ``

	var projectPathFlagName string
	if cmdPrefix == "" {
		projectPathFlagName = "ProjectPath"
	} else {
		projectPathFlagName = fmt.Sprintf("%v.ProjectPath", cmdPrefix)
	}

	var projectPathFlagDefault string

	_ = cmd.PersistentFlags().String(projectPathFlagName, projectPathFlagDefault, projectPathDescription)

	return nil
}

func registerPortainereeEdgeStackPrune(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pruneDescription := `Deprecated`

	var pruneFlagName string
	if cmdPrefix == "" {
		pruneFlagName = "Prune"
	} else {
		pruneFlagName = fmt.Sprintf("%v.Prune", cmdPrefix)
	}

	var pruneFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pruneFlagName, pruneFlagDefault, pruneDescription)

	return nil
}

func registerPortainereeEdgeStackRePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rePullImageDescription := `Re-Pull Image`

	var rePullImageFlagName string
	if cmdPrefix == "" {
		rePullImageFlagName = "RePullImage"
	} else {
		rePullImageFlagName = fmt.Sprintf("%v.RePullImage", cmdPrefix)
	}

	var rePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rePullImageFlagName, rePullImageFlagDefault, rePullImageDescription)

	return nil
}

func registerPortainereeEdgeStackRegistries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Registries []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEdgeStackStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Status map[string]PortainerEdgeStackStatus map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeEdgeStackVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "Version"
	} else {
		versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerPortainereeEdgeStackEdgeUpdateID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeUpdateIdDescription := `EdgeUpdateID represents the parent update ID, will be zero if this stack is not part of an update`

	var edgeUpdateIdFlagName string
	if cmdPrefix == "" {
		edgeUpdateIdFlagName = "edgeUpdateID"
	} else {
		edgeUpdateIdFlagName = fmt.Sprintf("%v.edgeUpdateID", cmdPrefix)
	}

	var edgeUpdateIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeUpdateIdFlagName, edgeUpdateIdFlagDefault, edgeUpdateIdDescription)

	return nil
}

func registerPortainereeEdgeStackScheduledTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scheduledTimeDescription := `Schedule represents the schedule of the Edge stack (optional, format - 'YYYY-MM-DD HH:mm:ss')`

	var scheduledTimeFlagName string
	if cmdPrefix == "" {
		scheduledTimeFlagName = "scheduledTime"
	} else {
		scheduledTimeFlagName = fmt.Sprintf("%v.scheduledTime", cmdPrefix)
	}

	var scheduledTimeFlagDefault string

	_ = cmd.PersistentFlags().String(scheduledTimeFlagName, scheduledTimeFlagDefault, scheduledTimeDescription)

	return nil
}

func registerPortainereeEdgeStackUseManifestNamespaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useManifestNamespacesDescription := `Uses the manifest's namespaces instead of the default one`

	var useManifestNamespacesFlagName string
	if cmdPrefix == "" {
		useManifestNamespacesFlagName = "useManifestNamespaces"
	} else {
		useManifestNamespacesFlagName = fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
	}

	var useManifestNamespacesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useManifestNamespacesFlagName, useManifestNamespacesFlagDefault, useManifestNamespacesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEdgeStackFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationDateAdded := retrievePortainereeEdgeStackCreationDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationDateAdded

	err, deploymentTypeAdded := retrievePortainereeEdgeStackDeploymentTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentTypeAdded

	err, edgeGroupsAdded := retrievePortainereeEdgeStackEdgeGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeGroupsAdded

	err, entryPointAdded := retrievePortainereeEdgeStackEntryPointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entryPointAdded

	err, idAdded := retrievePortainereeEdgeStackIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, manifestPathAdded := retrievePortainereeEdgeStackManifestPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || manifestPathAdded

	err, nameAdded := retrievePortainereeEdgeStackNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, numDeploymentsAdded := retrievePortainereeEdgeStackNumDeploymentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numDeploymentsAdded

	err, prePullImageAdded := retrievePortainereeEdgeStackPrePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prePullImageAdded

	err, projectPathAdded := retrievePortainereeEdgeStackProjectPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectPathAdded

	err, pruneAdded := retrievePortainereeEdgeStackPruneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pruneAdded

	err, rePullImageAdded := retrievePortainereeEdgeStackRePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rePullImageAdded

	err, registriesAdded := retrievePortainereeEdgeStackRegistriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registriesAdded

	err, statusAdded := retrievePortainereeEdgeStackStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, versionAdded := retrievePortainereeEdgeStackVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, edgeUpdateIdAdded := retrievePortainereeEdgeStackEdgeUpdateIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeUpdateIdAdded

	err, scheduledTimeAdded := retrievePortainereeEdgeStackScheduledTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduledTimeAdded

	err, useManifestNamespacesAdded := retrievePortainereeEdgeStackUseManifestNamespacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useManifestNamespacesAdded

	return nil, retAdded
}

func retrievePortainereeEdgeStackCreationDateFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationDateFlagName := fmt.Sprintf("%v.CreationDate", cmdPrefix)
	if cmd.Flags().Changed(creationDateFlagName) {

		var creationDateFlagName string
		if cmdPrefix == "" {
			creationDateFlagName = "CreationDate"
		} else {
			creationDateFlagName = fmt.Sprintf("%v.CreationDate", cmdPrefix)
		}

		creationDateFlagValue, err := cmd.Flags().GetInt64(creationDateFlagName)
		if err != nil {
			return err, false
		}
		m.CreationDate = creationDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackDeploymentTypeFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deploymentTypeFlagName := fmt.Sprintf("%v.DeploymentType", cmdPrefix)
	if cmd.Flags().Changed(deploymentTypeFlagName) {

		var deploymentTypeFlagName string
		if cmdPrefix == "" {
			deploymentTypeFlagName = "DeploymentType"
		} else {
			deploymentTypeFlagName = fmt.Sprintf("%v.DeploymentType", cmdPrefix)
		}

		deploymentTypeFlagValue, err := cmd.Flags().GetInt64(deploymentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DeploymentType = deploymentTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackEdgeGroupsFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeGroupsFlagName := fmt.Sprintf("%v.EdgeGroups", cmdPrefix)
	if cmd.Flags().Changed(edgeGroupsFlagName) {
		// warning: EdgeGroups array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackEntryPointFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entryPointFlagName := fmt.Sprintf("%v.EntryPoint", cmdPrefix)
	if cmd.Flags().Changed(entryPointFlagName) {

		var entryPointFlagName string
		if cmdPrefix == "" {
			entryPointFlagName = "EntryPoint"
		} else {
			entryPointFlagName = fmt.Sprintf("%v.EntryPoint", cmdPrefix)
		}

		entryPointFlagValue, err := cmd.Flags().GetString(entryPointFlagName)
		if err != nil {
			return err, false
		}
		m.EntryPoint = entryPointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackIDFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackManifestPathFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	manifestPathFlagName := fmt.Sprintf("%v.ManifestPath", cmdPrefix)
	if cmd.Flags().Changed(manifestPathFlagName) {

		var manifestPathFlagName string
		if cmdPrefix == "" {
			manifestPathFlagName = "ManifestPath"
		} else {
			manifestPathFlagName = fmt.Sprintf("%v.ManifestPath", cmdPrefix)
		}

		manifestPathFlagValue, err := cmd.Flags().GetString(manifestPathFlagName)
		if err != nil {
			return err, false
		}
		m.ManifestPath = manifestPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackNameFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackNumDeploymentsFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numDeploymentsFlagName := fmt.Sprintf("%v.NumDeployments", cmdPrefix)
	if cmd.Flags().Changed(numDeploymentsFlagName) {

		var numDeploymentsFlagName string
		if cmdPrefix == "" {
			numDeploymentsFlagName = "NumDeployments"
		} else {
			numDeploymentsFlagName = fmt.Sprintf("%v.NumDeployments", cmdPrefix)
		}

		numDeploymentsFlagValue, err := cmd.Flags().GetInt64(numDeploymentsFlagName)
		if err != nil {
			return err, false
		}
		m.NumDeployments = numDeploymentsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackPrePullImageFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prePullImageFlagName := fmt.Sprintf("%v.PrePullImage", cmdPrefix)
	if cmd.Flags().Changed(prePullImageFlagName) {

		var prePullImageFlagName string
		if cmdPrefix == "" {
			prePullImageFlagName = "PrePullImage"
		} else {
			prePullImageFlagName = fmt.Sprintf("%v.PrePullImage", cmdPrefix)
		}

		prePullImageFlagValue, err := cmd.Flags().GetBool(prePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.PrePullImage = &prePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackProjectPathFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectPathFlagName := fmt.Sprintf("%v.ProjectPath", cmdPrefix)
	if cmd.Flags().Changed(projectPathFlagName) {

		var projectPathFlagName string
		if cmdPrefix == "" {
			projectPathFlagName = "ProjectPath"
		} else {
			projectPathFlagName = fmt.Sprintf("%v.ProjectPath", cmdPrefix)
		}

		projectPathFlagValue, err := cmd.Flags().GetString(projectPathFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectPath = projectPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackPruneFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pruneFlagName := fmt.Sprintf("%v.Prune", cmdPrefix)
	if cmd.Flags().Changed(pruneFlagName) {

		var pruneFlagName string
		if cmdPrefix == "" {
			pruneFlagName = "Prune"
		} else {
			pruneFlagName = fmt.Sprintf("%v.Prune", cmdPrefix)
		}

		pruneFlagValue, err := cmd.Flags().GetBool(pruneFlagName)
		if err != nil {
			return err, false
		}
		m.Prune = &pruneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackRePullImageFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rePullImageFlagName := fmt.Sprintf("%v.RePullImage", cmdPrefix)
	if cmd.Flags().Changed(rePullImageFlagName) {

		var rePullImageFlagName string
		if cmdPrefix == "" {
			rePullImageFlagName = "RePullImage"
		} else {
			rePullImageFlagName = fmt.Sprintf("%v.RePullImage", cmdPrefix)
		}

		rePullImageFlagValue, err := cmd.Flags().GetBool(rePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.RePullImage = &rePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackRegistriesFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registriesFlagName := fmt.Sprintf("%v.Registries", cmdPrefix)
	if cmd.Flags().Changed(registriesFlagName) {
		// warning: Registries array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackStatusFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {
		// warning: Status map type map[string]PortainerEdgeStackStatus is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackVersionFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "Version"
		} else {
			versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackEdgeUpdateIDFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeUpdateIdFlagName := fmt.Sprintf("%v.edgeUpdateID", cmdPrefix)
	if cmd.Flags().Changed(edgeUpdateIdFlagName) {

		var edgeUpdateIdFlagName string
		if cmdPrefix == "" {
			edgeUpdateIdFlagName = "edgeUpdateID"
		} else {
			edgeUpdateIdFlagName = fmt.Sprintf("%v.edgeUpdateID", cmdPrefix)
		}

		edgeUpdateIdFlagValue, err := cmd.Flags().GetInt64(edgeUpdateIdFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeUpdateID = edgeUpdateIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackScheduledTimeFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduledTimeFlagName := fmt.Sprintf("%v.scheduledTime", cmdPrefix)
	if cmd.Flags().Changed(scheduledTimeFlagName) {

		var scheduledTimeFlagName string
		if cmdPrefix == "" {
			scheduledTimeFlagName = "scheduledTime"
		} else {
			scheduledTimeFlagName = fmt.Sprintf("%v.scheduledTime", cmdPrefix)
		}

		scheduledTimeFlagValue, err := cmd.Flags().GetString(scheduledTimeFlagName)
		if err != nil {
			return err, false
		}
		m.ScheduledTime = scheduledTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeStackUseManifestNamespacesFlags(depth int, m *models.PortainereeEdgeStack, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useManifestNamespacesFlagName := fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
	if cmd.Flags().Changed(useManifestNamespacesFlagName) {

		var useManifestNamespacesFlagName string
		if cmdPrefix == "" {
			useManifestNamespacesFlagName = "useManifestNamespaces"
		} else {
			useManifestNamespacesFlagName = fmt.Sprintf("%v.useManifestNamespaces", cmdPrefix)
		}

		useManifestNamespacesFlagValue, err := cmd.Flags().GetBool(useManifestNamespacesFlagName)
		if err != nil {
			return err, false
		}
		m.UseManifestNamespaces = &useManifestNamespacesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
