// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeKubernetesSnapshot

// register flags to command
func registerModelPortainereeKubernetesSnapshotFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeKubernetesSnapshotKubernetesVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesSnapshotNodeCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesSnapshotTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesSnapshotTotalCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesSnapshotTotalMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeKubernetesSnapshotKubernetesVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubernetesVersionDescription := ``

	var kubernetesVersionFlagName string
	if cmdPrefix == "" {
		kubernetesVersionFlagName = "KubernetesVersion"
	} else {
		kubernetesVersionFlagName = fmt.Sprintf("%v.KubernetesVersion", cmdPrefix)
	}

	var kubernetesVersionFlagDefault string

	_ = cmd.PersistentFlags().String(kubernetesVersionFlagName, kubernetesVersionFlagDefault, kubernetesVersionDescription)

	return nil
}

func registerPortainereeKubernetesSnapshotNodeCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeCountDescription := ``

	var nodeCountFlagName string
	if cmdPrefix == "" {
		nodeCountFlagName = "NodeCount"
	} else {
		nodeCountFlagName = fmt.Sprintf("%v.NodeCount", cmdPrefix)
	}

	var nodeCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodeCountFlagName, nodeCountFlagDefault, nodeCountDescription)

	return nil
}

func registerPortainereeKubernetesSnapshotTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeDescription := ``

	var timeFlagName string
	if cmdPrefix == "" {
		timeFlagName = "Time"
	} else {
		timeFlagName = fmt.Sprintf("%v.Time", cmdPrefix)
	}

	var timeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeFlagName, timeFlagDefault, timeDescription)

	return nil
}

func registerPortainereeKubernetesSnapshotTotalCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalCpuDescription := ``

	var totalCpuFlagName string
	if cmdPrefix == "" {
		totalCpuFlagName = "TotalCPU"
	} else {
		totalCpuFlagName = fmt.Sprintf("%v.TotalCPU", cmdPrefix)
	}

	var totalCpuFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalCpuFlagName, totalCpuFlagDefault, totalCpuDescription)

	return nil
}

func registerPortainereeKubernetesSnapshotTotalMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalMemoryDescription := ``

	var totalMemoryFlagName string
	if cmdPrefix == "" {
		totalMemoryFlagName = "TotalMemory"
	} else {
		totalMemoryFlagName = fmt.Sprintf("%v.TotalMemory", cmdPrefix)
	}

	var totalMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalMemoryFlagName, totalMemoryFlagDefault, totalMemoryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeKubernetesSnapshotFlags(depth int, m *models.PortainereeKubernetesSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, kubernetesVersionAdded := retrievePortainereeKubernetesSnapshotKubernetesVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubernetesVersionAdded

	err, nodeCountAdded := retrievePortainereeKubernetesSnapshotNodeCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeCountAdded

	err, timeAdded := retrievePortainereeKubernetesSnapshotTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeAdded

	err, totalCpuAdded := retrievePortainereeKubernetesSnapshotTotalCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalCpuAdded

	err, totalMemoryAdded := retrievePortainereeKubernetesSnapshotTotalMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalMemoryAdded

	return nil, retAdded
}

func retrievePortainereeKubernetesSnapshotKubernetesVersionFlags(depth int, m *models.PortainereeKubernetesSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubernetesVersionFlagName := fmt.Sprintf("%v.KubernetesVersion", cmdPrefix)
	if cmd.Flags().Changed(kubernetesVersionFlagName) {

		var kubernetesVersionFlagName string
		if cmdPrefix == "" {
			kubernetesVersionFlagName = "KubernetesVersion"
		} else {
			kubernetesVersionFlagName = fmt.Sprintf("%v.KubernetesVersion", cmdPrefix)
		}

		kubernetesVersionFlagValue, err := cmd.Flags().GetString(kubernetesVersionFlagName)
		if err != nil {
			return err, false
		}
		m.KubernetesVersion = kubernetesVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesSnapshotNodeCountFlags(depth int, m *models.PortainereeKubernetesSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeCountFlagName := fmt.Sprintf("%v.NodeCount", cmdPrefix)
	if cmd.Flags().Changed(nodeCountFlagName) {

		var nodeCountFlagName string
		if cmdPrefix == "" {
			nodeCountFlagName = "NodeCount"
		} else {
			nodeCountFlagName = fmt.Sprintf("%v.NodeCount", cmdPrefix)
		}

		nodeCountFlagValue, err := cmd.Flags().GetInt64(nodeCountFlagName)
		if err != nil {
			return err, false
		}
		m.NodeCount = nodeCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesSnapshotTimeFlags(depth int, m *models.PortainereeKubernetesSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFlagName := fmt.Sprintf("%v.Time", cmdPrefix)
	if cmd.Flags().Changed(timeFlagName) {

		var timeFlagName string
		if cmdPrefix == "" {
			timeFlagName = "Time"
		} else {
			timeFlagName = fmt.Sprintf("%v.Time", cmdPrefix)
		}

		timeFlagValue, err := cmd.Flags().GetInt64(timeFlagName)
		if err != nil {
			return err, false
		}
		m.Time = timeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesSnapshotTotalCPUFlags(depth int, m *models.PortainereeKubernetesSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalCpuFlagName := fmt.Sprintf("%v.TotalCPU", cmdPrefix)
	if cmd.Flags().Changed(totalCpuFlagName) {

		var totalCpuFlagName string
		if cmdPrefix == "" {
			totalCpuFlagName = "TotalCPU"
		} else {
			totalCpuFlagName = fmt.Sprintf("%v.TotalCPU", cmdPrefix)
		}

		totalCpuFlagValue, err := cmd.Flags().GetInt64(totalCpuFlagName)
		if err != nil {
			return err, false
		}
		m.TotalCPU = totalCpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesSnapshotTotalMemoryFlags(depth int, m *models.PortainereeKubernetesSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalMemoryFlagName := fmt.Sprintf("%v.TotalMemory", cmdPrefix)
	if cmd.Flags().Changed(totalMemoryFlagName) {

		var totalMemoryFlagName string
		if cmdPrefix == "" {
			totalMemoryFlagName = "TotalMemory"
		} else {
			totalMemoryFlagName = fmt.Sprintf("%v.TotalMemory", cmdPrefix)
		}

		totalMemoryFlagValue, err := cmd.Flags().GetInt64(totalMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.TotalMemory = totalMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}
