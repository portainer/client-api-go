// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeKubernetesStorageClassConfig

// register flags to command
func registerModelPortainereeKubernetesStorageClassConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeKubernetesStorageClassConfigAccessModes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesStorageClassConfigAllowVolumeExpansion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesStorageClassConfigName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeKubernetesStorageClassConfigProvisioner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeKubernetesStorageClassConfigAccessModes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: AccessModes []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeKubernetesStorageClassConfigAllowVolumeExpansion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowVolumeExpansionDescription := ``

	var allowVolumeExpansionFlagName string
	if cmdPrefix == "" {
		allowVolumeExpansionFlagName = "AllowVolumeExpansion"
	} else {
		allowVolumeExpansionFlagName = fmt.Sprintf("%v.AllowVolumeExpansion", cmdPrefix)
	}

	var allowVolumeExpansionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowVolumeExpansionFlagName, allowVolumeExpansionFlagDefault, allowVolumeExpansionDescription)

	return nil
}

func registerPortainereeKubernetesStorageClassConfigName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortainereeKubernetesStorageClassConfigProvisioner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	provisionerDescription := ``

	var provisionerFlagName string
	if cmdPrefix == "" {
		provisionerFlagName = "Provisioner"
	} else {
		provisionerFlagName = fmt.Sprintf("%v.Provisioner", cmdPrefix)
	}

	var provisionerFlagDefault string

	_ = cmd.PersistentFlags().String(provisionerFlagName, provisionerFlagDefault, provisionerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeKubernetesStorageClassConfigFlags(depth int, m *models.PortainereeKubernetesStorageClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessModesAdded := retrievePortainereeKubernetesStorageClassConfigAccessModesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessModesAdded

	err, allowVolumeExpansionAdded := retrievePortainereeKubernetesStorageClassConfigAllowVolumeExpansionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowVolumeExpansionAdded

	err, nameAdded := retrievePortainereeKubernetesStorageClassConfigNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, provisionerAdded := retrievePortainereeKubernetesStorageClassConfigProvisionerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || provisionerAdded

	return nil, retAdded
}

func retrievePortainereeKubernetesStorageClassConfigAccessModesFlags(depth int, m *models.PortainereeKubernetesStorageClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessModesFlagName := fmt.Sprintf("%v.AccessModes", cmdPrefix)
	if cmd.Flags().Changed(accessModesFlagName) {
		// warning: AccessModes array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesStorageClassConfigAllowVolumeExpansionFlags(depth int, m *models.PortainereeKubernetesStorageClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowVolumeExpansionFlagName := fmt.Sprintf("%v.AllowVolumeExpansion", cmdPrefix)
	if cmd.Flags().Changed(allowVolumeExpansionFlagName) {

		var allowVolumeExpansionFlagName string
		if cmdPrefix == "" {
			allowVolumeExpansionFlagName = "AllowVolumeExpansion"
		} else {
			allowVolumeExpansionFlagName = fmt.Sprintf("%v.AllowVolumeExpansion", cmdPrefix)
		}

		allowVolumeExpansionFlagValue, err := cmd.Flags().GetBool(allowVolumeExpansionFlagName)
		if err != nil {
			return err, false
		}
		m.AllowVolumeExpansion = &allowVolumeExpansionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesStorageClassConfigNameFlags(depth int, m *models.PortainereeKubernetesStorageClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeKubernetesStorageClassConfigProvisionerFlags(depth int, m *models.PortainereeKubernetesStorageClassConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	provisionerFlagName := fmt.Sprintf("%v.Provisioner", cmdPrefix)
	if cmd.Flags().Changed(provisionerFlagName) {

		var provisionerFlagName string
		if cmdPrefix == "" {
			provisionerFlagName = "Provisioner"
		} else {
			provisionerFlagName = fmt.Sprintf("%v.Provisioner", cmdPrefix)
		}

		provisionerFlagValue, err := cmd.Flags().GetString(provisionerFlagName)
		if err != nil {
			return err, false
		}
		m.Provisioner = provisionerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
