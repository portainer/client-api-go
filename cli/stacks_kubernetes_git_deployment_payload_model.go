// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for StacksKubernetesGitDeploymentPayload

// register flags to command
func registerModelStacksKubernetesGitDeploymentPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksKubernetesGitDeploymentPayloadAdditionalFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadAutoUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadComposeFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadManifestFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadRepositoryAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadRepositoryGitCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadRepositoryPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadRepositoryReferenceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadRepositoryUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesGitDeploymentPayloadStackName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadAdditionalFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: additionalFiles []string array type is not supported by go-swagger cli yet

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadAutoUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var autoUpdateFlagName string
	if cmdPrefix == "" {
		autoUpdateFlagName = "autoUpdate"
	} else {
		autoUpdateFlagName = fmt.Sprintf("%v.autoUpdate", cmdPrefix)
	}

	if err := registerModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadComposeFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	composeFormatDescription := ``

	var composeFormatFlagName string
	if cmdPrefix == "" {
		composeFormatFlagName = "composeFormat"
	} else {
		composeFormatFlagName = fmt.Sprintf("%v.composeFormat", cmdPrefix)
	}

	var composeFormatFlagDefault bool

	_ = cmd.PersistentFlags().Bool(composeFormatFlagName, composeFormatFlagDefault, composeFormatDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadManifestFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	manifestFileDescription := ``

	var manifestFileFlagName string
	if cmdPrefix == "" {
		manifestFileFlagName = "manifestFile"
	} else {
		manifestFileFlagName = fmt.Sprintf("%v.manifestFile", cmdPrefix)
	}

	var manifestFileFlagDefault string

	_ = cmd.PersistentFlags().String(manifestFileFlagName, manifestFileFlagDefault, manifestFileDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadRepositoryAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryAuthenticationDescription := ``

	var repositoryAuthenticationFlagName string
	if cmdPrefix == "" {
		repositoryAuthenticationFlagName = "repositoryAuthentication"
	} else {
		repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	}

	var repositoryAuthenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(repositoryAuthenticationFlagName, repositoryAuthenticationFlagDefault, repositoryAuthenticationDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadRepositoryGitCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryGitCredentialIdDescription := ``

	var repositoryGitCredentialIdFlagName string
	if cmdPrefix == "" {
		repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
	} else {
		repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	}

	var repositoryGitCredentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repositoryGitCredentialIdFlagName, repositoryGitCredentialIdFlagDefault, repositoryGitCredentialIdDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadRepositoryPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryPasswordDescription := ``

	var repositoryPasswordFlagName string
	if cmdPrefix == "" {
		repositoryPasswordFlagName = "repositoryPassword"
	} else {
		repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	}

	var repositoryPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryPasswordFlagName, repositoryPasswordFlagDefault, repositoryPasswordDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadRepositoryReferenceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryReferenceNameDescription := ``

	var repositoryReferenceNameFlagName string
	if cmdPrefix == "" {
		repositoryReferenceNameFlagName = "repositoryReferenceName"
	} else {
		repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	}

	var repositoryReferenceNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryReferenceNameFlagName, repositoryReferenceNameFlagDefault, repositoryReferenceNameDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUrlDescription := ``

	var repositoryUrlFlagName string
	if cmdPrefix == "" {
		repositoryUrlFlagName = "repositoryURL"
	} else {
		repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	}

	var repositoryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUrlFlagName, repositoryUrlFlagDefault, repositoryUrlDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadRepositoryUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUsernameDescription := ``

	var repositoryUsernameFlagName string
	if cmdPrefix == "" {
		repositoryUsernameFlagName = "repositoryUsername"
	} else {
		repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	}

	var repositoryUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUsernameFlagName, repositoryUsernameFlagDefault, repositoryUsernameDescription)

	return nil
}

func registerStacksKubernetesGitDeploymentPayloadStackName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackNameDescription := ``

	var stackNameFlagName string
	if cmdPrefix == "" {
		stackNameFlagName = "stackName"
	} else {
		stackNameFlagName = fmt.Sprintf("%v.stackName", cmdPrefix)
	}

	var stackNameFlagDefault string

	_ = cmd.PersistentFlags().String(stackNameFlagName, stackNameFlagDefault, stackNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksKubernetesGitDeploymentPayloadFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, additionalFilesAdded := retrieveStacksKubernetesGitDeploymentPayloadAdditionalFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || additionalFilesAdded

	err, autoUpdateAdded := retrieveStacksKubernetesGitDeploymentPayloadAutoUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded

	err, composeFormatAdded := retrieveStacksKubernetesGitDeploymentPayloadComposeFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || composeFormatAdded

	err, manifestFileAdded := retrieveStacksKubernetesGitDeploymentPayloadManifestFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || manifestFileAdded

	err, namespaceAdded := retrieveStacksKubernetesGitDeploymentPayloadNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, repositoryAuthenticationAdded := retrieveStacksKubernetesGitDeploymentPayloadRepositoryAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAuthenticationAdded

	err, repositoryGitCredentialIdAdded := retrieveStacksKubernetesGitDeploymentPayloadRepositoryGitCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryGitCredentialIdAdded

	err, repositoryPasswordAdded := retrieveStacksKubernetesGitDeploymentPayloadRepositoryPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryPasswordAdded

	err, repositoryReferenceNameAdded := retrieveStacksKubernetesGitDeploymentPayloadRepositoryReferenceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryReferenceNameAdded

	err, repositoryUrlAdded := retrieveStacksKubernetesGitDeploymentPayloadRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUrlAdded

	err, repositoryUsernameAdded := retrieveStacksKubernetesGitDeploymentPayloadRepositoryUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUsernameAdded

	err, stackNameAdded := retrieveStacksKubernetesGitDeploymentPayloadStackNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackNameAdded

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadAdditionalFilesFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	additionalFilesFlagName := fmt.Sprintf("%v.additionalFiles", cmdPrefix)
	if cmd.Flags().Changed(additionalFilesFlagName) {
		// warning: additionalFiles array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadAutoUpdateFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpdateFlagName := fmt.Sprintf("%v.autoUpdate", cmdPrefix)
	if cmd.Flags().Changed(autoUpdateFlagName) {
		// info: complex object autoUpdate PortainereeStackAutoUpdate is retrieved outside this Changed() block
	}
	autoUpdateFlagValue := m.AutoUpdate
	if swag.IsZero(autoUpdateFlagValue) {
		autoUpdateFlagValue = &models.PortainereeStackAutoUpdate{}
	}

	err, autoUpdateAdded := retrieveModelPortainereeStackAutoUpdateFlags(depth+1, autoUpdateFlagValue, autoUpdateFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpdateAdded
	if autoUpdateAdded {
		m.AutoUpdate = autoUpdateFlagValue
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadComposeFormatFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	composeFormatFlagName := fmt.Sprintf("%v.composeFormat", cmdPrefix)
	if cmd.Flags().Changed(composeFormatFlagName) {

		var composeFormatFlagName string
		if cmdPrefix == "" {
			composeFormatFlagName = "composeFormat"
		} else {
			composeFormatFlagName = fmt.Sprintf("%v.composeFormat", cmdPrefix)
		}

		composeFormatFlagValue, err := cmd.Flags().GetBool(composeFormatFlagName)
		if err != nil {
			return err, false
		}
		m.ComposeFormat = &composeFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadManifestFileFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	manifestFileFlagName := fmt.Sprintf("%v.manifestFile", cmdPrefix)
	if cmd.Flags().Changed(manifestFileFlagName) {

		var manifestFileFlagName string
		if cmdPrefix == "" {
			manifestFileFlagName = "manifestFile"
		} else {
			manifestFileFlagName = fmt.Sprintf("%v.manifestFile", cmdPrefix)
		}

		manifestFileFlagValue, err := cmd.Flags().GetString(manifestFileFlagName)
		if err != nil {
			return err, false
		}
		m.ManifestFile = manifestFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadNamespaceFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadRepositoryAuthenticationFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryAuthenticationFlagName := fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
	if cmd.Flags().Changed(repositoryAuthenticationFlagName) {

		var repositoryAuthenticationFlagName string
		if cmdPrefix == "" {
			repositoryAuthenticationFlagName = "repositoryAuthentication"
		} else {
			repositoryAuthenticationFlagName = fmt.Sprintf("%v.repositoryAuthentication", cmdPrefix)
		}

		repositoryAuthenticationFlagValue, err := cmd.Flags().GetBool(repositoryAuthenticationFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryAuthentication = &repositoryAuthenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadRepositoryGitCredentialIDFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryGitCredentialIdFlagName := fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
	if cmd.Flags().Changed(repositoryGitCredentialIdFlagName) {

		var repositoryGitCredentialIdFlagName string
		if cmdPrefix == "" {
			repositoryGitCredentialIdFlagName = "repositoryGitCredentialID"
		} else {
			repositoryGitCredentialIdFlagName = fmt.Sprintf("%v.repositoryGitCredentialID", cmdPrefix)
		}

		repositoryGitCredentialIdFlagValue, err := cmd.Flags().GetInt64(repositoryGitCredentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryGitCredentialID = repositoryGitCredentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadRepositoryPasswordFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryPasswordFlagName := fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
	if cmd.Flags().Changed(repositoryPasswordFlagName) {

		var repositoryPasswordFlagName string
		if cmdPrefix == "" {
			repositoryPasswordFlagName = "repositoryPassword"
		} else {
			repositoryPasswordFlagName = fmt.Sprintf("%v.repositoryPassword", cmdPrefix)
		}

		repositoryPasswordFlagValue, err := cmd.Flags().GetString(repositoryPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryPassword = repositoryPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadRepositoryReferenceNameFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryReferenceNameFlagName := fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
	if cmd.Flags().Changed(repositoryReferenceNameFlagName) {

		var repositoryReferenceNameFlagName string
		if cmdPrefix == "" {
			repositoryReferenceNameFlagName = "repositoryReferenceName"
		} else {
			repositoryReferenceNameFlagName = fmt.Sprintf("%v.repositoryReferenceName", cmdPrefix)
		}

		repositoryReferenceNameFlagValue, err := cmd.Flags().GetString(repositoryReferenceNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryReferenceName = repositoryReferenceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadRepositoryURLFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUrlFlagName := fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	if cmd.Flags().Changed(repositoryUrlFlagName) {

		var repositoryUrlFlagName string
		if cmdPrefix == "" {
			repositoryUrlFlagName = "repositoryURL"
		} else {
			repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
		}

		repositoryUrlFlagValue, err := cmd.Flags().GetString(repositoryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryURL = repositoryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadRepositoryUsernameFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUsernameFlagName := fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
	if cmd.Flags().Changed(repositoryUsernameFlagName) {

		var repositoryUsernameFlagName string
		if cmdPrefix == "" {
			repositoryUsernameFlagName = "repositoryUsername"
		} else {
			repositoryUsernameFlagName = fmt.Sprintf("%v.repositoryUsername", cmdPrefix)
		}

		repositoryUsernameFlagValue, err := cmd.Flags().GetString(repositoryUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryUsername = repositoryUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesGitDeploymentPayloadStackNameFlags(depth int, m *models.StacksKubernetesGitDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackNameFlagName := fmt.Sprintf("%v.stackName", cmdPrefix)
	if cmd.Flags().Changed(stackNameFlagName) {

		var stackNameFlagName string
		if cmdPrefix == "" {
			stackNameFlagName = "stackName"
		} else {
			stackNameFlagName = fmt.Sprintf("%v.stackName", cmdPrefix)
		}

		stackNameFlagValue, err := cmd.Flags().GetString(stackNameFlagName)
		if err != nil {
			return err, false
		}
		m.StackName = stackNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
