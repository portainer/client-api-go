// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeNomadSnapshot

// register flags to command
func registerModelPortainereeNomadSnapshotFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeNomadSnapshotGroupCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotJobCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotJobs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotNodeCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotNomadVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotRunningTaskCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTaskCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTotalCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeNomadSnapshotTotalMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeNomadSnapshotGroupCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupCountDescription := ``

	var groupCountFlagName string
	if cmdPrefix == "" {
		groupCountFlagName = "GroupCount"
	} else {
		groupCountFlagName = fmt.Sprintf("%v.GroupCount", cmdPrefix)
	}

	var groupCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(groupCountFlagName, groupCountFlagDefault, groupCountDescription)

	return nil
}

func registerPortainereeNomadSnapshotJobCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobCountDescription := ``

	var jobCountFlagName string
	if cmdPrefix == "" {
		jobCountFlagName = "JobCount"
	} else {
		jobCountFlagName = fmt.Sprintf("%v.JobCount", cmdPrefix)
	}

	var jobCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(jobCountFlagName, jobCountFlagDefault, jobCountDescription)

	return nil
}

func registerPortainereeNomadSnapshotJobs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Jobs []*PortainereeNomadSnapshotJob array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeNomadSnapshotNodeCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeCountDescription := ``

	var nodeCountFlagName string
	if cmdPrefix == "" {
		nodeCountFlagName = "NodeCount"
	} else {
		nodeCountFlagName = fmt.Sprintf("%v.NodeCount", cmdPrefix)
	}

	var nodeCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodeCountFlagName, nodeCountFlagDefault, nodeCountDescription)

	return nil
}

func registerPortainereeNomadSnapshotNomadVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nomadVersionDescription := ``

	var nomadVersionFlagName string
	if cmdPrefix == "" {
		nomadVersionFlagName = "NomadVersion"
	} else {
		nomadVersionFlagName = fmt.Sprintf("%v.NomadVersion", cmdPrefix)
	}

	var nomadVersionFlagDefault string

	_ = cmd.PersistentFlags().String(nomadVersionFlagName, nomadVersionFlagDefault, nomadVersionDescription)

	return nil
}

func registerPortainereeNomadSnapshotRunningTaskCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runningTaskCountDescription := ``

	var runningTaskCountFlagName string
	if cmdPrefix == "" {
		runningTaskCountFlagName = "RunningTaskCount"
	} else {
		runningTaskCountFlagName = fmt.Sprintf("%v.RunningTaskCount", cmdPrefix)
	}

	var runningTaskCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(runningTaskCountFlagName, runningTaskCountFlagDefault, runningTaskCountDescription)

	return nil
}

func registerPortainereeNomadSnapshotTaskCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskCountDescription := ``

	var taskCountFlagName string
	if cmdPrefix == "" {
		taskCountFlagName = "TaskCount"
	} else {
		taskCountFlagName = fmt.Sprintf("%v.TaskCount", cmdPrefix)
	}

	var taskCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(taskCountFlagName, taskCountFlagDefault, taskCountDescription)

	return nil
}

func registerPortainereeNomadSnapshotTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeDescription := ``

	var timeFlagName string
	if cmdPrefix == "" {
		timeFlagName = "Time"
	} else {
		timeFlagName = fmt.Sprintf("%v.Time", cmdPrefix)
	}

	var timeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeFlagName, timeFlagDefault, timeDescription)

	return nil
}

func registerPortainereeNomadSnapshotTotalCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalCpuDescription := ``

	var totalCpuFlagName string
	if cmdPrefix == "" {
		totalCpuFlagName = "TotalCPU"
	} else {
		totalCpuFlagName = fmt.Sprintf("%v.TotalCPU", cmdPrefix)
	}

	var totalCpuFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalCpuFlagName, totalCpuFlagDefault, totalCpuDescription)

	return nil
}

func registerPortainereeNomadSnapshotTotalMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalMemoryDescription := ``

	var totalMemoryFlagName string
	if cmdPrefix == "" {
		totalMemoryFlagName = "TotalMemory"
	} else {
		totalMemoryFlagName = fmt.Sprintf("%v.TotalMemory", cmdPrefix)
	}

	var totalMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalMemoryFlagName, totalMemoryFlagDefault, totalMemoryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeNomadSnapshotFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, groupCountAdded := retrievePortainereeNomadSnapshotGroupCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupCountAdded

	err, jobCountAdded := retrievePortainereeNomadSnapshotJobCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobCountAdded

	err, jobsAdded := retrievePortainereeNomadSnapshotJobsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobsAdded

	err, nodeCountAdded := retrievePortainereeNomadSnapshotNodeCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeCountAdded

	err, nomadVersionAdded := retrievePortainereeNomadSnapshotNomadVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nomadVersionAdded

	err, runningTaskCountAdded := retrievePortainereeNomadSnapshotRunningTaskCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runningTaskCountAdded

	err, taskCountAdded := retrievePortainereeNomadSnapshotTaskCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskCountAdded

	err, timeAdded := retrievePortainereeNomadSnapshotTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeAdded

	err, totalCpuAdded := retrievePortainereeNomadSnapshotTotalCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalCpuAdded

	err, totalMemoryAdded := retrievePortainereeNomadSnapshotTotalMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalMemoryAdded

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotGroupCountFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupCountFlagName := fmt.Sprintf("%v.GroupCount", cmdPrefix)
	if cmd.Flags().Changed(groupCountFlagName) {

		var groupCountFlagName string
		if cmdPrefix == "" {
			groupCountFlagName = "GroupCount"
		} else {
			groupCountFlagName = fmt.Sprintf("%v.GroupCount", cmdPrefix)
		}

		groupCountFlagValue, err := cmd.Flags().GetInt64(groupCountFlagName)
		if err != nil {
			return err, false
		}
		m.GroupCount = groupCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotJobCountFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobCountFlagName := fmt.Sprintf("%v.JobCount", cmdPrefix)
	if cmd.Flags().Changed(jobCountFlagName) {

		var jobCountFlagName string
		if cmdPrefix == "" {
			jobCountFlagName = "JobCount"
		} else {
			jobCountFlagName = fmt.Sprintf("%v.JobCount", cmdPrefix)
		}

		jobCountFlagValue, err := cmd.Flags().GetInt64(jobCountFlagName)
		if err != nil {
			return err, false
		}
		m.JobCount = jobCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotJobsFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobsFlagName := fmt.Sprintf("%v.Jobs", cmdPrefix)
	if cmd.Flags().Changed(jobsFlagName) {
		// warning: Jobs array type []*PortainereeNomadSnapshotJob is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotNodeCountFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeCountFlagName := fmt.Sprintf("%v.NodeCount", cmdPrefix)
	if cmd.Flags().Changed(nodeCountFlagName) {

		var nodeCountFlagName string
		if cmdPrefix == "" {
			nodeCountFlagName = "NodeCount"
		} else {
			nodeCountFlagName = fmt.Sprintf("%v.NodeCount", cmdPrefix)
		}

		nodeCountFlagValue, err := cmd.Flags().GetInt64(nodeCountFlagName)
		if err != nil {
			return err, false
		}
		m.NodeCount = nodeCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotNomadVersionFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nomadVersionFlagName := fmt.Sprintf("%v.NomadVersion", cmdPrefix)
	if cmd.Flags().Changed(nomadVersionFlagName) {

		var nomadVersionFlagName string
		if cmdPrefix == "" {
			nomadVersionFlagName = "NomadVersion"
		} else {
			nomadVersionFlagName = fmt.Sprintf("%v.NomadVersion", cmdPrefix)
		}

		nomadVersionFlagValue, err := cmd.Flags().GetString(nomadVersionFlagName)
		if err != nil {
			return err, false
		}
		m.NomadVersion = nomadVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotRunningTaskCountFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runningTaskCountFlagName := fmt.Sprintf("%v.RunningTaskCount", cmdPrefix)
	if cmd.Flags().Changed(runningTaskCountFlagName) {

		var runningTaskCountFlagName string
		if cmdPrefix == "" {
			runningTaskCountFlagName = "RunningTaskCount"
		} else {
			runningTaskCountFlagName = fmt.Sprintf("%v.RunningTaskCount", cmdPrefix)
		}

		runningTaskCountFlagValue, err := cmd.Flags().GetInt64(runningTaskCountFlagName)
		if err != nil {
			return err, false
		}
		m.RunningTaskCount = runningTaskCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTaskCountFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskCountFlagName := fmt.Sprintf("%v.TaskCount", cmdPrefix)
	if cmd.Flags().Changed(taskCountFlagName) {

		var taskCountFlagName string
		if cmdPrefix == "" {
			taskCountFlagName = "TaskCount"
		} else {
			taskCountFlagName = fmt.Sprintf("%v.TaskCount", cmdPrefix)
		}

		taskCountFlagValue, err := cmd.Flags().GetInt64(taskCountFlagName)
		if err != nil {
			return err, false
		}
		m.TaskCount = taskCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTimeFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFlagName := fmt.Sprintf("%v.Time", cmdPrefix)
	if cmd.Flags().Changed(timeFlagName) {

		var timeFlagName string
		if cmdPrefix == "" {
			timeFlagName = "Time"
		} else {
			timeFlagName = fmt.Sprintf("%v.Time", cmdPrefix)
		}

		timeFlagValue, err := cmd.Flags().GetInt64(timeFlagName)
		if err != nil {
			return err, false
		}
		m.Time = timeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTotalCPUFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalCpuFlagName := fmt.Sprintf("%v.TotalCPU", cmdPrefix)
	if cmd.Flags().Changed(totalCpuFlagName) {

		var totalCpuFlagName string
		if cmdPrefix == "" {
			totalCpuFlagName = "TotalCPU"
		} else {
			totalCpuFlagName = fmt.Sprintf("%v.TotalCPU", cmdPrefix)
		}

		totalCpuFlagValue, err := cmd.Flags().GetInt64(totalCpuFlagName)
		if err != nil {
			return err, false
		}
		m.TotalCPU = totalCpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeNomadSnapshotTotalMemoryFlags(depth int, m *models.PortainereeNomadSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalMemoryFlagName := fmt.Sprintf("%v.TotalMemory", cmdPrefix)
	if cmd.Flags().Changed(totalMemoryFlagName) {

		var totalMemoryFlagName string
		if cmdPrefix == "" {
			totalMemoryFlagName = "TotalMemory"
		} else {
			totalMemoryFlagName = fmt.Sprintf("%v.TotalMemory", cmdPrefix)
		}

		totalMemoryFlagValue, err := cmd.Flags().GetInt64(totalMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.TotalMemory = totalMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}
