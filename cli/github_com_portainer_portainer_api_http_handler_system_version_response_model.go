// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse

// register flags to command
func registerModelGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseLatestVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseUpdateAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseBuild(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseDatabaseVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseServerVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseLatestVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latestVersionDescription := `The latest version available`

	var latestVersionFlagName string
	if cmdPrefix == "" {
		latestVersionFlagName = "LatestVersion"
	} else {
		latestVersionFlagName = fmt.Sprintf("%v.LatestVersion", cmdPrefix)
	}

	var latestVersionFlagDefault string

	_ = cmd.PersistentFlags().String(latestVersionFlagName, latestVersionFlagDefault, latestVersionDescription)

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseUpdateAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateAvailableDescription := `Whether portainer has an update available`

	var updateAvailableFlagName string
	if cmdPrefix == "" {
		updateAvailableFlagName = "UpdateAvailable"
	} else {
		updateAvailableFlagName = fmt.Sprintf("%v.UpdateAvailable", cmdPrefix)
	}

	var updateAvailableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(updateAvailableFlagName, updateAvailableFlagDefault, updateAvailableDescription)

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseBuild(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var buildFlagName string
	if cmdPrefix == "" {
		buildFlagName = "build"
	} else {
		buildFlagName = fmt.Sprintf("%v.build", cmdPrefix)
	}

	if err := registerModelGithubComPortainerPortainerAPIHTTPHandlerSystemBuildInfoFlags(depth+1, buildFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseDatabaseVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	databaseVersionDescription := ``

	var databaseVersionFlagName string
	if cmdPrefix == "" {
		databaseVersionFlagName = "databaseVersion"
	} else {
		databaseVersionFlagName = fmt.Sprintf("%v.databaseVersion", cmdPrefix)
	}

	var databaseVersionFlagDefault string

	_ = cmd.PersistentFlags().String(databaseVersionFlagName, databaseVersionFlagDefault, databaseVersionDescription)

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseServerVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverVersionDescription := ``

	var serverVersionFlagName string
	if cmdPrefix == "" {
		serverVersionFlagName = "serverVersion"
	} else {
		serverVersionFlagName = fmt.Sprintf("%v.serverVersion", cmdPrefix)
	}

	var serverVersionFlagDefault string

	_ = cmd.PersistentFlags().String(serverVersionFlagName, serverVersionFlagDefault, serverVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, latestVersionAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseLatestVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latestVersionAdded

	err, updateAvailableAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseUpdateAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateAvailableAdded

	err, buildAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseBuildFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buildAdded

	err, databaseVersionAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseDatabaseVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || databaseVersionAdded

	err, serverVersionAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseServerVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverVersionAdded

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseLatestVersionFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latestVersionFlagName := fmt.Sprintf("%v.LatestVersion", cmdPrefix)
	if cmd.Flags().Changed(latestVersionFlagName) {

		var latestVersionFlagName string
		if cmdPrefix == "" {
			latestVersionFlagName = "LatestVersion"
		} else {
			latestVersionFlagName = fmt.Sprintf("%v.LatestVersion", cmdPrefix)
		}

		latestVersionFlagValue, err := cmd.Flags().GetString(latestVersionFlagName)
		if err != nil {
			return err, false
		}
		m.LatestVersion = latestVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseUpdateAvailableFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateAvailableFlagName := fmt.Sprintf("%v.UpdateAvailable", cmdPrefix)
	if cmd.Flags().Changed(updateAvailableFlagName) {

		var updateAvailableFlagName string
		if cmdPrefix == "" {
			updateAvailableFlagName = "UpdateAvailable"
		} else {
			updateAvailableFlagName = fmt.Sprintf("%v.UpdateAvailable", cmdPrefix)
		}

		updateAvailableFlagValue, err := cmd.Flags().GetBool(updateAvailableFlagName)
		if err != nil {
			return err, false
		}
		m.UpdateAvailable = &updateAvailableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseBuildFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buildFlagName := fmt.Sprintf("%v.build", cmdPrefix)
	if cmd.Flags().Changed(buildFlagName) {
		// info: complex object build GithubComPortainerPortainerAPIHTTPHandlerSystemBuildInfo is retrieved outside this Changed() block
	}
	buildFlagValue := m.Build
	if swag.IsZero(buildFlagValue) {
		buildFlagValue = &models.GithubComPortainerPortainerAPIHTTPHandlerSystemBuildInfo{}
	}

	err, buildAdded := retrieveModelGithubComPortainerPortainerAPIHTTPHandlerSystemBuildInfoFlags(depth+1, buildFlagValue, buildFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buildAdded
	if buildAdded {
		m.Build = buildFlagValue
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseDatabaseVersionFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	databaseVersionFlagName := fmt.Sprintf("%v.databaseVersion", cmdPrefix)
	if cmd.Flags().Changed(databaseVersionFlagName) {

		var databaseVersionFlagName string
		if cmdPrefix == "" {
			databaseVersionFlagName = "databaseVersion"
		} else {
			databaseVersionFlagName = fmt.Sprintf("%v.databaseVersion", cmdPrefix)
		}

		databaseVersionFlagValue, err := cmd.Flags().GetString(databaseVersionFlagName)
		if err != nil {
			return err, false
		}
		m.DatabaseVersion = databaseVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponseServerVersionFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverVersionFlagName := fmt.Sprintf("%v.serverVersion", cmdPrefix)
	if cmd.Flags().Changed(serverVersionFlagName) {

		var serverVersionFlagName string
		if cmdPrefix == "" {
			serverVersionFlagName = "serverVersion"
		} else {
			serverVersionFlagName = fmt.Sprintf("%v.serverVersion", cmdPrefix)
		}

		serverVersionFlagValue, err := cmd.Flags().GetString(serverVersionFlagName)
		if err != nil {
			return err, false
		}
		m.ServerVersion = serverVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
