// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for TemplatesFilePayload

// register flags to command
func registerModelTemplatesFilePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTemplatesFilePayloadComposeFilePathInRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTemplatesFilePayloadRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTemplatesFilePayloadComposeFilePathInRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	composeFilePathInRepositoryDescription := `Required. Path to the file inside the git repository`

	var composeFilePathInRepositoryFlagName string
	if cmdPrefix == "" {
		composeFilePathInRepositoryFlagName = "composeFilePathInRepository"
	} else {
		composeFilePathInRepositoryFlagName = fmt.Sprintf("%v.composeFilePathInRepository", cmdPrefix)
	}

	var composeFilePathInRepositoryFlagDefault string

	_ = cmd.PersistentFlags().String(composeFilePathInRepositoryFlagName, composeFilePathInRepositoryFlagDefault, composeFilePathInRepositoryDescription)

	return nil
}

func registerTemplatesFilePayloadRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryUrlDescription := `Required. URL of a git repository where the file is stored`

	var repositoryUrlFlagName string
	if cmdPrefix == "" {
		repositoryUrlFlagName = "repositoryURL"
	} else {
		repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	}

	var repositoryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryUrlFlagName, repositoryUrlFlagDefault, repositoryUrlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTemplatesFilePayloadFlags(depth int, m *models.TemplatesFilePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, composeFilePathInRepositoryAdded := retrieveTemplatesFilePayloadComposeFilePathInRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || composeFilePathInRepositoryAdded

	err, repositoryUrlAdded := retrieveTemplatesFilePayloadRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryUrlAdded

	return nil, retAdded
}

func retrieveTemplatesFilePayloadComposeFilePathInRepositoryFlags(depth int, m *models.TemplatesFilePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	composeFilePathInRepositoryFlagName := fmt.Sprintf("%v.composeFilePathInRepository", cmdPrefix)
	if cmd.Flags().Changed(composeFilePathInRepositoryFlagName) {

		var composeFilePathInRepositoryFlagName string
		if cmdPrefix == "" {
			composeFilePathInRepositoryFlagName = "composeFilePathInRepository"
		} else {
			composeFilePathInRepositoryFlagName = fmt.Sprintf("%v.composeFilePathInRepository", cmdPrefix)
		}

		composeFilePathInRepositoryFlagValue, err := cmd.Flags().GetString(composeFilePathInRepositoryFlagName)
		if err != nil {
			return err, false
		}
		m.ComposeFilePathInRepository = &composeFilePathInRepositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTemplatesFilePayloadRepositoryURLFlags(depth int, m *models.TemplatesFilePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryUrlFlagName := fmt.Sprintf("%v.repositoryURL", cmdPrefix)
	if cmd.Flags().Changed(repositoryUrlFlagName) {

		var repositoryUrlFlagName string
		if cmdPrefix == "" {
			repositoryUrlFlagName = "repositoryURL"
		} else {
			repositoryUrlFlagName = fmt.Sprintf("%v.repositoryURL", cmdPrefix)
		}

		repositoryUrlFlagValue, err := cmd.Flags().GetString(repositoryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryURL = &repositoryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
