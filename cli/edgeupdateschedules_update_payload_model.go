// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EdgeupdateschedulesUpdatePayload

// register flags to command
func registerModelEdgeupdateschedulesUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEdgeupdateschedulesUpdatePayloadGroupIDs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgeupdateschedulesUpdatePayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgeupdateschedulesUpdatePayloadScheduledTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgeupdateschedulesUpdatePayloadType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgeupdateschedulesUpdatePayloadVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEdgeupdateschedulesUpdatePayloadGroupIDs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: groupIDs []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgeupdateschedulesUpdatePayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEdgeupdateschedulesUpdatePayloadScheduledTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scheduledTimeDescription := ``

	var scheduledTimeFlagName string
	if cmdPrefix == "" {
		scheduledTimeFlagName = "scheduledTime"
	} else {
		scheduledTimeFlagName = fmt.Sprintf("%v.scheduledTime", cmdPrefix)
	}

	var scheduledTimeFlagDefault string

	_ = cmd.PersistentFlags().String(scheduledTimeFlagName, scheduledTimeFlagDefault, scheduledTimeDescription)

	return nil
}

func registerEdgeupdateschedulesUpdatePayloadType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: [1,2]. Type of the update (1 - update, 2 - rollback)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerEdgeupdateschedulesUpdatePayloadVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEdgeupdateschedulesUpdatePayloadFlags(depth int, m *models.EdgeupdateschedulesUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, groupIDsAdded := retrieveEdgeupdateschedulesUpdatePayloadGroupIDsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupIDsAdded

	err, nameAdded := retrieveEdgeupdateschedulesUpdatePayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, scheduledTimeAdded := retrieveEdgeupdateschedulesUpdatePayloadScheduledTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduledTimeAdded

	err, typeAdded := retrieveEdgeupdateschedulesUpdatePayloadTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, versionAdded := retrieveEdgeupdateschedulesUpdatePayloadVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveEdgeupdateschedulesUpdatePayloadGroupIDsFlags(depth int, m *models.EdgeupdateschedulesUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupIDsFlagName := fmt.Sprintf("%v.groupIDs", cmdPrefix)
	if cmd.Flags().Changed(groupIDsFlagName) {
		// warning: groupIDs array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgeupdateschedulesUpdatePayloadNameFlags(depth int, m *models.EdgeupdateschedulesUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgeupdateschedulesUpdatePayloadScheduledTimeFlags(depth int, m *models.EdgeupdateschedulesUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduledTimeFlagName := fmt.Sprintf("%v.scheduledTime", cmdPrefix)
	if cmd.Flags().Changed(scheduledTimeFlagName) {

		var scheduledTimeFlagName string
		if cmdPrefix == "" {
			scheduledTimeFlagName = "scheduledTime"
		} else {
			scheduledTimeFlagName = fmt.Sprintf("%v.scheduledTime", cmdPrefix)
		}

		scheduledTimeFlagValue, err := cmd.Flags().GetString(scheduledTimeFlagName)
		if err != nil {
			return err, false
		}
		m.ScheduledTime = scheduledTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgeupdateschedulesUpdatePayloadTypeFlags(depth int, m *models.EdgeupdateschedulesUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgeupdateschedulesUpdatePayloadVersionFlags(depth int, m *models.EdgeupdateschedulesUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
