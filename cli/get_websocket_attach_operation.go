// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/websocket"

	"github.com/spf13/cobra"
)

// makeOperationWebsocketGetWebsocketAttachCmd returns a cmd to handle operation getWebsocketAttach
func makeOperationWebsocketGetWebsocketAttachCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "GetWebsocketAttach",
		Short: `If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).
If the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and
an AttachStart operation HTTP request will be created and hijacked.
**Access policy**: authenticated`,
		RunE: runOperationWebsocketGetWebsocketAttach,
	}

	if err := registerOperationWebsocketGetWebsocketAttachParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWebsocketGetWebsocketAttach uses cmd flags to call endpoint api
func runOperationWebsocketGetWebsocketAttach(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := websocket.NewGetWebsocketAttachParams()
	if err, _ := retrieveOperationWebsocketGetWebsocketAttachEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketAttachNodeNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketAttachTokenFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWebsocketGetWebsocketAttachResult(appCli.Websocket.GetWebsocketAttach(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationWebsocketGetWebsocketAttachParamFlags registers all flags needed to fill params
func registerOperationWebsocketGetWebsocketAttachParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWebsocketGetWebsocketAttachEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketAttachNodeNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketAttachTokenParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWebsocketGetWebsocketAttachEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := `Required. environment(endpoint) ID of the environment(endpoint) where the resource is located`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketAttachNodeNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nodeNameDescription := `node name`

	var nodeNameFlagName string
	if cmdPrefix == "" {
		nodeNameFlagName = "nodeName"
	} else {
		nodeNameFlagName = fmt.Sprintf("%v.nodeName", cmdPrefix)
	}

	var nodeNameFlagDefault string

	_ = cmd.PersistentFlags().String(nodeNameFlagName, nodeNameFlagDefault, nodeNameDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketAttachTokenParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tokenDescription := `Required. JWT token used for authentication against this environment(endpoint)`

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

func retrieveOperationWebsocketGetWebsocketAttachEndpointIDFlag(m *websocket.GetWebsocketAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpointId") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketAttachNodeNameFlag(m *websocket.GetWebsocketAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nodeName") {

		var nodeNameFlagName string
		if cmdPrefix == "" {
			nodeNameFlagName = "nodeName"
		} else {
			nodeNameFlagName = fmt.Sprintf("%v.nodeName", cmdPrefix)
		}

		nodeNameFlagValue, err := cmd.Flags().GetString(nodeNameFlagName)
		if err != nil {
			return err, false
		}
		m.NodeName = &nodeNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketAttachTokenFlag(m *websocket.GetWebsocketAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("token") {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

	}
	return nil, retAdded
}

// parseOperationWebsocketGetWebsocketAttachResult parses request result and return the string content
func parseOperationWebsocketGetWebsocketAttachResult(resp0 *websocket.GetWebsocketAttachOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getWebsocketAttachOK is not supported

		// Non schema case: warning getWebsocketAttachBadRequest is not supported

		// Non schema case: warning getWebsocketAttachForbidden is not supported

		// Non schema case: warning getWebsocketAttachNotFound is not supported

		// Non schema case: warning getWebsocketAttachInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getWebsocketAttachOK is not supported by go-swagger cli yet.

	return "", nil
}
