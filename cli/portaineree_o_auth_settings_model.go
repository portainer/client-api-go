// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeOAuthSettings

// register flags to command
func registerModelPortainereeOAuthSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeOAuthSettingsAccessTokenURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsAuthorizationURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsClientID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsClientSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsDefaultTeamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsHideInternalAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsKubeSecretKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsLogoutURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsMicrosoftTenantID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsOAuthAutoCreateUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsOAuthAutoMapTeamMemberships(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsRedirectURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsResourceURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsSSO(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsScopes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsTeamMemberships(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthSettingsUserIdentifier(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeOAuthSettingsAccessTokenURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessTokenUriDescription := ``

	var accessTokenUriFlagName string
	if cmdPrefix == "" {
		accessTokenUriFlagName = "AccessTokenURI"
	} else {
		accessTokenUriFlagName = fmt.Sprintf("%v.AccessTokenURI", cmdPrefix)
	}

	var accessTokenUriFlagDefault string

	_ = cmd.PersistentFlags().String(accessTokenUriFlagName, accessTokenUriFlagDefault, accessTokenUriDescription)

	return nil
}

func registerPortainereeOAuthSettingsAuthorizationURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authorizationUriDescription := ``

	var authorizationUriFlagName string
	if cmdPrefix == "" {
		authorizationUriFlagName = "AuthorizationURI"
	} else {
		authorizationUriFlagName = fmt.Sprintf("%v.AuthorizationURI", cmdPrefix)
	}

	var authorizationUriFlagDefault string

	_ = cmd.PersistentFlags().String(authorizationUriFlagName, authorizationUriFlagDefault, authorizationUriDescription)

	return nil
}

func registerPortainereeOAuthSettingsClientID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientIdDescription := ``

	var clientIdFlagName string
	if cmdPrefix == "" {
		clientIdFlagName = "ClientID"
	} else {
		clientIdFlagName = fmt.Sprintf("%v.ClientID", cmdPrefix)
	}

	var clientIdFlagDefault string

	_ = cmd.PersistentFlags().String(clientIdFlagName, clientIdFlagDefault, clientIdDescription)

	return nil
}

func registerPortainereeOAuthSettingsClientSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientSecretDescription := ``

	var clientSecretFlagName string
	if cmdPrefix == "" {
		clientSecretFlagName = "ClientSecret"
	} else {
		clientSecretFlagName = fmt.Sprintf("%v.ClientSecret", cmdPrefix)
	}

	var clientSecretFlagDefault string

	_ = cmd.PersistentFlags().String(clientSecretFlagName, clientSecretFlagDefault, clientSecretDescription)

	return nil
}

func registerPortainereeOAuthSettingsDefaultTeamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultTeamIdDescription := ``

	var defaultTeamIdFlagName string
	if cmdPrefix == "" {
		defaultTeamIdFlagName = "DefaultTeamID"
	} else {
		defaultTeamIdFlagName = fmt.Sprintf("%v.DefaultTeamID", cmdPrefix)
	}

	var defaultTeamIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(defaultTeamIdFlagName, defaultTeamIdFlagDefault, defaultTeamIdDescription)

	return nil
}

func registerPortainereeOAuthSettingsHideInternalAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hideInternalAuthDescription := ``

	var hideInternalAuthFlagName string
	if cmdPrefix == "" {
		hideInternalAuthFlagName = "HideInternalAuth"
	} else {
		hideInternalAuthFlagName = fmt.Sprintf("%v.HideInternalAuth", cmdPrefix)
	}

	var hideInternalAuthFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hideInternalAuthFlagName, hideInternalAuthFlagDefault, hideInternalAuthDescription)

	return nil
}

func registerPortainereeOAuthSettingsKubeSecretKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: KubeSecretKey []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeOAuthSettingsLogoutURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoutUriDescription := ``

	var logoutUriFlagName string
	if cmdPrefix == "" {
		logoutUriFlagName = "LogoutURI"
	} else {
		logoutUriFlagName = fmt.Sprintf("%v.LogoutURI", cmdPrefix)
	}

	var logoutUriFlagDefault string

	_ = cmd.PersistentFlags().String(logoutUriFlagName, logoutUriFlagDefault, logoutUriDescription)

	return nil
}

func registerPortainereeOAuthSettingsMicrosoftTenantID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	microsoftTenantIdDescription := ``

	var microsoftTenantIdFlagName string
	if cmdPrefix == "" {
		microsoftTenantIdFlagName = "MicrosoftTenantID"
	} else {
		microsoftTenantIdFlagName = fmt.Sprintf("%v.MicrosoftTenantID", cmdPrefix)
	}

	var microsoftTenantIdFlagDefault string

	_ = cmd.PersistentFlags().String(microsoftTenantIdFlagName, microsoftTenantIdFlagDefault, microsoftTenantIdDescription)

	return nil
}

func registerPortainereeOAuthSettingsOAuthAutoCreateUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oAuthAutoCreateUsersDescription := ``

	var oAuthAutoCreateUsersFlagName string
	if cmdPrefix == "" {
		oAuthAutoCreateUsersFlagName = "OAuthAutoCreateUsers"
	} else {
		oAuthAutoCreateUsersFlagName = fmt.Sprintf("%v.OAuthAutoCreateUsers", cmdPrefix)
	}

	var oAuthAutoCreateUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oAuthAutoCreateUsersFlagName, oAuthAutoCreateUsersFlagDefault, oAuthAutoCreateUsersDescription)

	return nil
}

func registerPortainereeOAuthSettingsOAuthAutoMapTeamMemberships(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oAuthAutoMapTeamMembershipsDescription := ``

	var oAuthAutoMapTeamMembershipsFlagName string
	if cmdPrefix == "" {
		oAuthAutoMapTeamMembershipsFlagName = "OAuthAutoMapTeamMemberships"
	} else {
		oAuthAutoMapTeamMembershipsFlagName = fmt.Sprintf("%v.OAuthAutoMapTeamMemberships", cmdPrefix)
	}

	var oAuthAutoMapTeamMembershipsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oAuthAutoMapTeamMembershipsFlagName, oAuthAutoMapTeamMembershipsFlagDefault, oAuthAutoMapTeamMembershipsDescription)

	return nil
}

func registerPortainereeOAuthSettingsRedirectURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	redirectUriDescription := ``

	var redirectUriFlagName string
	if cmdPrefix == "" {
		redirectUriFlagName = "RedirectURI"
	} else {
		redirectUriFlagName = fmt.Sprintf("%v.RedirectURI", cmdPrefix)
	}

	var redirectUriFlagDefault string

	_ = cmd.PersistentFlags().String(redirectUriFlagName, redirectUriFlagDefault, redirectUriDescription)

	return nil
}

func registerPortainereeOAuthSettingsResourceURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceUriDescription := ``

	var resourceUriFlagName string
	if cmdPrefix == "" {
		resourceUriFlagName = "ResourceURI"
	} else {
		resourceUriFlagName = fmt.Sprintf("%v.ResourceURI", cmdPrefix)
	}

	var resourceUriFlagDefault string

	_ = cmd.PersistentFlags().String(resourceUriFlagName, resourceUriFlagDefault, resourceUriDescription)

	return nil
}

func registerPortainereeOAuthSettingsSSO(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sSODescription := ``

	var sSOFlagName string
	if cmdPrefix == "" {
		sSOFlagName = "SSO"
	} else {
		sSOFlagName = fmt.Sprintf("%v.SSO", cmdPrefix)
	}

	var sSOFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sSOFlagName, sSOFlagDefault, sSODescription)

	return nil
}

func registerPortainereeOAuthSettingsScopes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scopesDescription := ``

	var scopesFlagName string
	if cmdPrefix == "" {
		scopesFlagName = "Scopes"
	} else {
		scopesFlagName = fmt.Sprintf("%v.Scopes", cmdPrefix)
	}

	var scopesFlagDefault string

	_ = cmd.PersistentFlags().String(scopesFlagName, scopesFlagDefault, scopesDescription)

	return nil
}

func registerPortainereeOAuthSettingsTeamMemberships(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var teamMembershipsFlagName string
	if cmdPrefix == "" {
		teamMembershipsFlagName = "TeamMemberships"
	} else {
		teamMembershipsFlagName = fmt.Sprintf("%v.TeamMemberships", cmdPrefix)
	}

	if err := registerModelPortainereeTeamMembershipsFlags(depth+1, teamMembershipsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeOAuthSettingsUserIdentifier(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdentifierDescription := ``

	var userIdentifierFlagName string
	if cmdPrefix == "" {
		userIdentifierFlagName = "UserIdentifier"
	} else {
		userIdentifierFlagName = fmt.Sprintf("%v.UserIdentifier", cmdPrefix)
	}

	var userIdentifierFlagDefault string

	_ = cmd.PersistentFlags().String(userIdentifierFlagName, userIdentifierFlagDefault, userIdentifierDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeOAuthSettingsFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessTokenUriAdded := retrievePortainereeOAuthSettingsAccessTokenURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessTokenUriAdded

	err, authorizationUriAdded := retrievePortainereeOAuthSettingsAuthorizationURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorizationUriAdded

	err, clientIdAdded := retrievePortainereeOAuthSettingsClientIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientIdAdded

	err, clientSecretAdded := retrievePortainereeOAuthSettingsClientSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientSecretAdded

	err, defaultTeamIdAdded := retrievePortainereeOAuthSettingsDefaultTeamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultTeamIdAdded

	err, hideInternalAuthAdded := retrievePortainereeOAuthSettingsHideInternalAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hideInternalAuthAdded

	err, kubeSecretKeyAdded := retrievePortainereeOAuthSettingsKubeSecretKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubeSecretKeyAdded

	err, logoutUriAdded := retrievePortainereeOAuthSettingsLogoutURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoutUriAdded

	err, microsoftTenantIdAdded := retrievePortainereeOAuthSettingsMicrosoftTenantIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || microsoftTenantIdAdded

	err, oAuthAutoCreateUsersAdded := retrievePortainereeOAuthSettingsOAuthAutoCreateUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthAutoCreateUsersAdded

	err, oAuthAutoMapTeamMembershipsAdded := retrievePortainereeOAuthSettingsOAuthAutoMapTeamMembershipsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthAutoMapTeamMembershipsAdded

	err, redirectUriAdded := retrievePortainereeOAuthSettingsRedirectURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirectUriAdded

	err, resourceUriAdded := retrievePortainereeOAuthSettingsResourceURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceUriAdded

	err, sSOAdded := retrievePortainereeOAuthSettingsSSOFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sSOAdded

	err, scopesAdded := retrievePortainereeOAuthSettingsScopesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopesAdded

	err, teamMembershipsAdded := retrievePortainereeOAuthSettingsTeamMembershipsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamMembershipsAdded

	err, userIdentifierAdded := retrievePortainereeOAuthSettingsUserIdentifierFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdentifierAdded

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsAccessTokenURIFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessTokenUriFlagName := fmt.Sprintf("%v.AccessTokenURI", cmdPrefix)
	if cmd.Flags().Changed(accessTokenUriFlagName) {

		var accessTokenUriFlagName string
		if cmdPrefix == "" {
			accessTokenUriFlagName = "AccessTokenURI"
		} else {
			accessTokenUriFlagName = fmt.Sprintf("%v.AccessTokenURI", cmdPrefix)
		}

		accessTokenUriFlagValue, err := cmd.Flags().GetString(accessTokenUriFlagName)
		if err != nil {
			return err, false
		}
		m.AccessTokenURI = accessTokenUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsAuthorizationURIFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorizationUriFlagName := fmt.Sprintf("%v.AuthorizationURI", cmdPrefix)
	if cmd.Flags().Changed(authorizationUriFlagName) {

		var authorizationUriFlagName string
		if cmdPrefix == "" {
			authorizationUriFlagName = "AuthorizationURI"
		} else {
			authorizationUriFlagName = fmt.Sprintf("%v.AuthorizationURI", cmdPrefix)
		}

		authorizationUriFlagValue, err := cmd.Flags().GetString(authorizationUriFlagName)
		if err != nil {
			return err, false
		}
		m.AuthorizationURI = authorizationUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsClientIDFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientIdFlagName := fmt.Sprintf("%v.ClientID", cmdPrefix)
	if cmd.Flags().Changed(clientIdFlagName) {

		var clientIdFlagName string
		if cmdPrefix == "" {
			clientIdFlagName = "ClientID"
		} else {
			clientIdFlagName = fmt.Sprintf("%v.ClientID", cmdPrefix)
		}

		clientIdFlagValue, err := cmd.Flags().GetString(clientIdFlagName)
		if err != nil {
			return err, false
		}
		m.ClientID = clientIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsClientSecretFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientSecretFlagName := fmt.Sprintf("%v.ClientSecret", cmdPrefix)
	if cmd.Flags().Changed(clientSecretFlagName) {

		var clientSecretFlagName string
		if cmdPrefix == "" {
			clientSecretFlagName = "ClientSecret"
		} else {
			clientSecretFlagName = fmt.Sprintf("%v.ClientSecret", cmdPrefix)
		}

		clientSecretFlagValue, err := cmd.Flags().GetString(clientSecretFlagName)
		if err != nil {
			return err, false
		}
		m.ClientSecret = clientSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsDefaultTeamIDFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultTeamIdFlagName := fmt.Sprintf("%v.DefaultTeamID", cmdPrefix)
	if cmd.Flags().Changed(defaultTeamIdFlagName) {

		var defaultTeamIdFlagName string
		if cmdPrefix == "" {
			defaultTeamIdFlagName = "DefaultTeamID"
		} else {
			defaultTeamIdFlagName = fmt.Sprintf("%v.DefaultTeamID", cmdPrefix)
		}

		defaultTeamIdFlagValue, err := cmd.Flags().GetInt64(defaultTeamIdFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultTeamID = defaultTeamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsHideInternalAuthFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hideInternalAuthFlagName := fmt.Sprintf("%v.HideInternalAuth", cmdPrefix)
	if cmd.Flags().Changed(hideInternalAuthFlagName) {

		var hideInternalAuthFlagName string
		if cmdPrefix == "" {
			hideInternalAuthFlagName = "HideInternalAuth"
		} else {
			hideInternalAuthFlagName = fmt.Sprintf("%v.HideInternalAuth", cmdPrefix)
		}

		hideInternalAuthFlagValue, err := cmd.Flags().GetBool(hideInternalAuthFlagName)
		if err != nil {
			return err, false
		}
		m.HideInternalAuth = &hideInternalAuthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsKubeSecretKeyFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubeSecretKeyFlagName := fmt.Sprintf("%v.KubeSecretKey", cmdPrefix)
	if cmd.Flags().Changed(kubeSecretKeyFlagName) {
		// warning: KubeSecretKey array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsLogoutURIFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoutUriFlagName := fmt.Sprintf("%v.LogoutURI", cmdPrefix)
	if cmd.Flags().Changed(logoutUriFlagName) {

		var logoutUriFlagName string
		if cmdPrefix == "" {
			logoutUriFlagName = "LogoutURI"
		} else {
			logoutUriFlagName = fmt.Sprintf("%v.LogoutURI", cmdPrefix)
		}

		logoutUriFlagValue, err := cmd.Flags().GetString(logoutUriFlagName)
		if err != nil {
			return err, false
		}
		m.LogoutURI = logoutUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsMicrosoftTenantIDFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	microsoftTenantIdFlagName := fmt.Sprintf("%v.MicrosoftTenantID", cmdPrefix)
	if cmd.Flags().Changed(microsoftTenantIdFlagName) {

		var microsoftTenantIdFlagName string
		if cmdPrefix == "" {
			microsoftTenantIdFlagName = "MicrosoftTenantID"
		} else {
			microsoftTenantIdFlagName = fmt.Sprintf("%v.MicrosoftTenantID", cmdPrefix)
		}

		microsoftTenantIdFlagValue, err := cmd.Flags().GetString(microsoftTenantIdFlagName)
		if err != nil {
			return err, false
		}
		m.MicrosoftTenantID = microsoftTenantIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsOAuthAutoCreateUsersFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthAutoCreateUsersFlagName := fmt.Sprintf("%v.OAuthAutoCreateUsers", cmdPrefix)
	if cmd.Flags().Changed(oAuthAutoCreateUsersFlagName) {

		var oAuthAutoCreateUsersFlagName string
		if cmdPrefix == "" {
			oAuthAutoCreateUsersFlagName = "OAuthAutoCreateUsers"
		} else {
			oAuthAutoCreateUsersFlagName = fmt.Sprintf("%v.OAuthAutoCreateUsers", cmdPrefix)
		}

		oAuthAutoCreateUsersFlagValue, err := cmd.Flags().GetBool(oAuthAutoCreateUsersFlagName)
		if err != nil {
			return err, false
		}
		m.OAuthAutoCreateUsers = &oAuthAutoCreateUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsOAuthAutoMapTeamMembershipsFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthAutoMapTeamMembershipsFlagName := fmt.Sprintf("%v.OAuthAutoMapTeamMemberships", cmdPrefix)
	if cmd.Flags().Changed(oAuthAutoMapTeamMembershipsFlagName) {

		var oAuthAutoMapTeamMembershipsFlagName string
		if cmdPrefix == "" {
			oAuthAutoMapTeamMembershipsFlagName = "OAuthAutoMapTeamMemberships"
		} else {
			oAuthAutoMapTeamMembershipsFlagName = fmt.Sprintf("%v.OAuthAutoMapTeamMemberships", cmdPrefix)
		}

		oAuthAutoMapTeamMembershipsFlagValue, err := cmd.Flags().GetBool(oAuthAutoMapTeamMembershipsFlagName)
		if err != nil {
			return err, false
		}
		m.OAuthAutoMapTeamMemberships = &oAuthAutoMapTeamMembershipsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsRedirectURIFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redirectUriFlagName := fmt.Sprintf("%v.RedirectURI", cmdPrefix)
	if cmd.Flags().Changed(redirectUriFlagName) {

		var redirectUriFlagName string
		if cmdPrefix == "" {
			redirectUriFlagName = "RedirectURI"
		} else {
			redirectUriFlagName = fmt.Sprintf("%v.RedirectURI", cmdPrefix)
		}

		redirectUriFlagValue, err := cmd.Flags().GetString(redirectUriFlagName)
		if err != nil {
			return err, false
		}
		m.RedirectURI = redirectUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsResourceURIFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceUriFlagName := fmt.Sprintf("%v.ResourceURI", cmdPrefix)
	if cmd.Flags().Changed(resourceUriFlagName) {

		var resourceUriFlagName string
		if cmdPrefix == "" {
			resourceUriFlagName = "ResourceURI"
		} else {
			resourceUriFlagName = fmt.Sprintf("%v.ResourceURI", cmdPrefix)
		}

		resourceUriFlagValue, err := cmd.Flags().GetString(resourceUriFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceURI = resourceUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsSSOFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sSOFlagName := fmt.Sprintf("%v.SSO", cmdPrefix)
	if cmd.Flags().Changed(sSOFlagName) {

		var sSOFlagName string
		if cmdPrefix == "" {
			sSOFlagName = "SSO"
		} else {
			sSOFlagName = fmt.Sprintf("%v.SSO", cmdPrefix)
		}

		sSOFlagValue, err := cmd.Flags().GetBool(sSOFlagName)
		if err != nil {
			return err, false
		}
		m.SSO = &sSOFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsScopesFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopesFlagName := fmt.Sprintf("%v.Scopes", cmdPrefix)
	if cmd.Flags().Changed(scopesFlagName) {

		var scopesFlagName string
		if cmdPrefix == "" {
			scopesFlagName = "Scopes"
		} else {
			scopesFlagName = fmt.Sprintf("%v.Scopes", cmdPrefix)
		}

		scopesFlagValue, err := cmd.Flags().GetString(scopesFlagName)
		if err != nil {
			return err, false
		}
		m.Scopes = scopesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsTeamMembershipsFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamMembershipsFlagName := fmt.Sprintf("%v.TeamMemberships", cmdPrefix)
	if cmd.Flags().Changed(teamMembershipsFlagName) {
		// info: complex object TeamMemberships PortainereeTeamMemberships is retrieved outside this Changed() block
	}
	teamMembershipsFlagValue := m.TeamMemberships
	if swag.IsZero(teamMembershipsFlagValue) {
		teamMembershipsFlagValue = &models.PortainereeTeamMemberships{}
	}

	err, teamMembershipsAdded := retrieveModelPortainereeTeamMembershipsFlags(depth+1, teamMembershipsFlagValue, teamMembershipsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamMembershipsAdded
	if teamMembershipsAdded {
		m.TeamMemberships = teamMembershipsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeOAuthSettingsUserIdentifierFlags(depth int, m *models.PortainereeOAuthSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdentifierFlagName := fmt.Sprintf("%v.UserIdentifier", cmdPrefix)
	if cmd.Flags().Changed(userIdentifierFlagName) {

		var userIdentifierFlagName string
		if cmdPrefix == "" {
			userIdentifierFlagName = "UserIdentifier"
		} else {
			userIdentifierFlagName = fmt.Sprintf("%v.UserIdentifier", cmdPrefix)
		}

		userIdentifierFlagValue, err := cmd.Flags().GetString(userIdentifierFlagName)
		if err != nil {
			return err, false
		}
		m.UserIdentifier = userIdentifierFlagValue

		retAdded = true
	}

	return nil, retAdded
}
