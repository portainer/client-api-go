// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for RegistriesRegistryCreatePayload

// register flags to command
func registerModelRegistriesRegistryCreatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistriesRegistryCreatePayloadAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadBaseURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadEcr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadGithub(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadGitlab(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadQuay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistriesRegistryCreatePayloadUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryCreatePayloadAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationDescription := `Required. Is authentication against this registry enabled`

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
	}

	var authenticationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(authenticationFlagName, authenticationFlagDefault, authenticationDescription)

	return nil
}

func registerRegistriesRegistryCreatePayloadBaseURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	baseUrlDescription := `BaseURL required for ProGet registry`

	var baseUrlFlagName string
	if cmdPrefix == "" {
		baseUrlFlagName = "baseURL"
	} else {
		baseUrlFlagName = fmt.Sprintf("%v.baseURL", cmdPrefix)
	}

	var baseUrlFlagDefault string

	_ = cmd.PersistentFlags().String(baseUrlFlagName, baseUrlFlagDefault, baseUrlDescription)

	return nil
}

func registerRegistriesRegistryCreatePayloadEcr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ecrFlagName string
	if cmdPrefix == "" {
		ecrFlagName = "ecr"
	} else {
		ecrFlagName = fmt.Sprintf("%v.ecr", cmdPrefix)
	}

	if err := registerModelPortainereeEcrDataFlags(depth+1, ecrFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryCreatePayloadGithub(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var githubFlagName string
	if cmdPrefix == "" {
		githubFlagName = "github"
	} else {
		githubFlagName = fmt.Sprintf("%v.github", cmdPrefix)
	}

	if err := registerModelPortainereeGithubRegistryDataFlags(depth+1, githubFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryCreatePayloadGitlab(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var gitlabFlagName string
	if cmdPrefix == "" {
		gitlabFlagName = "gitlab"
	} else {
		gitlabFlagName = fmt.Sprintf("%v.gitlab", cmdPrefix)
	}

	if err := registerModelPortainereeGitlabRegistryDataFlags(depth+1, gitlabFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryCreatePayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name that will be used to identify this registry`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerRegistriesRegistryCreatePayloadPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `Password used to authenticate against this registry. required when Authentication is true`

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerRegistriesRegistryCreatePayloadQuay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var quayFlagName string
	if cmdPrefix == "" {
		quayFlagName = "quay"
	} else {
		quayFlagName = fmt.Sprintf("%v.quay", cmdPrefix)
	}

	if err := registerModelPortainereeQuayRegistryDataFlags(depth+1, quayFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryCreatePayloadType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: [1,2,3,4,5,6,7,8]. Required. Registry Type. Valid values are:
	1 (Quay.io),
	2 (Azure container registry),
	3 (custom registry),
	4 (Gitlab registry),
	5 (ProGet registry),
	6 (DockerHub)
	7 (ECR)
	8 (Github registry)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7,8]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerRegistriesRegistryCreatePayloadURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `Required. URL or IP address of the Docker registry`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

func registerRegistriesRegistryCreatePayloadUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Username used to authenticate against this registry. Required when Authentication is true`

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistriesRegistryCreatePayloadFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authenticationAdded := retrieveRegistriesRegistryCreatePayloadAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, baseUrlAdded := retrieveRegistriesRegistryCreatePayloadBaseURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || baseUrlAdded

	err, ecrAdded := retrieveRegistriesRegistryCreatePayloadEcrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ecrAdded

	err, githubAdded := retrieveRegistriesRegistryCreatePayloadGithubFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || githubAdded

	err, gitlabAdded := retrieveRegistriesRegistryCreatePayloadGitlabFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitlabAdded

	err, nameAdded := retrieveRegistriesRegistryCreatePayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, passwordAdded := retrieveRegistriesRegistryCreatePayloadPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, quayAdded := retrieveRegistriesRegistryCreatePayloadQuayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quayAdded

	err, typeAdded := retrieveRegistriesRegistryCreatePayloadTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, urlAdded := retrieveRegistriesRegistryCreatePayloadURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	err, usernameAdded := retrieveRegistriesRegistryCreatePayloadUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadAuthenticationFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {

		var authenticationFlagName string
		if cmdPrefix == "" {
			authenticationFlagName = "authentication"
		} else {
			authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
		}

		authenticationFlagValue, err := cmd.Flags().GetBool(authenticationFlagName)
		if err != nil {
			return err, false
		}
		m.Authentication = &authenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadBaseURLFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	baseUrlFlagName := fmt.Sprintf("%v.baseURL", cmdPrefix)
	if cmd.Flags().Changed(baseUrlFlagName) {

		var baseUrlFlagName string
		if cmdPrefix == "" {
			baseUrlFlagName = "baseURL"
		} else {
			baseUrlFlagName = fmt.Sprintf("%v.baseURL", cmdPrefix)
		}

		baseUrlFlagValue, err := cmd.Flags().GetString(baseUrlFlagName)
		if err != nil {
			return err, false
		}
		m.BaseURL = baseUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadEcrFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ecrFlagName := fmt.Sprintf("%v.ecr", cmdPrefix)
	if cmd.Flags().Changed(ecrFlagName) {
		// info: complex object ecr PortainereeEcrData is retrieved outside this Changed() block
	}
	ecrFlagValue := m.Ecr
	if swag.IsZero(ecrFlagValue) {
		ecrFlagValue = &models.PortainereeEcrData{}
	}

	err, ecrAdded := retrieveModelPortainereeEcrDataFlags(depth+1, ecrFlagValue, ecrFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ecrAdded
	if ecrAdded {
		m.Ecr = ecrFlagValue
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadGithubFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	githubFlagName := fmt.Sprintf("%v.github", cmdPrefix)
	if cmd.Flags().Changed(githubFlagName) {
		// info: complex object github PortainereeGithubRegistryData is retrieved outside this Changed() block
	}
	githubFlagValue := m.Github
	if swag.IsZero(githubFlagValue) {
		githubFlagValue = &models.PortainereeGithubRegistryData{}
	}

	err, githubAdded := retrieveModelPortainereeGithubRegistryDataFlags(depth+1, githubFlagValue, githubFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || githubAdded
	if githubAdded {
		m.Github = githubFlagValue
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadGitlabFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gitlabFlagName := fmt.Sprintf("%v.gitlab", cmdPrefix)
	if cmd.Flags().Changed(gitlabFlagName) {
		// info: complex object gitlab PortainereeGitlabRegistryData is retrieved outside this Changed() block
	}
	gitlabFlagValue := m.Gitlab
	if swag.IsZero(gitlabFlagValue) {
		gitlabFlagValue = &models.PortainereeGitlabRegistryData{}
	}

	err, gitlabAdded := retrieveModelPortainereeGitlabRegistryDataFlags(depth+1, gitlabFlagValue, gitlabFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitlabAdded
	if gitlabAdded {
		m.Gitlab = gitlabFlagValue
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadNameFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadPasswordFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadQuayFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quayFlagName := fmt.Sprintf("%v.quay", cmdPrefix)
	if cmd.Flags().Changed(quayFlagName) {
		// info: complex object quay PortainereeQuayRegistryData is retrieved outside this Changed() block
	}
	quayFlagValue := m.Quay
	if swag.IsZero(quayFlagValue) {
		quayFlagValue = &models.PortainereeQuayRegistryData{}
	}

	err, quayAdded := retrieveModelPortainereeQuayRegistryDataFlags(depth+1, quayFlagValue, quayFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quayAdded
	if quayAdded {
		m.Quay = quayFlagValue
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadTypeFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadURLFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = &urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistriesRegistryCreatePayloadUsernameFlags(depth int, m *models.RegistriesRegistryCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
