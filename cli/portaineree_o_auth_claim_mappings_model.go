// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeOAuthClaimMappings

// register flags to command
func registerModelPortainereeOAuthClaimMappingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeOAuthClaimMappingsClaimValRegex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeOAuthClaimMappingsTeam(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeOAuthClaimMappingsClaimValRegex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	claimValRegexDescription := ``

	var claimValRegexFlagName string
	if cmdPrefix == "" {
		claimValRegexFlagName = "ClaimValRegex"
	} else {
		claimValRegexFlagName = fmt.Sprintf("%v.ClaimValRegex", cmdPrefix)
	}

	var claimValRegexFlagDefault string

	_ = cmd.PersistentFlags().String(claimValRegexFlagName, claimValRegexFlagDefault, claimValRegexDescription)

	return nil
}

func registerPortainereeOAuthClaimMappingsTeam(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	teamDescription := ``

	var teamFlagName string
	if cmdPrefix == "" {
		teamFlagName = "Team"
	} else {
		teamFlagName = fmt.Sprintf("%v.Team", cmdPrefix)
	}

	var teamFlagDefault int64

	_ = cmd.PersistentFlags().Int64(teamFlagName, teamFlagDefault, teamDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeOAuthClaimMappingsFlags(depth int, m *models.PortainereeOAuthClaimMappings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, claimValRegexAdded := retrievePortainereeOAuthClaimMappingsClaimValRegexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || claimValRegexAdded

	err, teamAdded := retrievePortainereeOAuthClaimMappingsTeamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAdded

	return nil, retAdded
}

func retrievePortainereeOAuthClaimMappingsClaimValRegexFlags(depth int, m *models.PortainereeOAuthClaimMappings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	claimValRegexFlagName := fmt.Sprintf("%v.ClaimValRegex", cmdPrefix)
	if cmd.Flags().Changed(claimValRegexFlagName) {

		var claimValRegexFlagName string
		if cmdPrefix == "" {
			claimValRegexFlagName = "ClaimValRegex"
		} else {
			claimValRegexFlagName = fmt.Sprintf("%v.ClaimValRegex", cmdPrefix)
		}

		claimValRegexFlagValue, err := cmd.Flags().GetString(claimValRegexFlagName)
		if err != nil {
			return err, false
		}
		m.ClaimValRegex = claimValRegexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeOAuthClaimMappingsTeamFlags(depth int, m *models.PortainereeOAuthClaimMappings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamFlagName := fmt.Sprintf("%v.Team", cmdPrefix)
	if cmd.Flags().Changed(teamFlagName) {

		var teamFlagName string
		if cmdPrefix == "" {
			teamFlagName = "Team"
		} else {
			teamFlagName = fmt.Sprintf("%v.Team", cmdPrefix)
		}

		teamFlagValue, err := cmd.Flags().GetInt64(teamFlagName)
		if err != nil {
			return err, false
		}
		m.Team = teamFlagValue

		retAdded = true
	}

	return nil, retAdded
}
