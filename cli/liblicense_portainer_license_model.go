// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for LiblicensePortainerLicense

// register flags to command
func registerModelLiblicensePortainerLicenseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLiblicensePortainerLicenseCompany(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseExpiresAfter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseExpiresAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseFirstCheckin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseLastCheckin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseLicenseKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseNodes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseProductEdition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseReference(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseRevoked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseRevokedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLiblicensePortainerLicenseVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLiblicensePortainerLicenseCompany(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	companyDescription := ``

	var companyFlagName string
	if cmdPrefix == "" {
		companyFlagName = "company"
	} else {
		companyFlagName = fmt.Sprintf("%v.company", cmdPrefix)
	}

	var companyFlagDefault string

	_ = cmd.PersistentFlags().String(companyFlagName, companyFlagDefault, companyDescription)

	return nil
}

func registerLiblicensePortainerLicenseCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdDescription := ``

	var createdFlagName string
	if cmdPrefix == "" {
		createdFlagName = "created"
	} else {
		createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
	}

	var createdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(createdFlagName, createdFlagDefault, createdDescription)

	return nil
}

func registerLiblicensePortainerLicenseEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := ``

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerLiblicensePortainerLicenseExpiresAfter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expiresAfterDescription := ``

	var expiresAfterFlagName string
	if cmdPrefix == "" {
		expiresAfterFlagName = "expiresAfter"
	} else {
		expiresAfterFlagName = fmt.Sprintf("%v.expiresAfter", cmdPrefix)
	}

	var expiresAfterFlagDefault int64

	_ = cmd.PersistentFlags().Int64(expiresAfterFlagName, expiresAfterFlagDefault, expiresAfterDescription)

	return nil
}

func registerLiblicensePortainerLicenseExpiresAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expiresAtDescription := ``

	var expiresAtFlagName string
	if cmdPrefix == "" {
		expiresAtFlagName = "expiresAt"
	} else {
		expiresAtFlagName = fmt.Sprintf("%v.expiresAt", cmdPrefix)
	}

	var expiresAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(expiresAtFlagName, expiresAtFlagDefault, expiresAtDescription)

	return nil
}

func registerLiblicensePortainerLicenseFirstCheckin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firstCheckinDescription := ``

	var firstCheckinFlagName string
	if cmdPrefix == "" {
		firstCheckinFlagName = "firstCheckin"
	} else {
		firstCheckinFlagName = fmt.Sprintf("%v.firstCheckin", cmdPrefix)
	}

	var firstCheckinFlagDefault int64

	_ = cmd.PersistentFlags().Int64(firstCheckinFlagName, firstCheckinFlagDefault, firstCheckinDescription)

	return nil
}

func registerLiblicensePortainerLicenseID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerLiblicensePortainerLicenseLastCheckin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastCheckinDescription := ``

	var lastCheckinFlagName string
	if cmdPrefix == "" {
		lastCheckinFlagName = "lastCheckin"
	} else {
		lastCheckinFlagName = fmt.Sprintf("%v.lastCheckin", cmdPrefix)
	}

	var lastCheckinFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lastCheckinFlagName, lastCheckinFlagDefault, lastCheckinDescription)

	return nil
}

func registerLiblicensePortainerLicenseLicenseKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	licenseKeyDescription := ``

	var licenseKeyFlagName string
	if cmdPrefix == "" {
		licenseKeyFlagName = "licenseKey"
	} else {
		licenseKeyFlagName = fmt.Sprintf("%v.licenseKey", cmdPrefix)
	}

	var licenseKeyFlagDefault string

	_ = cmd.PersistentFlags().String(licenseKeyFlagName, licenseKeyFlagDefault, licenseKeyDescription)

	return nil
}

func registerLiblicensePortainerLicenseNodes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodesDescription := ``

	var nodesFlagName string
	if cmdPrefix == "" {
		nodesFlagName = "nodes"
	} else {
		nodesFlagName = fmt.Sprintf("%v.nodes", cmdPrefix)
	}

	var nodesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodesFlagName, nodesFlagDefault, nodesDescription)

	return nil
}

func registerLiblicensePortainerLicenseProductEdition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	productEditionDescription := ``

	var productEditionFlagName string
	if cmdPrefix == "" {
		productEditionFlagName = "productEdition"
	} else {
		productEditionFlagName = fmt.Sprintf("%v.productEdition", cmdPrefix)
	}

	var productEditionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(productEditionFlagName, productEditionFlagDefault, productEditionDescription)

	return nil
}

func registerLiblicensePortainerLicenseReference(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	referenceDescription := ``

	var referenceFlagName string
	if cmdPrefix == "" {
		referenceFlagName = "reference"
	} else {
		referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
	}

	var referenceFlagDefault string

	_ = cmd.PersistentFlags().String(referenceFlagName, referenceFlagDefault, referenceDescription)

	return nil
}

func registerLiblicensePortainerLicenseRevoked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	revokedDescription := ``

	var revokedFlagName string
	if cmdPrefix == "" {
		revokedFlagName = "revoked"
	} else {
		revokedFlagName = fmt.Sprintf("%v.revoked", cmdPrefix)
	}

	var revokedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(revokedFlagName, revokedFlagDefault, revokedDescription)

	return nil
}

func registerLiblicensePortainerLicenseRevokedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	revokedAtDescription := ``

	var revokedAtFlagName string
	if cmdPrefix == "" {
		revokedAtFlagName = "revokedAt"
	} else {
		revokedAtFlagName = fmt.Sprintf("%v.revokedAt", cmdPrefix)
	}

	var revokedAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(revokedAtFlagName, revokedAtFlagDefault, revokedAtDescription)

	return nil
}

func registerLiblicensePortainerLicenseType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerLiblicensePortainerLicenseVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLiblicensePortainerLicenseFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, companyAdded := retrieveLiblicensePortainerLicenseCompanyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || companyAdded

	err, createdAdded := retrieveLiblicensePortainerLicenseCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, emailAdded := retrieveLiblicensePortainerLicenseEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, expiresAfterAdded := retrieveLiblicensePortainerLicenseExpiresAfterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expiresAfterAdded

	err, expiresAtAdded := retrieveLiblicensePortainerLicenseExpiresAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expiresAtAdded

	err, firstCheckinAdded := retrieveLiblicensePortainerLicenseFirstCheckinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firstCheckinAdded

	err, idAdded := retrieveLiblicensePortainerLicenseIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, lastCheckinAdded := retrieveLiblicensePortainerLicenseLastCheckinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastCheckinAdded

	err, licenseKeyAdded := retrieveLiblicensePortainerLicenseLicenseKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || licenseKeyAdded

	err, nodesAdded := retrieveLiblicensePortainerLicenseNodesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodesAdded

	err, productEditionAdded := retrieveLiblicensePortainerLicenseProductEditionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || productEditionAdded

	err, referenceAdded := retrieveLiblicensePortainerLicenseReferenceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || referenceAdded

	err, revokedAdded := retrieveLiblicensePortainerLicenseRevokedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || revokedAdded

	err, revokedAtAdded := retrieveLiblicensePortainerLicenseRevokedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || revokedAtAdded

	err, typeAdded := retrieveLiblicensePortainerLicenseTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, versionAdded := retrieveLiblicensePortainerLicenseVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseCompanyFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	companyFlagName := fmt.Sprintf("%v.company", cmdPrefix)
	if cmd.Flags().Changed(companyFlagName) {

		var companyFlagName string
		if cmdPrefix == "" {
			companyFlagName = "company"
		} else {
			companyFlagName = fmt.Sprintf("%v.company", cmdPrefix)
		}

		companyFlagValue, err := cmd.Flags().GetString(companyFlagName)
		if err != nil {
			return err, false
		}
		m.Company = companyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseCreatedFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdFlagName := fmt.Sprintf("%v.created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		var createdFlagName string
		if cmdPrefix == "" {
			createdFlagName = "created"
		} else {
			createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
		}

		createdFlagValue, err := cmd.Flags().GetInt64(createdFlagName)
		if err != nil {
			return err, false
		}
		m.Created = createdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseEmailFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = emailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseExpiresAfterFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expiresAfterFlagName := fmt.Sprintf("%v.expiresAfter", cmdPrefix)
	if cmd.Flags().Changed(expiresAfterFlagName) {

		var expiresAfterFlagName string
		if cmdPrefix == "" {
			expiresAfterFlagName = "expiresAfter"
		} else {
			expiresAfterFlagName = fmt.Sprintf("%v.expiresAfter", cmdPrefix)
		}

		expiresAfterFlagValue, err := cmd.Flags().GetInt64(expiresAfterFlagName)
		if err != nil {
			return err, false
		}
		m.ExpiresAfter = expiresAfterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseExpiresAtFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expiresAtFlagName := fmt.Sprintf("%v.expiresAt", cmdPrefix)
	if cmd.Flags().Changed(expiresAtFlagName) {

		var expiresAtFlagName string
		if cmdPrefix == "" {
			expiresAtFlagName = "expiresAt"
		} else {
			expiresAtFlagName = fmt.Sprintf("%v.expiresAt", cmdPrefix)
		}

		expiresAtFlagValue, err := cmd.Flags().GetInt64(expiresAtFlagName)
		if err != nil {
			return err, false
		}
		m.ExpiresAt = expiresAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseFirstCheckinFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firstCheckinFlagName := fmt.Sprintf("%v.firstCheckin", cmdPrefix)
	if cmd.Flags().Changed(firstCheckinFlagName) {

		var firstCheckinFlagName string
		if cmdPrefix == "" {
			firstCheckinFlagName = "firstCheckin"
		} else {
			firstCheckinFlagName = fmt.Sprintf("%v.firstCheckin", cmdPrefix)
		}

		firstCheckinFlagValue, err := cmd.Flags().GetInt64(firstCheckinFlagName)
		if err != nil {
			return err, false
		}
		m.FirstCheckin = firstCheckinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseIDFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseLastCheckinFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastCheckinFlagName := fmt.Sprintf("%v.lastCheckin", cmdPrefix)
	if cmd.Flags().Changed(lastCheckinFlagName) {

		var lastCheckinFlagName string
		if cmdPrefix == "" {
			lastCheckinFlagName = "lastCheckin"
		} else {
			lastCheckinFlagName = fmt.Sprintf("%v.lastCheckin", cmdPrefix)
		}

		lastCheckinFlagValue, err := cmd.Flags().GetInt64(lastCheckinFlagName)
		if err != nil {
			return err, false
		}
		m.LastCheckin = lastCheckinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseLicenseKeyFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	licenseKeyFlagName := fmt.Sprintf("%v.licenseKey", cmdPrefix)
	if cmd.Flags().Changed(licenseKeyFlagName) {

		var licenseKeyFlagName string
		if cmdPrefix == "" {
			licenseKeyFlagName = "licenseKey"
		} else {
			licenseKeyFlagName = fmt.Sprintf("%v.licenseKey", cmdPrefix)
		}

		licenseKeyFlagValue, err := cmd.Flags().GetString(licenseKeyFlagName)
		if err != nil {
			return err, false
		}
		m.LicenseKey = licenseKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseNodesFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodesFlagName := fmt.Sprintf("%v.nodes", cmdPrefix)
	if cmd.Flags().Changed(nodesFlagName) {

		var nodesFlagName string
		if cmdPrefix == "" {
			nodesFlagName = "nodes"
		} else {
			nodesFlagName = fmt.Sprintf("%v.nodes", cmdPrefix)
		}

		nodesFlagValue, err := cmd.Flags().GetInt64(nodesFlagName)
		if err != nil {
			return err, false
		}
		m.Nodes = nodesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseProductEditionFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	productEditionFlagName := fmt.Sprintf("%v.productEdition", cmdPrefix)
	if cmd.Flags().Changed(productEditionFlagName) {

		var productEditionFlagName string
		if cmdPrefix == "" {
			productEditionFlagName = "productEdition"
		} else {
			productEditionFlagName = fmt.Sprintf("%v.productEdition", cmdPrefix)
		}

		productEditionFlagValue, err := cmd.Flags().GetInt64(productEditionFlagName)
		if err != nil {
			return err, false
		}
		m.ProductEdition = productEditionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseReferenceFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	referenceFlagName := fmt.Sprintf("%v.reference", cmdPrefix)
	if cmd.Flags().Changed(referenceFlagName) {

		var referenceFlagName string
		if cmdPrefix == "" {
			referenceFlagName = "reference"
		} else {
			referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
		}

		referenceFlagValue, err := cmd.Flags().GetString(referenceFlagName)
		if err != nil {
			return err, false
		}
		m.Reference = referenceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseRevokedFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	revokedFlagName := fmt.Sprintf("%v.revoked", cmdPrefix)
	if cmd.Flags().Changed(revokedFlagName) {

		var revokedFlagName string
		if cmdPrefix == "" {
			revokedFlagName = "revoked"
		} else {
			revokedFlagName = fmt.Sprintf("%v.revoked", cmdPrefix)
		}

		revokedFlagValue, err := cmd.Flags().GetBool(revokedFlagName)
		if err != nil {
			return err, false
		}
		m.Revoked = &revokedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseRevokedAtFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	revokedAtFlagName := fmt.Sprintf("%v.revokedAt", cmdPrefix)
	if cmd.Flags().Changed(revokedAtFlagName) {

		var revokedAtFlagName string
		if cmdPrefix == "" {
			revokedAtFlagName = "revokedAt"
		} else {
			revokedAtFlagName = fmt.Sprintf("%v.revokedAt", cmdPrefix)
		}

		revokedAtFlagValue, err := cmd.Flags().GetInt64(revokedAtFlagName)
		if err != nil {
			return err, false
		}
		m.RevokedAt = revokedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseTypeFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLiblicensePortainerLicenseVersionFlags(depth int, m *models.LiblicensePortainerLicense, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
