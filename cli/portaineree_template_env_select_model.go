// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeTemplateEnvSelect

// register flags to command
func registerModelPortainereeTemplateEnvSelectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeTemplateEnvSelectDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateEnvSelectText(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTemplateEnvSelectValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTemplateEnvSelectDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultDescription := `Will set this choice as the default choice`

	var defaultFlagName string
	if cmdPrefix == "" {
		defaultFlagName = "default"
	} else {
		defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
	}

	var defaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defaultFlagName, defaultFlagDefault, defaultDescription)

	return nil
}

func registerPortainereeTemplateEnvSelectText(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	textDescription := `Some text that will displayed as a choice`

	var textFlagName string
	if cmdPrefix == "" {
		textFlagName = "text"
	} else {
		textFlagName = fmt.Sprintf("%v.text", cmdPrefix)
	}

	var textFlagDefault string

	_ = cmd.PersistentFlags().String(textFlagName, textFlagDefault, textDescription)

	return nil
}

func registerPortainereeTemplateEnvSelectValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `A value that will be associated to the choice`

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeTemplateEnvSelectFlags(depth int, m *models.PortainereeTemplateEnvSelect, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, defaultAdded := retrievePortainereeTemplateEnvSelectDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultAdded

	err, textAdded := retrievePortainereeTemplateEnvSelectTextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || textAdded

	err, valueAdded := retrievePortainereeTemplateEnvSelectValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrievePortainereeTemplateEnvSelectDefaultFlags(depth int, m *models.PortainereeTemplateEnvSelect, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultFlagName := fmt.Sprintf("%v.default", cmdPrefix)
	if cmd.Flags().Changed(defaultFlagName) {

		var defaultFlagName string
		if cmdPrefix == "" {
			defaultFlagName = "default"
		} else {
			defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
		}

		defaultFlagValue, err := cmd.Flags().GetBool(defaultFlagName)
		if err != nil {
			return err, false
		}
		m.Default = &defaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateEnvSelectTextFlags(depth int, m *models.PortainereeTemplateEnvSelect, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	textFlagName := fmt.Sprintf("%v.text", cmdPrefix)
	if cmd.Flags().Changed(textFlagName) {

		var textFlagName string
		if cmdPrefix == "" {
			textFlagName = "text"
		} else {
			textFlagName = fmt.Sprintf("%v.text", cmdPrefix)
		}

		textFlagValue, err := cmd.Flags().GetString(textFlagName)
		if err != nil {
			return err, false
		}
		m.Text = textFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTemplateEnvSelectValueFlags(depth int, m *models.PortainereeTemplateEnvSelect, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
