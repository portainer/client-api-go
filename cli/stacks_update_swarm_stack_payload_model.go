// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for StacksUpdateSwarmStackPayload

// register flags to command
func registerModelStacksUpdateSwarmStackPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksUpdateSwarmStackPayloadEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksUpdateSwarmStackPayloadPrune(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksUpdateSwarmStackPayloadPullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksUpdateSwarmStackPayloadStackFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksUpdateSwarmStackPayloadWebhook(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksUpdateSwarmStackPayloadEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: env []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerStacksUpdateSwarmStackPayloadPrune(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pruneDescription := `Prune services that are no longer referenced (only available for Swarm stacks)`

	var pruneFlagName string
	if cmdPrefix == "" {
		pruneFlagName = "prune"
	} else {
		pruneFlagName = fmt.Sprintf("%v.prune", cmdPrefix)
	}

	var pruneFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pruneFlagName, pruneFlagDefault, pruneDescription)

	return nil
}

func registerStacksUpdateSwarmStackPayloadPullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pullImageDescription := `Force a pulling to current image with the original tag though the image is already the latest`

	var pullImageFlagName string
	if cmdPrefix == "" {
		pullImageFlagName = "pullImage"
	} else {
		pullImageFlagName = fmt.Sprintf("%v.pullImage", cmdPrefix)
	}

	var pullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pullImageFlagName, pullImageFlagDefault, pullImageDescription)

	return nil
}

func registerStacksUpdateSwarmStackPayloadStackFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackFileContentDescription := `New content of the Stack file`

	var stackFileContentFlagName string
	if cmdPrefix == "" {
		stackFileContentFlagName = "stackFileContent"
	} else {
		stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	}

	var stackFileContentFlagDefault string

	_ = cmd.PersistentFlags().String(stackFileContentFlagName, stackFileContentFlagDefault, stackFileContentDescription)

	return nil
}

func registerStacksUpdateSwarmStackPayloadWebhook(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webhookDescription := `A UUID to identify a webhook. The stack will be force updated and pull the latest image when the webhook was invoked.`

	var webhookFlagName string
	if cmdPrefix == "" {
		webhookFlagName = "webhook"
	} else {
		webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
	}

	var webhookFlagDefault string

	_ = cmd.PersistentFlags().String(webhookFlagName, webhookFlagDefault, webhookDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksUpdateSwarmStackPayloadFlags(depth int, m *models.StacksUpdateSwarmStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, envAdded := retrieveStacksUpdateSwarmStackPayloadEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, pruneAdded := retrieveStacksUpdateSwarmStackPayloadPruneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pruneAdded

	err, pullImageAdded := retrieveStacksUpdateSwarmStackPayloadPullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pullImageAdded

	err, stackFileContentAdded := retrieveStacksUpdateSwarmStackPayloadStackFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackFileContentAdded

	err, webhookAdded := retrieveStacksUpdateSwarmStackPayloadWebhookFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webhookAdded

	return nil, retAdded
}

func retrieveStacksUpdateSwarmStackPayloadEnvFlags(depth int, m *models.StacksUpdateSwarmStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: env array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStacksUpdateSwarmStackPayloadPruneFlags(depth int, m *models.StacksUpdateSwarmStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pruneFlagName := fmt.Sprintf("%v.prune", cmdPrefix)
	if cmd.Flags().Changed(pruneFlagName) {

		var pruneFlagName string
		if cmdPrefix == "" {
			pruneFlagName = "prune"
		} else {
			pruneFlagName = fmt.Sprintf("%v.prune", cmdPrefix)
		}

		pruneFlagValue, err := cmd.Flags().GetBool(pruneFlagName)
		if err != nil {
			return err, false
		}
		m.Prune = &pruneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksUpdateSwarmStackPayloadPullImageFlags(depth int, m *models.StacksUpdateSwarmStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pullImageFlagName := fmt.Sprintf("%v.pullImage", cmdPrefix)
	if cmd.Flags().Changed(pullImageFlagName) {

		var pullImageFlagName string
		if cmdPrefix == "" {
			pullImageFlagName = "pullImage"
		} else {
			pullImageFlagName = fmt.Sprintf("%v.pullImage", cmdPrefix)
		}

		pullImageFlagValue, err := cmd.Flags().GetBool(pullImageFlagName)
		if err != nil {
			return err, false
		}
		m.PullImage = &pullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksUpdateSwarmStackPayloadStackFileContentFlags(depth int, m *models.StacksUpdateSwarmStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackFileContentFlagName := fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	if cmd.Flags().Changed(stackFileContentFlagName) {

		var stackFileContentFlagName string
		if cmdPrefix == "" {
			stackFileContentFlagName = "stackFileContent"
		} else {
			stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
		}

		stackFileContentFlagValue, err := cmd.Flags().GetString(stackFileContentFlagName)
		if err != nil {
			return err, false
		}
		m.StackFileContent = stackFileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksUpdateSwarmStackPayloadWebhookFlags(depth int, m *models.StacksUpdateSwarmStackPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webhookFlagName := fmt.Sprintf("%v.webhook", cmdPrefix)
	if cmd.Flags().Changed(webhookFlagName) {

		var webhookFlagName string
		if cmdPrefix == "" {
			webhookFlagName = "webhook"
		} else {
			webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
		}

		webhookFlagValue, err := cmd.Flags().GetString(webhookFlagName)
		if err != nil {
			return err, false
		}
		m.Webhook = webhookFlagValue

		retAdded = true
	}

	return nil, retAdded
}
