// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for TypesEndpointUpdateScheduleRelation

// register flags to command
func registerModelTypesEndpointUpdateScheduleRelationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTypesEndpointUpdateScheduleRelationEdgeStackID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesEndpointUpdateScheduleRelationEnvironmentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesEndpointUpdateScheduleRelationScheduleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTypesEndpointUpdateScheduleRelationTargetVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTypesEndpointUpdateScheduleRelationEdgeStackID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeStackIdDescription := `EdgeStack Identifier`

	var edgeStackIdFlagName string
	if cmdPrefix == "" {
		edgeStackIdFlagName = "edgeStackId"
	} else {
		edgeStackIdFlagName = fmt.Sprintf("%v.edgeStackId", cmdPrefix)
	}

	var edgeStackIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeStackIdFlagName, edgeStackIdFlagDefault, edgeStackIdDescription)

	return nil
}

func registerTypesEndpointUpdateScheduleRelationEnvironmentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentIdDescription := ``

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerTypesEndpointUpdateScheduleRelationScheduleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scheduleIdDescription := ``

	var scheduleIdFlagName string
	if cmdPrefix == "" {
		scheduleIdFlagName = "scheduleId"
	} else {
		scheduleIdFlagName = fmt.Sprintf("%v.scheduleId", cmdPrefix)
	}

	var scheduleIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(scheduleIdFlagName, scheduleIdFlagDefault, scheduleIdDescription)

	return nil
}

func registerTypesEndpointUpdateScheduleRelationTargetVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	targetVersionDescription := ``

	var targetVersionFlagName string
	if cmdPrefix == "" {
		targetVersionFlagName = "targetVersion"
	} else {
		targetVersionFlagName = fmt.Sprintf("%v.targetVersion", cmdPrefix)
	}

	var targetVersionFlagDefault string

	_ = cmd.PersistentFlags().String(targetVersionFlagName, targetVersionFlagDefault, targetVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTypesEndpointUpdateScheduleRelationFlags(depth int, m *models.TypesEndpointUpdateScheduleRelation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, edgeStackIdAdded := retrieveTypesEndpointUpdateScheduleRelationEdgeStackIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeStackIdAdded

	err, environmentIdAdded := retrieveTypesEndpointUpdateScheduleRelationEnvironmentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentIdAdded

	err, scheduleIdAdded := retrieveTypesEndpointUpdateScheduleRelationScheduleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduleIdAdded

	err, targetVersionAdded := retrieveTypesEndpointUpdateScheduleRelationTargetVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetVersionAdded

	return nil, retAdded
}

func retrieveTypesEndpointUpdateScheduleRelationEdgeStackIDFlags(depth int, m *models.TypesEndpointUpdateScheduleRelation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeStackIdFlagName := fmt.Sprintf("%v.edgeStackId", cmdPrefix)
	if cmd.Flags().Changed(edgeStackIdFlagName) {

		var edgeStackIdFlagName string
		if cmdPrefix == "" {
			edgeStackIdFlagName = "edgeStackId"
		} else {
			edgeStackIdFlagName = fmt.Sprintf("%v.edgeStackId", cmdPrefix)
		}

		edgeStackIdFlagValue, err := cmd.Flags().GetInt64(edgeStackIdFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeStackID = edgeStackIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesEndpointUpdateScheduleRelationEnvironmentIDFlags(depth int, m *models.TypesEndpointUpdateScheduleRelation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentIdFlagName := fmt.Sprintf("%v.environmentId", cmdPrefix)
	if cmd.Flags().Changed(environmentIdFlagName) {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetInt64(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = environmentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesEndpointUpdateScheduleRelationScheduleIDFlags(depth int, m *models.TypesEndpointUpdateScheduleRelation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduleIdFlagName := fmt.Sprintf("%v.scheduleId", cmdPrefix)
	if cmd.Flags().Changed(scheduleIdFlagName) {

		var scheduleIdFlagName string
		if cmdPrefix == "" {
			scheduleIdFlagName = "scheduleId"
		} else {
			scheduleIdFlagName = fmt.Sprintf("%v.scheduleId", cmdPrefix)
		}

		scheduleIdFlagValue, err := cmd.Flags().GetInt64(scheduleIdFlagName)
		if err != nil {
			return err, false
		}
		m.ScheduleID = scheduleIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTypesEndpointUpdateScheduleRelationTargetVersionFlags(depth int, m *models.TypesEndpointUpdateScheduleRelation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	targetVersionFlagName := fmt.Sprintf("%v.targetVersion", cmdPrefix)
	if cmd.Flags().Changed(targetVersionFlagName) {

		var targetVersionFlagName string
		if cmdPrefix == "" {
			targetVersionFlagName = "targetVersion"
		} else {
			targetVersionFlagName = fmt.Sprintf("%v.targetVersion", cmdPrefix)
		}

		targetVersionFlagValue, err := cmd.Flags().GetString(targetVersionFlagName)
		if err != nil {
			return err, false
		}
		m.TargetVersion = targetVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
