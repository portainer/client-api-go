// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for UsersGitCredentialResponse

// register flags to command
func registerModelUsersGitCredentialResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUsersGitCredentialResponseGitCredential(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUsersGitCredentialResponseGitCredential(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var gitCredentialFlagName string
	if cmdPrefix == "" {
		gitCredentialFlagName = "gitCredential"
	} else {
		gitCredentialFlagName = fmt.Sprintf("%v.gitCredential", cmdPrefix)
	}

	if err := registerModelPortainereeGitCredentialFlags(depth+1, gitCredentialFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUsersGitCredentialResponseFlags(depth int, m *models.UsersGitCredentialResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, gitCredentialAdded := retrieveUsersGitCredentialResponseGitCredentialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitCredentialAdded

	return nil, retAdded
}

func retrieveUsersGitCredentialResponseGitCredentialFlags(depth int, m *models.UsersGitCredentialResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gitCredentialFlagName := fmt.Sprintf("%v.gitCredential", cmdPrefix)
	if cmd.Flags().Changed(gitCredentialFlagName) {
		// info: complex object gitCredential PortainereeGitCredential is retrieved outside this Changed() block
	}
	gitCredentialFlagValue := m.GitCredential
	if swag.IsZero(gitCredentialFlagValue) {
		gitCredentialFlagValue = &models.PortainereeGitCredential{}
	}

	err, gitCredentialAdded := retrieveModelPortainereeGitCredentialFlags(depth+1, gitCredentialFlagValue, gitCredentialFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gitCredentialAdded
	if gitCredentialAdded {
		m.GitCredential = gitCredentialFlagValue
	}

	return nil, retAdded
}
