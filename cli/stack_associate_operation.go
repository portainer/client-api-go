// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/stacks"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationStacksStackAssociateCmd returns a cmd to handle operation stackAssociate
func makeOperationStacksStackAssociateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "StackAssociate",
		Short: `**Access policy**: administrator`,
		RunE:  runOperationStacksStackAssociate,
	}

	if err := registerOperationStacksStackAssociateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStacksStackAssociate uses cmd flags to call endpoint api
func runOperationStacksStackAssociate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := stacks.NewStackAssociateParams()
	if err, _ := retrieveOperationStacksStackAssociateEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStacksStackAssociateIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStacksStackAssociateOrphanedRunningFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationStacksStackAssociateSwarmIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStacksStackAssociateResult(appCli.Stacks.StackAssociate(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationStacksStackAssociateParamFlags registers all flags needed to fill params
func registerOperationStacksStackAssociateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStacksStackAssociateEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStacksStackAssociateIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStacksStackAssociateOrphanedRunningParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStacksStackAssociateSwarmIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStacksStackAssociateEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := `Required. Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationStacksStackAssociateIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Stack identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationStacksStackAssociateOrphanedRunningParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	orphanedRunningDescription := `Required. Indicates whether the stack is orphaned`

	var orphanedRunningFlagName string
	if cmdPrefix == "" {
		orphanedRunningFlagName = "orphanedRunning"
	} else {
		orphanedRunningFlagName = fmt.Sprintf("%v.orphanedRunning", cmdPrefix)
	}

	var orphanedRunningFlagDefault bool

	_ = cmd.PersistentFlags().Bool(orphanedRunningFlagName, orphanedRunningFlagDefault, orphanedRunningDescription)

	return nil
}
func registerOperationStacksStackAssociateSwarmIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	swarmIdDescription := `Required. Swarm identifier`

	var swarmIdFlagName string
	if cmdPrefix == "" {
		swarmIdFlagName = "swarmId"
	} else {
		swarmIdFlagName = fmt.Sprintf("%v.swarmId", cmdPrefix)
	}

	var swarmIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(swarmIdFlagName, swarmIdFlagDefault, swarmIdDescription)

	return nil
}

func retrieveOperationStacksStackAssociateEndpointIDFlag(m *stacks.StackAssociateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpointId") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStacksStackAssociateIDFlag(m *stacks.StackAssociateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStacksStackAssociateOrphanedRunningFlag(m *stacks.StackAssociateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("orphanedRunning") {

		var orphanedRunningFlagName string
		if cmdPrefix == "" {
			orphanedRunningFlagName = "orphanedRunning"
		} else {
			orphanedRunningFlagName = fmt.Sprintf("%v.orphanedRunning", cmdPrefix)
		}

		orphanedRunningFlagValue, err := cmd.Flags().GetBool(orphanedRunningFlagName)
		if err != nil {
			return err, false
		}
		m.OrphanedRunning = orphanedRunningFlagValue

	}
	return nil, retAdded
}
func retrieveOperationStacksStackAssociateSwarmIDFlag(m *stacks.StackAssociateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("swarmId") {

		var swarmIdFlagName string
		if cmdPrefix == "" {
			swarmIdFlagName = "swarmId"
		} else {
			swarmIdFlagName = fmt.Sprintf("%v.swarmId", cmdPrefix)
		}

		swarmIdFlagValue, err := cmd.Flags().GetInt64(swarmIdFlagName)
		if err != nil {
			return err, false
		}
		m.SwarmID = swarmIdFlagValue

	}
	return nil, retAdded
}

// parseOperationStacksStackAssociateResult parses request result and return the string content
func parseOperationStacksStackAssociateResult(resp0 *stacks.StackAssociateOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*stacks.StackAssociateOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning stackAssociateBadRequest is not supported

		// Non schema case: warning stackAssociateForbidden is not supported

		// Non schema case: warning stackAssociateNotFound is not supported

		// Non schema case: warning stackAssociateInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
