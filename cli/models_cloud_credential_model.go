// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for ModelsCloudCredential

// register flags to command
func registerModelModelsCloudCredentialFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModelsCloudCredentialCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsCloudCredentialCredentials(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsCloudCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsCloudCredentialName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModelsCloudCredentialProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModelsCloudCredentialCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdDescription := ``

	var createdFlagName string
	if cmdPrefix == "" {
		createdFlagName = "created"
	} else {
		createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
	}

	var createdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(createdFlagName, createdFlagDefault, createdDescription)

	return nil
}

func registerModelsCloudCredentialCredentials(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: credentials ModelsCloudCredentialMap map type is not supported by go-swagger cli yet

	return nil
}

func registerModelsCloudCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModelsCloudCredentialName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerModelsCloudCredentialProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	providerDescription := ``

	var providerFlagName string
	if cmdPrefix == "" {
		providerFlagName = "provider"
	} else {
		providerFlagName = fmt.Sprintf("%v.provider", cmdPrefix)
	}

	var providerFlagDefault string

	_ = cmd.PersistentFlags().String(providerFlagName, providerFlagDefault, providerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModelsCloudCredentialFlags(depth int, m *models.ModelsCloudCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAdded := retrieveModelsCloudCredentialCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, credentialsAdded := retrieveModelsCloudCredentialCredentialsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialsAdded

	err, idAdded := retrieveModelsCloudCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveModelsCloudCredentialNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, providerAdded := retrieveModelsCloudCredentialProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || providerAdded

	return nil, retAdded
}

func retrieveModelsCloudCredentialCreatedFlags(depth int, m *models.ModelsCloudCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdFlagName := fmt.Sprintf("%v.created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		var createdFlagName string
		if cmdPrefix == "" {
			createdFlagName = "created"
		} else {
			createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
		}

		createdFlagValue, err := cmd.Flags().GetInt64(createdFlagName)
		if err != nil {
			return err, false
		}
		m.Created = createdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModelsCloudCredentialCredentialsFlags(depth int, m *models.ModelsCloudCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	credentialsFlagName := fmt.Sprintf("%v.credentials", cmdPrefix)
	if cmd.Flags().Changed(credentialsFlagName) {
		// warning: credentials map type ModelsCloudCredentialMap is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModelsCloudCredentialIDFlags(depth int, m *models.ModelsCloudCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModelsCloudCredentialNameFlags(depth int, m *models.ModelsCloudCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModelsCloudCredentialProviderFlags(depth int, m *models.ModelsCloudCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	providerFlagName := fmt.Sprintf("%v.provider", cmdPrefix)
	if cmd.Flags().Changed(providerFlagName) {

		var providerFlagName string
		if cmdPrefix == "" {
			providerFlagName = "provider"
		} else {
			providerFlagName = fmt.Sprintf("%v.provider", cmdPrefix)
		}

		providerFlagValue, err := cmd.Flags().GetString(providerFlagName)
		if err != nil {
			return err, false
		}
		m.Provider = providerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
