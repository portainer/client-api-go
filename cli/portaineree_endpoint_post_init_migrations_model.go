// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeEndpointPostInitMigrations

// register flags to command
func registerModelPortainereeEndpointPostInitMigrationsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEndpointPostInitMigrationsMigrateIngresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEndpointPostInitMigrationsMigrateIngresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	migrateIngressesDescription := ``

	var migrateIngressesFlagName string
	if cmdPrefix == "" {
		migrateIngressesFlagName = "MigrateIngresses"
	} else {
		migrateIngressesFlagName = fmt.Sprintf("%v.MigrateIngresses", cmdPrefix)
	}

	var migrateIngressesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(migrateIngressesFlagName, migrateIngressesFlagDefault, migrateIngressesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEndpointPostInitMigrationsFlags(depth int, m *models.PortainereeEndpointPostInitMigrations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, migrateIngressesAdded := retrievePortainereeEndpointPostInitMigrationsMigrateIngressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || migrateIngressesAdded

	return nil, retAdded
}

func retrievePortainereeEndpointPostInitMigrationsMigrateIngressesFlags(depth int, m *models.PortainereeEndpointPostInitMigrations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	migrateIngressesFlagName := fmt.Sprintf("%v.MigrateIngresses", cmdPrefix)
	if cmd.Flags().Changed(migrateIngressesFlagName) {

		var migrateIngressesFlagName string
		if cmdPrefix == "" {
			migrateIngressesFlagName = "MigrateIngresses"
		} else {
			migrateIngressesFlagName = fmt.Sprintf("%v.MigrateIngresses", cmdPrefix)
		}

		migrateIngressesFlagValue, err := cmd.Flags().GetBool(migrateIngressesFlagName)
		if err != nil {
			return err, false
		}
		m.MigrateIngresses = &migrateIngressesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
