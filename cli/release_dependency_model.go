// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for ReleaseDependency

// register flags to command
func registerModelReleaseDependencyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReleaseDependencyAlias(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseDependencyCondition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseDependencyEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseDependencyImportValues(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseDependencyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseDependencyRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseDependencyTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseDependencyVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseDependencyAlias(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aliasDescription := `Alias usable alias to be used for the chart`

	var aliasFlagName string
	if cmdPrefix == "" {
		aliasFlagName = "alias"
	} else {
		aliasFlagName = fmt.Sprintf("%v.alias", cmdPrefix)
	}

	var aliasFlagDefault string

	_ = cmd.PersistentFlags().String(aliasFlagName, aliasFlagDefault, aliasDescription)

	return nil
}

func registerReleaseDependencyCondition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	conditionDescription := `A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )`

	var conditionFlagName string
	if cmdPrefix == "" {
		conditionFlagName = "condition"
	} else {
		conditionFlagName = fmt.Sprintf("%v.condition", cmdPrefix)
	}

	var conditionFlagDefault string

	_ = cmd.PersistentFlags().String(conditionFlagName, conditionFlagDefault, conditionDescription)

	return nil
}

func registerReleaseDependencyEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Enabled bool determines if chart should be loaded`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerReleaseDependencyImportValues(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: import-values []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseDependencyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name is the name of the dependency.

This must mach the name in the dependency's Chart.yaml.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerReleaseDependencyRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryDescription := `The URL to the repository.

Appending ` + "`" + `index.yaml` + "`" + ` to this string should result in a URL that can be
used to fetch the repository index.`

	var repositoryFlagName string
	if cmdPrefix == "" {
		repositoryFlagName = "repository"
	} else {
		repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
	}

	var repositoryFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryFlagName, repositoryFlagDefault, repositoryDescription)

	return nil
}

func registerReleaseDependencyTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerReleaseDependencyVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Version is the version (range) of this chart.

A lock file will always produce a single version, while a dependency
may contain a semantic version range.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReleaseDependencyFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aliasAdded := retrieveReleaseDependencyAliasFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aliasAdded

	err, conditionAdded := retrieveReleaseDependencyConditionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conditionAdded

	err, enabledAdded := retrieveReleaseDependencyEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, importValuesAdded := retrieveReleaseDependencyImportValuesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || importValuesAdded

	err, nameAdded := retrieveReleaseDependencyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, repositoryAdded := retrieveReleaseDependencyRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded

	err, tagsAdded := retrieveReleaseDependencyTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, versionAdded := retrieveReleaseDependencyVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveReleaseDependencyAliasFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aliasFlagName := fmt.Sprintf("%v.alias", cmdPrefix)
	if cmd.Flags().Changed(aliasFlagName) {

		var aliasFlagName string
		if cmdPrefix == "" {
			aliasFlagName = "alias"
		} else {
			aliasFlagName = fmt.Sprintf("%v.alias", cmdPrefix)
		}

		aliasFlagValue, err := cmd.Flags().GetString(aliasFlagName)
		if err != nil {
			return err, false
		}
		m.Alias = aliasFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseDependencyConditionFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	conditionFlagName := fmt.Sprintf("%v.condition", cmdPrefix)
	if cmd.Flags().Changed(conditionFlagName) {

		var conditionFlagName string
		if cmdPrefix == "" {
			conditionFlagName = "condition"
		} else {
			conditionFlagName = fmt.Sprintf("%v.condition", cmdPrefix)
		}

		conditionFlagValue, err := cmd.Flags().GetString(conditionFlagName)
		if err != nil {
			return err, false
		}
		m.Condition = conditionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseDependencyEnabledFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseDependencyImportValuesFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	importValuesFlagName := fmt.Sprintf("%v.import-values", cmdPrefix)
	if cmd.Flags().Changed(importValuesFlagName) {
		// warning: import-values array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseDependencyNameFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseDependencyRepositoryFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryFlagName := fmt.Sprintf("%v.repository", cmdPrefix)
	if cmd.Flags().Changed(repositoryFlagName) {

		var repositoryFlagName string
		if cmdPrefix == "" {
			repositoryFlagName = "repository"
		} else {
			repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
		}

		repositoryFlagValue, err := cmd.Flags().GetString(repositoryFlagName)
		if err != nil {
			return err, false
		}
		m.Repository = repositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseDependencyTagsFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReleaseDependencyVersionFlags(depth int, m *models.ReleaseDependency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
