// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for FdoDeviceConfigurePayload

// register flags to command
func registerModelFdoDeviceConfigurePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFdoDeviceConfigurePayloadEdgeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFdoDeviceConfigurePayloadEdgeKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFdoDeviceConfigurePayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFdoDeviceConfigurePayloadProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFdoDeviceConfigurePayloadEdgeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeIdDescription := ``

	var edgeIdFlagName string
	if cmdPrefix == "" {
		edgeIdFlagName = "edgeID"
	} else {
		edgeIdFlagName = fmt.Sprintf("%v.edgeID", cmdPrefix)
	}

	var edgeIdFlagDefault string

	_ = cmd.PersistentFlags().String(edgeIdFlagName, edgeIdFlagDefault, edgeIdDescription)

	return nil
}

func registerFdoDeviceConfigurePayloadEdgeKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeKeyDescription := ``

	var edgeKeyFlagName string
	if cmdPrefix == "" {
		edgeKeyFlagName = "edgeKey"
	} else {
		edgeKeyFlagName = fmt.Sprintf("%v.edgeKey", cmdPrefix)
	}

	var edgeKeyFlagDefault string

	_ = cmd.PersistentFlags().String(edgeKeyFlagName, edgeKeyFlagDefault, edgeKeyDescription)

	return nil
}

func registerFdoDeviceConfigurePayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerFdoDeviceConfigurePayloadProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	profileDescription := ``

	var profileFlagName string
	if cmdPrefix == "" {
		profileFlagName = "profile"
	} else {
		profileFlagName = fmt.Sprintf("%v.profile", cmdPrefix)
	}

	var profileFlagDefault int64

	_ = cmd.PersistentFlags().Int64(profileFlagName, profileFlagDefault, profileDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFdoDeviceConfigurePayloadFlags(depth int, m *models.FdoDeviceConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, edgeIdAdded := retrieveFdoDeviceConfigurePayloadEdgeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeIdAdded

	err, edgeKeyAdded := retrieveFdoDeviceConfigurePayloadEdgeKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeKeyAdded

	err, nameAdded := retrieveFdoDeviceConfigurePayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, profileAdded := retrieveFdoDeviceConfigurePayloadProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || profileAdded

	return nil, retAdded
}

func retrieveFdoDeviceConfigurePayloadEdgeIDFlags(depth int, m *models.FdoDeviceConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeIdFlagName := fmt.Sprintf("%v.edgeID", cmdPrefix)
	if cmd.Flags().Changed(edgeIdFlagName) {

		var edgeIdFlagName string
		if cmdPrefix == "" {
			edgeIdFlagName = "edgeID"
		} else {
			edgeIdFlagName = fmt.Sprintf("%v.edgeID", cmdPrefix)
		}

		edgeIdFlagValue, err := cmd.Flags().GetString(edgeIdFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeID = edgeIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFdoDeviceConfigurePayloadEdgeKeyFlags(depth int, m *models.FdoDeviceConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeKeyFlagName := fmt.Sprintf("%v.edgeKey", cmdPrefix)
	if cmd.Flags().Changed(edgeKeyFlagName) {

		var edgeKeyFlagName string
		if cmdPrefix == "" {
			edgeKeyFlagName = "edgeKey"
		} else {
			edgeKeyFlagName = fmt.Sprintf("%v.edgeKey", cmdPrefix)
		}

		edgeKeyFlagValue, err := cmd.Flags().GetString(edgeKeyFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeKey = edgeKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFdoDeviceConfigurePayloadNameFlags(depth int, m *models.FdoDeviceConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFdoDeviceConfigurePayloadProfileFlags(depth int, m *models.FdoDeviceConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	profileFlagName := fmt.Sprintf("%v.profile", cmdPrefix)
	if cmd.Flags().Changed(profileFlagName) {

		var profileFlagName string
		if cmdPrefix == "" {
			profileFlagName = "profile"
		} else {
			profileFlagName = fmt.Sprintf("%v.profile", cmdPrefix)
		}

		profileFlagValue, err := cmd.Flags().GetInt64(profileFlagName)
		if err != nil {
			return err, false
		}
		m.Profile = profileFlagValue

		retAdded = true
	}

	return nil, retAdded
}
