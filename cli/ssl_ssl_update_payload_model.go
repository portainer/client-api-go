// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for SslSslUpdatePayload

// register flags to command
func registerModelSslSslUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSslSslUpdatePayloadCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslSslUpdatePayloadHttpenabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSslSslUpdatePayloadKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSslSslUpdatePayloadCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certDescription := ``

	var certFlagName string
	if cmdPrefix == "" {
		certFlagName = "cert"
	} else {
		certFlagName = fmt.Sprintf("%v.cert", cmdPrefix)
	}

	var certFlagDefault string

	_ = cmd.PersistentFlags().String(certFlagName, certFlagDefault, certDescription)

	return nil
}

func registerSslSslUpdatePayloadHttpenabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpenabledDescription := ``

	var httpenabledFlagName string
	if cmdPrefix == "" {
		httpenabledFlagName = "httpenabled"
	} else {
		httpenabledFlagName = fmt.Sprintf("%v.httpenabled", cmdPrefix)
	}

	var httpenabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(httpenabledFlagName, httpenabledFlagDefault, httpenabledDescription)

	return nil
}

func registerSslSslUpdatePayloadKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyDescription := ``

	var keyFlagName string
	if cmdPrefix == "" {
		keyFlagName = "key"
	} else {
		keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
	}

	var keyFlagDefault string

	_ = cmd.PersistentFlags().String(keyFlagName, keyFlagDefault, keyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSslSslUpdatePayloadFlags(depth int, m *models.SslSslUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, certAdded := retrieveSslSslUpdatePayloadCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certAdded

	err, httpenabledAdded := retrieveSslSslUpdatePayloadHttpenabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpenabledAdded

	err, keyAdded := retrieveSslSslUpdatePayloadKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyAdded

	return nil, retAdded
}

func retrieveSslSslUpdatePayloadCertFlags(depth int, m *models.SslSslUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certFlagName := fmt.Sprintf("%v.cert", cmdPrefix)
	if cmd.Flags().Changed(certFlagName) {

		var certFlagName string
		if cmdPrefix == "" {
			certFlagName = "cert"
		} else {
			certFlagName = fmt.Sprintf("%v.cert", cmdPrefix)
		}

		certFlagValue, err := cmd.Flags().GetString(certFlagName)
		if err != nil {
			return err, false
		}
		m.Cert = certFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslSslUpdatePayloadHttpenabledFlags(depth int, m *models.SslSslUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpenabledFlagName := fmt.Sprintf("%v.httpenabled", cmdPrefix)
	if cmd.Flags().Changed(httpenabledFlagName) {

		var httpenabledFlagName string
		if cmdPrefix == "" {
			httpenabledFlagName = "httpenabled"
		} else {
			httpenabledFlagName = fmt.Sprintf("%v.httpenabled", cmdPrefix)
		}

		httpenabledFlagValue, err := cmd.Flags().GetBool(httpenabledFlagName)
		if err != nil {
			return err, false
		}
		m.Httpenabled = &httpenabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSslSslUpdatePayloadKeyFlags(depth int, m *models.SslSslUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyFlagName := fmt.Sprintf("%v.key", cmdPrefix)
	if cmd.Flags().Changed(keyFlagName) {

		var keyFlagName string
		if cmdPrefix == "" {
			keyFlagName = "key"
		} else {
			keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
		}

		keyFlagValue, err := cmd.Flags().GetString(keyFlagName)
		if err != nil {
			return err, false
		}
		m.Key = keyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
