// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for NomadSlimNomadTaskEvent

// register flags to command
func registerModelNomadSlimNomadTaskEventFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNomadSlimNomadTaskEventDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNomadSlimNomadTaskEventMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNomadSlimNomadTaskEventType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNomadSlimNomadTaskEventDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dateDescription := ``

	var dateFlagName string
	if cmdPrefix == "" {
		dateFlagName = "date"
	} else {
		dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
	}

	var dateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dateFlagName, dateFlagDefault, dateDescription)

	return nil
}

func registerNomadSlimNomadTaskEventMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := ``

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerNomadSlimNomadTaskEventType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNomadSlimNomadTaskEventFlags(depth int, m *models.NomadSlimNomadTaskEvent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dateAdded := retrieveNomadSlimNomadTaskEventDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateAdded

	err, messageAdded := retrieveNomadSlimNomadTaskEventMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, typeAdded := retrieveNomadSlimNomadTaskEventTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveNomadSlimNomadTaskEventDateFlags(depth int, m *models.NomadSlimNomadTaskEvent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateFlagName := fmt.Sprintf("%v.date", cmdPrefix)
	if cmd.Flags().Changed(dateFlagName) {

		var dateFlagName string
		if cmdPrefix == "" {
			dateFlagName = "date"
		} else {
			dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
		}

		dateFlagValue, err := cmd.Flags().GetInt64(dateFlagName)
		if err != nil {
			return err, false
		}
		m.Date = dateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNomadSlimNomadTaskEventMessageFlags(depth int, m *models.NomadSlimNomadTaskEvent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNomadSlimNomadTaskEventTypeFlags(depth int, m *models.NomadSlimNomadTaskEvent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
