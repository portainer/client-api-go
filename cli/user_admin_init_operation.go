// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/users"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUsersUserAdminInitCmd returns a cmd to handle operation userAdminInit
func makeOperationUsersUserAdminInitCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "UserAdminInit",
		Short: `Initialize the 'admin' user account.
**Access policy**: public`,
		RunE: runOperationUsersUserAdminInit,
	}

	if err := registerOperationUsersUserAdminInitParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUsersUserAdminInit uses cmd flags to call endpoint api
func runOperationUsersUserAdminInit(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := users.NewUserAdminInitParams()
	if err, _ := retrieveOperationUsersUserAdminInitBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUsersUserAdminInitResult(appCli.Users.UserAdminInit(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUsersUserAdminInitParamFlags registers all flags needed to fill params
func registerOperationUsersUserAdminInitParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUsersUserAdminInitBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUsersUserAdminInitBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. User details")

	// add flags for body
	if err := registerModelUsersAdminInitPayloadFlags(0, "usersAdminInitPayload", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationUsersUserAdminInitBodyFlag(m *users.UserAdminInitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.UsersAdminInitPayload{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.UsersAdminInitPayload: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.UsersAdminInitPayload{}
	}
	err, added := retrieveModelUsersAdminInitPayloadFlags(0, bodyValueModel, "usersAdminInitPayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationUsersUserAdminInitResult parses request result and return the string content
func parseOperationUsersUserAdminInitResult(resp0 *users.UserAdminInitOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*users.UserAdminInitOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning userAdminInitBadRequest is not supported

		// Non schema case: warning userAdminInitConflict is not supported

		// Non schema case: warning userAdminInitInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
