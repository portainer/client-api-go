// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PodsecurityPodSecurityRule

// register flags to command
func registerModelPodsecurityPodSecurityRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPodsecurityPodSecurityRuleAllowFlexVolumes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleAllowPrivilegeEscalation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleAllowProcMount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleAppArmor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleCapabilities(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleEndPointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleForbiddenSysctlsList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleHostFilesystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleHostNamespaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleHostPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRulePrivilegedContainers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleReadOnlyRootFileSystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleSecComp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleSelinux(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPodsecurityPodSecurityRuleVolumeTypes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleAllowFlexVolumes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var allowFlexVolumesFlagName string
	if cmdPrefix == "" {
		allowFlexVolumesFlagName = "allowFlexVolumes"
	} else {
		allowFlexVolumesFlagName = fmt.Sprintf("%v.allowFlexVolumes", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityAllowFlexVolumesFlags(depth+1, allowFlexVolumesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleAllowPrivilegeEscalation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var allowPrivilegeEscalationFlagName string
	if cmdPrefix == "" {
		allowPrivilegeEscalationFlagName = "allowPrivilegeEscalation"
	} else {
		allowPrivilegeEscalationFlagName = fmt.Sprintf("%v.allowPrivilegeEscalation", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityAllowPrivilegeEscalationFlags(depth+1, allowPrivilegeEscalationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleAllowProcMount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var allowProcMountFlagName string
	if cmdPrefix == "" {
		allowProcMountFlagName = "allowProcMount"
	} else {
		allowProcMountFlagName = fmt.Sprintf("%v.allowProcMount", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityAllowProcMountFlags(depth+1, allowProcMountFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleAppArmor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var appArmorFlagName string
	if cmdPrefix == "" {
		appArmorFlagName = "appArmor"
	} else {
		appArmorFlagName = fmt.Sprintf("%v.appArmor", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityAppArmourFlags(depth+1, appArmorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleCapabilities(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var capabilitiesFlagName string
	if cmdPrefix == "" {
		capabilitiesFlagName = "capabilities"
	} else {
		capabilitiesFlagName = fmt.Sprintf("%v.capabilities", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityCapabilitiesFlags(depth+1, capabilitiesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerPodsecurityPodSecurityRuleEndPointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endPointIdDescription := ``

	var endPointIdFlagName string
	if cmdPrefix == "" {
		endPointIdFlagName = "endPointID"
	} else {
		endPointIdFlagName = fmt.Sprintf("%v.endPointID", cmdPrefix)
	}

	var endPointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endPointIdFlagName, endPointIdFlagDefault, endPointIdDescription)

	return nil
}

func registerPodsecurityPodSecurityRuleForbiddenSysctlsList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var forbiddenSysctlsListFlagName string
	if cmdPrefix == "" {
		forbiddenSysctlsListFlagName = "forbiddenSysctlsList"
	} else {
		forbiddenSysctlsListFlagName = fmt.Sprintf("%v.forbiddenSysctlsList", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityForbiddenSysctlsListFlags(depth+1, forbiddenSysctlsListFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleHostFilesystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var hostFilesystemFlagName string
	if cmdPrefix == "" {
		hostFilesystemFlagName = "hostFilesystem"
	} else {
		hostFilesystemFlagName = fmt.Sprintf("%v.hostFilesystem", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityHostFilesystemFlags(depth+1, hostFilesystemFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleHostNamespaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var hostNamespacesFlagName string
	if cmdPrefix == "" {
		hostNamespacesFlagName = "hostNamespaces"
	} else {
		hostNamespacesFlagName = fmt.Sprintf("%v.hostNamespaces", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityHostNamespacesFlags(depth+1, hostNamespacesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleHostPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var hostPortsFlagName string
	if cmdPrefix == "" {
		hostPortsFlagName = "hostPorts"
	} else {
		hostPortsFlagName = fmt.Sprintf("%v.hostPorts", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityHostNetworkingPortsFlags(depth+1, hostPortsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPodsecurityPodSecurityRulePrivilegedContainers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var privilegedContainersFlagName string
	if cmdPrefix == "" {
		privilegedContainersFlagName = "privilegedContainers"
	} else {
		privilegedContainersFlagName = fmt.Sprintf("%v.privilegedContainers", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityPrivilegedContainersFlags(depth+1, privilegedContainersFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleReadOnlyRootFileSystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var readOnlyRootFileSystemFlagName string
	if cmdPrefix == "" {
		readOnlyRootFileSystemFlagName = "readOnlyRootFileSystem"
	} else {
		readOnlyRootFileSystemFlagName = fmt.Sprintf("%v.readOnlyRootFileSystem", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityReadOnlyRootFileSystemFlags(depth+1, readOnlyRootFileSystemFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleSecComp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var secCompFlagName string
	if cmdPrefix == "" {
		secCompFlagName = "secComp"
	} else {
		secCompFlagName = fmt.Sprintf("%v.secComp", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecuritySecCompFlags(depth+1, secCompFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleSelinux(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var selinuxFlagName string
	if cmdPrefix == "" {
		selinuxFlagName = "selinux"
	} else {
		selinuxFlagName = fmt.Sprintf("%v.selinux", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecuritySelinuxFlags(depth+1, selinuxFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var usersFlagName string
	if cmdPrefix == "" {
		usersFlagName = "users"
	} else {
		usersFlagName = fmt.Sprintf("%v.users", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityUsersFlags(depth+1, usersFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPodsecurityPodSecurityRuleVolumeTypes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var volumeTypesFlagName string
	if cmdPrefix == "" {
		volumeTypesFlagName = "volumeTypes"
	} else {
		volumeTypesFlagName = fmt.Sprintf("%v.volumeTypes", cmdPrefix)
	}

	if err := registerModelPodsecurityPodSecurityVolumeTypesFlags(depth+1, volumeTypesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPodsecurityPodSecurityRuleFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allowFlexVolumesAdded := retrievePodsecurityPodSecurityRuleAllowFlexVolumesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowFlexVolumesAdded

	err, allowPrivilegeEscalationAdded := retrievePodsecurityPodSecurityRuleAllowPrivilegeEscalationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowPrivilegeEscalationAdded

	err, allowProcMountAdded := retrievePodsecurityPodSecurityRuleAllowProcMountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowProcMountAdded

	err, appArmorAdded := retrievePodsecurityPodSecurityRuleAppArmorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appArmorAdded

	err, capabilitiesAdded := retrievePodsecurityPodSecurityRuleCapabilitiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || capabilitiesAdded

	err, enabledAdded := retrievePodsecurityPodSecurityRuleEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, endPointIdAdded := retrievePodsecurityPodSecurityRuleEndPointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endPointIdAdded

	err, forbiddenSysctlsListAdded := retrievePodsecurityPodSecurityRuleForbiddenSysctlsListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forbiddenSysctlsListAdded

	err, hostFilesystemAdded := retrievePodsecurityPodSecurityRuleHostFilesystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostFilesystemAdded

	err, hostNamespacesAdded := retrievePodsecurityPodSecurityRuleHostNamespacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostNamespacesAdded

	err, hostPortsAdded := retrievePodsecurityPodSecurityRuleHostPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostPortsAdded

	err, idAdded := retrievePodsecurityPodSecurityRuleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, privilegedContainersAdded := retrievePodsecurityPodSecurityRulePrivilegedContainersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || privilegedContainersAdded

	err, readOnlyRootFileSystemAdded := retrievePodsecurityPodSecurityRuleReadOnlyRootFileSystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyRootFileSystemAdded

	err, secCompAdded := retrievePodsecurityPodSecurityRuleSecCompFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secCompAdded

	err, selinuxAdded := retrievePodsecurityPodSecurityRuleSelinuxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || selinuxAdded

	err, usersAdded := retrievePodsecurityPodSecurityRuleUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usersAdded

	err, volumeTypesAdded := retrievePodsecurityPodSecurityRuleVolumeTypesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumeTypesAdded

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleAllowFlexVolumesFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowFlexVolumesFlagName := fmt.Sprintf("%v.allowFlexVolumes", cmdPrefix)
	if cmd.Flags().Changed(allowFlexVolumesFlagName) {
		// info: complex object allowFlexVolumes PodsecurityPodSecurityAllowFlexVolumes is retrieved outside this Changed() block
	}
	allowFlexVolumesFlagValue := m.AllowFlexVolumes
	if swag.IsZero(allowFlexVolumesFlagValue) {
		allowFlexVolumesFlagValue = &models.PodsecurityPodSecurityAllowFlexVolumes{}
	}

	err, allowFlexVolumesAdded := retrieveModelPodsecurityPodSecurityAllowFlexVolumesFlags(depth+1, allowFlexVolumesFlagValue, allowFlexVolumesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowFlexVolumesAdded
	if allowFlexVolumesAdded {
		m.AllowFlexVolumes = allowFlexVolumesFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleAllowPrivilegeEscalationFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowPrivilegeEscalationFlagName := fmt.Sprintf("%v.allowPrivilegeEscalation", cmdPrefix)
	if cmd.Flags().Changed(allowPrivilegeEscalationFlagName) {
		// info: complex object allowPrivilegeEscalation PodsecurityPodSecurityAllowPrivilegeEscalation is retrieved outside this Changed() block
	}
	allowPrivilegeEscalationFlagValue := m.AllowPrivilegeEscalation
	if swag.IsZero(allowPrivilegeEscalationFlagValue) {
		allowPrivilegeEscalationFlagValue = &models.PodsecurityPodSecurityAllowPrivilegeEscalation{}
	}

	err, allowPrivilegeEscalationAdded := retrieveModelPodsecurityPodSecurityAllowPrivilegeEscalationFlags(depth+1, allowPrivilegeEscalationFlagValue, allowPrivilegeEscalationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowPrivilegeEscalationAdded
	if allowPrivilegeEscalationAdded {
		m.AllowPrivilegeEscalation = allowPrivilegeEscalationFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleAllowProcMountFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowProcMountFlagName := fmt.Sprintf("%v.allowProcMount", cmdPrefix)
	if cmd.Flags().Changed(allowProcMountFlagName) {
		// info: complex object allowProcMount PodsecurityPodSecurityAllowProcMount is retrieved outside this Changed() block
	}
	allowProcMountFlagValue := m.AllowProcMount
	if swag.IsZero(allowProcMountFlagValue) {
		allowProcMountFlagValue = &models.PodsecurityPodSecurityAllowProcMount{}
	}

	err, allowProcMountAdded := retrieveModelPodsecurityPodSecurityAllowProcMountFlags(depth+1, allowProcMountFlagValue, allowProcMountFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowProcMountAdded
	if allowProcMountAdded {
		m.AllowProcMount = allowProcMountFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleAppArmorFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appArmorFlagName := fmt.Sprintf("%v.appArmor", cmdPrefix)
	if cmd.Flags().Changed(appArmorFlagName) {
		// info: complex object appArmor PodsecurityPodSecurityAppArmour is retrieved outside this Changed() block
	}
	appArmorFlagValue := m.AppArmor
	if swag.IsZero(appArmorFlagValue) {
		appArmorFlagValue = &models.PodsecurityPodSecurityAppArmour{}
	}

	err, appArmorAdded := retrieveModelPodsecurityPodSecurityAppArmourFlags(depth+1, appArmorFlagValue, appArmorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appArmorAdded
	if appArmorAdded {
		m.AppArmor = appArmorFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleCapabilitiesFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	capabilitiesFlagName := fmt.Sprintf("%v.capabilities", cmdPrefix)
	if cmd.Flags().Changed(capabilitiesFlagName) {
		// info: complex object capabilities PodsecurityPodSecurityCapabilities is retrieved outside this Changed() block
	}
	capabilitiesFlagValue := m.Capabilities
	if swag.IsZero(capabilitiesFlagValue) {
		capabilitiesFlagValue = &models.PodsecurityPodSecurityCapabilities{}
	}

	err, capabilitiesAdded := retrieveModelPodsecurityPodSecurityCapabilitiesFlags(depth+1, capabilitiesFlagValue, capabilitiesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || capabilitiesAdded
	if capabilitiesAdded {
		m.Capabilities = capabilitiesFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleEnabledFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleEndPointIDFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endPointIdFlagName := fmt.Sprintf("%v.endPointID", cmdPrefix)
	if cmd.Flags().Changed(endPointIdFlagName) {

		var endPointIdFlagName string
		if cmdPrefix == "" {
			endPointIdFlagName = "endPointID"
		} else {
			endPointIdFlagName = fmt.Sprintf("%v.endPointID", cmdPrefix)
		}

		endPointIdFlagValue, err := cmd.Flags().GetInt64(endPointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndPointID = endPointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleForbiddenSysctlsListFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forbiddenSysctlsListFlagName := fmt.Sprintf("%v.forbiddenSysctlsList", cmdPrefix)
	if cmd.Flags().Changed(forbiddenSysctlsListFlagName) {
		// info: complex object forbiddenSysctlsList PodsecurityPodSecurityForbiddenSysctlsList is retrieved outside this Changed() block
	}
	forbiddenSysctlsListFlagValue := m.ForbiddenSysctlsList
	if swag.IsZero(forbiddenSysctlsListFlagValue) {
		forbiddenSysctlsListFlagValue = &models.PodsecurityPodSecurityForbiddenSysctlsList{}
	}

	err, forbiddenSysctlsListAdded := retrieveModelPodsecurityPodSecurityForbiddenSysctlsListFlags(depth+1, forbiddenSysctlsListFlagValue, forbiddenSysctlsListFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forbiddenSysctlsListAdded
	if forbiddenSysctlsListAdded {
		m.ForbiddenSysctlsList = forbiddenSysctlsListFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleHostFilesystemFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostFilesystemFlagName := fmt.Sprintf("%v.hostFilesystem", cmdPrefix)
	if cmd.Flags().Changed(hostFilesystemFlagName) {
		// info: complex object hostFilesystem PodsecurityPodSecurityHostFilesystem is retrieved outside this Changed() block
	}
	hostFilesystemFlagValue := m.HostFilesystem
	if swag.IsZero(hostFilesystemFlagValue) {
		hostFilesystemFlagValue = &models.PodsecurityPodSecurityHostFilesystem{}
	}

	err, hostFilesystemAdded := retrieveModelPodsecurityPodSecurityHostFilesystemFlags(depth+1, hostFilesystemFlagValue, hostFilesystemFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostFilesystemAdded
	if hostFilesystemAdded {
		m.HostFilesystem = hostFilesystemFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleHostNamespacesFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostNamespacesFlagName := fmt.Sprintf("%v.hostNamespaces", cmdPrefix)
	if cmd.Flags().Changed(hostNamespacesFlagName) {
		// info: complex object hostNamespaces PodsecurityPodSecurityHostNamespaces is retrieved outside this Changed() block
	}
	hostNamespacesFlagValue := m.HostNamespaces
	if swag.IsZero(hostNamespacesFlagValue) {
		hostNamespacesFlagValue = &models.PodsecurityPodSecurityHostNamespaces{}
	}

	err, hostNamespacesAdded := retrieveModelPodsecurityPodSecurityHostNamespacesFlags(depth+1, hostNamespacesFlagValue, hostNamespacesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostNamespacesAdded
	if hostNamespacesAdded {
		m.HostNamespaces = hostNamespacesFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleHostPortsFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostPortsFlagName := fmt.Sprintf("%v.hostPorts", cmdPrefix)
	if cmd.Flags().Changed(hostPortsFlagName) {
		// info: complex object hostPorts PodsecurityPodSecurityHostNetworkingPorts is retrieved outside this Changed() block
	}
	hostPortsFlagValue := m.HostPorts
	if swag.IsZero(hostPortsFlagValue) {
		hostPortsFlagValue = &models.PodsecurityPodSecurityHostNetworkingPorts{}
	}

	err, hostPortsAdded := retrieveModelPodsecurityPodSecurityHostNetworkingPortsFlags(depth+1, hostPortsFlagValue, hostPortsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostPortsAdded
	if hostPortsAdded {
		m.HostPorts = hostPortsFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleIDFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRulePrivilegedContainersFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	privilegedContainersFlagName := fmt.Sprintf("%v.privilegedContainers", cmdPrefix)
	if cmd.Flags().Changed(privilegedContainersFlagName) {
		// info: complex object privilegedContainers PodsecurityPodSecurityPrivilegedContainers is retrieved outside this Changed() block
	}
	privilegedContainersFlagValue := m.PrivilegedContainers
	if swag.IsZero(privilegedContainersFlagValue) {
		privilegedContainersFlagValue = &models.PodsecurityPodSecurityPrivilegedContainers{}
	}

	err, privilegedContainersAdded := retrieveModelPodsecurityPodSecurityPrivilegedContainersFlags(depth+1, privilegedContainersFlagValue, privilegedContainersFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || privilegedContainersAdded
	if privilegedContainersAdded {
		m.PrivilegedContainers = privilegedContainersFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleReadOnlyRootFileSystemFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyRootFileSystemFlagName := fmt.Sprintf("%v.readOnlyRootFileSystem", cmdPrefix)
	if cmd.Flags().Changed(readOnlyRootFileSystemFlagName) {
		// info: complex object readOnlyRootFileSystem PodsecurityPodSecurityReadOnlyRootFileSystem is retrieved outside this Changed() block
	}
	readOnlyRootFileSystemFlagValue := m.ReadOnlyRootFileSystem
	if swag.IsZero(readOnlyRootFileSystemFlagValue) {
		readOnlyRootFileSystemFlagValue = &models.PodsecurityPodSecurityReadOnlyRootFileSystem{}
	}

	err, readOnlyRootFileSystemAdded := retrieveModelPodsecurityPodSecurityReadOnlyRootFileSystemFlags(depth+1, readOnlyRootFileSystemFlagValue, readOnlyRootFileSystemFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyRootFileSystemAdded
	if readOnlyRootFileSystemAdded {
		m.ReadOnlyRootFileSystem = readOnlyRootFileSystemFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleSecCompFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	secCompFlagName := fmt.Sprintf("%v.secComp", cmdPrefix)
	if cmd.Flags().Changed(secCompFlagName) {
		// info: complex object secComp PodsecurityPodSecuritySecComp is retrieved outside this Changed() block
	}
	secCompFlagValue := m.SecComp
	if swag.IsZero(secCompFlagValue) {
		secCompFlagValue = &models.PodsecurityPodSecuritySecComp{}
	}

	err, secCompAdded := retrieveModelPodsecurityPodSecuritySecCompFlags(depth+1, secCompFlagValue, secCompFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secCompAdded
	if secCompAdded {
		m.SecComp = secCompFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleSelinuxFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	selinuxFlagName := fmt.Sprintf("%v.selinux", cmdPrefix)
	if cmd.Flags().Changed(selinuxFlagName) {
		// info: complex object selinux PodsecurityPodSecuritySelinux is retrieved outside this Changed() block
	}
	selinuxFlagValue := m.Selinux
	if swag.IsZero(selinuxFlagValue) {
		selinuxFlagValue = &models.PodsecurityPodSecuritySelinux{}
	}

	err, selinuxAdded := retrieveModelPodsecurityPodSecuritySelinuxFlags(depth+1, selinuxFlagValue, selinuxFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || selinuxAdded
	if selinuxAdded {
		m.Selinux = selinuxFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleUsersFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usersFlagName := fmt.Sprintf("%v.users", cmdPrefix)
	if cmd.Flags().Changed(usersFlagName) {
		// info: complex object users PodsecurityPodSecurityUsers is retrieved outside this Changed() block
	}
	usersFlagValue := m.Users
	if swag.IsZero(usersFlagValue) {
		usersFlagValue = &models.PodsecurityPodSecurityUsers{}
	}

	err, usersAdded := retrieveModelPodsecurityPodSecurityUsersFlags(depth+1, usersFlagValue, usersFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usersAdded
	if usersAdded {
		m.Users = usersFlagValue
	}

	return nil, retAdded
}

func retrievePodsecurityPodSecurityRuleVolumeTypesFlags(depth int, m *models.PodsecurityPodSecurityRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	volumeTypesFlagName := fmt.Sprintf("%v.volumeTypes", cmdPrefix)
	if cmd.Flags().Changed(volumeTypesFlagName) {
		// info: complex object volumeTypes PodsecurityPodSecurityVolumeTypes is retrieved outside this Changed() block
	}
	volumeTypesFlagValue := m.VolumeTypes
	if swag.IsZero(volumeTypesFlagValue) {
		volumeTypesFlagValue = &models.PodsecurityPodSecurityVolumeTypes{}
	}

	err, volumeTypesAdded := retrieveModelPodsecurityPodSecurityVolumeTypesFlags(depth+1, volumeTypesFlagValue, volumeTypesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumeTypesAdded
	if volumeTypesAdded {
		m.VolumeTypes = volumeTypesFlagValue
	}

	return nil, retAdded
}
