// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"github.com/portainer/client-api-go/v2/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// debug flag indicating that cli should output debug logs
var debug bool

// config file location
var configFile string

// dry run flag
var dryRun bool

// name of the executable
var exeName string = filepath.Base(os.Args[0])

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.PortainerClientAPI, error) {
	hostname := viper.GetString("hostname")
	viper.SetDefault("base_path", client.DefaultBasePath)
	basePath := viper.GetString("base_path")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, basePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	r.Consumers["application/json"] = runtime.JSONConsumer()

	// warning: consumes multipart/form-data is not supported by go-swagger cli yet

	// warning: consumes application/x-www-form-urlencoded is not supported by go-swagger cli yet

	// warning: produces application/octet-stream is not supported by go-swagger cli yet

	// warning: produces text/csv is not supported by go-swagger cli yet

	r.Producers["application/json"] = runtime.JSONProducer()

	// warning: produces text/plain is not supported by go-swagger cli yet

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname"))
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme"))
	rootCmd.PersistentFlags().String("base-path", client.DefaultBasePath, fmt.Sprintf("For example: %v", client.DefaultBasePath))
	viper.BindPFlag("base_path", rootCmd.PersistentFlags().Lookup("base-path"))

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	if err := registerAuthInoWriterFlags(rootCmd); err != nil {
		return nil, err
	}
	// add all operation groups
	operationGroupAuthCmd, err := makeOperationGroupAuthCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupAuthCmd)

	operationGroupBackupCmd, err := makeOperationGroupBackupCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupBackupCmd)

	operationGroupCloudCredentialsCmd, err := makeOperationGroupCloudCredentialsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupCloudCredentialsCmd)

	operationGroupCustomTemplatesCmd, err := makeOperationGroupCustomTemplatesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupCustomTemplatesCmd)

	operationGroupDockerCmd, err := makeOperationGroupDockerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupDockerCmd)

	operationGroupEdgeCmd, err := makeOperationGroupEdgeCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEdgeCmd)

	operationGroupEdgeGroupsCmd, err := makeOperationGroupEdgeGroupsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEdgeGroupsCmd)

	operationGroupEdgeJobsCmd, err := makeOperationGroupEdgeJobsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEdgeJobsCmd)

	operationGroupEdgeStacksCmd, err := makeOperationGroupEdgeStacksCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEdgeStacksCmd)

	operationGroupEdgeTemplatesCmd, err := makeOperationGroupEdgeTemplatesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEdgeTemplatesCmd)

	operationGroupEdgeUpdateSchedulesCmd, err := makeOperationGroupEdgeUpdateSchedulesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEdgeUpdateSchedulesCmd)

	operationGroupEndpointGroupsCmd, err := makeOperationGroupEndpointGroupsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEndpointGroupsCmd)

	operationGroupEndpointsCmd, err := makeOperationGroupEndpointsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEndpointsCmd)

	operationGroupGitopsCmd, err := makeOperationGroupGitopsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupGitopsCmd)

	operationGroupHelmCmd, err := makeOperationGroupHelmCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHelmCmd)

	operationGroupIntelCmd, err := makeOperationGroupIntelCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupIntelCmd)

	operationGroupKaasCmd, err := makeOperationGroupKaasCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupKaasCmd)

	operationGroupKubernetesCmd, err := makeOperationGroupKubernetesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupKubernetesCmd)

	operationGroupLdapCmd, err := makeOperationGroupLdapCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLdapCmd)

	operationGroupLicenseCmd, err := makeOperationGroupLicenseCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLicenseCmd)

	operationGroupMotdCmd, err := makeOperationGroupMotdCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupMotdCmd)

	operationGroupNomadCmd, err := makeOperationGroupNomadCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupNomadCmd)

	operationGroupRbacEnabledCmd, err := makeOperationGroupRbacEnabledCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRbacEnabledCmd)

	operationGroupRegistriesCmd, err := makeOperationGroupRegistriesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRegistriesCmd)

	operationGroupResourceControlsCmd, err := makeOperationGroupResourceControlsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupResourceControlsCmd)

	operationGroupRolesCmd, err := makeOperationGroupRolesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRolesCmd)

	operationGroupSettingsCmd, err := makeOperationGroupSettingsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSettingsCmd)

	operationGroupSslCmd, err := makeOperationGroupSslCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSslCmd)

	operationGroupStacksCmd, err := makeOperationGroupStacksCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupStacksCmd)

	operationGroupStatusCmd, err := makeOperationGroupStatusCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupStatusCmd)

	operationGroupSystemCmd, err := makeOperationGroupSystemCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSystemCmd)

	operationGroupTagsCmd, err := makeOperationGroupTagsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTagsCmd)

	operationGroupTeamMembershipsCmd, err := makeOperationGroupTeamMembershipsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTeamMembershipsCmd)

	operationGroupTeamsCmd, err := makeOperationGroupTeamsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTeamsCmd)

	operationGroupTemplatesCmd, err := makeOperationGroupTemplatesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTemplatesCmd)

	operationGroupUploadCmd, err := makeOperationGroupUploadCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUploadCmd)

	operationGroupUseractivityCmd, err := makeOperationGroupUseractivityCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUseractivityCmd)

	operationGroupUsersCmd, err := makeOperationGroupUsersCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUsersCmd)

	operationGroupWebhooksCmd, err := makeOperationGroupWebhooksCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupWebhooksCmd)

	operationGroupWebsocketCmd, err := makeOperationGroupWebsocketCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupWebsocketCmd)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		// look for default config
		// Find home directory.
		home, err := homedir.Dir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".cobra" (without extension).
		viper.AddConfigPath(path.Join(home, ".config", exeName))
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

// registerAuthInoWriterFlags registers all flags needed to perform authentication
func registerAuthInoWriterFlags(cmd *cobra.Command) error {
	/*Authorization */
	cmd.PersistentFlags().String("Authorization", "", ``)
	viper.BindPFlag("Authorization", cmd.PersistentFlags().Lookup("Authorization"))
	/*Authorization */
	cmd.PersistentFlags().String("Authorization", "", ``)
	viper.BindPFlag("Authorization", cmd.PersistentFlags().Lookup("Authorization"))
	return nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	auths := []runtime.ClientAuthInfoWriter{}
	/*Authorization */
	if viper.IsSet("Authorization") {
		AuthorizationKey := viper.GetString("Authorization")
		auths = append(auths, httptransport.APIKeyAuth("Authorization", "header", AuthorizationKey))
	}
	/*Authorization */
	if viper.IsSet("Authorization") {
		AuthorizationKey := viper.GetString("Authorization")
		auths = append(auths, httptransport.APIKeyAuth("Authorization", "header", AuthorizationKey))
	}
	if len(auths) == 0 {
		logDebugf("Warning: No auth params detected.")
		return nil, nil
	}
	// compose all auths together
	return httptransport.Compose(auths...), nil
}

func makeOperationGroupAuthCmd() (*cobra.Command, error) {
	operationGroupAuthCmd := &cobra.Command{
		Use:  "auth",
		Long: ``,
	}

	operationAuthenticateUserCmd, err := makeOperationAuthAuthenticateUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAuthCmd.AddCommand(operationAuthenticateUserCmd)

	operationLogoutCmd, err := makeOperationAuthLogoutCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAuthCmd.AddCommand(operationLogoutCmd)

	operationValidateOAuthCmd, err := makeOperationAuthValidateOAuthCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAuthCmd.AddCommand(operationValidateOAuthCmd)

	return operationGroupAuthCmd, nil
}
func makeOperationGroupBackupCmd() (*cobra.Command, error) {
	operationGroupBackupCmd := &cobra.Command{
		Use:  "backup",
		Long: ``,
	}

	operationBackupCmd, err := makeOperationBackupBackupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackupCmd.AddCommand(operationBackupCmd)

	operationBackupSettingsFetchCmd, err := makeOperationBackupBackupSettingsFetchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackupCmd.AddCommand(operationBackupSettingsFetchCmd)

	operationBackupStatusFetchCmd, err := makeOperationBackupBackupStatusFetchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackupCmd.AddCommand(operationBackupStatusFetchCmd)

	operationBackupToS3Cmd, err := makeOperationBackupBackupToS3Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackupCmd.AddCommand(operationBackupToS3Cmd)

	operationRestoreCmd, err := makeOperationBackupRestoreCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackupCmd.AddCommand(operationRestoreCmd)

	operationRestoreFromS3Cmd, err := makeOperationBackupRestoreFromS3Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackupCmd.AddCommand(operationRestoreFromS3Cmd)

	operationUpdateS3SettingsCmd, err := makeOperationBackupUpdateS3SettingsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBackupCmd.AddCommand(operationUpdateS3SettingsCmd)

	return operationGroupBackupCmd, nil
}
func makeOperationGroupCloudCredentialsCmd() (*cobra.Command, error) {
	operationGroupCloudCredentialsCmd := &cobra.Command{
		Use:  "cloud_credentials",
		Long: ``,
	}

	operationCreateCmd, err := makeOperationCloudCredentialsCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCloudCredentialsCmd.AddCommand(operationCreateCmd)

	operationUpdateCmd, err := makeOperationCloudCredentialsUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCloudCredentialsCmd.AddCommand(operationUpdateCmd)

	operationGetByIDCmd, err := makeOperationCloudCredentialsGetByIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCloudCredentialsCmd.AddCommand(operationGetByIDCmd)

	return operationGroupCloudCredentialsCmd, nil
}
func makeOperationGroupCustomTemplatesCmd() (*cobra.Command, error) {
	operationGroupCustomTemplatesCmd := &cobra.Command{
		Use:  "custom_templates",
		Long: ``,
	}

	operationCustomTemplateCreateCmd, err := makeOperationCustomTemplatesCustomTemplateCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCustomTemplatesCmd.AddCommand(operationCustomTemplateCreateCmd)

	operationCustomTemplateDeleteCmd, err := makeOperationCustomTemplatesCustomTemplateDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCustomTemplatesCmd.AddCommand(operationCustomTemplateDeleteCmd)

	operationCustomTemplateFileCmd, err := makeOperationCustomTemplatesCustomTemplateFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCustomTemplatesCmd.AddCommand(operationCustomTemplateFileCmd)

	operationCustomTemplateInspectCmd, err := makeOperationCustomTemplatesCustomTemplateInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCustomTemplatesCmd.AddCommand(operationCustomTemplateInspectCmd)

	operationCustomTemplateListCmd, err := makeOperationCustomTemplatesCustomTemplateListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCustomTemplatesCmd.AddCommand(operationCustomTemplateListCmd)

	operationCustomTemplateUpdateCmd, err := makeOperationCustomTemplatesCustomTemplateUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupCustomTemplatesCmd.AddCommand(operationCustomTemplateUpdateCmd)

	return operationGroupCustomTemplatesCmd, nil
}
func makeOperationGroupDockerCmd() (*cobra.Command, error) {
	operationGroupDockerCmd := &cobra.Command{
		Use:  "docker",
		Long: ``,
	}

	operationServiceImageStatusCmd, err := makeOperationDockerServiceImageStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDockerCmd.AddCommand(operationServiceImageStatusCmd)

	operationContainerImageStatusCmd, err := makeOperationDockerContainerImageStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDockerCmd.AddCommand(operationContainerImageStatusCmd)

	operationDockerContainerGpusInspectCmd, err := makeOperationDockerDockerContainerGpusInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDockerCmd.AddCommand(operationDockerContainerGpusInspectCmd)

	operationStackImagesStatusCmd, err := makeOperationDockerStackImagesStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDockerCmd.AddCommand(operationStackImagesStatusCmd)

	return operationGroupDockerCmd, nil
}
func makeOperationGroupEdgeCmd() (*cobra.Command, error) {
	operationGroupEdgeCmd := &cobra.Command{
		Use:  "edge",
		Long: ``,
	}

	operationGetEndpointsIDEdgeGenerateKeyCmd, err := makeOperationEdgeGetEndpointsIDEdgeGenerateKeyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeCmd.AddCommand(operationGetEndpointsIDEdgeGenerateKeyCmd)

	operationGetEndpointsIDEdgeStacksStackIDCmd, err := makeOperationEdgeGetEndpointsIDEdgeStacksStackIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeCmd.AddCommand(operationGetEndpointsIDEdgeStacksStackIDCmd)

	operationPostEndpointsIDEdgeJobsJobIDLogsCmd, err := makeOperationEdgePostEndpointsIDEdgeJobsJobIDLogsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeCmd.AddCommand(operationPostEndpointsIDEdgeJobsJobIDLogsCmd)

	operationPostEndpointsIDEdgeTrustCmd, err := makeOperationEdgePostEndpointsIDEdgeTrustCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeCmd.AddCommand(operationPostEndpointsIDEdgeTrustCmd)

	return operationGroupEdgeCmd, nil
}
func makeOperationGroupEdgeGroupsCmd() (*cobra.Command, error) {
	operationGroupEdgeGroupsCmd := &cobra.Command{
		Use:  "edge_groups",
		Long: ``,
	}

	operationEdgeGroupCreateCmd, err := makeOperationEdgeGroupsEdgeGroupCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeGroupsCmd.AddCommand(operationEdgeGroupCreateCmd)

	operationEdgeGroupDeleteCmd, err := makeOperationEdgeGroupsEdgeGroupDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeGroupsCmd.AddCommand(operationEdgeGroupDeleteCmd)

	operationEdgeGroupInspectCmd, err := makeOperationEdgeGroupsEdgeGroupInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeGroupsCmd.AddCommand(operationEdgeGroupInspectCmd)

	operationEdgeGroupListCmd, err := makeOperationEdgeGroupsEdgeGroupListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeGroupsCmd.AddCommand(operationEdgeGroupListCmd)

	operationEgeGroupUpdateCmd, err := makeOperationEdgeGroupsEgeGroupUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeGroupsCmd.AddCommand(operationEgeGroupUpdateCmd)

	return operationGroupEdgeGroupsCmd, nil
}
func makeOperationGroupEdgeJobsCmd() (*cobra.Command, error) {
	operationGroupEdgeJobsCmd := &cobra.Command{
		Use:  "edge_jobs",
		Long: ``,
	}

	operationEdgeJobCreateCmd, err := makeOperationEdgeJobsEdgeJobCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobCreateCmd)

	operationEdgeJobDeleteCmd, err := makeOperationEdgeJobsEdgeJobDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobDeleteCmd)

	operationEdgeJobFileCmd, err := makeOperationEdgeJobsEdgeJobFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobFileCmd)

	operationEdgeJobInspectCmd, err := makeOperationEdgeJobsEdgeJobInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobInspectCmd)

	operationEdgeJobListCmd, err := makeOperationEdgeJobsEdgeJobListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobListCmd)

	operationEdgeJobTaskLogsInspectCmd, err := makeOperationEdgeJobsEdgeJobTaskLogsInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobTaskLogsInspectCmd)

	operationEdgeJobTasksClearCmd, err := makeOperationEdgeJobsEdgeJobTasksClearCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobTasksClearCmd)

	operationEdgeJobTasksCollectCmd, err := makeOperationEdgeJobsEdgeJobTasksCollectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobTasksCollectCmd)

	operationEdgeJobTasksListCmd, err := makeOperationEdgeJobsEdgeJobTasksListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobTasksListCmd)

	operationEdgeJobUpdateCmd, err := makeOperationEdgeJobsEdgeJobUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeJobsCmd.AddCommand(operationEdgeJobUpdateCmd)

	return operationGroupEdgeJobsCmd, nil
}
func makeOperationGroupEdgeStacksCmd() (*cobra.Command, error) {
	operationGroupEdgeStacksCmd := &cobra.Command{
		Use:  "edge_stacks",
		Long: ``,
	}

	operationEdgeStackCreateCmd, err := makeOperationEdgeStacksEdgeStackCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackCreateCmd)

	operationEdgeStackDeleteCmd, err := makeOperationEdgeStacksEdgeStackDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackDeleteCmd)

	operationEdgeStackFileCmd, err := makeOperationEdgeStacksEdgeStackFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackFileCmd)

	operationEdgeStackInspectCmd, err := makeOperationEdgeStacksEdgeStackInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackInspectCmd)

	operationEdgeStackListCmd, err := makeOperationEdgeStacksEdgeStackListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackListCmd)

	operationEdgeStackLogsCollectCmd, err := makeOperationEdgeStacksEdgeStackLogsCollectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackLogsCollectCmd)

	operationEdgeStackLogsDeleteCmd, err := makeOperationEdgeStacksEdgeStackLogsDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackLogsDeleteCmd)

	operationEdgeStackLogsStatusGetCmd, err := makeOperationEdgeStacksEdgeStackLogsStatusGetCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackLogsStatusGetCmd)

	operationEdgeStackStatusDeleteCmd, err := makeOperationEdgeStacksEdgeStackStatusDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackStatusDeleteCmd)

	operationEdgeStackStatusUpdateCmd, err := makeOperationEdgeStacksEdgeStackStatusUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackStatusUpdateCmd)

	operationEdgeStackUpdateCmd, err := makeOperationEdgeStacksEdgeStackUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeStacksCmd.AddCommand(operationEdgeStackUpdateCmd)

	return operationGroupEdgeStacksCmd, nil
}
func makeOperationGroupEdgeTemplatesCmd() (*cobra.Command, error) {
	operationGroupEdgeTemplatesCmd := &cobra.Command{
		Use:  "edge_templates",
		Long: ``,
	}

	operationEdgeTemplateListCmd, err := makeOperationEdgeTemplatesEdgeTemplateListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeTemplatesCmd.AddCommand(operationEdgeTemplateListCmd)

	return operationGroupEdgeTemplatesCmd, nil
}
func makeOperationGroupEdgeUpdateSchedulesCmd() (*cobra.Command, error) {
	operationGroupEdgeUpdateSchedulesCmd := &cobra.Command{
		Use:  "edge_update_schedules",
		Long: ``,
	}

	operationEdgeUpdatePreviousVersionsCmd, err := makeOperationEdgeUpdateSchedulesEdgeUpdatePreviousVersionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeUpdateSchedulesCmd.AddCommand(operationEdgeUpdatePreviousVersionsCmd)

	operationEdgeUpdateScheduleActiveSchedulesListCmd, err := makeOperationEdgeUpdateSchedulesEdgeUpdateScheduleActiveSchedulesListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeUpdateSchedulesCmd.AddCommand(operationEdgeUpdateScheduleActiveSchedulesListCmd)

	operationEdgeUpdateScheduleDeleteCmd, err := makeOperationEdgeUpdateSchedulesEdgeUpdateScheduleDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeUpdateSchedulesCmd.AddCommand(operationEdgeUpdateScheduleDeleteCmd)

	operationEdgeUpdateScheduleInspectCmd, err := makeOperationEdgeUpdateSchedulesEdgeUpdateScheduleInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeUpdateSchedulesCmd.AddCommand(operationEdgeUpdateScheduleInspectCmd)

	operationEdgeUpdateScheduleListCmd, err := makeOperationEdgeUpdateSchedulesEdgeUpdateScheduleListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeUpdateSchedulesCmd.AddCommand(operationEdgeUpdateScheduleListCmd)

	operationEdgeUpdateScheduleUpdateCmd, err := makeOperationEdgeUpdateSchedulesEdgeUpdateScheduleUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEdgeUpdateSchedulesCmd.AddCommand(operationEdgeUpdateScheduleUpdateCmd)

	return operationGroupEdgeUpdateSchedulesCmd, nil
}
func makeOperationGroupEndpointGroupsCmd() (*cobra.Command, error) {
	operationGroupEndpointGroupsCmd := &cobra.Command{
		Use:  "endpoint_groups",
		Long: ``,
	}

	operationEndpointGroupAddEndpointCmd, err := makeOperationEndpointGroupsEndpointGroupAddEndpointCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointGroupsCmd.AddCommand(operationEndpointGroupAddEndpointCmd)

	operationEndpointGroupDeleteCmd, err := makeOperationEndpointGroupsEndpointGroupDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointGroupsCmd.AddCommand(operationEndpointGroupDeleteCmd)

	operationEndpointGroupDeleteEndpointCmd, err := makeOperationEndpointGroupsEndpointGroupDeleteEndpointCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointGroupsCmd.AddCommand(operationEndpointGroupDeleteEndpointCmd)

	operationEndpointGroupListCmd, err := makeOperationEndpointGroupsEndpointGroupListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointGroupsCmd.AddCommand(operationEndpointGroupListCmd)

	operationEndpointGroupUpdateCmd, err := makeOperationEndpointGroupsEndpointGroupUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointGroupsCmd.AddCommand(operationEndpointGroupUpdateCmd)

	operationGetEndpointGroupsIDCmd, err := makeOperationEndpointGroupsGetEndpointGroupsIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointGroupsCmd.AddCommand(operationGetEndpointGroupsIDCmd)

	operationPostEndpointGroupsCmd, err := makeOperationEndpointGroupsPostEndpointGroupsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointGroupsCmd.AddCommand(operationPostEndpointGroupsCmd)

	return operationGroupEndpointGroupsCmd, nil
}
func makeOperationGroupEndpointsCmd() (*cobra.Command, error) {
	operationGroupEndpointsCmd := &cobra.Command{
		Use:  "endpoints",
		Long: ``,
	}

	operationEndpointAssociationDeleteCmd, err := makeOperationEndpointsEndpointAssociationDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointAssociationDeleteCmd)

	operationEndpointBrowsePutCmd, err := makeOperationEndpointsEndpointBrowsePutCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointBrowsePutCmd)

	operationEndpointCreateCmd, err := makeOperationEndpointsEndpointCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointCreateCmd)

	operationEndpointCreateGlobalKeyCmd, err := makeOperationEndpointsEndpointCreateGlobalKeyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointCreateGlobalKeyCmd)

	operationEndpointDeleteCmd, err := makeOperationEndpointsEndpointDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointDeleteCmd)

	operationEndpointEdgeStatusInspectCmd, err := makeOperationEndpointsEndpointEdgeStatusInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointEdgeStatusInspectCmd)

	operationEndpointInspectCmd, err := makeOperationEndpointsEndpointInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointInspectCmd)

	operationEndpointListCmd, err := makeOperationEndpointsEndpointListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointListCmd)

	operationEndpointSettingsUpdateCmd, err := makeOperationEndpointsEndpointSettingsUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointSettingsUpdateCmd)

	operationEndpointSnapshotCmd, err := makeOperationEndpointsEndpointSnapshotCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointSnapshotCmd)

	operationEndpointSnapshotsCmd, err := makeOperationEndpointsEndpointSnapshotsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointSnapshotsCmd)

	operationEndpointUpdateCmd, err := makeOperationEndpointsEndpointUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointUpdateCmd)

	operationEndpointDockerhubStatusCmd, err := makeOperationEndpointsEndpointDockerhubStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointDockerhubStatusCmd)

	operationEndpointEdgeAsyncCmd, err := makeOperationEndpointsEndpointEdgeAsyncCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointEdgeAsyncCmd)

	operationEndpointForceUpdateServiceCmd, err := makeOperationEndpointsEndpointForceUpdateServiceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointForceUpdateServiceCmd)

	operationEndpointPoolsAccessUpdateCmd, err := makeOperationEndpointsEndpointPoolsAccessUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointPoolsAccessUpdateCmd)

	operationEndpointRegistriesListCmd, err := makeOperationEndpointsEndpointRegistriesListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointRegistriesListCmd)

	operationEndpointRegistryAccessCmd, err := makeOperationEndpointsEndpointRegistryAccessCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationEndpointRegistryAccessCmd)

	operationSnapshotContainerInspectCmd, err := makeOperationEndpointsSnapshotContainerInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationSnapshotContainerInspectCmd)

	operationSnapshotContainersListCmd, err := makeOperationEndpointsSnapshotContainersListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationSnapshotContainersListCmd)

	operationSnapshotInspectCmd, err := makeOperationEndpointsSnapshotInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEndpointsCmd.AddCommand(operationSnapshotInspectCmd)

	return operationGroupEndpointsCmd, nil
}
func makeOperationGroupGitopsCmd() (*cobra.Command, error) {
	operationGroupGitopsCmd := &cobra.Command{
		Use:  "gitops",
		Long: ``,
	}

	operationGitOperationRepoFilesSearchCmd, err := makeOperationGitopsGitOperationRepoFilesSearchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGitopsCmd.AddCommand(operationGitOperationRepoFilesSearchCmd)

	operationGitOperationRepoRefsCmd, err := makeOperationGitopsGitOperationRepoRefsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGitopsCmd.AddCommand(operationGitOperationRepoRefsCmd)

	return operationGroupGitopsCmd, nil
}
func makeOperationGroupHelmCmd() (*cobra.Command, error) {
	operationGroupHelmCmd := &cobra.Command{
		Use:  "helm",
		Long: ``,
	}

	operationHelmDeleteCmd, err := makeOperationHelmHelmDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHelmCmd.AddCommand(operationHelmDeleteCmd)

	operationHelmInstallCmd, err := makeOperationHelmHelmInstallCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHelmCmd.AddCommand(operationHelmInstallCmd)

	operationHelmListCmd, err := makeOperationHelmHelmListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHelmCmd.AddCommand(operationHelmListCmd)

	operationHelmRepoSearchCmd, err := makeOperationHelmHelmRepoSearchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHelmCmd.AddCommand(operationHelmRepoSearchCmd)

	operationHelmShowCmd, err := makeOperationHelmHelmShowCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHelmCmd.AddCommand(operationHelmShowCmd)

	operationHelmUserRepositoriesListCmd, err := makeOperationHelmHelmUserRepositoriesListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHelmCmd.AddCommand(operationHelmUserRepositoriesListCmd)

	operationHelmUserRepositoryCreateCmd, err := makeOperationHelmHelmUserRepositoryCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHelmCmd.AddCommand(operationHelmUserRepositoryCreateCmd)

	return operationGroupHelmCmd, nil
}
func makeOperationGroupIntelCmd() (*cobra.Command, error) {
	operationGroupIntelCmd := &cobra.Command{
		Use:  "intel",
		Long: ``,
	}

	operationDeviceActionCmd, err := makeOperationIntelDeviceActionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationDeviceActionCmd)

	operationDeviceFeaturesCmd, err := makeOperationIntelDeviceFeaturesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationDeviceFeaturesCmd)

	operationOpenAMTConfigureCmd, err := makeOperationIntelOpenAMTConfigureCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationOpenAMTConfigureCmd)

	operationOpenAMTDevicesCmd, err := makeOperationIntelOpenAMTDevicesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationOpenAMTDevicesCmd)

	operationOpenAMTHostInfoCmd, err := makeOperationIntelOpenAMTHostInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationOpenAMTHostInfoCmd)

	operationCreateProfileCmd, err := makeOperationIntelCreateProfileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationCreateProfileCmd)

	operationDeleteProfileCmd, err := makeOperationIntelDeleteProfileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationDeleteProfileCmd)

	operationDuplicateCmd, err := makeOperationIntelDuplicateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationDuplicateCmd)

	operationFdoConfigureCmd, err := makeOperationIntelFdoConfigureCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationFdoConfigureCmd)

	operationFdoConfigureDeviceCmd, err := makeOperationIntelFdoConfigureDeviceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationFdoConfigureDeviceCmd)

	operationFdoListAllCmd, err := makeOperationIntelFdoListAllCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationFdoListAllCmd)

	operationFdoProfileInspectCmd, err := makeOperationIntelFdoProfileInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationFdoProfileInspectCmd)

	operationFdoProfileListCmd, err := makeOperationIntelFdoProfileListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationFdoProfileListCmd)

	operationFdoRegisterDeviceCmd, err := makeOperationIntelFdoRegisterDeviceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationFdoRegisterDeviceCmd)

	operationOpenAMTActivateCmd, err := makeOperationIntelOpenAMTActivateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationOpenAMTActivateCmd)

	operationUpdateProfileCmd, err := makeOperationIntelUpdateProfileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIntelCmd.AddCommand(operationUpdateProfileCmd)

	return operationGroupIntelCmd, nil
}
func makeOperationGroupKaasCmd() (*cobra.Command, error) {
	operationGroupKaasCmd := &cobra.Command{
		Use:  "kaas",
		Long: ``,
	}

	operationKaasProviderInfoCmd, err := makeOperationKaasKaasProviderInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKaasCmd.AddCommand(operationKaasProviderInfoCmd)

	operationProvisionKaaSClusterCmd, err := makeOperationKaasProvisionKaaSClusterCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKaasCmd.AddCommand(operationProvisionKaaSClusterCmd)

	return operationGroupKaasCmd, nil
}
func makeOperationGroupKubernetesCmd() (*cobra.Command, error) {
	operationGroupKubernetesCmd := &cobra.Command{
		Use:  "kubernetes",
		Long: ``,
	}

	operationGetKubernetesConfigCmd, err := makeOperationKubernetesGetKubernetesConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKubernetesCmd.AddCommand(operationGetKubernetesConfigCmd)

	operationKubernetesNamespacesToggleSystemCmd, err := makeOperationKubernetesKubernetesNamespacesToggleSystemCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKubernetesCmd.AddCommand(operationKubernetesNamespacesToggleSystemCmd)

	operationGetKubernetesApplicationCmd, err := makeOperationKubernetesGetKubernetesApplicationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKubernetesCmd.AddCommand(operationGetKubernetesApplicationCmd)

	operationGetKubernetesApplicationsCmd, err := makeOperationKubernetesGetKubernetesApplicationsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKubernetesCmd.AddCommand(operationGetKubernetesApplicationsCmd)

	operationGetKubernetesNodesLimitsCmd, err := makeOperationKubernetesGetKubernetesNodesLimitsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKubernetesCmd.AddCommand(operationGetKubernetesNodesLimitsCmd)

	operationGetKubernetesPodSecurityRuleCmd, err := makeOperationKubernetesGetKubernetesPodSecurityRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKubernetesCmd.AddCommand(operationGetKubernetesPodSecurityRuleCmd)

	operationUpdateK8sPodSecurityRuleCmd, err := makeOperationKubernetesUpdateK8sPodSecurityRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupKubernetesCmd.AddCommand(operationUpdateK8sPodSecurityRuleCmd)

	return operationGroupKubernetesCmd, nil
}
func makeOperationGroupLdapCmd() (*cobra.Command, error) {
	operationGroupLdapCmd := &cobra.Command{
		Use:  "ldap",
		Long: ``,
	}

	operationLDAPAdminGroupsCmd, err := makeOperationLdapLDAPAdminGroupsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationLDAPAdminGroupsCmd)

	operationLDAPCheckCmd, err := makeOperationLdapLDAPCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationLDAPCheckCmd)

	operationLDAPGroupsCmd, err := makeOperationLdapLDAPGroupsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationLDAPGroupsCmd)

	operationLDAPTestLoginCmd, err := makeOperationLdapLDAPTestLoginCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationLDAPTestLoginCmd)

	operationLDAPUsersCmd, err := makeOperationLdapLDAPUsersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationLDAPUsersCmd)

	return operationGroupLdapCmd, nil
}
func makeOperationGroupLicenseCmd() (*cobra.Command, error) {
	operationGroupLicenseCmd := &cobra.Command{
		Use:  "license",
		Long: ``,
	}

	operationLicensesAttachCmd, err := makeOperationLicenseLicensesAttachCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLicenseCmd.AddCommand(operationLicensesAttachCmd)

	operationLicensesDeleteCmd, err := makeOperationLicenseLicensesDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLicenseCmd.AddCommand(operationLicensesDeleteCmd)

	operationLicensesInfoCmd, err := makeOperationLicenseLicensesInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLicenseCmd.AddCommand(operationLicensesInfoCmd)

	operationLicensesListCmd, err := makeOperationLicenseLicensesListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLicenseCmd.AddCommand(operationLicensesListCmd)

	return operationGroupLicenseCmd, nil
}
func makeOperationGroupMotdCmd() (*cobra.Command, error) {
	operationGroupMotdCmd := &cobra.Command{
		Use:  "motd",
		Long: ``,
	}

	operationMOTDCmd, err := makeOperationMotdMOTDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMotdCmd.AddCommand(operationMOTDCmd)

	return operationGroupMotdCmd, nil
}
func makeOperationGroupNomadCmd() (*cobra.Command, error) {
	operationGroupNomadCmd := &cobra.Command{
		Use:  "nomad",
		Long: ``,
	}

	operationGetTaskEventsCmd, err := makeOperationNomadGetTaskEventsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNomadCmd.AddCommand(operationGetTaskEventsCmd)

	operationGetTaskLogsCmd, err := makeOperationNomadGetTaskLogsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNomadCmd.AddCommand(operationGetTaskLogsCmd)

	operationDeleteJobCmd, err := makeOperationNomadDeleteJobCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNomadCmd.AddCommand(operationDeleteJobCmd)

	operationGetDashboardCmd, err := makeOperationNomadGetDashboardCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNomadCmd.AddCommand(operationGetDashboardCmd)

	operationGetLeaderCmd, err := makeOperationNomadGetLeaderCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNomadCmd.AddCommand(operationGetLeaderCmd)

	operationListJobsCmd, err := makeOperationNomadListJobsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNomadCmd.AddCommand(operationListJobsCmd)

	return operationGroupNomadCmd, nil
}
func makeOperationGroupRbacEnabledCmd() (*cobra.Command, error) {
	operationGroupRbacEnabledCmd := &cobra.Command{
		Use:  "rbac_enabled",
		Long: ``,
	}

	operationIsRBACEnabledCmd, err := makeOperationRbacEnabledIsRBACEnabledCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRbacEnabledCmd.AddCommand(operationIsRBACEnabledCmd)

	return operationGroupRbacEnabledCmd, nil
}
func makeOperationGroupRegistriesCmd() (*cobra.Command, error) {
	operationGroupRegistriesCmd := &cobra.Command{
		Use:  "registries",
		Long: ``,
	}

	operationRegistryConfigureCmd, err := makeOperationRegistriesRegistryConfigureCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationRegistryConfigureCmd)

	operationRegistryCreateCmd, err := makeOperationRegistriesRegistryCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationRegistryCreateCmd)

	operationRegistryDeleteCmd, err := makeOperationRegistriesRegistryDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationRegistryDeleteCmd)

	operationRegistryInspectCmd, err := makeOperationRegistriesRegistryInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationRegistryInspectCmd)

	operationRegistryListCmd, err := makeOperationRegistriesRegistryListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationRegistryListCmd)

	operationRegistryUpdateCmd, err := makeOperationRegistriesRegistryUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationRegistryUpdateCmd)

	operationEcrDeleteRepositoryCmd, err := makeOperationRegistriesEcrDeleteRepositoryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationEcrDeleteRepositoryCmd)

	operationEcrDeleteTagsCmd, err := makeOperationRegistriesEcrDeleteTagsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistriesCmd.AddCommand(operationEcrDeleteTagsCmd)

	return operationGroupRegistriesCmd, nil
}
func makeOperationGroupResourceControlsCmd() (*cobra.Command, error) {
	operationGroupResourceControlsCmd := &cobra.Command{
		Use:  "resource_controls",
		Long: ``,
	}

	operationResourceControlCreateCmd, err := makeOperationResourceControlsResourceControlCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResourceControlsCmd.AddCommand(operationResourceControlCreateCmd)

	operationResourceControlDeleteCmd, err := makeOperationResourceControlsResourceControlDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResourceControlsCmd.AddCommand(operationResourceControlDeleteCmd)

	operationResourceControlUpdateCmd, err := makeOperationResourceControlsResourceControlUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupResourceControlsCmd.AddCommand(operationResourceControlUpdateCmd)

	return operationGroupResourceControlsCmd, nil
}
func makeOperationGroupRolesCmd() (*cobra.Command, error) {
	operationGroupRolesCmd := &cobra.Command{
		Use:  "roles",
		Long: ``,
	}

	operationRoleListCmd, err := makeOperationRolesRoleListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRolesCmd.AddCommand(operationRoleListCmd)

	return operationGroupRolesCmd, nil
}
func makeOperationGroupSettingsCmd() (*cobra.Command, error) {
	operationGroupSettingsCmd := &cobra.Command{
		Use:  "settings",
		Long: ``,
	}

	operationSettingsInspectCmd, err := makeOperationSettingsSettingsInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSettingsCmd.AddCommand(operationSettingsInspectCmd)

	operationSettingsPublicCmd, err := makeOperationSettingsSettingsPublicCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSettingsCmd.AddCommand(operationSettingsPublicCmd)

	operationSettingsUpdateCmd, err := makeOperationSettingsSettingsUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSettingsCmd.AddCommand(operationSettingsUpdateCmd)

	return operationGroupSettingsCmd, nil
}
func makeOperationGroupSslCmd() (*cobra.Command, error) {
	operationGroupSslCmd := &cobra.Command{
		Use:  "ssl",
		Long: ``,
	}

	operationSSLInspectCmd, err := makeOperationSslSSLInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSslCmd.AddCommand(operationSSLInspectCmd)

	operationSSLUpdateCmd, err := makeOperationSslSSLUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSslCmd.AddCommand(operationSSLUpdateCmd)

	return operationGroupSslCmd, nil
}
func makeOperationGroupStacksCmd() (*cobra.Command, error) {
	operationGroupStacksCmd := &cobra.Command{
		Use:  "stacks",
		Long: ``,
	}

	operationStackAssociateCmd, err := makeOperationStacksStackAssociateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackAssociateCmd)

	operationStackCreateCmd, err := makeOperationStacksStackCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackCreateCmd)

	operationStackDeleteCmd, err := makeOperationStacksStackDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackDeleteCmd)

	operationStackFileInspectCmd, err := makeOperationStacksStackFileInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackFileInspectCmd)

	operationStackGitRedeployCmd, err := makeOperationStacksStackGitRedeployCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackGitRedeployCmd)

	operationStackInspectCmd, err := makeOperationStacksStackInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackInspectCmd)

	operationStackListCmd, err := makeOperationStacksStackListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackListCmd)

	operationStackMigrateCmd, err := makeOperationStacksStackMigrateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackMigrateCmd)

	operationStackStartCmd, err := makeOperationStacksStackStartCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackStartCmd)

	operationStackStopCmd, err := makeOperationStacksStackStopCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackStopCmd)

	operationStackUpdateCmd, err := makeOperationStacksStackUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackUpdateCmd)

	operationStackUpdateGitCmd, err := makeOperationStacksStackUpdateGitCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationStackUpdateGitCmd)

	operationWebhookInvokeCmd, err := makeOperationStacksWebhookInvokeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStacksCmd.AddCommand(operationWebhookInvokeCmd)

	return operationGroupStacksCmd, nil
}
func makeOperationGroupStatusCmd() (*cobra.Command, error) {
	operationGroupStatusCmd := &cobra.Command{
		Use:  "status",
		Long: ``,
	}

	operationStatusInspectCmd, err := makeOperationStatusStatusInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStatusCmd.AddCommand(operationStatusInspectCmd)

	operationVersionCmd, err := makeOperationStatusVersionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStatusCmd.AddCommand(operationVersionCmd)

	operationStatusNodesCountCmd, err := makeOperationStatusStatusNodesCountCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStatusCmd.AddCommand(operationStatusNodesCountCmd)

	return operationGroupStatusCmd, nil
}
func makeOperationGroupSystemCmd() (*cobra.Command, error) {
	operationGroupSystemCmd := &cobra.Command{
		Use:  "system",
		Long: ``,
	}

	operationSystemInfoCmd, err := makeOperationSystemSystemInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemInfoCmd)

	operationSystemNodesCountCmd, err := makeOperationSystemSystemNodesCountCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemNodesCountCmd)

	operationSystemStatusCmd, err := makeOperationSystemSystemStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemStatusCmd)

	operationSystemUpgradeCmd, err := makeOperationSystemSystemUpgradeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemUpgradeCmd)

	operationSystemVersionCmd, err := makeOperationSystemSystemVersionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemVersionCmd)

	return operationGroupSystemCmd, nil
}
func makeOperationGroupTagsCmd() (*cobra.Command, error) {
	operationGroupTagsCmd := &cobra.Command{
		Use:  "tags",
		Long: ``,
	}

	operationTagCreateCmd, err := makeOperationTagsTagCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTagsCmd.AddCommand(operationTagCreateCmd)

	operationTagDeleteCmd, err := makeOperationTagsTagDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTagsCmd.AddCommand(operationTagDeleteCmd)

	operationTagListCmd, err := makeOperationTagsTagListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTagsCmd.AddCommand(operationTagListCmd)

	return operationGroupTagsCmd, nil
}
func makeOperationGroupTeamMembershipsCmd() (*cobra.Command, error) {
	operationGroupTeamMembershipsCmd := &cobra.Command{
		Use:  "team_memberships",
		Long: ``,
	}

	operationTeamMembershipCreateCmd, err := makeOperationTeamMembershipsTeamMembershipCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamMembershipsCmd.AddCommand(operationTeamMembershipCreateCmd)

	operationTeamMembershipDeleteCmd, err := makeOperationTeamMembershipsTeamMembershipDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamMembershipsCmd.AddCommand(operationTeamMembershipDeleteCmd)

	operationTeamMembershipListCmd, err := makeOperationTeamMembershipsTeamMembershipListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamMembershipsCmd.AddCommand(operationTeamMembershipListCmd)

	operationTeamMembershipUpdateCmd, err := makeOperationTeamMembershipsTeamMembershipUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamMembershipsCmd.AddCommand(operationTeamMembershipUpdateCmd)

	operationTeamMembershipsCmd, err := makeOperationTeamMembershipsTeamMembershipsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamMembershipsCmd.AddCommand(operationTeamMembershipsCmd)

	return operationGroupTeamMembershipsCmd, nil
}
func makeOperationGroupTeamsCmd() (*cobra.Command, error) {
	operationGroupTeamsCmd := &cobra.Command{
		Use:  "teams",
		Long: ``,
	}

	operationTeamCreateCmd, err := makeOperationTeamsTeamCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamsCmd.AddCommand(operationTeamCreateCmd)

	operationTeamDeleteCmd, err := makeOperationTeamsTeamDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamsCmd.AddCommand(operationTeamDeleteCmd)

	operationTeamInspectCmd, err := makeOperationTeamsTeamInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamsCmd.AddCommand(operationTeamInspectCmd)

	operationTeamListCmd, err := makeOperationTeamsTeamListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamsCmd.AddCommand(operationTeamListCmd)

	operationTeamUpdateCmd, err := makeOperationTeamsTeamUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTeamsCmd.AddCommand(operationTeamUpdateCmd)

	return operationGroupTeamsCmd, nil
}
func makeOperationGroupTemplatesCmd() (*cobra.Command, error) {
	operationGroupTemplatesCmd := &cobra.Command{
		Use:  "templates",
		Long: ``,
	}

	operationTemplateFileCmd, err := makeOperationTemplatesTemplateFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTemplatesCmd.AddCommand(operationTemplateFileCmd)

	operationTemplateListCmd, err := makeOperationTemplatesTemplateListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTemplatesCmd.AddCommand(operationTemplateListCmd)

	return operationGroupTemplatesCmd, nil
}
func makeOperationGroupUploadCmd() (*cobra.Command, error) {
	operationGroupUploadCmd := &cobra.Command{
		Use:  "upload",
		Long: ``,
	}

	operationUploadTLSCmd, err := makeOperationUploadUploadTLSCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUploadCmd.AddCommand(operationUploadTLSCmd)

	return operationGroupUploadCmd, nil
}
func makeOperationGroupUseractivityCmd() (*cobra.Command, error) {
	operationGroupUseractivityCmd := &cobra.Command{
		Use:  "useractivity",
		Long: ``,
	}

	operationAuthLogsCSVCmd, err := makeOperationUseractivityAuthLogsCSVCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUseractivityCmd.AddCommand(operationAuthLogsCSVCmd)

	operationAuthLogsListCmd, err := makeOperationUseractivityAuthLogsListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUseractivityCmd.AddCommand(operationAuthLogsListCmd)

	operationLogsCSVCmd, err := makeOperationUseractivityLogsCSVCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUseractivityCmd.AddCommand(operationLogsCSVCmd)

	operationLogsListCmd, err := makeOperationUseractivityLogsListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUseractivityCmd.AddCommand(operationLogsListCmd)

	return operationGroupUseractivityCmd, nil
}
func makeOperationGroupUsersCmd() (*cobra.Command, error) {
	operationGroupUsersCmd := &cobra.Command{
		Use:  "users",
		Long: ``,
	}

	operationUserAdminCheckCmd, err := makeOperationUsersUserAdminCheckCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserAdminCheckCmd)

	operationUserAdminInitCmd, err := makeOperationUsersUserAdminInitCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserAdminInitCmd)

	operationUserCreateCmd, err := makeOperationUsersUserCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserCreateCmd)

	operationUserCreateGitCredentialCmd, err := makeOperationUsersUserCreateGitCredentialCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserCreateGitCredentialCmd)

	operationUserDeleteCmd, err := makeOperationUsersUserDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserDeleteCmd)

	operationUserGenerateAPIKeyCmd, err := makeOperationUsersUserGenerateAPIKeyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserGenerateAPIKeyCmd)

	operationUserGetAPIKeysCmd, err := makeOperationUsersUserGetAPIKeysCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserGetAPIKeysCmd)

	operationUserGetGitCredentialCmd, err := makeOperationUsersUserGetGitCredentialCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserGetGitCredentialCmd)

	operationUserGetGitCredentialsCmd, err := makeOperationUsersUserGetGitCredentialsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserGetGitCredentialsCmd)

	operationUserInspectCmd, err := makeOperationUsersUserInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserInspectCmd)

	operationUserListCmd, err := makeOperationUsersUserListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserListCmd)

	operationUserMembershipsInspectCmd, err := makeOperationUsersUserMembershipsInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserMembershipsInspectCmd)

	operationUserNamespacesCmd, err := makeOperationUsersUserNamespacesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserNamespacesCmd)

	operationUserRemoveAPIKeyCmd, err := makeOperationUsersUserRemoveAPIKeyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserRemoveAPIKeyCmd)

	operationUserRemoveGitCredentialCmd, err := makeOperationUsersUserRemoveGitCredentialCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserRemoveGitCredentialCmd)

	operationUserUpdateCmd, err := makeOperationUsersUserUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserUpdateCmd)

	operationUserUpdateGitCredentialCmd, err := makeOperationUsersUserUpdateGitCredentialCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserUpdateGitCredentialCmd)

	operationUserUpdatePasswordCmd, err := makeOperationUsersUserUpdatePasswordCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsersCmd.AddCommand(operationUserUpdatePasswordCmd)

	return operationGroupUsersCmd, nil
}
func makeOperationGroupWebhooksCmd() (*cobra.Command, error) {
	operationGroupWebhooksCmd := &cobra.Command{
		Use:  "webhooks",
		Long: ``,
	}

	operationDeleteWebhooksIDCmd, err := makeOperationWebhooksDeleteWebhooksIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhooksCmd.AddCommand(operationDeleteWebhooksIDCmd)

	operationGetWebhooksCmd, err := makeOperationWebhooksGetWebhooksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhooksCmd.AddCommand(operationGetWebhooksCmd)

	operationPostWebhooksCmd, err := makeOperationWebhooksPostWebhooksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhooksCmd.AddCommand(operationPostWebhooksCmd)

	operationPostWebhooksTokenCmd, err := makeOperationWebhooksPostWebhooksTokenCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhooksCmd.AddCommand(operationPostWebhooksTokenCmd)

	operationPutWebhooksIDCmd, err := makeOperationWebhooksPutWebhooksIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhooksCmd.AddCommand(operationPutWebhooksIDCmd)

	operationPutWebhooksIDReassignCmd, err := makeOperationWebhooksPutWebhooksIDReassignCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhooksCmd.AddCommand(operationPutWebhooksIDReassignCmd)

	return operationGroupWebhooksCmd, nil
}
func makeOperationGroupWebsocketCmd() (*cobra.Command, error) {
	operationGroupWebsocketCmd := &cobra.Command{
		Use:  "websocket",
		Long: ``,
	}

	operationGetWebsocketAttachCmd, err := makeOperationWebsocketGetWebsocketAttachCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebsocketCmd.AddCommand(operationGetWebsocketAttachCmd)

	operationGetWebsocketExecCmd, err := makeOperationWebsocketGetWebsocketExecCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebsocketCmd.AddCommand(operationGetWebsocketExecCmd)

	operationGetWebsocketKubernetesShellCmd, err := makeOperationWebsocketGetWebsocketKubernetesShellCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebsocketCmd.AddCommand(operationGetWebsocketKubernetesShellCmd)

	operationGetWebsocketPodCmd, err := makeOperationWebsocketGetWebsocketPodCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebsocketCmd.AddCommand(operationGetWebsocketPodCmd)

	return operationGroupWebsocketCmd, nil
}
