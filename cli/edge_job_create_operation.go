// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/edge_jobs"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEdgeJobsEdgeJobCreateCmd returns a cmd to handle operation edgeJobCreate
func makeOperationEdgeJobsEdgeJobCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "EdgeJobCreate",
		Short: `**Access policy**: administrator`,
		RunE:  runOperationEdgeJobsEdgeJobCreate,
	}

	if err := registerOperationEdgeJobsEdgeJobCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEdgeJobsEdgeJobCreate uses cmd flags to call endpoint api
func runOperationEdgeJobsEdgeJobCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := edge_jobs.NewEdgeJobCreateParams()
	if err, _ := retrieveOperationEdgeJobsEdgeJobCreateBodyFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEdgeJobsEdgeJobCreateBodyStringFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEdgeJobsEdgeJobCreateMethodFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEdgeJobsEdgeJobCreateResult(appCli.EdgeJobs.EdgeJobCreate(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEdgeJobsEdgeJobCreateParamFlags registers all flags needed to fill params
func registerOperationEdgeJobsEdgeJobCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEdgeJobsEdgeJobCreateBodyFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEdgeJobsEdgeJobCreateBodyStringParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEdgeJobsEdgeJobCreateMethodParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEdgeJobsEdgeJobCreateBodyFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFileFlagName string
	if cmdPrefix == "" {
		bodyFileFlagName = "body_file"
	} else {
		bodyFileFlagName = fmt.Sprintf("%v.body_file", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFileFlagName, "", "Optional json string for [body_file]. EdgeGroup data when method is file")

	// add flags for body
	if err := registerModelEdgejobsEdgeJobCreateFromFilePayloadFlags(0, "edgejobsEdgeJobCreateFromFilePayload", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationEdgeJobsEdgeJobCreateBodyStringParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyStringFlagName string
	if cmdPrefix == "" {
		bodyStringFlagName = "body_string"
	} else {
		bodyStringFlagName = fmt.Sprintf("%v.body_string", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyStringFlagName, "", "Optional json string for [body_string]. EdgeGroup data when method is string")

	// add flags for body
	if err := registerModelEdgejobsEdgeJobCreateFromFileContentPayloadFlags(0, "edgejobsEdgeJobCreateFromFileContentPayload", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationEdgeJobsEdgeJobCreateMethodParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	methodDescription := `Enum: ["file","string"]. Required. Creation Method`

	var methodFlagName string
	if cmdPrefix == "" {
		methodFlagName = "method"
	} else {
		methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
	}

	var methodFlagDefault string

	_ = cmd.PersistentFlags().String(methodFlagName, methodFlagDefault, methodDescription)

	if err := cmd.RegisterFlagCompletionFunc(methodFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["file","string"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationEdgeJobsEdgeJobCreateBodyFileFlag(m *edge_jobs.EdgeJobCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body_file") {
		// Read body_file string from cmd and unmarshal
		bodyFileValueStr, err := cmd.Flags().GetString("body_file")
		if err != nil {
			return err, false
		}

		bodyFileValue := models.EdgejobsEdgeJobCreateFromFilePayload{}
		if err := json.Unmarshal([]byte(bodyFileValueStr), &bodyFileValue); err != nil {
			return fmt.Errorf("cannot unmarshal body_file string in models.EdgejobsEdgeJobCreateFromFilePayload: %v", err), false
		}
		m.BodyFile = &bodyFileValue
	}
	bodyFileValueModel := m.BodyFile
	if swag.IsZero(bodyFileValueModel) {
		bodyFileValueModel = &models.EdgejobsEdgeJobCreateFromFilePayload{}
	}
	err, added := retrieveModelEdgejobsEdgeJobCreateFromFilePayloadFlags(0, bodyFileValueModel, "edgejobsEdgeJobCreateFromFilePayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.BodyFile = bodyFileValueModel
	}
	if dryRun && debug {

		bodyFileValueDebugBytes, err := json.Marshal(m.BodyFile)
		if err != nil {
			return err, false
		}
		logDebugf("BodyFile dry-run payload: %v", string(bodyFileValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationEdgeJobsEdgeJobCreateBodyStringFlag(m *edge_jobs.EdgeJobCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body_string") {
		// Read body_string string from cmd and unmarshal
		bodyStringValueStr, err := cmd.Flags().GetString("body_string")
		if err != nil {
			return err, false
		}

		bodyStringValue := models.EdgejobsEdgeJobCreateFromFileContentPayload{}
		if err := json.Unmarshal([]byte(bodyStringValueStr), &bodyStringValue); err != nil {
			return fmt.Errorf("cannot unmarshal body_string string in models.EdgejobsEdgeJobCreateFromFileContentPayload: %v", err), false
		}
		m.BodyString = &bodyStringValue
	}
	bodyStringValueModel := m.BodyString
	if swag.IsZero(bodyStringValueModel) {
		bodyStringValueModel = &models.EdgejobsEdgeJobCreateFromFileContentPayload{}
	}
	err, added := retrieveModelEdgejobsEdgeJobCreateFromFileContentPayloadFlags(0, bodyStringValueModel, "edgejobsEdgeJobCreateFromFileContentPayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.BodyString = bodyStringValueModel
	}
	if dryRun && debug {

		bodyStringValueDebugBytes, err := json.Marshal(m.BodyString)
		if err != nil {
			return err, false
		}
		logDebugf("BodyString dry-run payload: %v", string(bodyStringValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationEdgeJobsEdgeJobCreateMethodFlag(m *edge_jobs.EdgeJobCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("method") {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

	}
	return nil, retAdded
}

// parseOperationEdgeJobsEdgeJobCreateResult parses request result and return the string content
func parseOperationEdgeJobsEdgeJobCreateResult(resp0 *edge_jobs.EdgeJobCreateOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*edge_jobs.EdgeJobCreateOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning edgeJobCreateInternalServerError is not supported

		// Non schema case: warning edgeJobCreateServiceUnavailable is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
