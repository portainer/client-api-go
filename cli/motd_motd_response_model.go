// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for MotdMotdResponse

// register flags to command
func registerModelMotdMotdResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMotdMotdResponseContentLayout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMotdMotdResponseHash(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMotdMotdResponseMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMotdMotdResponseStyle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMotdMotdResponseTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMotdMotdResponseContentLayout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ContentLayout map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerMotdMotdResponseHash(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Hash []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerMotdMotdResponseMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := ``

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "Message"
	} else {
		messageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerMotdMotdResponseStyle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	styleDescription := ``

	var styleFlagName string
	if cmdPrefix == "" {
		styleFlagName = "Style"
	} else {
		styleFlagName = fmt.Sprintf("%v.Style", cmdPrefix)
	}

	var styleFlagDefault string

	_ = cmd.PersistentFlags().String(styleFlagName, styleFlagDefault, styleDescription)

	return nil
}

func registerMotdMotdResponseTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := ``

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "Title"
	} else {
		titleFlagName = fmt.Sprintf("%v.Title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMotdMotdResponseFlags(depth int, m *models.MotdMotdResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, contentLayoutAdded := retrieveMotdMotdResponseContentLayoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contentLayoutAdded

	err, hashAdded := retrieveMotdMotdResponseHashFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashAdded

	err, messageAdded := retrieveMotdMotdResponseMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, styleAdded := retrieveMotdMotdResponseStyleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || styleAdded

	err, titleAdded := retrieveMotdMotdResponseTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	return nil, retAdded
}

func retrieveMotdMotdResponseContentLayoutFlags(depth int, m *models.MotdMotdResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contentLayoutFlagName := fmt.Sprintf("%v.ContentLayout", cmdPrefix)
	if cmd.Flags().Changed(contentLayoutFlagName) {
		// warning: ContentLayout map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMotdMotdResponseHashFlags(depth int, m *models.MotdMotdResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hashFlagName := fmt.Sprintf("%v.Hash", cmdPrefix)
	if cmd.Flags().Changed(hashFlagName) {
		// warning: Hash array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMotdMotdResponseMessageFlags(depth int, m *models.MotdMotdResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.Message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "Message"
		} else {
			messageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMotdMotdResponseStyleFlags(depth int, m *models.MotdMotdResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	styleFlagName := fmt.Sprintf("%v.Style", cmdPrefix)
	if cmd.Flags().Changed(styleFlagName) {

		var styleFlagName string
		if cmdPrefix == "" {
			styleFlagName = "Style"
		} else {
			styleFlagName = fmt.Sprintf("%v.Style", cmdPrefix)
		}

		styleFlagValue, err := cmd.Flags().GetString(styleFlagName)
		if err != nil {
			return err, false
		}
		m.Style = styleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMotdMotdResponseTitleFlags(depth int, m *models.MotdMotdResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.Title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "Title"
		} else {
			titleFlagName = fmt.Sprintf("%v.Title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}
