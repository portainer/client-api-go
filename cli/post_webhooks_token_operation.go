// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/webhooks"

	"github.com/spf13/cobra"
)

// makeOperationWebhooksPostWebhooksTokenCmd returns a cmd to handle operation postWebhooksToken
func makeOperationWebhooksPostWebhooksTokenCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "PostWebhooksToken",
		Short: `Acts on a passed in token UUID to restart the docker service
**Access policy**: public`,
		RunE: runOperationWebhooksPostWebhooksToken,
	}

	if err := registerOperationWebhooksPostWebhooksTokenParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWebhooksPostWebhooksToken uses cmd flags to call endpoint api
func runOperationWebhooksPostWebhooksToken(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := webhooks.NewPostWebhooksTokenParams()
	if err, _ := retrieveOperationWebhooksPostWebhooksTokenTokenFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWebhooksPostWebhooksTokenResult(appCli.Webhooks.PostWebhooksToken(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationWebhooksPostWebhooksTokenParamFlags registers all flags needed to fill params
func registerOperationWebhooksPostWebhooksTokenParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWebhooksPostWebhooksTokenTokenParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWebhooksPostWebhooksTokenTokenParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tokenDescription := `Required. Webhook token`

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

func retrieveOperationWebhooksPostWebhooksTokenTokenFlag(m *webhooks.PostWebhooksTokenParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("token") {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

	}
	return nil, retAdded
}

// parseOperationWebhooksPostWebhooksTokenResult parses request result and return the string content
func parseOperationWebhooksPostWebhooksTokenResult(resp0 *webhooks.PostWebhooksTokenAccepted, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning postWebhooksTokenAccepted is not supported

		// Non schema case: warning postWebhooksTokenBadRequest is not supported

		// Non schema case: warning postWebhooksTokenInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response postWebhooksTokenAccepted is not supported by go-swagger cli yet.

	return "", nil
}
