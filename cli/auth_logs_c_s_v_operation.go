// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/useractivity"

	"github.com/spf13/cobra"
)

// makeOperationUseractivityAuthLogsCSVCmd returns a cmd to handle operation authLogsCSV
func makeOperationUseractivityAuthLogsCSVCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "AuthLogsCSV",
		Short: `Download auth logs as CSV by provided query
**Access policy**: admin`,
		RunE: runOperationUseractivityAuthLogsCSV,
	}

	if err := registerOperationUseractivityAuthLogsCSVParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUseractivityAuthLogsCSV uses cmd flags to call endpoint api
func runOperationUseractivityAuthLogsCSV(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := useractivity.NewAuthLogsCSVParams()
	if err, _ := retrieveOperationUseractivityAuthLogsCSVAfterFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUseractivityAuthLogsCSVBeforeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUseractivityAuthLogsCSVKeywordFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUseractivityAuthLogsCSVLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUseractivityAuthLogsCSVSortByFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUseractivityAuthLogsCSVSortDescFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUseractivityAuthLogsCSVResult(appCli.Useractivity.AuthLogsCSV(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUseractivityAuthLogsCSVParamFlags registers all flags needed to fill params
func registerOperationUseractivityAuthLogsCSVParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUseractivityAuthLogsCSVAfterParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUseractivityAuthLogsCSVBeforeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUseractivityAuthLogsCSVKeywordParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUseractivityAuthLogsCSVLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUseractivityAuthLogsCSVSortByParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUseractivityAuthLogsCSVSortDescParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUseractivityAuthLogsCSVAfterParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	afterDescription := `Results after timestamp (unix)`

	var afterFlagName string
	if cmdPrefix == "" {
		afterFlagName = "after"
	} else {
		afterFlagName = fmt.Sprintf("%v.after", cmdPrefix)
	}

	var afterFlagDefault int64

	_ = cmd.PersistentFlags().Int64(afterFlagName, afterFlagDefault, afterDescription)

	return nil
}
func registerOperationUseractivityAuthLogsCSVBeforeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	beforeDescription := `Results before timestamp (unix)`

	var beforeFlagName string
	if cmdPrefix == "" {
		beforeFlagName = "before"
	} else {
		beforeFlagName = fmt.Sprintf("%v.before", cmdPrefix)
	}

	var beforeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(beforeFlagName, beforeFlagDefault, beforeDescription)

	return nil
}
func registerOperationUseractivityAuthLogsCSVKeywordParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	keywordDescription := `Query logs by this keyword`

	var keywordFlagName string
	if cmdPrefix == "" {
		keywordFlagName = "keyword"
	} else {
		keywordFlagName = fmt.Sprintf("%v.keyword", cmdPrefix)
	}

	var keywordFlagDefault string

	_ = cmd.PersistentFlags().String(keywordFlagName, keywordFlagDefault, keywordDescription)

	return nil
}
func registerOperationUseractivityAuthLogsCSVLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	limitDescription := `Limit results`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}
func registerOperationUseractivityAuthLogsCSVSortByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortByDescription := `Sort by this column`

	var sortByFlagName string
	if cmdPrefix == "" {
		sortByFlagName = "sortBy"
	} else {
		sortByFlagName = fmt.Sprintf("%v.sortBy", cmdPrefix)
	}

	var sortByFlagDefault string

	_ = cmd.PersistentFlags().String(sortByFlagName, sortByFlagDefault, sortByDescription)

	return nil
}
func registerOperationUseractivityAuthLogsCSVSortDescParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortDescDescription := `Sort order, if true will return results by descending order`

	var sortDescFlagName string
	if cmdPrefix == "" {
		sortDescFlagName = "sortDesc"
	} else {
		sortDescFlagName = fmt.Sprintf("%v.sortDesc", cmdPrefix)
	}

	var sortDescFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sortDescFlagName, sortDescFlagDefault, sortDescDescription)

	return nil
}

func retrieveOperationUseractivityAuthLogsCSVAfterFlag(m *useractivity.AuthLogsCSVParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("after") {

		var afterFlagName string
		if cmdPrefix == "" {
			afterFlagName = "after"
		} else {
			afterFlagName = fmt.Sprintf("%v.after", cmdPrefix)
		}

		afterFlagValue, err := cmd.Flags().GetInt64(afterFlagName)
		if err != nil {
			return err, false
		}
		m.After = &afterFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUseractivityAuthLogsCSVBeforeFlag(m *useractivity.AuthLogsCSVParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("before") {

		var beforeFlagName string
		if cmdPrefix == "" {
			beforeFlagName = "before"
		} else {
			beforeFlagName = fmt.Sprintf("%v.before", cmdPrefix)
		}

		beforeFlagValue, err := cmd.Flags().GetInt64(beforeFlagName)
		if err != nil {
			return err, false
		}
		m.Before = &beforeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUseractivityAuthLogsCSVKeywordFlag(m *useractivity.AuthLogsCSVParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("keyword") {

		var keywordFlagName string
		if cmdPrefix == "" {
			keywordFlagName = "keyword"
		} else {
			keywordFlagName = fmt.Sprintf("%v.keyword", cmdPrefix)
		}

		keywordFlagValue, err := cmd.Flags().GetString(keywordFlagName)
		if err != nil {
			return err, false
		}
		m.Keyword = &keywordFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUseractivityAuthLogsCSVLimitFlag(m *useractivity.AuthLogsCSVParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt64(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = &limitFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUseractivityAuthLogsCSVSortByFlag(m *useractivity.AuthLogsCSVParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sortBy") {

		var sortByFlagName string
		if cmdPrefix == "" {
			sortByFlagName = "sortBy"
		} else {
			sortByFlagName = fmt.Sprintf("%v.sortBy", cmdPrefix)
		}

		sortByFlagValue, err := cmd.Flags().GetString(sortByFlagName)
		if err != nil {
			return err, false
		}
		m.SortBy = &sortByFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUseractivityAuthLogsCSVSortDescFlag(m *useractivity.AuthLogsCSVParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sortDesc") {

		var sortDescFlagName string
		if cmdPrefix == "" {
			sortDescFlagName = "sortDesc"
		} else {
			sortDescFlagName = fmt.Sprintf("%v.sortDesc", cmdPrefix)
		}

		sortDescFlagValue, err := cmd.Flags().GetBool(sortDescFlagName)
		if err != nil {
			return err, false
		}
		m.SortDesc = &sortDescFlagValue

	}
	return nil, retAdded
}

// parseOperationUseractivityAuthLogsCSVResult parses request result and return the string content
func parseOperationUseractivityAuthLogsCSVResult(resp0 *useractivity.AuthLogsCSVOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning authLogsCSVOK is not supported

		// Non schema case: warning authLogsCSVInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response authLogsCSVOK is not supported by go-swagger cli yet.

	return "", nil
}
