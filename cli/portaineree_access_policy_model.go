// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeAccessPolicy

// register flags to command
func registerModelPortainereeAccessPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeAccessPolicyRoleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeAccessPolicyRoleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleIdDescription := `Role identifier. Reference the role that will be associated to this access policy`

	var roleIdFlagName string
	if cmdPrefix == "" {
		roleIdFlagName = "RoleId"
	} else {
		roleIdFlagName = fmt.Sprintf("%v.RoleId", cmdPrefix)
	}

	var roleIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(roleIdFlagName, roleIdFlagDefault, roleIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeAccessPolicyFlags(depth int, m *models.PortainereeAccessPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, roleIdAdded := retrievePortainereeAccessPolicyRoleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleIdAdded

	return nil, retAdded
}

func retrievePortainereeAccessPolicyRoleIDFlags(depth int, m *models.PortainereeAccessPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleIdFlagName := fmt.Sprintf("%v.RoleId", cmdPrefix)
	if cmd.Flags().Changed(roleIdFlagName) {

		var roleIdFlagName string
		if cmdPrefix == "" {
			roleIdFlagName = "RoleId"
		} else {
			roleIdFlagName = fmt.Sprintf("%v.RoleId", cmdPrefix)
		}

		roleIdFlagValue, err := cmd.Flags().GetInt64(roleIdFlagName)
		if err != nil {
			return err, false
		}
		m.RoleID = roleIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
