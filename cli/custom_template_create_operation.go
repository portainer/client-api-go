// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/custom_templates"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationCustomTemplatesCustomTemplateCreateCmd returns a cmd to handle operation customTemplateCreate
func makeOperationCustomTemplatesCustomTemplateCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "CustomTemplateCreate",
		Short: `Create a custom template.
**Access policy**: authenticated`,
		RunE: runOperationCustomTemplatesCustomTemplateCreate,
	}

	if err := registerOperationCustomTemplatesCustomTemplateCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationCustomTemplatesCustomTemplateCreate uses cmd flags to call endpoint api
func runOperationCustomTemplatesCustomTemplateCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := custom_templates.NewCustomTemplateCreateParams()
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateDescriptionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateNoteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreatePlatformFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateTitleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateBodyRepositoryFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateBodyStringFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCustomTemplatesCustomTemplateCreateMethodFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationCustomTemplatesCustomTemplateCreateResult(appCli.CustomTemplates.CustomTemplateCreate(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationCustomTemplatesCustomTemplateCreateParamFlags registers all flags needed to fill params
func registerOperationCustomTemplatesCustomTemplateCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationCustomTemplatesCustomTemplateCreateDescriptionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreateNoteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreatePlatformParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreateTitleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreateTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreateBodyRepositoryParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreateBodyStringParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreateFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCustomTemplatesCustomTemplateCreateMethodParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationCustomTemplatesCustomTemplateCreateDescriptionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	descriptionDescription := `Description of the template. required when method is file`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "Description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreateNoteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	noteDescription := `A note that will be displayed in the UI. Supports HTML content`

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "Note"
	} else {
		noteFlagName = fmt.Sprintf("%v.Note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreatePlatformParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	platformDescription := `Enum: [1,2]. Platform associated to the template (1 - 'linux', 2 - 'windows'). required when method is file`

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "Platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
	}

	var platformFlagDefault int64

	_ = cmd.PersistentFlags().Int64(platformFlagName, platformFlagDefault, platformDescription)

	if err := cmd.RegisterFlagCompletionFunc(platformFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreateTitleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	titleDescription := `Title of the template. required when method is file`

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "Title"
	} else {
		titleFlagName = fmt.Sprintf("%v.Title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreateTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: [1,2]. Type of created stack (1 - swarm, 2 - compose), required when method is file`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreateBodyRepositoryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyRepositoryFlagName string
	if cmdPrefix == "" {
		bodyRepositoryFlagName = "body_repository"
	} else {
		bodyRepositoryFlagName = fmt.Sprintf("%v.body_repository", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyRepositoryFlagName, "", "Optional json string for [body_repository]. Required when using method=repository")

	// add flags for body
	if err := registerModelCustomtemplatesCustomTemplateFromGitRepositoryPayloadFlags(0, "customtemplatesCustomTemplateFromGitRepositoryPayload", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreateBodyStringParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyStringFlagName string
	if cmdPrefix == "" {
		bodyStringFlagName = "body_string"
	} else {
		bodyStringFlagName = fmt.Sprintf("%v.body_string", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyStringFlagName, "", "Optional json string for [body_string]. Required when using method=string")

	// add flags for body
	if err := registerModelCustomtemplatesCustomTemplateFromFileContentPayloadFlags(0, "customtemplatesCustomTemplateFromFileContentPayload", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreateFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	return nil
}
func registerOperationCustomTemplatesCustomTemplateCreateMethodParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	methodDescription := `Enum: ["string","file","repository"]. Required. method for creating template`

	var methodFlagName string
	if cmdPrefix == "" {
		methodFlagName = "method"
	} else {
		methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
	}

	var methodFlagDefault string

	_ = cmd.PersistentFlags().String(methodFlagName, methodFlagDefault, methodDescription)

	if err := cmd.RegisterFlagCompletionFunc(methodFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["string","file","repository"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationCustomTemplatesCustomTemplateCreateDescriptionFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Description") {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "Description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreateNoteFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Note") {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "Note"
		} else {
			noteFlagName = fmt.Sprintf("%v.Note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = &noteFlagValue

	}
	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreatePlatformFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Platform") {

		var platformFlagName string
		if cmdPrefix == "" {
			platformFlagName = "Platform"
		} else {
			platformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
		}

		platformFlagValue, err := cmd.Flags().GetInt64(platformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = &platformFlagValue

	}
	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreateTitleFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Title") {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "Title"
		} else {
			titleFlagName = fmt.Sprintf("%v.Title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = &titleFlagValue

	}
	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreateTypeFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreateBodyRepositoryFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body_repository") {
		// Read body_repository string from cmd and unmarshal
		bodyRepositoryValueStr, err := cmd.Flags().GetString("body_repository")
		if err != nil {
			return err, false
		}

		bodyRepositoryValue := models.CustomtemplatesCustomTemplateFromGitRepositoryPayload{}
		if err := json.Unmarshal([]byte(bodyRepositoryValueStr), &bodyRepositoryValue); err != nil {
			return fmt.Errorf("cannot unmarshal body_repository string in models.CustomtemplatesCustomTemplateFromGitRepositoryPayload: %v", err), false
		}
		m.BodyRepository = &bodyRepositoryValue
	}
	bodyRepositoryValueModel := m.BodyRepository
	if swag.IsZero(bodyRepositoryValueModel) {
		bodyRepositoryValueModel = &models.CustomtemplatesCustomTemplateFromGitRepositoryPayload{}
	}
	err, added := retrieveModelCustomtemplatesCustomTemplateFromGitRepositoryPayloadFlags(0, bodyRepositoryValueModel, "customtemplatesCustomTemplateFromGitRepositoryPayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.BodyRepository = bodyRepositoryValueModel
	}
	if dryRun && debug {

		bodyRepositoryValueDebugBytes, err := json.Marshal(m.BodyRepository)
		if err != nil {
			return err, false
		}
		logDebugf("BodyRepository dry-run payload: %v", string(bodyRepositoryValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreateBodyStringFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body_string") {
		// Read body_string string from cmd and unmarshal
		bodyStringValueStr, err := cmd.Flags().GetString("body_string")
		if err != nil {
			return err, false
		}

		bodyStringValue := models.CustomtemplatesCustomTemplateFromFileContentPayload{}
		if err := json.Unmarshal([]byte(bodyStringValueStr), &bodyStringValue); err != nil {
			return fmt.Errorf("cannot unmarshal body_string string in models.CustomtemplatesCustomTemplateFromFileContentPayload: %v", err), false
		}
		m.BodyString = &bodyStringValue
	}
	bodyStringValueModel := m.BodyString
	if swag.IsZero(bodyStringValueModel) {
		bodyStringValueModel = &models.CustomtemplatesCustomTemplateFromFileContentPayload{}
	}
	err, added := retrieveModelCustomtemplatesCustomTemplateFromFileContentPayloadFlags(0, bodyStringValueModel, "customtemplatesCustomTemplateFromFileContentPayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.BodyString = bodyStringValueModel
	}
	if dryRun && debug {

		bodyStringValueDebugBytes, err := json.Marshal(m.BodyString)
		if err != nil {
			return err, false
		}
		logDebugf("BodyString dry-run payload: %v", string(bodyStringValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreateFileFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("file") {

		// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	}
	return nil, retAdded
}
func retrieveOperationCustomTemplatesCustomTemplateCreateMethodFlag(m *custom_templates.CustomTemplateCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("method") {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

	}
	return nil, retAdded
}

// parseOperationCustomTemplatesCustomTemplateCreateResult parses request result and return the string content
func parseOperationCustomTemplatesCustomTemplateCreateResult(resp0 *custom_templates.CustomTemplateCreateOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*custom_templates.CustomTemplateCreateOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning customTemplateCreateBadRequest is not supported

		// Non schema case: warning customTemplateCreateInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
