// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/backup"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBackupBackupToS3Cmd returns a cmd to handle operation backupToS3
func makeOperationBackupBackupToS3Cmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "BackupToS3",
		Short: `Creates an archive with a system data snapshot and upload it to the target S3 bucket
**Access policy**: administrator`,
		RunE: runOperationBackupBackupToS3,
	}

	if err := registerOperationBackupBackupToS3ParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBackupBackupToS3 uses cmd flags to call endpoint api
func runOperationBackupBackupToS3(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := backup.NewBackupToS3Params()
	if err, _ := retrieveOperationBackupBackupToS3BodyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBackupBackupToS3Result(appCli.Backup.BackupToS3(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBackupBackupToS3ParamFlags registers all flags needed to fill params
func registerOperationBackupBackupToS3ParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBackupBackupToS3BodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBackupBackupToS3BodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. S3 backup settings")

	// add flags for body
	if err := registerModelBackupS3BackupPayloadFlags(0, "backupS3BackupPayload", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationBackupBackupToS3BodyFlag(m *backup.BackupToS3Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.BackupS3BackupPayload{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.BackupS3BackupPayload: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.BackupS3BackupPayload{}
	}
	err, added := retrieveModelBackupS3BackupPayloadFlags(0, bodyValueModel, "backupS3BackupPayload", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationBackupBackupToS3Result parses request result and return the string content
func parseOperationBackupBackupToS3Result(resp0 *backup.BackupToS3NoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning backupToS3NoContent is not supported

		// Non schema case: warning backupToS3BadRequest is not supported

		// Non schema case: warning backupToS3InternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response backupToS3NoContent is not supported by go-swagger cli yet.

	return "", nil
}
