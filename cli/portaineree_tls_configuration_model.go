// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeTLSConfiguration

// register flags to command
func registerModelPortainereeTLSConfigurationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeTLSConfigurationTLS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTLSConfigurationTLSCACert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTLSConfigurationTLSCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTLSConfigurationTLSKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeTLSConfigurationTLSSkipVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeTLSConfigurationTLS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsDescription := `Use TLS`

	var tlsFlagName string
	if cmdPrefix == "" {
		tlsFlagName = "TLS"
	} else {
		tlsFlagName = fmt.Sprintf("%v.TLS", cmdPrefix)
	}

	var tlsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsFlagName, tlsFlagDefault, tlsDescription)

	return nil
}

func registerPortainereeTLSConfigurationTLSCACert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsCACertDescription := `Path to the TLS CA certificate file`

	var tlsCACertFlagName string
	if cmdPrefix == "" {
		tlsCACertFlagName = "TLSCACert"
	} else {
		tlsCACertFlagName = fmt.Sprintf("%v.TLSCACert", cmdPrefix)
	}

	var tlsCACertFlagDefault string

	_ = cmd.PersistentFlags().String(tlsCACertFlagName, tlsCACertFlagDefault, tlsCACertDescription)

	return nil
}

func registerPortainereeTLSConfigurationTLSCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsCertDescription := `Path to the TLS client certificate file`

	var tlsCertFlagName string
	if cmdPrefix == "" {
		tlsCertFlagName = "TLSCert"
	} else {
		tlsCertFlagName = fmt.Sprintf("%v.TLSCert", cmdPrefix)
	}

	var tlsCertFlagDefault string

	_ = cmd.PersistentFlags().String(tlsCertFlagName, tlsCertFlagDefault, tlsCertDescription)

	return nil
}

func registerPortainereeTLSConfigurationTLSKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsKeyDescription := `Path to the TLS client key file`

	var tlsKeyFlagName string
	if cmdPrefix == "" {
		tlsKeyFlagName = "TLSKey"
	} else {
		tlsKeyFlagName = fmt.Sprintf("%v.TLSKey", cmdPrefix)
	}

	var tlsKeyFlagDefault string

	_ = cmd.PersistentFlags().String(tlsKeyFlagName, tlsKeyFlagDefault, tlsKeyDescription)

	return nil
}

func registerPortainereeTLSConfigurationTLSSkipVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsSkipVerifyDescription := `Skip the verification of the server TLS certificate`

	var tlsSkipVerifyFlagName string
	if cmdPrefix == "" {
		tlsSkipVerifyFlagName = "TLSSkipVerify"
	} else {
		tlsSkipVerifyFlagName = fmt.Sprintf("%v.TLSSkipVerify", cmdPrefix)
	}

	var tlsSkipVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsSkipVerifyFlagName, tlsSkipVerifyFlagDefault, tlsSkipVerifyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeTLSConfigurationFlags(depth int, m *models.PortainereeTLSConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, tlsAdded := retrievePortainereeTLSConfigurationTLSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsAdded

	err, tlsCACertAdded := retrievePortainereeTLSConfigurationTLSCACertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsCACertAdded

	err, tlsCertAdded := retrievePortainereeTLSConfigurationTLSCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsCertAdded

	err, tlsKeyAdded := retrievePortainereeTLSConfigurationTLSKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsKeyAdded

	err, tlsSkipVerifyAdded := retrievePortainereeTLSConfigurationTLSSkipVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsSkipVerifyAdded

	return nil, retAdded
}

func retrievePortainereeTLSConfigurationTLSFlags(depth int, m *models.PortainereeTLSConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsFlagName := fmt.Sprintf("%v.TLS", cmdPrefix)
	if cmd.Flags().Changed(tlsFlagName) {

		var tlsFlagName string
		if cmdPrefix == "" {
			tlsFlagName = "TLS"
		} else {
			tlsFlagName = fmt.Sprintf("%v.TLS", cmdPrefix)
		}

		tlsFlagValue, err := cmd.Flags().GetBool(tlsFlagName)
		if err != nil {
			return err, false
		}
		m.TLS = &tlsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTLSConfigurationTLSCACertFlags(depth int, m *models.PortainereeTLSConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsCACertFlagName := fmt.Sprintf("%v.TLSCACert", cmdPrefix)
	if cmd.Flags().Changed(tlsCACertFlagName) {

		var tlsCACertFlagName string
		if cmdPrefix == "" {
			tlsCACertFlagName = "TLSCACert"
		} else {
			tlsCACertFlagName = fmt.Sprintf("%v.TLSCACert", cmdPrefix)
		}

		tlsCACertFlagValue, err := cmd.Flags().GetString(tlsCACertFlagName)
		if err != nil {
			return err, false
		}
		m.TLSCACert = tlsCACertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTLSConfigurationTLSCertFlags(depth int, m *models.PortainereeTLSConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsCertFlagName := fmt.Sprintf("%v.TLSCert", cmdPrefix)
	if cmd.Flags().Changed(tlsCertFlagName) {

		var tlsCertFlagName string
		if cmdPrefix == "" {
			tlsCertFlagName = "TLSCert"
		} else {
			tlsCertFlagName = fmt.Sprintf("%v.TLSCert", cmdPrefix)
		}

		tlsCertFlagValue, err := cmd.Flags().GetString(tlsCertFlagName)
		if err != nil {
			return err, false
		}
		m.TLSCert = tlsCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTLSConfigurationTLSKeyFlags(depth int, m *models.PortainereeTLSConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsKeyFlagName := fmt.Sprintf("%v.TLSKey", cmdPrefix)
	if cmd.Flags().Changed(tlsKeyFlagName) {

		var tlsKeyFlagName string
		if cmdPrefix == "" {
			tlsKeyFlagName = "TLSKey"
		} else {
			tlsKeyFlagName = fmt.Sprintf("%v.TLSKey", cmdPrefix)
		}

		tlsKeyFlagValue, err := cmd.Flags().GetString(tlsKeyFlagName)
		if err != nil {
			return err, false
		}
		m.TLSKey = tlsKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeTLSConfigurationTLSSkipVerifyFlags(depth int, m *models.PortainereeTLSConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsSkipVerifyFlagName := fmt.Sprintf("%v.TLSSkipVerify", cmdPrefix)
	if cmd.Flags().Changed(tlsSkipVerifyFlagName) {

		var tlsSkipVerifyFlagName string
		if cmdPrefix == "" {
			tlsSkipVerifyFlagName = "TLSSkipVerify"
		} else {
			tlsSkipVerifyFlagName = fmt.Sprintf("%v.TLSSkipVerify", cmdPrefix)
		}

		tlsSkipVerifyFlagValue, err := cmd.Flags().GetBool(tlsSkipVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.TLSSkipVerify = &tlsSkipVerifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
