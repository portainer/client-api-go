// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for OpenamtOpenAMTConfigurePayload

// register flags to command
func registerModelOpenamtOpenAMTConfigurePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOpenamtOpenAMTConfigurePayloadCertFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOpenamtOpenAMTConfigurePayloadCertFileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOpenamtOpenAMTConfigurePayloadCertFilePassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOpenamtOpenAMTConfigurePayloadDomainName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOpenamtOpenAMTConfigurePayloadEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOpenamtOpenAMTConfigurePayloadMpspassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOpenamtOpenAMTConfigurePayloadMpsserver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOpenamtOpenAMTConfigurePayloadMpsuser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadCertFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certFileContentDescription := ``

	var certFileContentFlagName string
	if cmdPrefix == "" {
		certFileContentFlagName = "certFileContent"
	} else {
		certFileContentFlagName = fmt.Sprintf("%v.certFileContent", cmdPrefix)
	}

	var certFileContentFlagDefault string

	_ = cmd.PersistentFlags().String(certFileContentFlagName, certFileContentFlagDefault, certFileContentDescription)

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadCertFileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certFileNameDescription := ``

	var certFileNameFlagName string
	if cmdPrefix == "" {
		certFileNameFlagName = "certFileName"
	} else {
		certFileNameFlagName = fmt.Sprintf("%v.certFileName", cmdPrefix)
	}

	var certFileNameFlagDefault string

	_ = cmd.PersistentFlags().String(certFileNameFlagName, certFileNameFlagDefault, certFileNameDescription)

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadCertFilePassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certFilePasswordDescription := ``

	var certFilePasswordFlagName string
	if cmdPrefix == "" {
		certFilePasswordFlagName = "certFilePassword"
	} else {
		certFilePasswordFlagName = fmt.Sprintf("%v.certFilePassword", cmdPrefix)
	}

	var certFilePasswordFlagDefault string

	_ = cmd.PersistentFlags().String(certFilePasswordFlagName, certFilePasswordFlagDefault, certFilePasswordDescription)

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadDomainName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	domainNameDescription := ``

	var domainNameFlagName string
	if cmdPrefix == "" {
		domainNameFlagName = "domainName"
	} else {
		domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
	}

	var domainNameFlagDefault string

	_ = cmd.PersistentFlags().String(domainNameFlagName, domainNameFlagDefault, domainNameDescription)

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadMpspassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mpspasswordDescription := ``

	var mpspasswordFlagName string
	if cmdPrefix == "" {
		mpspasswordFlagName = "mpspassword"
	} else {
		mpspasswordFlagName = fmt.Sprintf("%v.mpspassword", cmdPrefix)
	}

	var mpspasswordFlagDefault string

	_ = cmd.PersistentFlags().String(mpspasswordFlagName, mpspasswordFlagDefault, mpspasswordDescription)

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadMpsserver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mpsserverDescription := ``

	var mpsserverFlagName string
	if cmdPrefix == "" {
		mpsserverFlagName = "mpsserver"
	} else {
		mpsserverFlagName = fmt.Sprintf("%v.mpsserver", cmdPrefix)
	}

	var mpsserverFlagDefault string

	_ = cmd.PersistentFlags().String(mpsserverFlagName, mpsserverFlagDefault, mpsserverDescription)

	return nil
}

func registerOpenamtOpenAMTConfigurePayloadMpsuser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mpsuserDescription := ``

	var mpsuserFlagName string
	if cmdPrefix == "" {
		mpsuserFlagName = "mpsuser"
	} else {
		mpsuserFlagName = fmt.Sprintf("%v.mpsuser", cmdPrefix)
	}

	var mpsuserFlagDefault string

	_ = cmd.PersistentFlags().String(mpsuserFlagName, mpsuserFlagDefault, mpsuserDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOpenamtOpenAMTConfigurePayloadFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, certFileContentAdded := retrieveOpenamtOpenAMTConfigurePayloadCertFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certFileContentAdded

	err, certFileNameAdded := retrieveOpenamtOpenAMTConfigurePayloadCertFileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certFileNameAdded

	err, certFilePasswordAdded := retrieveOpenamtOpenAMTConfigurePayloadCertFilePasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certFilePasswordAdded

	err, domainNameAdded := retrieveOpenamtOpenAMTConfigurePayloadDomainNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainNameAdded

	err, enabledAdded := retrieveOpenamtOpenAMTConfigurePayloadEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, mpspasswordAdded := retrieveOpenamtOpenAMTConfigurePayloadMpspasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mpspasswordAdded

	err, mpsserverAdded := retrieveOpenamtOpenAMTConfigurePayloadMpsserverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mpsserverAdded

	err, mpsuserAdded := retrieveOpenamtOpenAMTConfigurePayloadMpsuserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mpsuserAdded

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadCertFileContentFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certFileContentFlagName := fmt.Sprintf("%v.certFileContent", cmdPrefix)
	if cmd.Flags().Changed(certFileContentFlagName) {

		var certFileContentFlagName string
		if cmdPrefix == "" {
			certFileContentFlagName = "certFileContent"
		} else {
			certFileContentFlagName = fmt.Sprintf("%v.certFileContent", cmdPrefix)
		}

		certFileContentFlagValue, err := cmd.Flags().GetString(certFileContentFlagName)
		if err != nil {
			return err, false
		}
		m.CertFileContent = certFileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadCertFileNameFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certFileNameFlagName := fmt.Sprintf("%v.certFileName", cmdPrefix)
	if cmd.Flags().Changed(certFileNameFlagName) {

		var certFileNameFlagName string
		if cmdPrefix == "" {
			certFileNameFlagName = "certFileName"
		} else {
			certFileNameFlagName = fmt.Sprintf("%v.certFileName", cmdPrefix)
		}

		certFileNameFlagValue, err := cmd.Flags().GetString(certFileNameFlagName)
		if err != nil {
			return err, false
		}
		m.CertFileName = certFileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadCertFilePasswordFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certFilePasswordFlagName := fmt.Sprintf("%v.certFilePassword", cmdPrefix)
	if cmd.Flags().Changed(certFilePasswordFlagName) {

		var certFilePasswordFlagName string
		if cmdPrefix == "" {
			certFilePasswordFlagName = "certFilePassword"
		} else {
			certFilePasswordFlagName = fmt.Sprintf("%v.certFilePassword", cmdPrefix)
		}

		certFilePasswordFlagValue, err := cmd.Flags().GetString(certFilePasswordFlagName)
		if err != nil {
			return err, false
		}
		m.CertFilePassword = certFilePasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadDomainNameFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainNameFlagName := fmt.Sprintf("%v.domainName", cmdPrefix)
	if cmd.Flags().Changed(domainNameFlagName) {

		var domainNameFlagName string
		if cmdPrefix == "" {
			domainNameFlagName = "domainName"
		} else {
			domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
		}

		domainNameFlagValue, err := cmd.Flags().GetString(domainNameFlagName)
		if err != nil {
			return err, false
		}
		m.DomainName = domainNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadEnabledFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadMpspasswordFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mpspasswordFlagName := fmt.Sprintf("%v.mpspassword", cmdPrefix)
	if cmd.Flags().Changed(mpspasswordFlagName) {

		var mpspasswordFlagName string
		if cmdPrefix == "" {
			mpspasswordFlagName = "mpspassword"
		} else {
			mpspasswordFlagName = fmt.Sprintf("%v.mpspassword", cmdPrefix)
		}

		mpspasswordFlagValue, err := cmd.Flags().GetString(mpspasswordFlagName)
		if err != nil {
			return err, false
		}
		m.Mpspassword = mpspasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadMpsserverFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mpsserverFlagName := fmt.Sprintf("%v.mpsserver", cmdPrefix)
	if cmd.Flags().Changed(mpsserverFlagName) {

		var mpsserverFlagName string
		if cmdPrefix == "" {
			mpsserverFlagName = "mpsserver"
		} else {
			mpsserverFlagName = fmt.Sprintf("%v.mpsserver", cmdPrefix)
		}

		mpsserverFlagValue, err := cmd.Flags().GetString(mpsserverFlagName)
		if err != nil {
			return err, false
		}
		m.Mpsserver = mpsserverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOpenamtOpenAMTConfigurePayloadMpsuserFlags(depth int, m *models.OpenamtOpenAMTConfigurePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mpsuserFlagName := fmt.Sprintf("%v.mpsuser", cmdPrefix)
	if cmd.Flags().Changed(mpsuserFlagName) {

		var mpsuserFlagName string
		if cmdPrefix == "" {
			mpsuserFlagName = "mpsuser"
		} else {
			mpsuserFlagName = fmt.Sprintf("%v.mpsuser", cmdPrefix)
		}

		mpsuserFlagValue, err := cmd.Flags().GetString(mpsuserFlagName)
		if err != nil {
			return err, false
		}
		m.Mpsuser = mpsuserFlagValue

		retAdded = true
	}

	return nil, retAdded
}
