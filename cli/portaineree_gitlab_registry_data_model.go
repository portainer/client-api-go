// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeGitlabRegistryData

// register flags to command
func registerModelPortainereeGitlabRegistryDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeGitlabRegistryDataInstanceURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeGitlabRegistryDataProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeGitlabRegistryDataProjectPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeGitlabRegistryDataInstanceURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	instanceUrlDescription := ``

	var instanceUrlFlagName string
	if cmdPrefix == "" {
		instanceUrlFlagName = "InstanceURL"
	} else {
		instanceUrlFlagName = fmt.Sprintf("%v.InstanceURL", cmdPrefix)
	}

	var instanceUrlFlagDefault string

	_ = cmd.PersistentFlags().String(instanceUrlFlagName, instanceUrlFlagDefault, instanceUrlDescription)

	return nil
}

func registerPortainereeGitlabRegistryDataProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectIdDescription := ``

	var projectIdFlagName string
	if cmdPrefix == "" {
		projectIdFlagName = "ProjectId"
	} else {
		projectIdFlagName = fmt.Sprintf("%v.ProjectId", cmdPrefix)
	}

	var projectIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(projectIdFlagName, projectIdFlagDefault, projectIdDescription)

	return nil
}

func registerPortainereeGitlabRegistryDataProjectPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectPathDescription := ``

	var projectPathFlagName string
	if cmdPrefix == "" {
		projectPathFlagName = "ProjectPath"
	} else {
		projectPathFlagName = fmt.Sprintf("%v.ProjectPath", cmdPrefix)
	}

	var projectPathFlagDefault string

	_ = cmd.PersistentFlags().String(projectPathFlagName, projectPathFlagDefault, projectPathDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeGitlabRegistryDataFlags(depth int, m *models.PortainereeGitlabRegistryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, instanceUrlAdded := retrievePortainereeGitlabRegistryDataInstanceURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceUrlAdded

	err, projectIdAdded := retrievePortainereeGitlabRegistryDataProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectIdAdded

	err, projectPathAdded := retrievePortainereeGitlabRegistryDataProjectPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectPathAdded

	return nil, retAdded
}

func retrievePortainereeGitlabRegistryDataInstanceURLFlags(depth int, m *models.PortainereeGitlabRegistryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceUrlFlagName := fmt.Sprintf("%v.InstanceURL", cmdPrefix)
	if cmd.Flags().Changed(instanceUrlFlagName) {

		var instanceUrlFlagName string
		if cmdPrefix == "" {
			instanceUrlFlagName = "InstanceURL"
		} else {
			instanceUrlFlagName = fmt.Sprintf("%v.InstanceURL", cmdPrefix)
		}

		instanceUrlFlagValue, err := cmd.Flags().GetString(instanceUrlFlagName)
		if err != nil {
			return err, false
		}
		m.InstanceURL = instanceUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeGitlabRegistryDataProjectIDFlags(depth int, m *models.PortainereeGitlabRegistryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectIdFlagName := fmt.Sprintf("%v.ProjectId", cmdPrefix)
	if cmd.Flags().Changed(projectIdFlagName) {

		var projectIdFlagName string
		if cmdPrefix == "" {
			projectIdFlagName = "ProjectId"
		} else {
			projectIdFlagName = fmt.Sprintf("%v.ProjectId", cmdPrefix)
		}

		projectIdFlagValue, err := cmd.Flags().GetInt64(projectIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectID = projectIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeGitlabRegistryDataProjectPathFlags(depth int, m *models.PortainereeGitlabRegistryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectPathFlagName := fmt.Sprintf("%v.ProjectPath", cmdPrefix)
	if cmd.Flags().Changed(projectPathFlagName) {

		var projectPathFlagName string
		if cmdPrefix == "" {
			projectPathFlagName = "ProjectPath"
		} else {
			projectPathFlagName = fmt.Sprintf("%v.ProjectPath", cmdPrefix)
		}

		projectPathFlagValue, err := cmd.Flags().GetString(projectPathFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectPath = projectPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}
