// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeLDAPGroupSearchSettings

// register flags to command
func registerModelPortainereeLDAPGroupSearchSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeLDAPGroupSearchSettingsGroupAttribute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeLDAPGroupSearchSettingsGroupBaseDN(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeLDAPGroupSearchSettingsGroupFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeLDAPGroupSearchSettingsGroupAttribute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupAttributeDescription := `LDAP attribute which denotes the group membership`

	var groupAttributeFlagName string
	if cmdPrefix == "" {
		groupAttributeFlagName = "GroupAttribute"
	} else {
		groupAttributeFlagName = fmt.Sprintf("%v.GroupAttribute", cmdPrefix)
	}

	var groupAttributeFlagDefault string

	_ = cmd.PersistentFlags().String(groupAttributeFlagName, groupAttributeFlagDefault, groupAttributeDescription)

	return nil
}

func registerPortainereeLDAPGroupSearchSettingsGroupBaseDN(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupBaseDNDescription := `The distinguished name of the element from which the LDAP server will search for groups`

	var groupBaseDNFlagName string
	if cmdPrefix == "" {
		groupBaseDNFlagName = "GroupBaseDN"
	} else {
		groupBaseDNFlagName = fmt.Sprintf("%v.GroupBaseDN", cmdPrefix)
	}

	var groupBaseDNFlagDefault string

	_ = cmd.PersistentFlags().String(groupBaseDNFlagName, groupBaseDNFlagDefault, groupBaseDNDescription)

	return nil
}

func registerPortainereeLDAPGroupSearchSettingsGroupFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupFilterDescription := `The LDAP search filter used to select group elements, optional`

	var groupFilterFlagName string
	if cmdPrefix == "" {
		groupFilterFlagName = "GroupFilter"
	} else {
		groupFilterFlagName = fmt.Sprintf("%v.GroupFilter", cmdPrefix)
	}

	var groupFilterFlagDefault string

	_ = cmd.PersistentFlags().String(groupFilterFlagName, groupFilterFlagDefault, groupFilterDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeLDAPGroupSearchSettingsFlags(depth int, m *models.PortainereeLDAPGroupSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, groupAttributeAdded := retrievePortainereeLDAPGroupSearchSettingsGroupAttributeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupAttributeAdded

	err, groupBaseDNAdded := retrievePortainereeLDAPGroupSearchSettingsGroupBaseDNFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupBaseDNAdded

	err, groupFilterAdded := retrievePortainereeLDAPGroupSearchSettingsGroupFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupFilterAdded

	return nil, retAdded
}

func retrievePortainereeLDAPGroupSearchSettingsGroupAttributeFlags(depth int, m *models.PortainereeLDAPGroupSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupAttributeFlagName := fmt.Sprintf("%v.GroupAttribute", cmdPrefix)
	if cmd.Flags().Changed(groupAttributeFlagName) {

		var groupAttributeFlagName string
		if cmdPrefix == "" {
			groupAttributeFlagName = "GroupAttribute"
		} else {
			groupAttributeFlagName = fmt.Sprintf("%v.GroupAttribute", cmdPrefix)
		}

		groupAttributeFlagValue, err := cmd.Flags().GetString(groupAttributeFlagName)
		if err != nil {
			return err, false
		}
		m.GroupAttribute = groupAttributeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeLDAPGroupSearchSettingsGroupBaseDNFlags(depth int, m *models.PortainereeLDAPGroupSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupBaseDNFlagName := fmt.Sprintf("%v.GroupBaseDN", cmdPrefix)
	if cmd.Flags().Changed(groupBaseDNFlagName) {

		var groupBaseDNFlagName string
		if cmdPrefix == "" {
			groupBaseDNFlagName = "GroupBaseDN"
		} else {
			groupBaseDNFlagName = fmt.Sprintf("%v.GroupBaseDN", cmdPrefix)
		}

		groupBaseDNFlagValue, err := cmd.Flags().GetString(groupBaseDNFlagName)
		if err != nil {
			return err, false
		}
		m.GroupBaseDN = groupBaseDNFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeLDAPGroupSearchSettingsGroupFilterFlags(depth int, m *models.PortainereeLDAPGroupSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupFilterFlagName := fmt.Sprintf("%v.GroupFilter", cmdPrefix)
	if cmd.Flags().Changed(groupFilterFlagName) {

		var groupFilterFlagName string
		if cmdPrefix == "" {
			groupFilterFlagName = "GroupFilter"
		} else {
			groupFilterFlagName = fmt.Sprintf("%v.GroupFilter", cmdPrefix)
		}

		groupFilterFlagValue, err := cmd.Flags().GetString(groupFilterFlagName)
		if err != nil {
			return err, false
		}
		m.GroupFilter = groupFilterFlagValue

		retAdded = true
	}

	return nil, retAdded
}
