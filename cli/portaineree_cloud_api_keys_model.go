// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeCloudAPIKeys

// register flags to command
func registerModelPortainereeCloudAPIKeysFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeCloudAPIKeysCivoAPIKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCloudAPIKeysDigitalOceanToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCloudAPIKeysGKEAPIKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeCloudAPIKeysLinodeToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeCloudAPIKeysCivoAPIKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	civoApiKeyDescription := ``

	var civoApiKeyFlagName string
	if cmdPrefix == "" {
		civoApiKeyFlagName = "CivoApiKey"
	} else {
		civoApiKeyFlagName = fmt.Sprintf("%v.CivoApiKey", cmdPrefix)
	}

	var civoApiKeyFlagDefault string

	_ = cmd.PersistentFlags().String(civoApiKeyFlagName, civoApiKeyFlagDefault, civoApiKeyDescription)

	return nil
}

func registerPortainereeCloudAPIKeysDigitalOceanToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	digitalOceanTokenDescription := ``

	var digitalOceanTokenFlagName string
	if cmdPrefix == "" {
		digitalOceanTokenFlagName = "DigitalOceanToken"
	} else {
		digitalOceanTokenFlagName = fmt.Sprintf("%v.DigitalOceanToken", cmdPrefix)
	}

	var digitalOceanTokenFlagDefault string

	_ = cmd.PersistentFlags().String(digitalOceanTokenFlagName, digitalOceanTokenFlagDefault, digitalOceanTokenDescription)

	return nil
}

func registerPortainereeCloudAPIKeysGKEAPIKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gKEApiKeyDescription := ``

	var gKEApiKeyFlagName string
	if cmdPrefix == "" {
		gKEApiKeyFlagName = "GKEApiKey"
	} else {
		gKEApiKeyFlagName = fmt.Sprintf("%v.GKEApiKey", cmdPrefix)
	}

	var gKEApiKeyFlagDefault string

	_ = cmd.PersistentFlags().String(gKEApiKeyFlagName, gKEApiKeyFlagDefault, gKEApiKeyDescription)

	return nil
}

func registerPortainereeCloudAPIKeysLinodeToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	linodeTokenDescription := ``

	var linodeTokenFlagName string
	if cmdPrefix == "" {
		linodeTokenFlagName = "LinodeToken"
	} else {
		linodeTokenFlagName = fmt.Sprintf("%v.LinodeToken", cmdPrefix)
	}

	var linodeTokenFlagDefault string

	_ = cmd.PersistentFlags().String(linodeTokenFlagName, linodeTokenFlagDefault, linodeTokenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeCloudAPIKeysFlags(depth int, m *models.PortainereeCloudAPIKeys, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, civoApiKeyAdded := retrievePortainereeCloudAPIKeysCivoAPIKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || civoApiKeyAdded

	err, digitalOceanTokenAdded := retrievePortainereeCloudAPIKeysDigitalOceanTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || digitalOceanTokenAdded

	err, gKEApiKeyAdded := retrievePortainereeCloudAPIKeysGKEAPIKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gKEApiKeyAdded

	err, linodeTokenAdded := retrievePortainereeCloudAPIKeysLinodeTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linodeTokenAdded

	return nil, retAdded
}

func retrievePortainereeCloudAPIKeysCivoAPIKeyFlags(depth int, m *models.PortainereeCloudAPIKeys, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	civoApiKeyFlagName := fmt.Sprintf("%v.CivoApiKey", cmdPrefix)
	if cmd.Flags().Changed(civoApiKeyFlagName) {

		var civoApiKeyFlagName string
		if cmdPrefix == "" {
			civoApiKeyFlagName = "CivoApiKey"
		} else {
			civoApiKeyFlagName = fmt.Sprintf("%v.CivoApiKey", cmdPrefix)
		}

		civoApiKeyFlagValue, err := cmd.Flags().GetString(civoApiKeyFlagName)
		if err != nil {
			return err, false
		}
		m.CivoAPIKey = civoApiKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCloudAPIKeysDigitalOceanTokenFlags(depth int, m *models.PortainereeCloudAPIKeys, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	digitalOceanTokenFlagName := fmt.Sprintf("%v.DigitalOceanToken", cmdPrefix)
	if cmd.Flags().Changed(digitalOceanTokenFlagName) {

		var digitalOceanTokenFlagName string
		if cmdPrefix == "" {
			digitalOceanTokenFlagName = "DigitalOceanToken"
		} else {
			digitalOceanTokenFlagName = fmt.Sprintf("%v.DigitalOceanToken", cmdPrefix)
		}

		digitalOceanTokenFlagValue, err := cmd.Flags().GetString(digitalOceanTokenFlagName)
		if err != nil {
			return err, false
		}
		m.DigitalOceanToken = digitalOceanTokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCloudAPIKeysGKEAPIKeyFlags(depth int, m *models.PortainereeCloudAPIKeys, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gKEApiKeyFlagName := fmt.Sprintf("%v.GKEApiKey", cmdPrefix)
	if cmd.Flags().Changed(gKEApiKeyFlagName) {

		var gKEApiKeyFlagName string
		if cmdPrefix == "" {
			gKEApiKeyFlagName = "GKEApiKey"
		} else {
			gKEApiKeyFlagName = fmt.Sprintf("%v.GKEApiKey", cmdPrefix)
		}

		gKEApiKeyFlagValue, err := cmd.Flags().GetString(gKEApiKeyFlagName)
		if err != nil {
			return err, false
		}
		m.GKEAPIKey = gKEApiKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeCloudAPIKeysLinodeTokenFlags(depth int, m *models.PortainereeCloudAPIKeys, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linodeTokenFlagName := fmt.Sprintf("%v.LinodeToken", cmdPrefix)
	if cmd.Flags().Changed(linodeTokenFlagName) {

		var linodeTokenFlagName string
		if cmdPrefix == "" {
			linodeTokenFlagName = "LinodeToken"
		} else {
			linodeTokenFlagName = fmt.Sprintf("%v.LinodeToken", cmdPrefix)
		}

		linodeTokenFlagValue, err := cmd.Flags().GetString(linodeTokenFlagName)
		if err != nil {
			return err, false
		}
		m.LinodeToken = linodeTokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}
