// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/cloud_credentials"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationCloudCredentialsCreateCmd returns a cmd to handle operation create
func makeOperationCloudCredentialsCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "Create",
		Short: `Create a cloud credential
**Access policy**: authenticated`,
		RunE: runOperationCloudCredentialsCreate,
	}

	if err := registerOperationCloudCredentialsCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationCloudCredentialsCreate uses cmd flags to call endpoint api
func runOperationCloudCredentialsCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := cloud_credentials.NewCreateParams()
	if err, _ := retrieveOperationCloudCredentialsCreateCredentialsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCloudCredentialsCreateNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCloudCredentialsCreateProviderFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationCloudCredentialsCreateResult(appCli.CloudCredentials.Create(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationCloudCredentialsCreateParamFlags registers all flags needed to fill params
func registerOperationCloudCredentialsCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationCloudCredentialsCreateCredentialsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCloudCredentialsCreateNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCloudCredentialsCreateProviderParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationCloudCredentialsCreateCredentialsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	credentialsDescription := `Required. credentials in json format`

	var credentialsFlagName string
	if cmdPrefix == "" {
		credentialsFlagName = "credentials"
	} else {
		credentialsFlagName = fmt.Sprintf("%v.credentials", cmdPrefix)
	}

	var credentialsFlagDefault string

	_ = cmd.PersistentFlags().String(credentialsFlagName, credentialsFlagDefault, credentialsDescription)

	return nil
}
func registerOperationCloudCredentialsCreateNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. name of the credentials such as rnd-test-credential`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationCloudCredentialsCreateProviderParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	providerDescription := `Required. cloud provider such as aws, aks, civo, digitalocean, etc.`

	var providerFlagName string
	if cmdPrefix == "" {
		providerFlagName = "provider"
	} else {
		providerFlagName = fmt.Sprintf("%v.provider", cmdPrefix)
	}

	var providerFlagDefault string

	_ = cmd.PersistentFlags().String(providerFlagName, providerFlagDefault, providerDescription)

	return nil
}

func retrieveOperationCloudCredentialsCreateCredentialsFlag(m *cloud_credentials.CreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("credentials") {

		var credentialsFlagName string
		if cmdPrefix == "" {
			credentialsFlagName = "credentials"
		} else {
			credentialsFlagName = fmt.Sprintf("%v.credentials", cmdPrefix)
		}

		credentialsFlagValue, err := cmd.Flags().GetString(credentialsFlagName)
		if err != nil {
			return err, false
		}
		m.Credentials = credentialsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationCloudCredentialsCreateNameFlag(m *cloud_credentials.CreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationCloudCredentialsCreateProviderFlag(m *cloud_credentials.CreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("provider") {

		var providerFlagName string
		if cmdPrefix == "" {
			providerFlagName = "provider"
		} else {
			providerFlagName = fmt.Sprintf("%v.provider", cmdPrefix)
		}

		providerFlagValue, err := cmd.Flags().GetString(providerFlagName)
		if err != nil {
			return err, false
		}
		m.Provider = providerFlagValue

	}
	return nil, retAdded
}

// parseOperationCloudCredentialsCreateResult parses request result and return the string content
func parseOperationCloudCredentialsCreateResult(resp0 *cloud_credentials.CreateOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*cloud_credentials.CreateOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning createBadRequest is not supported

		// Non schema case: warning createInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
