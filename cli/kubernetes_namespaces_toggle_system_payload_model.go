// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for KubernetesNamespacesToggleSystemPayload

// register flags to command
func registerModelKubernetesNamespacesToggleSystemPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerKubernetesNamespacesToggleSystemPayloadSystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerKubernetesNamespacesToggleSystemPayloadSystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	systemDescription := `Toggle the system state of this namespace to true or false`

	var systemFlagName string
	if cmdPrefix == "" {
		systemFlagName = "system"
	} else {
		systemFlagName = fmt.Sprintf("%v.system", cmdPrefix)
	}

	var systemFlagDefault bool

	_ = cmd.PersistentFlags().Bool(systemFlagName, systemFlagDefault, systemDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelKubernetesNamespacesToggleSystemPayloadFlags(depth int, m *models.KubernetesNamespacesToggleSystemPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, systemAdded := retrieveKubernetesNamespacesToggleSystemPayloadSystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || systemAdded

	return nil, retAdded
}

func retrieveKubernetesNamespacesToggleSystemPayloadSystemFlags(depth int, m *models.KubernetesNamespacesToggleSystemPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	systemFlagName := fmt.Sprintf("%v.system", cmdPrefix)
	if cmd.Flags().Changed(systemFlagName) {

		var systemFlagName string
		if cmdPrefix == "" {
			systemFlagName = "system"
		} else {
			systemFlagName = fmt.Sprintf("%v.system", cmdPrefix)
		}

		systemFlagValue, err := cmd.Flags().GetBool(systemFlagName)
		if err != nil {
			return err, false
		}
		m.System = &systemFlagValue

		retAdded = true
	}

	return nil, retAdded
}
