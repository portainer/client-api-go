// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainereeSettings

// register flags to command
func registerModelPortainereeSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeSettingsAgentSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAllowBindMountsForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAllowContainerCapabilitiesForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAllowDeviceMappingForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAllowHostNamespaceForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAllowPrivilegedModeForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAllowStackManagementForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAllowVolumeBrowserForRegularUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsAuthenticationMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsBlackListedLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsCloudAPIKeys(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsCustomLoginBanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEdgeAgentCheckinInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEdgePortainerURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEnableEdgeComputeFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEnableHostManagementFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEnableTelemetry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEnforceEdgeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsFeatureFlagSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsGlobalDeploymentOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsHelmRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsInternalAuthSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsKubeconfigExpiry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsKubectlShellImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsLDAPSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsLogoURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsOAuthSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsShowKomposeBuildOption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsTemplatesURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsTrustOnFirstConnect(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsUserSessionTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsDefaultRegistry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsDisplayDonationHeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsDisplayExternalContributors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEdge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsFdoConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsOpenAMTConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsAgentSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	agentSecretDescription := `Container environment parameter AGENT_SECRET`

	var agentSecretFlagName string
	if cmdPrefix == "" {
		agentSecretFlagName = "AgentSecret"
	} else {
		agentSecretFlagName = fmt.Sprintf("%v.AgentSecret", cmdPrefix)
	}

	var agentSecretFlagDefault string

	_ = cmd.PersistentFlags().String(agentSecretFlagName, agentSecretFlagDefault, agentSecretDescription)

	return nil
}

func registerPortainereeSettingsAllowBindMountsForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowBindMountsForRegularUsersDescription := ``

	var allowBindMountsForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowBindMountsForRegularUsersFlagName = "AllowBindMountsForRegularUsers"
	} else {
		allowBindMountsForRegularUsersFlagName = fmt.Sprintf("%v.AllowBindMountsForRegularUsers", cmdPrefix)
	}

	var allowBindMountsForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowBindMountsForRegularUsersFlagName, allowBindMountsForRegularUsersFlagDefault, allowBindMountsForRegularUsersDescription)

	return nil
}

func registerPortainereeSettingsAllowContainerCapabilitiesForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowContainerCapabilitiesForRegularUsersDescription := ``

	var allowContainerCapabilitiesForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowContainerCapabilitiesForRegularUsersFlagName = "AllowContainerCapabilitiesForRegularUsers"
	} else {
		allowContainerCapabilitiesForRegularUsersFlagName = fmt.Sprintf("%v.AllowContainerCapabilitiesForRegularUsers", cmdPrefix)
	}

	var allowContainerCapabilitiesForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowContainerCapabilitiesForRegularUsersFlagName, allowContainerCapabilitiesForRegularUsersFlagDefault, allowContainerCapabilitiesForRegularUsersDescription)

	return nil
}

func registerPortainereeSettingsAllowDeviceMappingForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowDeviceMappingForRegularUsersDescription := ``

	var allowDeviceMappingForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowDeviceMappingForRegularUsersFlagName = "AllowDeviceMappingForRegularUsers"
	} else {
		allowDeviceMappingForRegularUsersFlagName = fmt.Sprintf("%v.AllowDeviceMappingForRegularUsers", cmdPrefix)
	}

	var allowDeviceMappingForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowDeviceMappingForRegularUsersFlagName, allowDeviceMappingForRegularUsersFlagDefault, allowDeviceMappingForRegularUsersDescription)

	return nil
}

func registerPortainereeSettingsAllowHostNamespaceForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowHostNamespaceForRegularUsersDescription := ``

	var allowHostNamespaceForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowHostNamespaceForRegularUsersFlagName = "AllowHostNamespaceForRegularUsers"
	} else {
		allowHostNamespaceForRegularUsersFlagName = fmt.Sprintf("%v.AllowHostNamespaceForRegularUsers", cmdPrefix)
	}

	var allowHostNamespaceForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowHostNamespaceForRegularUsersFlagName, allowHostNamespaceForRegularUsersFlagDefault, allowHostNamespaceForRegularUsersDescription)

	return nil
}

func registerPortainereeSettingsAllowPrivilegedModeForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowPrivilegedModeForRegularUsersDescription := ``

	var allowPrivilegedModeForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowPrivilegedModeForRegularUsersFlagName = "AllowPrivilegedModeForRegularUsers"
	} else {
		allowPrivilegedModeForRegularUsersFlagName = fmt.Sprintf("%v.AllowPrivilegedModeForRegularUsers", cmdPrefix)
	}

	var allowPrivilegedModeForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowPrivilegedModeForRegularUsersFlagName, allowPrivilegedModeForRegularUsersFlagDefault, allowPrivilegedModeForRegularUsersDescription)

	return nil
}

func registerPortainereeSettingsAllowStackManagementForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowStackManagementForRegularUsersDescription := ``

	var allowStackManagementForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowStackManagementForRegularUsersFlagName = "AllowStackManagementForRegularUsers"
	} else {
		allowStackManagementForRegularUsersFlagName = fmt.Sprintf("%v.AllowStackManagementForRegularUsers", cmdPrefix)
	}

	var allowStackManagementForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowStackManagementForRegularUsersFlagName, allowStackManagementForRegularUsersFlagDefault, allowStackManagementForRegularUsersDescription)

	return nil
}

func registerPortainereeSettingsAllowVolumeBrowserForRegularUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowVolumeBrowserForRegularUsersDescription := ``

	var allowVolumeBrowserForRegularUsersFlagName string
	if cmdPrefix == "" {
		allowVolumeBrowserForRegularUsersFlagName = "AllowVolumeBrowserForRegularUsers"
	} else {
		allowVolumeBrowserForRegularUsersFlagName = fmt.Sprintf("%v.AllowVolumeBrowserForRegularUsers", cmdPrefix)
	}

	var allowVolumeBrowserForRegularUsersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowVolumeBrowserForRegularUsersFlagName, allowVolumeBrowserForRegularUsersFlagDefault, allowVolumeBrowserForRegularUsersDescription)

	return nil
}

func registerPortainereeSettingsAuthenticationMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationMethodDescription := `Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth`

	var authenticationMethodFlagName string
	if cmdPrefix == "" {
		authenticationMethodFlagName = "AuthenticationMethod"
	} else {
		authenticationMethodFlagName = fmt.Sprintf("%v.AuthenticationMethod", cmdPrefix)
	}

	var authenticationMethodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(authenticationMethodFlagName, authenticationMethodFlagDefault, authenticationMethodDescription)

	return nil
}

func registerPortainereeSettingsBlackListedLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: BlackListedLabels []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeSettingsCloudAPIKeys(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cloudApiKeysFlagName string
	if cmdPrefix == "" {
		cloudApiKeysFlagName = "CloudApiKeys"
	} else {
		cloudApiKeysFlagName = fmt.Sprintf("%v.CloudApiKeys", cmdPrefix)
	}

	if err := registerModelPortainereeCloudAPIKeysFlags(depth+1, cloudApiKeysFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsCustomLoginBanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customLoginBannerDescription := `The content in plaintext used to display in the login page. Will hide when value is empty string`

	var customLoginBannerFlagName string
	if cmdPrefix == "" {
		customLoginBannerFlagName = "CustomLoginBanner"
	} else {
		customLoginBannerFlagName = fmt.Sprintf("%v.CustomLoginBanner", cmdPrefix)
	}

	var customLoginBannerFlagDefault string

	_ = cmd.PersistentFlags().String(customLoginBannerFlagName, customLoginBannerFlagDefault, customLoginBannerDescription)

	return nil
}

func registerPortainereeSettingsEdgeAgentCheckinInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeAgentCheckinIntervalDescription := `The default check in interval for edge agent (in seconds)`

	var edgeAgentCheckinIntervalFlagName string
	if cmdPrefix == "" {
		edgeAgentCheckinIntervalFlagName = "EdgeAgentCheckinInterval"
	} else {
		edgeAgentCheckinIntervalFlagName = fmt.Sprintf("%v.EdgeAgentCheckinInterval", cmdPrefix)
	}

	var edgeAgentCheckinIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeAgentCheckinIntervalFlagName, edgeAgentCheckinIntervalFlagDefault, edgeAgentCheckinIntervalDescription)

	return nil
}

func registerPortainereeSettingsEdgePortainerURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgePortainerUrlDescription := `EdgePortainerURL is the URL that is exposed to edge agents`

	var edgePortainerUrlFlagName string
	if cmdPrefix == "" {
		edgePortainerUrlFlagName = "EdgePortainerUrl"
	} else {
		edgePortainerUrlFlagName = fmt.Sprintf("%v.EdgePortainerUrl", cmdPrefix)
	}

	var edgePortainerUrlFlagDefault string

	_ = cmd.PersistentFlags().String(edgePortainerUrlFlagName, edgePortainerUrlFlagDefault, edgePortainerUrlDescription)

	return nil
}

func registerPortainereeSettingsEnableEdgeComputeFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableEdgeComputeFeaturesDescription := `Whether edge compute features are enabled`

	var enableEdgeComputeFeaturesFlagName string
	if cmdPrefix == "" {
		enableEdgeComputeFeaturesFlagName = "EnableEdgeComputeFeatures"
	} else {
		enableEdgeComputeFeaturesFlagName = fmt.Sprintf("%v.EnableEdgeComputeFeatures", cmdPrefix)
	}

	var enableEdgeComputeFeaturesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableEdgeComputeFeaturesFlagName, enableEdgeComputeFeaturesFlagDefault, enableEdgeComputeFeaturesDescription)

	return nil
}

func registerPortainereeSettingsEnableHostManagementFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableHostManagementFeaturesDescription := `Deprecated fields v26`

	var enableHostManagementFeaturesFlagName string
	if cmdPrefix == "" {
		enableHostManagementFeaturesFlagName = "EnableHostManagementFeatures"
	} else {
		enableHostManagementFeaturesFlagName = fmt.Sprintf("%v.EnableHostManagementFeatures", cmdPrefix)
	}

	var enableHostManagementFeaturesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableHostManagementFeaturesFlagName, enableHostManagementFeaturesFlagDefault, enableHostManagementFeaturesDescription)

	return nil
}

func registerPortainereeSettingsEnableTelemetry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableTelemetryDescription := `Whether telemetry is enabled`

	var enableTelemetryFlagName string
	if cmdPrefix == "" {
		enableTelemetryFlagName = "EnableTelemetry"
	} else {
		enableTelemetryFlagName = fmt.Sprintf("%v.EnableTelemetry", cmdPrefix)
	}

	var enableTelemetryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableTelemetryFlagName, enableTelemetryFlagDefault, enableTelemetryDescription)

	return nil
}

func registerPortainereeSettingsEnforceEdgeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enforceEdgeIdDescription := `EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone`

	var enforceEdgeIdFlagName string
	if cmdPrefix == "" {
		enforceEdgeIdFlagName = "EnforceEdgeID"
	} else {
		enforceEdgeIdFlagName = fmt.Sprintf("%v.EnforceEdgeID", cmdPrefix)
	}

	var enforceEdgeIdFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enforceEdgeIdFlagName, enforceEdgeIdFlagDefault, enforceEdgeIdDescription)

	return nil
}

func registerPortainereeSettingsFeatureFlagSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: FeatureFlagSettings map[string]bool map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainereeSettingsGlobalDeploymentOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var globalDeploymentOptionsFlagName string
	if cmdPrefix == "" {
		globalDeploymentOptionsFlagName = "GlobalDeploymentOptions"
	} else {
		globalDeploymentOptionsFlagName = fmt.Sprintf("%v.GlobalDeploymentOptions", cmdPrefix)
	}

	if err := registerModelPortainereeGlobalDeploymentOptionsFlags(depth+1, globalDeploymentOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsHelmRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	helmRepositoryUrlDescription := `Helm repository URL, defaults to "https://charts.bitnami.com/bitnami"`

	var helmRepositoryUrlFlagName string
	if cmdPrefix == "" {
		helmRepositoryUrlFlagName = "HelmRepositoryURL"
	} else {
		helmRepositoryUrlFlagName = fmt.Sprintf("%v.HelmRepositoryURL", cmdPrefix)
	}

	var helmRepositoryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(helmRepositoryUrlFlagName, helmRepositoryUrlFlagDefault, helmRepositoryUrlDescription)

	return nil
}

func registerPortainereeSettingsInternalAuthSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var internalAuthSettingsFlagName string
	if cmdPrefix == "" {
		internalAuthSettingsFlagName = "InternalAuthSettings"
	} else {
		internalAuthSettingsFlagName = fmt.Sprintf("%v.InternalAuthSettings", cmdPrefix)
	}

	if err := registerModelPortainereeInternalAuthSettingsFlags(depth+1, internalAuthSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsKubeconfigExpiry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubeconfigExpiryDescription := `The expiry of a Kubeconfig`

	var kubeconfigExpiryFlagName string
	if cmdPrefix == "" {
		kubeconfigExpiryFlagName = "KubeconfigExpiry"
	} else {
		kubeconfigExpiryFlagName = fmt.Sprintf("%v.KubeconfigExpiry", cmdPrefix)
	}

	var kubeconfigExpiryFlagDefault string

	_ = cmd.PersistentFlags().String(kubeconfigExpiryFlagName, kubeconfigExpiryFlagDefault, kubeconfigExpiryDescription)

	return nil
}

func registerPortainereeSettingsKubectlShellImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubectlShellImageDescription := `KubectlImage, defaults to portainer/kubectl-shell`

	var kubectlShellImageFlagName string
	if cmdPrefix == "" {
		kubectlShellImageFlagName = "KubectlShellImage"
	} else {
		kubectlShellImageFlagName = fmt.Sprintf("%v.KubectlShellImage", cmdPrefix)
	}

	var kubectlShellImageFlagDefault string

	_ = cmd.PersistentFlags().String(kubectlShellImageFlagName, kubectlShellImageFlagDefault, kubectlShellImageDescription)

	return nil
}

func registerPortainereeSettingsLDAPSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lDAPSettingsFlagName string
	if cmdPrefix == "" {
		lDAPSettingsFlagName = "LDAPSettings"
	} else {
		lDAPSettingsFlagName = fmt.Sprintf("%v.LDAPSettings", cmdPrefix)
	}

	if err := registerModelPortainereeLDAPSettingsFlags(depth+1, lDAPSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsLogoURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoUrlDescription := `URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string`

	var logoUrlFlagName string
	if cmdPrefix == "" {
		logoUrlFlagName = "LogoURL"
	} else {
		logoUrlFlagName = fmt.Sprintf("%v.LogoURL", cmdPrefix)
	}

	var logoUrlFlagDefault string

	_ = cmd.PersistentFlags().String(logoUrlFlagName, logoUrlFlagDefault, logoUrlDescription)

	return nil
}

func registerPortainereeSettingsOAuthSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oAuthSettingsFlagName string
	if cmdPrefix == "" {
		oAuthSettingsFlagName = "OAuthSettings"
	} else {
		oAuthSettingsFlagName = fmt.Sprintf("%v.OAuthSettings", cmdPrefix)
	}

	if err := registerModelPortainereeOAuthSettingsFlags(depth+1, oAuthSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsShowKomposeBuildOption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	showKomposeBuildOptionDescription := `Show the Kompose build option (discontinued in 2.18)`

	var showKomposeBuildOptionFlagName string
	if cmdPrefix == "" {
		showKomposeBuildOptionFlagName = "ShowKomposeBuildOption"
	} else {
		showKomposeBuildOptionFlagName = fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
	}

	var showKomposeBuildOptionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(showKomposeBuildOptionFlagName, showKomposeBuildOptionFlagDefault, showKomposeBuildOptionDescription)

	return nil
}

func registerPortainereeSettingsSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := `The interval in which environment(endpoint) snapshots are created`

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "SnapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault string

	_ = cmd.PersistentFlags().String(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

func registerPortainereeSettingsTemplatesURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	templatesUrlDescription := `URL to the templates that will be displayed in the UI when navigating to App Templates`

	var templatesUrlFlagName string
	if cmdPrefix == "" {
		templatesUrlFlagName = "TemplatesURL"
	} else {
		templatesUrlFlagName = fmt.Sprintf("%v.TemplatesURL", cmdPrefix)
	}

	var templatesUrlFlagDefault string

	_ = cmd.PersistentFlags().String(templatesUrlFlagName, templatesUrlFlagDefault, templatesUrlDescription)

	return nil
}

func registerPortainereeSettingsTrustOnFirstConnect(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trustOnFirstConnectDescription := `TrustOnFirstConnect makes Portainer accepting edge agent connection by default`

	var trustOnFirstConnectFlagName string
	if cmdPrefix == "" {
		trustOnFirstConnectFlagName = "TrustOnFirstConnect"
	} else {
		trustOnFirstConnectFlagName = fmt.Sprintf("%v.TrustOnFirstConnect", cmdPrefix)
	}

	var trustOnFirstConnectFlagDefault bool

	_ = cmd.PersistentFlags().Bool(trustOnFirstConnectFlagName, trustOnFirstConnectFlagDefault, trustOnFirstConnectDescription)

	return nil
}

func registerPortainereeSettingsUserSessionTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userSessionTimeoutDescription := `The duration of a user session`

	var userSessionTimeoutFlagName string
	if cmdPrefix == "" {
		userSessionTimeoutFlagName = "UserSessionTimeout"
	} else {
		userSessionTimeoutFlagName = fmt.Sprintf("%v.UserSessionTimeout", cmdPrefix)
	}

	var userSessionTimeoutFlagDefault string

	_ = cmd.PersistentFlags().String(userSessionTimeoutFlagName, userSessionTimeoutFlagDefault, userSessionTimeoutDescription)

	return nil
}

func registerPortainereeSettingsDefaultRegistry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var defaultRegistryFlagName string
	if cmdPrefix == "" {
		defaultRegistryFlagName = "defaultRegistry"
	} else {
		defaultRegistryFlagName = fmt.Sprintf("%v.defaultRegistry", cmdPrefix)
	}

	if err := registerModelPortainereeSettingsDefaultRegistryFlags(depth+1, defaultRegistryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsDisplayDonationHeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	displayDonationHeaderDescription := `Deprecated fields`

	var displayDonationHeaderFlagName string
	if cmdPrefix == "" {
		displayDonationHeaderFlagName = "displayDonationHeader"
	} else {
		displayDonationHeaderFlagName = fmt.Sprintf("%v.displayDonationHeader", cmdPrefix)
	}

	var displayDonationHeaderFlagDefault bool

	_ = cmd.PersistentFlags().Bool(displayDonationHeaderFlagName, displayDonationHeaderFlagDefault, displayDonationHeaderDescription)

	return nil
}

func registerPortainereeSettingsDisplayExternalContributors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	displayExternalContributorsDescription := ``

	var displayExternalContributorsFlagName string
	if cmdPrefix == "" {
		displayExternalContributorsFlagName = "displayExternalContributors"
	} else {
		displayExternalContributorsFlagName = fmt.Sprintf("%v.displayExternalContributors", cmdPrefix)
	}

	var displayExternalContributorsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(displayExternalContributorsFlagName, displayExternalContributorsFlagDefault, displayExternalContributorsDescription)

	return nil
}

func registerPortainereeSettingsEdge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var edgeFlagName string
	if cmdPrefix == "" {
		edgeFlagName = "edge"
	} else {
		edgeFlagName = fmt.Sprintf("%v.edge", cmdPrefix)
	}

	if err := registerModelPortainereeSettingsEdgeFlags(depth+1, edgeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsFdoConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var fdoConfigurationFlagName string
	if cmdPrefix == "" {
		fdoConfigurationFlagName = "fdoConfiguration"
	} else {
		fdoConfigurationFlagName = fmt.Sprintf("%v.fdoConfiguration", cmdPrefix)
	}

	if err := registerModelPortainereeFDOConfigurationFlags(depth+1, fdoConfigurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsOpenAMTConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var openAMTConfigurationFlagName string
	if cmdPrefix == "" {
		openAMTConfigurationFlagName = "openAMTConfiguration"
	} else {
		openAMTConfigurationFlagName = fmt.Sprintf("%v.openAMTConfiguration", cmdPrefix)
	}

	if err := registerModelPortainerOpenAMTConfigurationFlags(depth+1, openAMTConfigurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeSettingsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, agentSecretAdded := retrievePortainereeSettingsAgentSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || agentSecretAdded

	err, allowBindMountsForRegularUsersAdded := retrievePortainereeSettingsAllowBindMountsForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowBindMountsForRegularUsersAdded

	err, allowContainerCapabilitiesForRegularUsersAdded := retrievePortainereeSettingsAllowContainerCapabilitiesForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowContainerCapabilitiesForRegularUsersAdded

	err, allowDeviceMappingForRegularUsersAdded := retrievePortainereeSettingsAllowDeviceMappingForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowDeviceMappingForRegularUsersAdded

	err, allowHostNamespaceForRegularUsersAdded := retrievePortainereeSettingsAllowHostNamespaceForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowHostNamespaceForRegularUsersAdded

	err, allowPrivilegedModeForRegularUsersAdded := retrievePortainereeSettingsAllowPrivilegedModeForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowPrivilegedModeForRegularUsersAdded

	err, allowStackManagementForRegularUsersAdded := retrievePortainereeSettingsAllowStackManagementForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowStackManagementForRegularUsersAdded

	err, allowVolumeBrowserForRegularUsersAdded := retrievePortainereeSettingsAllowVolumeBrowserForRegularUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowVolumeBrowserForRegularUsersAdded

	err, authenticationMethodAdded := retrievePortainereeSettingsAuthenticationMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationMethodAdded

	err, blackListedLabelsAdded := retrievePortainereeSettingsBlackListedLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blackListedLabelsAdded

	err, cloudApiKeysAdded := retrievePortainereeSettingsCloudAPIKeysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cloudApiKeysAdded

	err, customLoginBannerAdded := retrievePortainereeSettingsCustomLoginBannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customLoginBannerAdded

	err, edgeAgentCheckinIntervalAdded := retrievePortainereeSettingsEdgeAgentCheckinIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAgentCheckinIntervalAdded

	err, edgePortainerUrlAdded := retrievePortainereeSettingsEdgePortainerURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgePortainerUrlAdded

	err, enableEdgeComputeFeaturesAdded := retrievePortainereeSettingsEnableEdgeComputeFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableEdgeComputeFeaturesAdded

	err, enableHostManagementFeaturesAdded := retrievePortainereeSettingsEnableHostManagementFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableHostManagementFeaturesAdded

	err, enableTelemetryAdded := retrievePortainereeSettingsEnableTelemetryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableTelemetryAdded

	err, enforceEdgeIdAdded := retrievePortainereeSettingsEnforceEdgeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enforceEdgeIdAdded

	err, featureFlagSettingsAdded := retrievePortainereeSettingsFeatureFlagSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featureFlagSettingsAdded

	err, globalDeploymentOptionsAdded := retrievePortainereeSettingsGlobalDeploymentOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalDeploymentOptionsAdded

	err, helmRepositoryUrlAdded := retrievePortainereeSettingsHelmRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || helmRepositoryUrlAdded

	err, internalAuthSettingsAdded := retrievePortainereeSettingsInternalAuthSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || internalAuthSettingsAdded

	err, kubeconfigExpiryAdded := retrievePortainereeSettingsKubeconfigExpiryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubeconfigExpiryAdded

	err, kubectlShellImageAdded := retrievePortainereeSettingsKubectlShellImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubectlShellImageAdded

	err, lDAPSettingsAdded := retrievePortainereeSettingsLDAPSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lDAPSettingsAdded

	err, logoUrlAdded := retrievePortainereeSettingsLogoURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoUrlAdded

	err, oAuthSettingsAdded := retrievePortainereeSettingsOAuthSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthSettingsAdded

	err, showKomposeBuildOptionAdded := retrievePortainereeSettingsShowKomposeBuildOptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || showKomposeBuildOptionAdded

	err, snapshotIntervalAdded := retrievePortainereeSettingsSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	err, templatesUrlAdded := retrievePortainereeSettingsTemplatesURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || templatesUrlAdded

	err, trustOnFirstConnectAdded := retrievePortainereeSettingsTrustOnFirstConnectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trustOnFirstConnectAdded

	err, userSessionTimeoutAdded := retrievePortainereeSettingsUserSessionTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userSessionTimeoutAdded

	err, defaultRegistryAdded := retrievePortainereeSettingsDefaultRegistryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultRegistryAdded

	err, displayDonationHeaderAdded := retrievePortainereeSettingsDisplayDonationHeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || displayDonationHeaderAdded

	err, displayExternalContributorsAdded := retrievePortainereeSettingsDisplayExternalContributorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || displayExternalContributorsAdded

	err, edgeAdded := retrievePortainereeSettingsEdgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded

	err, fdoConfigurationAdded := retrievePortainereeSettingsFdoConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fdoConfigurationAdded

	err, openAMTConfigurationAdded := retrievePortainereeSettingsOpenAMTConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || openAMTConfigurationAdded

	return nil, retAdded
}

func retrievePortainereeSettingsAgentSecretFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	agentSecretFlagName := fmt.Sprintf("%v.AgentSecret", cmdPrefix)
	if cmd.Flags().Changed(agentSecretFlagName) {

		var agentSecretFlagName string
		if cmdPrefix == "" {
			agentSecretFlagName = "AgentSecret"
		} else {
			agentSecretFlagName = fmt.Sprintf("%v.AgentSecret", cmdPrefix)
		}

		agentSecretFlagValue, err := cmd.Flags().GetString(agentSecretFlagName)
		if err != nil {
			return err, false
		}
		m.AgentSecret = agentSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAllowBindMountsForRegularUsersFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowBindMountsForRegularUsersFlagName := fmt.Sprintf("%v.AllowBindMountsForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowBindMountsForRegularUsersFlagName) {

		var allowBindMountsForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowBindMountsForRegularUsersFlagName = "AllowBindMountsForRegularUsers"
		} else {
			allowBindMountsForRegularUsersFlagName = fmt.Sprintf("%v.AllowBindMountsForRegularUsers", cmdPrefix)
		}

		allowBindMountsForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowBindMountsForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowBindMountsForRegularUsers = &allowBindMountsForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAllowContainerCapabilitiesForRegularUsersFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowContainerCapabilitiesForRegularUsersFlagName := fmt.Sprintf("%v.AllowContainerCapabilitiesForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowContainerCapabilitiesForRegularUsersFlagName) {

		var allowContainerCapabilitiesForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowContainerCapabilitiesForRegularUsersFlagName = "AllowContainerCapabilitiesForRegularUsers"
		} else {
			allowContainerCapabilitiesForRegularUsersFlagName = fmt.Sprintf("%v.AllowContainerCapabilitiesForRegularUsers", cmdPrefix)
		}

		allowContainerCapabilitiesForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowContainerCapabilitiesForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowContainerCapabilitiesForRegularUsers = &allowContainerCapabilitiesForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAllowDeviceMappingForRegularUsersFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowDeviceMappingForRegularUsersFlagName := fmt.Sprintf("%v.AllowDeviceMappingForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowDeviceMappingForRegularUsersFlagName) {

		var allowDeviceMappingForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowDeviceMappingForRegularUsersFlagName = "AllowDeviceMappingForRegularUsers"
		} else {
			allowDeviceMappingForRegularUsersFlagName = fmt.Sprintf("%v.AllowDeviceMappingForRegularUsers", cmdPrefix)
		}

		allowDeviceMappingForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowDeviceMappingForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowDeviceMappingForRegularUsers = &allowDeviceMappingForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAllowHostNamespaceForRegularUsersFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowHostNamespaceForRegularUsersFlagName := fmt.Sprintf("%v.AllowHostNamespaceForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowHostNamespaceForRegularUsersFlagName) {

		var allowHostNamespaceForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowHostNamespaceForRegularUsersFlagName = "AllowHostNamespaceForRegularUsers"
		} else {
			allowHostNamespaceForRegularUsersFlagName = fmt.Sprintf("%v.AllowHostNamespaceForRegularUsers", cmdPrefix)
		}

		allowHostNamespaceForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowHostNamespaceForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowHostNamespaceForRegularUsers = &allowHostNamespaceForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAllowPrivilegedModeForRegularUsersFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowPrivilegedModeForRegularUsersFlagName := fmt.Sprintf("%v.AllowPrivilegedModeForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowPrivilegedModeForRegularUsersFlagName) {

		var allowPrivilegedModeForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowPrivilegedModeForRegularUsersFlagName = "AllowPrivilegedModeForRegularUsers"
		} else {
			allowPrivilegedModeForRegularUsersFlagName = fmt.Sprintf("%v.AllowPrivilegedModeForRegularUsers", cmdPrefix)
		}

		allowPrivilegedModeForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowPrivilegedModeForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowPrivilegedModeForRegularUsers = &allowPrivilegedModeForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAllowStackManagementForRegularUsersFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowStackManagementForRegularUsersFlagName := fmt.Sprintf("%v.AllowStackManagementForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowStackManagementForRegularUsersFlagName) {

		var allowStackManagementForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowStackManagementForRegularUsersFlagName = "AllowStackManagementForRegularUsers"
		} else {
			allowStackManagementForRegularUsersFlagName = fmt.Sprintf("%v.AllowStackManagementForRegularUsers", cmdPrefix)
		}

		allowStackManagementForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowStackManagementForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowStackManagementForRegularUsers = &allowStackManagementForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAllowVolumeBrowserForRegularUsersFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowVolumeBrowserForRegularUsersFlagName := fmt.Sprintf("%v.AllowVolumeBrowserForRegularUsers", cmdPrefix)
	if cmd.Flags().Changed(allowVolumeBrowserForRegularUsersFlagName) {

		var allowVolumeBrowserForRegularUsersFlagName string
		if cmdPrefix == "" {
			allowVolumeBrowserForRegularUsersFlagName = "AllowVolumeBrowserForRegularUsers"
		} else {
			allowVolumeBrowserForRegularUsersFlagName = fmt.Sprintf("%v.AllowVolumeBrowserForRegularUsers", cmdPrefix)
		}

		allowVolumeBrowserForRegularUsersFlagValue, err := cmd.Flags().GetBool(allowVolumeBrowserForRegularUsersFlagName)
		if err != nil {
			return err, false
		}
		m.AllowVolumeBrowserForRegularUsers = &allowVolumeBrowserForRegularUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsAuthenticationMethodFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationMethodFlagName := fmt.Sprintf("%v.AuthenticationMethod", cmdPrefix)
	if cmd.Flags().Changed(authenticationMethodFlagName) {

		var authenticationMethodFlagName string
		if cmdPrefix == "" {
			authenticationMethodFlagName = "AuthenticationMethod"
		} else {
			authenticationMethodFlagName = fmt.Sprintf("%v.AuthenticationMethod", cmdPrefix)
		}

		authenticationMethodFlagValue, err := cmd.Flags().GetInt64(authenticationMethodFlagName)
		if err != nil {
			return err, false
		}
		m.AuthenticationMethod = authenticationMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsBlackListedLabelsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	blackListedLabelsFlagName := fmt.Sprintf("%v.BlackListedLabels", cmdPrefix)
	if cmd.Flags().Changed(blackListedLabelsFlagName) {
		// warning: BlackListedLabels array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeSettingsCloudAPIKeysFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cloudApiKeysFlagName := fmt.Sprintf("%v.CloudApiKeys", cmdPrefix)
	if cmd.Flags().Changed(cloudApiKeysFlagName) {
		// info: complex object CloudApiKeys PortainereeCloudAPIKeys is retrieved outside this Changed() block
	}
	cloudApiKeysFlagValue := m.CloudAPIKeys
	if swag.IsZero(cloudApiKeysFlagValue) {
		cloudApiKeysFlagValue = &models.PortainereeCloudAPIKeys{}
	}

	err, cloudApiKeysAdded := retrieveModelPortainereeCloudAPIKeysFlags(depth+1, cloudApiKeysFlagValue, cloudApiKeysFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cloudApiKeysAdded
	if cloudApiKeysAdded {
		m.CloudAPIKeys = cloudApiKeysFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsCustomLoginBannerFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customLoginBannerFlagName := fmt.Sprintf("%v.CustomLoginBanner", cmdPrefix)
	if cmd.Flags().Changed(customLoginBannerFlagName) {

		var customLoginBannerFlagName string
		if cmdPrefix == "" {
			customLoginBannerFlagName = "CustomLoginBanner"
		} else {
			customLoginBannerFlagName = fmt.Sprintf("%v.CustomLoginBanner", cmdPrefix)
		}

		customLoginBannerFlagValue, err := cmd.Flags().GetString(customLoginBannerFlagName)
		if err != nil {
			return err, false
		}
		m.CustomLoginBanner = customLoginBannerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEdgeAgentCheckinIntervalFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeAgentCheckinIntervalFlagName := fmt.Sprintf("%v.EdgeAgentCheckinInterval", cmdPrefix)
	if cmd.Flags().Changed(edgeAgentCheckinIntervalFlagName) {

		var edgeAgentCheckinIntervalFlagName string
		if cmdPrefix == "" {
			edgeAgentCheckinIntervalFlagName = "EdgeAgentCheckinInterval"
		} else {
			edgeAgentCheckinIntervalFlagName = fmt.Sprintf("%v.EdgeAgentCheckinInterval", cmdPrefix)
		}

		edgeAgentCheckinIntervalFlagValue, err := cmd.Flags().GetInt64(edgeAgentCheckinIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeAgentCheckinInterval = edgeAgentCheckinIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEdgePortainerURLFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgePortainerUrlFlagName := fmt.Sprintf("%v.EdgePortainerUrl", cmdPrefix)
	if cmd.Flags().Changed(edgePortainerUrlFlagName) {

		var edgePortainerUrlFlagName string
		if cmdPrefix == "" {
			edgePortainerUrlFlagName = "EdgePortainerUrl"
		} else {
			edgePortainerUrlFlagName = fmt.Sprintf("%v.EdgePortainerUrl", cmdPrefix)
		}

		edgePortainerUrlFlagValue, err := cmd.Flags().GetString(edgePortainerUrlFlagName)
		if err != nil {
			return err, false
		}
		m.EdgePortainerURL = edgePortainerUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEnableEdgeComputeFeaturesFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableEdgeComputeFeaturesFlagName := fmt.Sprintf("%v.EnableEdgeComputeFeatures", cmdPrefix)
	if cmd.Flags().Changed(enableEdgeComputeFeaturesFlagName) {

		var enableEdgeComputeFeaturesFlagName string
		if cmdPrefix == "" {
			enableEdgeComputeFeaturesFlagName = "EnableEdgeComputeFeatures"
		} else {
			enableEdgeComputeFeaturesFlagName = fmt.Sprintf("%v.EnableEdgeComputeFeatures", cmdPrefix)
		}

		enableEdgeComputeFeaturesFlagValue, err := cmd.Flags().GetBool(enableEdgeComputeFeaturesFlagName)
		if err != nil {
			return err, false
		}
		m.EnableEdgeComputeFeatures = &enableEdgeComputeFeaturesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEnableHostManagementFeaturesFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableHostManagementFeaturesFlagName := fmt.Sprintf("%v.EnableHostManagementFeatures", cmdPrefix)
	if cmd.Flags().Changed(enableHostManagementFeaturesFlagName) {

		var enableHostManagementFeaturesFlagName string
		if cmdPrefix == "" {
			enableHostManagementFeaturesFlagName = "EnableHostManagementFeatures"
		} else {
			enableHostManagementFeaturesFlagName = fmt.Sprintf("%v.EnableHostManagementFeatures", cmdPrefix)
		}

		enableHostManagementFeaturesFlagValue, err := cmd.Flags().GetBool(enableHostManagementFeaturesFlagName)
		if err != nil {
			return err, false
		}
		m.EnableHostManagementFeatures = &enableHostManagementFeaturesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEnableTelemetryFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableTelemetryFlagName := fmt.Sprintf("%v.EnableTelemetry", cmdPrefix)
	if cmd.Flags().Changed(enableTelemetryFlagName) {

		var enableTelemetryFlagName string
		if cmdPrefix == "" {
			enableTelemetryFlagName = "EnableTelemetry"
		} else {
			enableTelemetryFlagName = fmt.Sprintf("%v.EnableTelemetry", cmdPrefix)
		}

		enableTelemetryFlagValue, err := cmd.Flags().GetBool(enableTelemetryFlagName)
		if err != nil {
			return err, false
		}
		m.EnableTelemetry = &enableTelemetryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEnforceEdgeIDFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enforceEdgeIdFlagName := fmt.Sprintf("%v.EnforceEdgeID", cmdPrefix)
	if cmd.Flags().Changed(enforceEdgeIdFlagName) {

		var enforceEdgeIdFlagName string
		if cmdPrefix == "" {
			enforceEdgeIdFlagName = "EnforceEdgeID"
		} else {
			enforceEdgeIdFlagName = fmt.Sprintf("%v.EnforceEdgeID", cmdPrefix)
		}

		enforceEdgeIdFlagValue, err := cmd.Flags().GetBool(enforceEdgeIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnforceEdgeID = &enforceEdgeIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsFeatureFlagSettingsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featureFlagSettingsFlagName := fmt.Sprintf("%v.FeatureFlagSettings", cmdPrefix)
	if cmd.Flags().Changed(featureFlagSettingsFlagName) {
		// warning: FeatureFlagSettings map type map[string]bool is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainereeSettingsGlobalDeploymentOptionsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalDeploymentOptionsFlagName := fmt.Sprintf("%v.GlobalDeploymentOptions", cmdPrefix)
	if cmd.Flags().Changed(globalDeploymentOptionsFlagName) {
		// info: complex object GlobalDeploymentOptions PortainereeGlobalDeploymentOptions is retrieved outside this Changed() block
	}
	globalDeploymentOptionsFlagValue := m.GlobalDeploymentOptions
	if swag.IsZero(globalDeploymentOptionsFlagValue) {
		globalDeploymentOptionsFlagValue = &models.PortainereeGlobalDeploymentOptions{}
	}

	err, globalDeploymentOptionsAdded := retrieveModelPortainereeGlobalDeploymentOptionsFlags(depth+1, globalDeploymentOptionsFlagValue, globalDeploymentOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalDeploymentOptionsAdded
	if globalDeploymentOptionsAdded {
		m.GlobalDeploymentOptions = globalDeploymentOptionsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsHelmRepositoryURLFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	helmRepositoryUrlFlagName := fmt.Sprintf("%v.HelmRepositoryURL", cmdPrefix)
	if cmd.Flags().Changed(helmRepositoryUrlFlagName) {

		var helmRepositoryUrlFlagName string
		if cmdPrefix == "" {
			helmRepositoryUrlFlagName = "HelmRepositoryURL"
		} else {
			helmRepositoryUrlFlagName = fmt.Sprintf("%v.HelmRepositoryURL", cmdPrefix)
		}

		helmRepositoryUrlFlagValue, err := cmd.Flags().GetString(helmRepositoryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.HelmRepositoryURL = helmRepositoryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsInternalAuthSettingsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	internalAuthSettingsFlagName := fmt.Sprintf("%v.InternalAuthSettings", cmdPrefix)
	if cmd.Flags().Changed(internalAuthSettingsFlagName) {
		// info: complex object InternalAuthSettings PortainereeInternalAuthSettings is retrieved outside this Changed() block
	}
	internalAuthSettingsFlagValue := m.InternalAuthSettings
	if swag.IsZero(internalAuthSettingsFlagValue) {
		internalAuthSettingsFlagValue = &models.PortainereeInternalAuthSettings{}
	}

	err, internalAuthSettingsAdded := retrieveModelPortainereeInternalAuthSettingsFlags(depth+1, internalAuthSettingsFlagValue, internalAuthSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || internalAuthSettingsAdded
	if internalAuthSettingsAdded {
		m.InternalAuthSettings = internalAuthSettingsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsKubeconfigExpiryFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubeconfigExpiryFlagName := fmt.Sprintf("%v.KubeconfigExpiry", cmdPrefix)
	if cmd.Flags().Changed(kubeconfigExpiryFlagName) {

		var kubeconfigExpiryFlagName string
		if cmdPrefix == "" {
			kubeconfigExpiryFlagName = "KubeconfigExpiry"
		} else {
			kubeconfigExpiryFlagName = fmt.Sprintf("%v.KubeconfigExpiry", cmdPrefix)
		}

		kubeconfigExpiryFlagValue, err := cmd.Flags().GetString(kubeconfigExpiryFlagName)
		if err != nil {
			return err, false
		}
		m.KubeconfigExpiry = kubeconfigExpiryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsKubectlShellImageFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubectlShellImageFlagName := fmt.Sprintf("%v.KubectlShellImage", cmdPrefix)
	if cmd.Flags().Changed(kubectlShellImageFlagName) {

		var kubectlShellImageFlagName string
		if cmdPrefix == "" {
			kubectlShellImageFlagName = "KubectlShellImage"
		} else {
			kubectlShellImageFlagName = fmt.Sprintf("%v.KubectlShellImage", cmdPrefix)
		}

		kubectlShellImageFlagValue, err := cmd.Flags().GetString(kubectlShellImageFlagName)
		if err != nil {
			return err, false
		}
		m.KubectlShellImage = kubectlShellImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsLDAPSettingsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lDAPSettingsFlagName := fmt.Sprintf("%v.LDAPSettings", cmdPrefix)
	if cmd.Flags().Changed(lDAPSettingsFlagName) {
		// info: complex object LDAPSettings PortainereeLDAPSettings is retrieved outside this Changed() block
	}
	lDAPSettingsFlagValue := m.LDAPSettings
	if swag.IsZero(lDAPSettingsFlagValue) {
		lDAPSettingsFlagValue = &models.PortainereeLDAPSettings{}
	}

	err, lDAPSettingsAdded := retrieveModelPortainereeLDAPSettingsFlags(depth+1, lDAPSettingsFlagValue, lDAPSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lDAPSettingsAdded
	if lDAPSettingsAdded {
		m.LDAPSettings = lDAPSettingsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsLogoURLFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoUrlFlagName := fmt.Sprintf("%v.LogoURL", cmdPrefix)
	if cmd.Flags().Changed(logoUrlFlagName) {

		var logoUrlFlagName string
		if cmdPrefix == "" {
			logoUrlFlagName = "LogoURL"
		} else {
			logoUrlFlagName = fmt.Sprintf("%v.LogoURL", cmdPrefix)
		}

		logoUrlFlagValue, err := cmd.Flags().GetString(logoUrlFlagName)
		if err != nil {
			return err, false
		}
		m.LogoURL = logoUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsOAuthSettingsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthSettingsFlagName := fmt.Sprintf("%v.OAuthSettings", cmdPrefix)
	if cmd.Flags().Changed(oAuthSettingsFlagName) {
		// info: complex object OAuthSettings PortainereeOAuthSettings is retrieved outside this Changed() block
	}
	oAuthSettingsFlagValue := m.OAuthSettings
	if swag.IsZero(oAuthSettingsFlagValue) {
		oAuthSettingsFlagValue = &models.PortainereeOAuthSettings{}
	}

	err, oAuthSettingsAdded := retrieveModelPortainereeOAuthSettingsFlags(depth+1, oAuthSettingsFlagValue, oAuthSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthSettingsAdded
	if oAuthSettingsAdded {
		m.OAuthSettings = oAuthSettingsFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsShowKomposeBuildOptionFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	showKomposeBuildOptionFlagName := fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
	if cmd.Flags().Changed(showKomposeBuildOptionFlagName) {

		var showKomposeBuildOptionFlagName string
		if cmdPrefix == "" {
			showKomposeBuildOptionFlagName = "ShowKomposeBuildOption"
		} else {
			showKomposeBuildOptionFlagName = fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
		}

		showKomposeBuildOptionFlagValue, err := cmd.Flags().GetBool(showKomposeBuildOptionFlagName)
		if err != nil {
			return err, false
		}
		m.ShowKomposeBuildOption = &showKomposeBuildOptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsSnapshotIntervalFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "SnapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetString(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsTemplatesURLFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	templatesUrlFlagName := fmt.Sprintf("%v.TemplatesURL", cmdPrefix)
	if cmd.Flags().Changed(templatesUrlFlagName) {

		var templatesUrlFlagName string
		if cmdPrefix == "" {
			templatesUrlFlagName = "TemplatesURL"
		} else {
			templatesUrlFlagName = fmt.Sprintf("%v.TemplatesURL", cmdPrefix)
		}

		templatesUrlFlagValue, err := cmd.Flags().GetString(templatesUrlFlagName)
		if err != nil {
			return err, false
		}
		m.TemplatesURL = templatesUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsTrustOnFirstConnectFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trustOnFirstConnectFlagName := fmt.Sprintf("%v.TrustOnFirstConnect", cmdPrefix)
	if cmd.Flags().Changed(trustOnFirstConnectFlagName) {

		var trustOnFirstConnectFlagName string
		if cmdPrefix == "" {
			trustOnFirstConnectFlagName = "TrustOnFirstConnect"
		} else {
			trustOnFirstConnectFlagName = fmt.Sprintf("%v.TrustOnFirstConnect", cmdPrefix)
		}

		trustOnFirstConnectFlagValue, err := cmd.Flags().GetBool(trustOnFirstConnectFlagName)
		if err != nil {
			return err, false
		}
		m.TrustOnFirstConnect = &trustOnFirstConnectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsUserSessionTimeoutFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userSessionTimeoutFlagName := fmt.Sprintf("%v.UserSessionTimeout", cmdPrefix)
	if cmd.Flags().Changed(userSessionTimeoutFlagName) {

		var userSessionTimeoutFlagName string
		if cmdPrefix == "" {
			userSessionTimeoutFlagName = "UserSessionTimeout"
		} else {
			userSessionTimeoutFlagName = fmt.Sprintf("%v.UserSessionTimeout", cmdPrefix)
		}

		userSessionTimeoutFlagValue, err := cmd.Flags().GetString(userSessionTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.UserSessionTimeout = userSessionTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsDefaultRegistryFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultRegistryFlagName := fmt.Sprintf("%v.defaultRegistry", cmdPrefix)
	if cmd.Flags().Changed(defaultRegistryFlagName) {
		// info: complex object defaultRegistry PortainereeSettingsDefaultRegistry is retrieved outside this Changed() block
	}
	defaultRegistryFlagValue := m.DefaultRegistry
	if swag.IsZero(defaultRegistryFlagValue) {
		defaultRegistryFlagValue = &models.PortainereeSettingsDefaultRegistry{}
	}

	err, defaultRegistryAdded := retrieveModelPortainereeSettingsDefaultRegistryFlags(depth+1, defaultRegistryFlagValue, defaultRegistryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultRegistryAdded
	if defaultRegistryAdded {
		m.DefaultRegistry = defaultRegistryFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsDisplayDonationHeaderFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	displayDonationHeaderFlagName := fmt.Sprintf("%v.displayDonationHeader", cmdPrefix)
	if cmd.Flags().Changed(displayDonationHeaderFlagName) {

		var displayDonationHeaderFlagName string
		if cmdPrefix == "" {
			displayDonationHeaderFlagName = "displayDonationHeader"
		} else {
			displayDonationHeaderFlagName = fmt.Sprintf("%v.displayDonationHeader", cmdPrefix)
		}

		displayDonationHeaderFlagValue, err := cmd.Flags().GetBool(displayDonationHeaderFlagName)
		if err != nil {
			return err, false
		}
		m.DisplayDonationHeader = &displayDonationHeaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsDisplayExternalContributorsFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	displayExternalContributorsFlagName := fmt.Sprintf("%v.displayExternalContributors", cmdPrefix)
	if cmd.Flags().Changed(displayExternalContributorsFlagName) {

		var displayExternalContributorsFlagName string
		if cmdPrefix == "" {
			displayExternalContributorsFlagName = "displayExternalContributors"
		} else {
			displayExternalContributorsFlagName = fmt.Sprintf("%v.displayExternalContributors", cmdPrefix)
		}

		displayExternalContributorsFlagValue, err := cmd.Flags().GetBool(displayExternalContributorsFlagName)
		if err != nil {
			return err, false
		}
		m.DisplayExternalContributors = &displayExternalContributorsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEdgeFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeFlagName := fmt.Sprintf("%v.edge", cmdPrefix)
	if cmd.Flags().Changed(edgeFlagName) {
		// info: complex object edge PortainereeSettingsEdge is retrieved outside this Changed() block
	}
	edgeFlagValue := m.Edge
	if swag.IsZero(edgeFlagValue) {
		edgeFlagValue = &models.PortainereeSettingsEdge{}
	}

	err, edgeAdded := retrieveModelPortainereeSettingsEdgeFlags(depth+1, edgeFlagValue, edgeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded
	if edgeAdded {
		m.Edge = edgeFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsFdoConfigurationFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fdoConfigurationFlagName := fmt.Sprintf("%v.fdoConfiguration", cmdPrefix)
	if cmd.Flags().Changed(fdoConfigurationFlagName) {
		// info: complex object fdoConfiguration PortainereeFDOConfiguration is retrieved outside this Changed() block
	}
	fdoConfigurationFlagValue := m.FdoConfiguration
	if swag.IsZero(fdoConfigurationFlagValue) {
		fdoConfigurationFlagValue = &models.PortainereeFDOConfiguration{}
	}

	err, fdoConfigurationAdded := retrieveModelPortainereeFDOConfigurationFlags(depth+1, fdoConfigurationFlagValue, fdoConfigurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fdoConfigurationAdded
	if fdoConfigurationAdded {
		m.FdoConfiguration = fdoConfigurationFlagValue
	}

	return nil, retAdded
}

func retrievePortainereeSettingsOpenAMTConfigurationFlags(depth int, m *models.PortainereeSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	openAMTConfigurationFlagName := fmt.Sprintf("%v.openAMTConfiguration", cmdPrefix)
	if cmd.Flags().Changed(openAMTConfigurationFlagName) {
		// info: complex object openAMTConfiguration PortainerOpenAMTConfiguration is retrieved outside this Changed() block
	}
	openAMTConfigurationFlagValue := m.OpenAMTConfiguration
	if swag.IsZero(openAMTConfigurationFlagValue) {
		openAMTConfigurationFlagValue = &models.PortainerOpenAMTConfiguration{}
	}

	err, openAMTConfigurationAdded := retrieveModelPortainerOpenAMTConfigurationFlags(depth+1, openAMTConfigurationFlagValue, openAMTConfigurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || openAMTConfigurationAdded
	if openAMTConfigurationAdded {
		m.OpenAMTConfiguration = openAMTConfigurationFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for PortainereeSettingsDefaultRegistry

// register flags to command
func registerModelPortainereeSettingsDefaultRegistryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeSettingsDefaultRegistryHide(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsDefaultRegistryHide(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hideDescription := ``

	var hideFlagName string
	if cmdPrefix == "" {
		hideFlagName = "Hide"
	} else {
		hideFlagName = fmt.Sprintf("%v.Hide", cmdPrefix)
	}

	var hideFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hideFlagName, hideFlagDefault, hideDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeSettingsDefaultRegistryFlags(depth int, m *models.PortainereeSettingsDefaultRegistry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hideAdded := retrievePortainereeSettingsDefaultRegistryHideFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hideAdded

	return nil, retAdded
}

func retrievePortainereeSettingsDefaultRegistryHideFlags(depth int, m *models.PortainereeSettingsDefaultRegistry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hideFlagName := fmt.Sprintf("%v.Hide", cmdPrefix)
	if cmd.Flags().Changed(hideFlagName) {

		var hideFlagName string
		if cmdPrefix == "" {
			hideFlagName = "Hide"
		} else {
			hideFlagName = fmt.Sprintf("%v.Hide", cmdPrefix)
		}

		hideFlagValue, err := cmd.Flags().GetBool(hideFlagName)
		if err != nil {
			return err, false
		}
		m.Hide = hideFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PortainereeSettingsEdge

// register flags to command
func registerModelPortainereeSettingsEdgeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeSettingsEdgeCommandInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEdgePingInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEdgeSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEdgeTunnelServerAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeSettingsEdgeAsyncMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeSettingsEdgeCommandInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commandIntervalDescription := `The command list interval for edge agent - used in edge async mode (in seconds)`

	var commandIntervalFlagName string
	if cmdPrefix == "" {
		commandIntervalFlagName = "CommandInterval"
	} else {
		commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	}

	var commandIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(commandIntervalFlagName, commandIntervalFlagDefault, commandIntervalDescription)

	return nil
}

func registerPortainereeSettingsEdgePingInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pingIntervalDescription := `The ping interval for edge agent - used in edge async mode (in seconds)`

	var pingIntervalFlagName string
	if cmdPrefix == "" {
		pingIntervalFlagName = "PingInterval"
	} else {
		pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
	}

	var pingIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pingIntervalFlagName, pingIntervalFlagDefault, pingIntervalDescription)

	return nil
}

func registerPortainereeSettingsEdgeSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := `The snapshot interval for edge agent - used in edge async mode (in seconds)`

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "SnapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

func registerPortainereeSettingsEdgeTunnelServerAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tunnelServerAddressDescription := `The address where the tunneling server can be reached by Edge agents`

	var tunnelServerAddressFlagName string
	if cmdPrefix == "" {
		tunnelServerAddressFlagName = "TunnelServerAddress"
	} else {
		tunnelServerAddressFlagName = fmt.Sprintf("%v.TunnelServerAddress", cmdPrefix)
	}

	var tunnelServerAddressFlagDefault string

	_ = cmd.PersistentFlags().String(tunnelServerAddressFlagName, tunnelServerAddressFlagDefault, tunnelServerAddressDescription)

	return nil
}

func registerPortainereeSettingsEdgeAsyncMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	asyncModeDescription := `EdgeAsyncMode enables edge async mode by default`

	var asyncModeFlagName string
	if cmdPrefix == "" {
		asyncModeFlagName = "asyncMode"
	} else {
		asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
	}

	var asyncModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(asyncModeFlagName, asyncModeFlagDefault, asyncModeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeSettingsEdgeFlags(depth int, m *models.PortainereeSettingsEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commandIntervalAdded := retrievePortainereeSettingsEdgeCommandIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandIntervalAdded

	err, pingIntervalAdded := retrievePortainereeSettingsEdgePingIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingIntervalAdded

	err, snapshotIntervalAdded := retrievePortainereeSettingsEdgeSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	err, tunnelServerAddressAdded := retrievePortainereeSettingsEdgeTunnelServerAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tunnelServerAddressAdded

	err, asyncModeAdded := retrievePortainereeSettingsEdgeAsyncModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || asyncModeAdded

	return nil, retAdded
}

func retrievePortainereeSettingsEdgeCommandIntervalFlags(depth int, m *models.PortainereeSettingsEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandIntervalFlagName := fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	if cmd.Flags().Changed(commandIntervalFlagName) {

		var commandIntervalFlagName string
		if cmdPrefix == "" {
			commandIntervalFlagName = "CommandInterval"
		} else {
			commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
		}

		commandIntervalFlagValue, err := cmd.Flags().GetInt64(commandIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.CommandInterval = commandIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEdgePingIntervalFlags(depth int, m *models.PortainereeSettingsEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingIntervalFlagName := fmt.Sprintf("%v.PingInterval", cmdPrefix)
	if cmd.Flags().Changed(pingIntervalFlagName) {

		var pingIntervalFlagName string
		if cmdPrefix == "" {
			pingIntervalFlagName = "PingInterval"
		} else {
			pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
		}

		pingIntervalFlagValue, err := cmd.Flags().GetInt64(pingIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.PingInterval = pingIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEdgeSnapshotIntervalFlags(depth int, m *models.PortainereeSettingsEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "SnapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetInt64(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEdgeTunnelServerAddressFlags(depth int, m *models.PortainereeSettingsEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tunnelServerAddressFlagName := fmt.Sprintf("%v.TunnelServerAddress", cmdPrefix)
	if cmd.Flags().Changed(tunnelServerAddressFlagName) {

		var tunnelServerAddressFlagName string
		if cmdPrefix == "" {
			tunnelServerAddressFlagName = "TunnelServerAddress"
		} else {
			tunnelServerAddressFlagName = fmt.Sprintf("%v.TunnelServerAddress", cmdPrefix)
		}

		tunnelServerAddressFlagValue, err := cmd.Flags().GetString(tunnelServerAddressFlagName)
		if err != nil {
			return err, false
		}
		m.TunnelServerAddress = tunnelServerAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeSettingsEdgeAsyncModeFlags(depth int, m *models.PortainereeSettingsEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	asyncModeFlagName := fmt.Sprintf("%v.asyncMode", cmdPrefix)
	if cmd.Flags().Changed(asyncModeFlagName) {

		var asyncModeFlagName string
		if cmdPrefix == "" {
			asyncModeFlagName = "asyncMode"
		} else {
			asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
		}

		asyncModeFlagValue, err := cmd.Flags().GetBool(asyncModeFlagName)
		if err != nil {
			return err, false
		}
		m.AsyncMode = asyncModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
