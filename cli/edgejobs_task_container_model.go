// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EdgejobsTaskContainer

// register flags to command
func registerModelEdgejobsTaskContainerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEdgejobsTaskContainerEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgejobsTaskContainerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgejobsTaskContainerLogsStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEdgejobsTaskContainerEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "EndpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.EndpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerEdgejobsTaskContainerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerEdgejobsTaskContainerLogsStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logsStatusDescription := ``

	var logsStatusFlagName string
	if cmdPrefix == "" {
		logsStatusFlagName = "LogsStatus"
	} else {
		logsStatusFlagName = fmt.Sprintf("%v.LogsStatus", cmdPrefix)
	}

	var logsStatusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(logsStatusFlagName, logsStatusFlagDefault, logsStatusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEdgejobsTaskContainerFlags(depth int, m *models.EdgejobsTaskContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointIdAdded := retrieveEdgejobsTaskContainerEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, idAdded := retrieveEdgejobsTaskContainerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, logsStatusAdded := retrieveEdgejobsTaskContainerLogsStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logsStatusAdded

	return nil, retAdded
}

func retrieveEdgejobsTaskContainerEndpointIDFlags(depth int, m *models.EdgejobsTaskContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.EndpointId", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "EndpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.EndpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgejobsTaskContainerIDFlags(depth int, m *models.EdgejobsTaskContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgejobsTaskContainerLogsStatusFlags(depth int, m *models.EdgejobsTaskContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logsStatusFlagName := fmt.Sprintf("%v.LogsStatus", cmdPrefix)
	if cmd.Flags().Changed(logsStatusFlagName) {

		var logsStatusFlagName string
		if cmdPrefix == "" {
			logsStatusFlagName = "LogsStatus"
		} else {
			logsStatusFlagName = fmt.Sprintf("%v.LogsStatus", cmdPrefix)
		}

		logsStatusFlagValue, err := cmd.Flags().GetInt64(logsStatusFlagName)
		if err != nil {
			return err, false
		}
		m.LogsStatus = logsStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
