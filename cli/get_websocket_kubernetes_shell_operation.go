// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/websocket"

	"github.com/spf13/cobra"
)

// makeOperationWebsocketGetWebsocketKubernetesShellCmd returns a cmd to handle operation getWebsocketKubernetesShell
func makeOperationWebsocketGetWebsocketKubernetesShellCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "GetWebsocketKubernetesShell",
		Short: `The request will be upgraded to the websocket protocol. The request will proxy input from the client to the pod via long-lived websocket connection.
**Access policy**: authenticated`,
		RunE: runOperationWebsocketGetWebsocketKubernetesShell,
	}

	if err := registerOperationWebsocketGetWebsocketKubernetesShellParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWebsocketGetWebsocketKubernetesShell uses cmd flags to call endpoint api
func runOperationWebsocketGetWebsocketKubernetesShell(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := websocket.NewGetWebsocketKubernetesShellParams()
	if err, _ := retrieveOperationWebsocketGetWebsocketKubernetesShellEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketKubernetesShellTokenFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWebsocketGetWebsocketKubernetesShellResult(appCli.Websocket.GetWebsocketKubernetesShell(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationWebsocketGetWebsocketKubernetesShellParamFlags registers all flags needed to fill params
func registerOperationWebsocketGetWebsocketKubernetesShellParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWebsocketGetWebsocketKubernetesShellEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketKubernetesShellTokenParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWebsocketGetWebsocketKubernetesShellEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := `Required. environment(endpoint) ID of the environment(endpoint) where the resource is located`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketKubernetesShellTokenParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tokenDescription := `Required. JWT token used for authentication against this environment(endpoint)`

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

func retrieveOperationWebsocketGetWebsocketKubernetesShellEndpointIDFlag(m *websocket.GetWebsocketKubernetesShellParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpointId") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketKubernetesShellTokenFlag(m *websocket.GetWebsocketKubernetesShellParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("token") {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

	}
	return nil, retAdded
}

// parseOperationWebsocketGetWebsocketKubernetesShellResult parses request result and return the string content
func parseOperationWebsocketGetWebsocketKubernetesShellResult(resp0 *websocket.GetWebsocketKubernetesShellOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getWebsocketKubernetesShellOK is not supported

		// Non schema case: warning getWebsocketKubernetesShellBadRequest is not supported

		// Non schema case: warning getWebsocketKubernetesShellForbidden is not supported

		// Non schema case: warning getWebsocketKubernetesShellInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getWebsocketKubernetesShellOK is not supported by go-swagger cli yet.

	return "", nil
}
