// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for SettingsSettingsUpdatePayload

// register flags to command
func registerModelSettingsSettingsUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSettingsSettingsUpdatePayloadEdgePortainerURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadShowKomposeBuildOption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadAuthenticationMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadBlackListedLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadCustomLoginBanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEdge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEdgeAgentCheckinInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEnableEdgeComputeFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEnableTelemetry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEnforceEdgeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadGlobalDeploymentOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadHelmRepositoryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadInternalAuthSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadKubeconfigExpiry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadKubectlShellImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadLdapsettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadLogoURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadOauthSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadTemplatesURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadTrustOnFirstConnect(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadUserSessionTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsSettingsUpdatePayloadEdgePortainerURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgePortainerUrlDescription := `EdgePortainerURL is the URL that is exposed to edge agents`

	var edgePortainerUrlFlagName string
	if cmdPrefix == "" {
		edgePortainerUrlFlagName = "EdgePortainerURL"
	} else {
		edgePortainerUrlFlagName = fmt.Sprintf("%v.EdgePortainerURL", cmdPrefix)
	}

	var edgePortainerUrlFlagDefault string

	_ = cmd.PersistentFlags().String(edgePortainerUrlFlagName, edgePortainerUrlFlagDefault, edgePortainerUrlDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadShowKomposeBuildOption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	showKomposeBuildOptionDescription := `Show the Kompose build option (discontinued in 2.18)`

	var showKomposeBuildOptionFlagName string
	if cmdPrefix == "" {
		showKomposeBuildOptionFlagName = "ShowKomposeBuildOption"
	} else {
		showKomposeBuildOptionFlagName = fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
	}

	var showKomposeBuildOptionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(showKomposeBuildOptionFlagName, showKomposeBuildOptionFlagDefault, showKomposeBuildOptionDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadAuthenticationMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationMethodDescription := `Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth`

	var authenticationMethodFlagName string
	if cmdPrefix == "" {
		authenticationMethodFlagName = "authenticationMethod"
	} else {
		authenticationMethodFlagName = fmt.Sprintf("%v.authenticationMethod", cmdPrefix)
	}

	var authenticationMethodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(authenticationMethodFlagName, authenticationMethodFlagDefault, authenticationMethodDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadBlackListedLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: blackListedLabels []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerSettingsSettingsUpdatePayloadCustomLoginBanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customLoginBannerDescription := `The content in plaintext used to display in the login page. Will hide when value is empty string`

	var customLoginBannerFlagName string
	if cmdPrefix == "" {
		customLoginBannerFlagName = "customLoginBanner"
	} else {
		customLoginBannerFlagName = fmt.Sprintf("%v.customLoginBanner", cmdPrefix)
	}

	var customLoginBannerFlagDefault string

	_ = cmd.PersistentFlags().String(customLoginBannerFlagName, customLoginBannerFlagDefault, customLoginBannerDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEdge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var edgeFlagName string
	if cmdPrefix == "" {
		edgeFlagName = "edge"
	} else {
		edgeFlagName = fmt.Sprintf("%v.edge", cmdPrefix)
	}

	if err := registerModelSettingsSettingsUpdatePayloadEdgeFlags(depth+1, edgeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsSettingsUpdatePayloadEdgeAgentCheckinInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeAgentCheckinIntervalDescription := `The default check in interval for edge agent (in seconds)`

	var edgeAgentCheckinIntervalFlagName string
	if cmdPrefix == "" {
		edgeAgentCheckinIntervalFlagName = "edgeAgentCheckinInterval"
	} else {
		edgeAgentCheckinIntervalFlagName = fmt.Sprintf("%v.edgeAgentCheckinInterval", cmdPrefix)
	}

	var edgeAgentCheckinIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeAgentCheckinIntervalFlagName, edgeAgentCheckinIntervalFlagDefault, edgeAgentCheckinIntervalDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEnableEdgeComputeFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableEdgeComputeFeaturesDescription := `Whether edge compute features are enabled`

	var enableEdgeComputeFeaturesFlagName string
	if cmdPrefix == "" {
		enableEdgeComputeFeaturesFlagName = "enableEdgeComputeFeatures"
	} else {
		enableEdgeComputeFeaturesFlagName = fmt.Sprintf("%v.enableEdgeComputeFeatures", cmdPrefix)
	}

	var enableEdgeComputeFeaturesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableEdgeComputeFeaturesFlagName, enableEdgeComputeFeaturesFlagDefault, enableEdgeComputeFeaturesDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEnableTelemetry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableTelemetryDescription := `Whether telemetry is enabled`

	var enableTelemetryFlagName string
	if cmdPrefix == "" {
		enableTelemetryFlagName = "enableTelemetry"
	} else {
		enableTelemetryFlagName = fmt.Sprintf("%v.enableTelemetry", cmdPrefix)
	}

	var enableTelemetryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableTelemetryFlagName, enableTelemetryFlagDefault, enableTelemetryDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEnforceEdgeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enforceEdgeIdDescription := `EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone`

	var enforceEdgeIdFlagName string
	if cmdPrefix == "" {
		enforceEdgeIdFlagName = "enforceEdgeID"
	} else {
		enforceEdgeIdFlagName = fmt.Sprintf("%v.enforceEdgeID", cmdPrefix)
	}

	var enforceEdgeIdFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enforceEdgeIdFlagName, enforceEdgeIdFlagDefault, enforceEdgeIdDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadGlobalDeploymentOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var globalDeploymentOptionsFlagName string
	if cmdPrefix == "" {
		globalDeploymentOptionsFlagName = "globalDeploymentOptions"
	} else {
		globalDeploymentOptionsFlagName = fmt.Sprintf("%v.globalDeploymentOptions", cmdPrefix)
	}

	if err := registerModelPortainereeGlobalDeploymentOptionsFlags(depth+1, globalDeploymentOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsSettingsUpdatePayloadHelmRepositoryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	helmRepositoryUrlDescription := `Helm repository URL`

	var helmRepositoryUrlFlagName string
	if cmdPrefix == "" {
		helmRepositoryUrlFlagName = "helmRepositoryURL"
	} else {
		helmRepositoryUrlFlagName = fmt.Sprintf("%v.helmRepositoryURL", cmdPrefix)
	}

	var helmRepositoryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(helmRepositoryUrlFlagName, helmRepositoryUrlFlagDefault, helmRepositoryUrlDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadInternalAuthSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var internalAuthSettingsFlagName string
	if cmdPrefix == "" {
		internalAuthSettingsFlagName = "internalAuthSettings"
	} else {
		internalAuthSettingsFlagName = fmt.Sprintf("%v.internalAuthSettings", cmdPrefix)
	}

	if err := registerModelPortainereeInternalAuthSettingsFlags(depth+1, internalAuthSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsSettingsUpdatePayloadKubeconfigExpiry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubeconfigExpiryDescription := `The expiry of a Kubeconfig`

	var kubeconfigExpiryFlagName string
	if cmdPrefix == "" {
		kubeconfigExpiryFlagName = "kubeconfigExpiry"
	} else {
		kubeconfigExpiryFlagName = fmt.Sprintf("%v.kubeconfigExpiry", cmdPrefix)
	}

	var kubeconfigExpiryFlagDefault string = "0"

	_ = cmd.PersistentFlags().String(kubeconfigExpiryFlagName, kubeconfigExpiryFlagDefault, kubeconfigExpiryDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadKubectlShellImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubectlShellImageDescription := `Kubec	tl Shell Image Name/Tag`

	var kubectlShellImageFlagName string
	if cmdPrefix == "" {
		kubectlShellImageFlagName = "kubectlShellImage"
	} else {
		kubectlShellImageFlagName = fmt.Sprintf("%v.kubectlShellImage", cmdPrefix)
	}

	var kubectlShellImageFlagDefault string

	_ = cmd.PersistentFlags().String(kubectlShellImageFlagName, kubectlShellImageFlagDefault, kubectlShellImageDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadLdapsettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapsettingsFlagName string
	if cmdPrefix == "" {
		ldapsettingsFlagName = "ldapsettings"
	} else {
		ldapsettingsFlagName = fmt.Sprintf("%v.ldapsettings", cmdPrefix)
	}

	if err := registerModelPortainereeLDAPSettingsFlags(depth+1, ldapsettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsSettingsUpdatePayloadLogoURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoUrlDescription := `URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string`

	var logoUrlFlagName string
	if cmdPrefix == "" {
		logoUrlFlagName = "logoURL"
	} else {
		logoUrlFlagName = fmt.Sprintf("%v.logoURL", cmdPrefix)
	}

	var logoUrlFlagDefault string

	_ = cmd.PersistentFlags().String(logoUrlFlagName, logoUrlFlagDefault, logoUrlDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadOauthSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oauthSettingsFlagName string
	if cmdPrefix == "" {
		oauthSettingsFlagName = "oauthSettings"
	} else {
		oauthSettingsFlagName = fmt.Sprintf("%v.oauthSettings", cmdPrefix)
	}

	if err := registerModelPortainereeOAuthSettingsFlags(depth+1, oauthSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsSettingsUpdatePayloadSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := `The interval in which environment(endpoint) snapshots are created`

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "snapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.snapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault string

	_ = cmd.PersistentFlags().String(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadTemplatesURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	templatesUrlDescription := `URL to the templates that will be displayed in the UI when navigating to App Templates`

	var templatesUrlFlagName string
	if cmdPrefix == "" {
		templatesUrlFlagName = "templatesURL"
	} else {
		templatesUrlFlagName = fmt.Sprintf("%v.templatesURL", cmdPrefix)
	}

	var templatesUrlFlagDefault string

	_ = cmd.PersistentFlags().String(templatesUrlFlagName, templatesUrlFlagDefault, templatesUrlDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadTrustOnFirstConnect(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trustOnFirstConnectDescription := `TrustOnFirstConnect makes Portainer accepting edge agent connection by default`

	var trustOnFirstConnectFlagName string
	if cmdPrefix == "" {
		trustOnFirstConnectFlagName = "trustOnFirstConnect"
	} else {
		trustOnFirstConnectFlagName = fmt.Sprintf("%v.trustOnFirstConnect", cmdPrefix)
	}

	var trustOnFirstConnectFlagDefault bool

	_ = cmd.PersistentFlags().Bool(trustOnFirstConnectFlagName, trustOnFirstConnectFlagDefault, trustOnFirstConnectDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadUserSessionTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userSessionTimeoutDescription := `The duration of a user session`

	var userSessionTimeoutFlagName string
	if cmdPrefix == "" {
		userSessionTimeoutFlagName = "userSessionTimeout"
	} else {
		userSessionTimeoutFlagName = fmt.Sprintf("%v.userSessionTimeout", cmdPrefix)
	}

	var userSessionTimeoutFlagDefault string

	_ = cmd.PersistentFlags().String(userSessionTimeoutFlagName, userSessionTimeoutFlagDefault, userSessionTimeoutDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSettingsSettingsUpdatePayloadFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, edgePortainerUrlAdded := retrieveSettingsSettingsUpdatePayloadEdgePortainerURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgePortainerUrlAdded

	err, showKomposeBuildOptionAdded := retrieveSettingsSettingsUpdatePayloadShowKomposeBuildOptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || showKomposeBuildOptionAdded

	err, authenticationMethodAdded := retrieveSettingsSettingsUpdatePayloadAuthenticationMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationMethodAdded

	err, blackListedLabelsAdded := retrieveSettingsSettingsUpdatePayloadBlackListedLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blackListedLabelsAdded

	err, customLoginBannerAdded := retrieveSettingsSettingsUpdatePayloadCustomLoginBannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customLoginBannerAdded

	err, edgeAdded := retrieveSettingsSettingsUpdatePayloadEdgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded

	err, edgeAgentCheckinIntervalAdded := retrieveSettingsSettingsUpdatePayloadEdgeAgentCheckinIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAgentCheckinIntervalAdded

	err, enableEdgeComputeFeaturesAdded := retrieveSettingsSettingsUpdatePayloadEnableEdgeComputeFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableEdgeComputeFeaturesAdded

	err, enableTelemetryAdded := retrieveSettingsSettingsUpdatePayloadEnableTelemetryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableTelemetryAdded

	err, enforceEdgeIdAdded := retrieveSettingsSettingsUpdatePayloadEnforceEdgeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enforceEdgeIdAdded

	err, globalDeploymentOptionsAdded := retrieveSettingsSettingsUpdatePayloadGlobalDeploymentOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalDeploymentOptionsAdded

	err, helmRepositoryUrlAdded := retrieveSettingsSettingsUpdatePayloadHelmRepositoryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || helmRepositoryUrlAdded

	err, internalAuthSettingsAdded := retrieveSettingsSettingsUpdatePayloadInternalAuthSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || internalAuthSettingsAdded

	err, kubeconfigExpiryAdded := retrieveSettingsSettingsUpdatePayloadKubeconfigExpiryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubeconfigExpiryAdded

	err, kubectlShellImageAdded := retrieveSettingsSettingsUpdatePayloadKubectlShellImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubectlShellImageAdded

	err, ldapsettingsAdded := retrieveSettingsSettingsUpdatePayloadLdapsettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapsettingsAdded

	err, logoUrlAdded := retrieveSettingsSettingsUpdatePayloadLogoURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoUrlAdded

	err, oauthSettingsAdded := retrieveSettingsSettingsUpdatePayloadOauthSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oauthSettingsAdded

	err, snapshotIntervalAdded := retrieveSettingsSettingsUpdatePayloadSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	err, templatesUrlAdded := retrieveSettingsSettingsUpdatePayloadTemplatesURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || templatesUrlAdded

	err, trustOnFirstConnectAdded := retrieveSettingsSettingsUpdatePayloadTrustOnFirstConnectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trustOnFirstConnectAdded

	err, userSessionTimeoutAdded := retrieveSettingsSettingsUpdatePayloadUserSessionTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userSessionTimeoutAdded

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgePortainerURLFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgePortainerUrlFlagName := fmt.Sprintf("%v.EdgePortainerURL", cmdPrefix)
	if cmd.Flags().Changed(edgePortainerUrlFlagName) {

		var edgePortainerUrlFlagName string
		if cmdPrefix == "" {
			edgePortainerUrlFlagName = "EdgePortainerURL"
		} else {
			edgePortainerUrlFlagName = fmt.Sprintf("%v.EdgePortainerURL", cmdPrefix)
		}

		edgePortainerUrlFlagValue, err := cmd.Flags().GetString(edgePortainerUrlFlagName)
		if err != nil {
			return err, false
		}
		m.EdgePortainerURL = edgePortainerUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadShowKomposeBuildOptionFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	showKomposeBuildOptionFlagName := fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
	if cmd.Flags().Changed(showKomposeBuildOptionFlagName) {

		var showKomposeBuildOptionFlagName string
		if cmdPrefix == "" {
			showKomposeBuildOptionFlagName = "ShowKomposeBuildOption"
		} else {
			showKomposeBuildOptionFlagName = fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
		}

		showKomposeBuildOptionFlagValue, err := cmd.Flags().GetBool(showKomposeBuildOptionFlagName)
		if err != nil {
			return err, false
		}
		m.ShowKomposeBuildOption = &showKomposeBuildOptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadAuthenticationMethodFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationMethodFlagName := fmt.Sprintf("%v.authenticationMethod", cmdPrefix)
	if cmd.Flags().Changed(authenticationMethodFlagName) {

		var authenticationMethodFlagName string
		if cmdPrefix == "" {
			authenticationMethodFlagName = "authenticationMethod"
		} else {
			authenticationMethodFlagName = fmt.Sprintf("%v.authenticationMethod", cmdPrefix)
		}

		authenticationMethodFlagValue, err := cmd.Flags().GetInt64(authenticationMethodFlagName)
		if err != nil {
			return err, false
		}
		m.AuthenticationMethod = authenticationMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadBlackListedLabelsFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	blackListedLabelsFlagName := fmt.Sprintf("%v.blackListedLabels", cmdPrefix)
	if cmd.Flags().Changed(blackListedLabelsFlagName) {
		// warning: blackListedLabels array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadCustomLoginBannerFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customLoginBannerFlagName := fmt.Sprintf("%v.customLoginBanner", cmdPrefix)
	if cmd.Flags().Changed(customLoginBannerFlagName) {

		var customLoginBannerFlagName string
		if cmdPrefix == "" {
			customLoginBannerFlagName = "customLoginBanner"
		} else {
			customLoginBannerFlagName = fmt.Sprintf("%v.customLoginBanner", cmdPrefix)
		}

		customLoginBannerFlagValue, err := cmd.Flags().GetString(customLoginBannerFlagName)
		if err != nil {
			return err, false
		}
		m.CustomLoginBanner = customLoginBannerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgeFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeFlagName := fmt.Sprintf("%v.edge", cmdPrefix)
	if cmd.Flags().Changed(edgeFlagName) {
		// info: complex object edge SettingsSettingsUpdatePayloadEdge is retrieved outside this Changed() block
	}
	edgeFlagValue := m.Edge
	if swag.IsZero(edgeFlagValue) {
		edgeFlagValue = &models.SettingsSettingsUpdatePayloadEdge{}
	}

	err, edgeAdded := retrieveModelSettingsSettingsUpdatePayloadEdgeFlags(depth+1, edgeFlagValue, edgeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded
	if edgeAdded {
		m.Edge = edgeFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgeAgentCheckinIntervalFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeAgentCheckinIntervalFlagName := fmt.Sprintf("%v.edgeAgentCheckinInterval", cmdPrefix)
	if cmd.Flags().Changed(edgeAgentCheckinIntervalFlagName) {

		var edgeAgentCheckinIntervalFlagName string
		if cmdPrefix == "" {
			edgeAgentCheckinIntervalFlagName = "edgeAgentCheckinInterval"
		} else {
			edgeAgentCheckinIntervalFlagName = fmt.Sprintf("%v.edgeAgentCheckinInterval", cmdPrefix)
		}

		edgeAgentCheckinIntervalFlagValue, err := cmd.Flags().GetInt64(edgeAgentCheckinIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeAgentCheckinInterval = edgeAgentCheckinIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEnableEdgeComputeFeaturesFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableEdgeComputeFeaturesFlagName := fmt.Sprintf("%v.enableEdgeComputeFeatures", cmdPrefix)
	if cmd.Flags().Changed(enableEdgeComputeFeaturesFlagName) {

		var enableEdgeComputeFeaturesFlagName string
		if cmdPrefix == "" {
			enableEdgeComputeFeaturesFlagName = "enableEdgeComputeFeatures"
		} else {
			enableEdgeComputeFeaturesFlagName = fmt.Sprintf("%v.enableEdgeComputeFeatures", cmdPrefix)
		}

		enableEdgeComputeFeaturesFlagValue, err := cmd.Flags().GetBool(enableEdgeComputeFeaturesFlagName)
		if err != nil {
			return err, false
		}
		m.EnableEdgeComputeFeatures = &enableEdgeComputeFeaturesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEnableTelemetryFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableTelemetryFlagName := fmt.Sprintf("%v.enableTelemetry", cmdPrefix)
	if cmd.Flags().Changed(enableTelemetryFlagName) {

		var enableTelemetryFlagName string
		if cmdPrefix == "" {
			enableTelemetryFlagName = "enableTelemetry"
		} else {
			enableTelemetryFlagName = fmt.Sprintf("%v.enableTelemetry", cmdPrefix)
		}

		enableTelemetryFlagValue, err := cmd.Flags().GetBool(enableTelemetryFlagName)
		if err != nil {
			return err, false
		}
		m.EnableTelemetry = &enableTelemetryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEnforceEdgeIDFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enforceEdgeIdFlagName := fmt.Sprintf("%v.enforceEdgeID", cmdPrefix)
	if cmd.Flags().Changed(enforceEdgeIdFlagName) {

		var enforceEdgeIdFlagName string
		if cmdPrefix == "" {
			enforceEdgeIdFlagName = "enforceEdgeID"
		} else {
			enforceEdgeIdFlagName = fmt.Sprintf("%v.enforceEdgeID", cmdPrefix)
		}

		enforceEdgeIdFlagValue, err := cmd.Flags().GetBool(enforceEdgeIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnforceEdgeID = &enforceEdgeIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadGlobalDeploymentOptionsFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalDeploymentOptionsFlagName := fmt.Sprintf("%v.globalDeploymentOptions", cmdPrefix)
	if cmd.Flags().Changed(globalDeploymentOptionsFlagName) {
		// info: complex object globalDeploymentOptions PortainereeGlobalDeploymentOptions is retrieved outside this Changed() block
	}
	globalDeploymentOptionsFlagValue := m.GlobalDeploymentOptions
	if swag.IsZero(globalDeploymentOptionsFlagValue) {
		globalDeploymentOptionsFlagValue = &models.PortainereeGlobalDeploymentOptions{}
	}

	err, globalDeploymentOptionsAdded := retrieveModelPortainereeGlobalDeploymentOptionsFlags(depth+1, globalDeploymentOptionsFlagValue, globalDeploymentOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalDeploymentOptionsAdded
	if globalDeploymentOptionsAdded {
		m.GlobalDeploymentOptions = globalDeploymentOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadHelmRepositoryURLFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	helmRepositoryUrlFlagName := fmt.Sprintf("%v.helmRepositoryURL", cmdPrefix)
	if cmd.Flags().Changed(helmRepositoryUrlFlagName) {

		var helmRepositoryUrlFlagName string
		if cmdPrefix == "" {
			helmRepositoryUrlFlagName = "helmRepositoryURL"
		} else {
			helmRepositoryUrlFlagName = fmt.Sprintf("%v.helmRepositoryURL", cmdPrefix)
		}

		helmRepositoryUrlFlagValue, err := cmd.Flags().GetString(helmRepositoryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.HelmRepositoryURL = helmRepositoryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadInternalAuthSettingsFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	internalAuthSettingsFlagName := fmt.Sprintf("%v.internalAuthSettings", cmdPrefix)
	if cmd.Flags().Changed(internalAuthSettingsFlagName) {
		// info: complex object internalAuthSettings PortainereeInternalAuthSettings is retrieved outside this Changed() block
	}
	internalAuthSettingsFlagValue := m.InternalAuthSettings
	if swag.IsZero(internalAuthSettingsFlagValue) {
		internalAuthSettingsFlagValue = &models.PortainereeInternalAuthSettings{}
	}

	err, internalAuthSettingsAdded := retrieveModelPortainereeInternalAuthSettingsFlags(depth+1, internalAuthSettingsFlagValue, internalAuthSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || internalAuthSettingsAdded
	if internalAuthSettingsAdded {
		m.InternalAuthSettings = internalAuthSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadKubeconfigExpiryFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubeconfigExpiryFlagName := fmt.Sprintf("%v.kubeconfigExpiry", cmdPrefix)
	if cmd.Flags().Changed(kubeconfigExpiryFlagName) {

		var kubeconfigExpiryFlagName string
		if cmdPrefix == "" {
			kubeconfigExpiryFlagName = "kubeconfigExpiry"
		} else {
			kubeconfigExpiryFlagName = fmt.Sprintf("%v.kubeconfigExpiry", cmdPrefix)
		}

		kubeconfigExpiryFlagValue, err := cmd.Flags().GetString(kubeconfigExpiryFlagName)
		if err != nil {
			return err, false
		}
		m.KubeconfigExpiry = &kubeconfigExpiryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadKubectlShellImageFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubectlShellImageFlagName := fmt.Sprintf("%v.kubectlShellImage", cmdPrefix)
	if cmd.Flags().Changed(kubectlShellImageFlagName) {

		var kubectlShellImageFlagName string
		if cmdPrefix == "" {
			kubectlShellImageFlagName = "kubectlShellImage"
		} else {
			kubectlShellImageFlagName = fmt.Sprintf("%v.kubectlShellImage", cmdPrefix)
		}

		kubectlShellImageFlagValue, err := cmd.Flags().GetString(kubectlShellImageFlagName)
		if err != nil {
			return err, false
		}
		m.KubectlShellImage = kubectlShellImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadLdapsettingsFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapsettingsFlagName := fmt.Sprintf("%v.ldapsettings", cmdPrefix)
	if cmd.Flags().Changed(ldapsettingsFlagName) {
		// info: complex object ldapsettings PortainereeLDAPSettings is retrieved outside this Changed() block
	}
	ldapsettingsFlagValue := m.Ldapsettings
	if swag.IsZero(ldapsettingsFlagValue) {
		ldapsettingsFlagValue = &models.PortainereeLDAPSettings{}
	}

	err, ldapsettingsAdded := retrieveModelPortainereeLDAPSettingsFlags(depth+1, ldapsettingsFlagValue, ldapsettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapsettingsAdded
	if ldapsettingsAdded {
		m.Ldapsettings = ldapsettingsFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadLogoURLFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoUrlFlagName := fmt.Sprintf("%v.logoURL", cmdPrefix)
	if cmd.Flags().Changed(logoUrlFlagName) {

		var logoUrlFlagName string
		if cmdPrefix == "" {
			logoUrlFlagName = "logoURL"
		} else {
			logoUrlFlagName = fmt.Sprintf("%v.logoURL", cmdPrefix)
		}

		logoUrlFlagValue, err := cmd.Flags().GetString(logoUrlFlagName)
		if err != nil {
			return err, false
		}
		m.LogoURL = logoUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadOauthSettingsFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oauthSettingsFlagName := fmt.Sprintf("%v.oauthSettings", cmdPrefix)
	if cmd.Flags().Changed(oauthSettingsFlagName) {
		// info: complex object oauthSettings PortainereeOAuthSettings is retrieved outside this Changed() block
	}
	oauthSettingsFlagValue := m.OauthSettings
	if swag.IsZero(oauthSettingsFlagValue) {
		oauthSettingsFlagValue = &models.PortainereeOAuthSettings{}
	}

	err, oauthSettingsAdded := retrieveModelPortainereeOAuthSettingsFlags(depth+1, oauthSettingsFlagValue, oauthSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oauthSettingsAdded
	if oauthSettingsAdded {
		m.OauthSettings = oauthSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadSnapshotIntervalFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.snapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "snapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.snapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetString(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadTemplatesURLFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	templatesUrlFlagName := fmt.Sprintf("%v.templatesURL", cmdPrefix)
	if cmd.Flags().Changed(templatesUrlFlagName) {

		var templatesUrlFlagName string
		if cmdPrefix == "" {
			templatesUrlFlagName = "templatesURL"
		} else {
			templatesUrlFlagName = fmt.Sprintf("%v.templatesURL", cmdPrefix)
		}

		templatesUrlFlagValue, err := cmd.Flags().GetString(templatesUrlFlagName)
		if err != nil {
			return err, false
		}
		m.TemplatesURL = templatesUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadTrustOnFirstConnectFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trustOnFirstConnectFlagName := fmt.Sprintf("%v.trustOnFirstConnect", cmdPrefix)
	if cmd.Flags().Changed(trustOnFirstConnectFlagName) {

		var trustOnFirstConnectFlagName string
		if cmdPrefix == "" {
			trustOnFirstConnectFlagName = "trustOnFirstConnect"
		} else {
			trustOnFirstConnectFlagName = fmt.Sprintf("%v.trustOnFirstConnect", cmdPrefix)
		}

		trustOnFirstConnectFlagValue, err := cmd.Flags().GetBool(trustOnFirstConnectFlagName)
		if err != nil {
			return err, false
		}
		m.TrustOnFirstConnect = &trustOnFirstConnectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadUserSessionTimeoutFlags(depth int, m *models.SettingsSettingsUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userSessionTimeoutFlagName := fmt.Sprintf("%v.userSessionTimeout", cmdPrefix)
	if cmd.Flags().Changed(userSessionTimeoutFlagName) {

		var userSessionTimeoutFlagName string
		if cmdPrefix == "" {
			userSessionTimeoutFlagName = "userSessionTimeout"
		} else {
			userSessionTimeoutFlagName = fmt.Sprintf("%v.userSessionTimeout", cmdPrefix)
		}

		userSessionTimeoutFlagValue, err := cmd.Flags().GetString(userSessionTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.UserSessionTimeout = userSessionTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SettingsSettingsUpdatePayloadEdge

// register flags to command
func registerModelSettingsSettingsUpdatePayloadEdgeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSettingsSettingsUpdatePayloadEdgeCommandInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEdgePingInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEdgeSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEdgeAsyncMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsSettingsUpdatePayloadEdgeTunnelServerAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsSettingsUpdatePayloadEdgeCommandInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commandIntervalDescription := `The command list interval for edge agent - used in edge async mode (in seconds)`

	var commandIntervalFlagName string
	if cmdPrefix == "" {
		commandIntervalFlagName = "CommandInterval"
	} else {
		commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	}

	var commandIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(commandIntervalFlagName, commandIntervalFlagDefault, commandIntervalDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEdgePingInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pingIntervalDescription := `The ping interval for edge agent - used in edge async mode (in seconds)`

	var pingIntervalFlagName string
	if cmdPrefix == "" {
		pingIntervalFlagName = "PingInterval"
	} else {
		pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
	}

	var pingIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pingIntervalFlagName, pingIntervalFlagDefault, pingIntervalDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEdgeSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := `The snapshot interval for edge agent - used in edge async mode (in seconds)`

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "SnapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEdgeAsyncMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	asyncModeDescription := `AsyncMode enables edge agent to run in async mode by default`

	var asyncModeFlagName string
	if cmdPrefix == "" {
		asyncModeFlagName = "asyncMode"
	} else {
		asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
	}

	var asyncModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(asyncModeFlagName, asyncModeFlagDefault, asyncModeDescription)

	return nil
}

func registerSettingsSettingsUpdatePayloadEdgeTunnelServerAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tunnelServerAddressDescription := `The address where the tunneling server can be reached by Edge agents`

	var tunnelServerAddressFlagName string
	if cmdPrefix == "" {
		tunnelServerAddressFlagName = "tunnelServerAddress"
	} else {
		tunnelServerAddressFlagName = fmt.Sprintf("%v.tunnelServerAddress", cmdPrefix)
	}

	var tunnelServerAddressFlagDefault string

	_ = cmd.PersistentFlags().String(tunnelServerAddressFlagName, tunnelServerAddressFlagDefault, tunnelServerAddressDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSettingsSettingsUpdatePayloadEdgeFlags(depth int, m *models.SettingsSettingsUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commandIntervalAdded := retrieveSettingsSettingsUpdatePayloadEdgeCommandIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandIntervalAdded

	err, pingIntervalAdded := retrieveSettingsSettingsUpdatePayloadEdgePingIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingIntervalAdded

	err, snapshotIntervalAdded := retrieveSettingsSettingsUpdatePayloadEdgeSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	err, asyncModeAdded := retrieveSettingsSettingsUpdatePayloadEdgeAsyncModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || asyncModeAdded

	err, tunnelServerAddressAdded := retrieveSettingsSettingsUpdatePayloadEdgeTunnelServerAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tunnelServerAddressAdded

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgeCommandIntervalFlags(depth int, m *models.SettingsSettingsUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandIntervalFlagName := fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	if cmd.Flags().Changed(commandIntervalFlagName) {

		var commandIntervalFlagName string
		if cmdPrefix == "" {
			commandIntervalFlagName = "CommandInterval"
		} else {
			commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
		}

		commandIntervalFlagValue, err := cmd.Flags().GetInt64(commandIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.CommandInterval = commandIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgePingIntervalFlags(depth int, m *models.SettingsSettingsUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingIntervalFlagName := fmt.Sprintf("%v.PingInterval", cmdPrefix)
	if cmd.Flags().Changed(pingIntervalFlagName) {

		var pingIntervalFlagName string
		if cmdPrefix == "" {
			pingIntervalFlagName = "PingInterval"
		} else {
			pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
		}

		pingIntervalFlagValue, err := cmd.Flags().GetInt64(pingIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.PingInterval = pingIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgeSnapshotIntervalFlags(depth int, m *models.SettingsSettingsUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "SnapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetInt64(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgeAsyncModeFlags(depth int, m *models.SettingsSettingsUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	asyncModeFlagName := fmt.Sprintf("%v.asyncMode", cmdPrefix)
	if cmd.Flags().Changed(asyncModeFlagName) {

		var asyncModeFlagName string
		if cmdPrefix == "" {
			asyncModeFlagName = "asyncMode"
		} else {
			asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
		}

		asyncModeFlagValue, err := cmd.Flags().GetBool(asyncModeFlagName)
		if err != nil {
			return err, false
		}
		m.AsyncMode = &asyncModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsSettingsUpdatePayloadEdgeTunnelServerAddressFlags(depth int, m *models.SettingsSettingsUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tunnelServerAddressFlagName := fmt.Sprintf("%v.tunnelServerAddress", cmdPrefix)
	if cmd.Flags().Changed(tunnelServerAddressFlagName) {

		var tunnelServerAddressFlagName string
		if cmdPrefix == "" {
			tunnelServerAddressFlagName = "tunnelServerAddress"
		} else {
			tunnelServerAddressFlagName = fmt.Sprintf("%v.tunnelServerAddress", cmdPrefix)
		}

		tunnelServerAddressFlagValue, err := cmd.Flags().GetString(tunnelServerAddressFlagName)
		if err != nil {
			return err, false
		}
		m.TunnelServerAddress = tunnelServerAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}
