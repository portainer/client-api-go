// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for ProvidersGKEProvisionPayload

// register flags to command
func registerModelProvidersGKEProvisionPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProvidersGKEProvisionPayloadCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadHdd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadKubernetesVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadNetworkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadNodeCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadNodeSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadRAM(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersGKEProvisionPayloadRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProvidersGKEProvisionPayloadCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuDescription := ``

	var cpuFlagName string
	if cmdPrefix == "" {
		cpuFlagName = "cpu"
	} else {
		cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
	}

	var cpuFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuFlagName, cpuFlagDefault, cpuDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	credentialIdDescription := `Required. CredentialID holds an ID of the credential used to create the cluster`

	var credentialIdFlagName string
	if cmdPrefix == "" {
		credentialIdFlagName = "credentialID"
	} else {
		credentialIdFlagName = fmt.Sprintf("%v.credentialID", cmdPrefix)
	}

	var credentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(credentialIdFlagName, credentialIdFlagDefault, credentialIdDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadHdd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hddDescription := ``

	var hddFlagName string
	if cmdPrefix == "" {
		hddFlagName = "hdd"
	} else {
		hddFlagName = fmt.Sprintf("%v.hdd", cmdPrefix)
	}

	var hddFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hddFlagName, hddFlagDefault, hddDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadKubernetesVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubernetesVersionDescription := `Required. `

	var kubernetesVersionFlagName string
	if cmdPrefix == "" {
		kubernetesVersionFlagName = "kubernetesVersion"
	} else {
		kubernetesVersionFlagName = fmt.Sprintf("%v.kubernetesVersion", cmdPrefix)
	}

	var kubernetesVersionFlagDefault string

	_ = cmd.PersistentFlags().String(kubernetesVersionFlagName, kubernetesVersionFlagDefault, kubernetesVersionDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metaFlagName string
	if cmdPrefix == "" {
		metaFlagName = "meta"
	} else {
		metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
	}

	if err := registerModelTypesEnvironmentMetadataFlags(depth+1, metaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProvidersGKEProvisionPayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadNetworkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	networkIdDescription := ``

	var networkIdFlagName string
	if cmdPrefix == "" {
		networkIdFlagName = "networkID"
	} else {
		networkIdFlagName = fmt.Sprintf("%v.networkID", cmdPrefix)
	}

	var networkIdFlagDefault string

	_ = cmd.PersistentFlags().String(networkIdFlagName, networkIdFlagDefault, networkIdDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadNodeCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeCountDescription := `Required. `

	var nodeCountFlagName string
	if cmdPrefix == "" {
		nodeCountFlagName = "nodeCount"
	} else {
		nodeCountFlagName = fmt.Sprintf("%v.nodeCount", cmdPrefix)
	}

	var nodeCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodeCountFlagName, nodeCountFlagDefault, nodeCountDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadNodeSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeSizeDescription := `Required. `

	var nodeSizeFlagName string
	if cmdPrefix == "" {
		nodeSizeFlagName = "nodeSize"
	} else {
		nodeSizeFlagName = fmt.Sprintf("%v.nodeSize", cmdPrefix)
	}

	var nodeSizeFlagDefault string

	_ = cmd.PersistentFlags().String(nodeSizeFlagName, nodeSizeFlagDefault, nodeSizeDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadRAM(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ramDescription := ``

	var ramFlagName string
	if cmdPrefix == "" {
		ramFlagName = "ram"
	} else {
		ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
	}

	var ramFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ramFlagName, ramFlagDefault, ramDescription)

	return nil
}

func registerProvidersGKEProvisionPayloadRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	regionDescription := `Required. `

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	var regionFlagDefault string

	_ = cmd.PersistentFlags().String(regionFlagName, regionFlagDefault, regionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProvidersGKEProvisionPayloadFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuAdded := retrieveProvidersGKEProvisionPayloadCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuAdded

	err, credentialIdAdded := retrieveProvidersGKEProvisionPayloadCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialIdAdded

	err, hddAdded := retrieveProvidersGKEProvisionPayloadHddFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hddAdded

	err, kubernetesVersionAdded := retrieveProvidersGKEProvisionPayloadKubernetesVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubernetesVersionAdded

	err, metaAdded := retrieveProvidersGKEProvisionPayloadMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	err, nameAdded := retrieveProvidersGKEProvisionPayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, networkIdAdded := retrieveProvidersGKEProvisionPayloadNetworkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkIdAdded

	err, nodeCountAdded := retrieveProvidersGKEProvisionPayloadNodeCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeCountAdded

	err, nodeSizeAdded := retrieveProvidersGKEProvisionPayloadNodeSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeSizeAdded

	err, ramAdded := retrieveProvidersGKEProvisionPayloadRAMFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ramAdded

	err, regionAdded := retrieveProvidersGKEProvisionPayloadRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadCPUFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuFlagName := fmt.Sprintf("%v.cpu", cmdPrefix)
	if cmd.Flags().Changed(cpuFlagName) {

		var cpuFlagName string
		if cmdPrefix == "" {
			cpuFlagName = "cpu"
		} else {
			cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
		}

		cpuFlagValue, err := cmd.Flags().GetInt64(cpuFlagName)
		if err != nil {
			return err, false
		}
		m.CPU = cpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadCredentialIDFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	credentialIdFlagName := fmt.Sprintf("%v.credentialID", cmdPrefix)
	if cmd.Flags().Changed(credentialIdFlagName) {

		var credentialIdFlagName string
		if cmdPrefix == "" {
			credentialIdFlagName = "credentialID"
		} else {
			credentialIdFlagName = fmt.Sprintf("%v.credentialID", cmdPrefix)
		}

		credentialIdFlagValue, err := cmd.Flags().GetInt64(credentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.CredentialID = &credentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadHddFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hddFlagName := fmt.Sprintf("%v.hdd", cmdPrefix)
	if cmd.Flags().Changed(hddFlagName) {

		var hddFlagName string
		if cmdPrefix == "" {
			hddFlagName = "hdd"
		} else {
			hddFlagName = fmt.Sprintf("%v.hdd", cmdPrefix)
		}

		hddFlagValue, err := cmd.Flags().GetInt64(hddFlagName)
		if err != nil {
			return err, false
		}
		m.Hdd = hddFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadKubernetesVersionFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubernetesVersionFlagName := fmt.Sprintf("%v.kubernetesVersion", cmdPrefix)
	if cmd.Flags().Changed(kubernetesVersionFlagName) {

		var kubernetesVersionFlagName string
		if cmdPrefix == "" {
			kubernetesVersionFlagName = "kubernetesVersion"
		} else {
			kubernetesVersionFlagName = fmt.Sprintf("%v.kubernetesVersion", cmdPrefix)
		}

		kubernetesVersionFlagValue, err := cmd.Flags().GetString(kubernetesVersionFlagName)
		if err != nil {
			return err, false
		}
		m.KubernetesVersion = &kubernetesVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadMetaFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {
		// info: complex object meta TypesEnvironmentMetadata is retrieved outside this Changed() block
	}
	metaFlagValue := m.Meta
	if swag.IsZero(metaFlagValue) {
		metaFlagValue = &models.TypesEnvironmentMetadata{}
	}

	err, metaAdded := retrieveModelTypesEnvironmentMetadataFlags(depth+1, metaFlagValue, metaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded
	if metaAdded {
		m.Meta = metaFlagValue
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadNameFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadNetworkIDFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkIdFlagName := fmt.Sprintf("%v.networkID", cmdPrefix)
	if cmd.Flags().Changed(networkIdFlagName) {

		var networkIdFlagName string
		if cmdPrefix == "" {
			networkIdFlagName = "networkID"
		} else {
			networkIdFlagName = fmt.Sprintf("%v.networkID", cmdPrefix)
		}

		networkIdFlagValue, err := cmd.Flags().GetString(networkIdFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkID = networkIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadNodeCountFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeCountFlagName := fmt.Sprintf("%v.nodeCount", cmdPrefix)
	if cmd.Flags().Changed(nodeCountFlagName) {

		var nodeCountFlagName string
		if cmdPrefix == "" {
			nodeCountFlagName = "nodeCount"
		} else {
			nodeCountFlagName = fmt.Sprintf("%v.nodeCount", cmdPrefix)
		}

		nodeCountFlagValue, err := cmd.Flags().GetInt64(nodeCountFlagName)
		if err != nil {
			return err, false
		}
		m.NodeCount = &nodeCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadNodeSizeFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeSizeFlagName := fmt.Sprintf("%v.nodeSize", cmdPrefix)
	if cmd.Flags().Changed(nodeSizeFlagName) {

		var nodeSizeFlagName string
		if cmdPrefix == "" {
			nodeSizeFlagName = "nodeSize"
		} else {
			nodeSizeFlagName = fmt.Sprintf("%v.nodeSize", cmdPrefix)
		}

		nodeSizeFlagValue, err := cmd.Flags().GetString(nodeSizeFlagName)
		if err != nil {
			return err, false
		}
		m.NodeSize = &nodeSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadRAMFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ramFlagName := fmt.Sprintf("%v.ram", cmdPrefix)
	if cmd.Flags().Changed(ramFlagName) {

		var ramFlagName string
		if cmdPrefix == "" {
			ramFlagName = "ram"
		} else {
			ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
		}

		ramFlagValue, err := cmd.Flags().GetFloat64(ramFlagName)
		if err != nil {
			return err, false
		}
		m.RAM = ramFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersGKEProvisionPayloadRegionFlags(depth int, m *models.ProvidersGKEProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {

		var regionFlagName string
		if cmdPrefix == "" {
			regionFlagName = "region"
		} else {
			regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
		}

		regionFlagValue, err := cmd.Flags().GetString(regionFlagName)
		if err != nil {
			return err, false
		}
		m.Region = &regionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
