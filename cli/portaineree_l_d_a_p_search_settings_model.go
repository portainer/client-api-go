// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeLDAPSearchSettings

// register flags to command
func registerModelPortainereeLDAPSearchSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeLDAPSearchSettingsBaseDN(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeLDAPSearchSettingsFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeLDAPSearchSettingsUserNameAttribute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeLDAPSearchSettingsBaseDN(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	baseDNDescription := `The distinguished name of the element from which the LDAP server will search for users`

	var baseDNFlagName string
	if cmdPrefix == "" {
		baseDNFlagName = "BaseDN"
	} else {
		baseDNFlagName = fmt.Sprintf("%v.BaseDN", cmdPrefix)
	}

	var baseDNFlagDefault string

	_ = cmd.PersistentFlags().String(baseDNFlagName, baseDNFlagDefault, baseDNDescription)

	return nil
}

func registerPortainereeLDAPSearchSettingsFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	filterDescription := `Optional LDAP search filter used to select user elements`

	var filterFlagName string
	if cmdPrefix == "" {
		filterFlagName = "Filter"
	} else {
		filterFlagName = fmt.Sprintf("%v.Filter", cmdPrefix)
	}

	var filterFlagDefault string

	_ = cmd.PersistentFlags().String(filterFlagName, filterFlagDefault, filterDescription)

	return nil
}

func registerPortainereeLDAPSearchSettingsUserNameAttribute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userNameAttributeDescription := `LDAP attribute which denotes the username`

	var userNameAttributeFlagName string
	if cmdPrefix == "" {
		userNameAttributeFlagName = "UserNameAttribute"
	} else {
		userNameAttributeFlagName = fmt.Sprintf("%v.UserNameAttribute", cmdPrefix)
	}

	var userNameAttributeFlagDefault string

	_ = cmd.PersistentFlags().String(userNameAttributeFlagName, userNameAttributeFlagDefault, userNameAttributeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeLDAPSearchSettingsFlags(depth int, m *models.PortainereeLDAPSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, baseDNAdded := retrievePortainereeLDAPSearchSettingsBaseDNFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || baseDNAdded

	err, filterAdded := retrievePortainereeLDAPSearchSettingsFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filterAdded

	err, userNameAttributeAdded := retrievePortainereeLDAPSearchSettingsUserNameAttributeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userNameAttributeAdded

	return nil, retAdded
}

func retrievePortainereeLDAPSearchSettingsBaseDNFlags(depth int, m *models.PortainereeLDAPSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	baseDNFlagName := fmt.Sprintf("%v.BaseDN", cmdPrefix)
	if cmd.Flags().Changed(baseDNFlagName) {

		var baseDNFlagName string
		if cmdPrefix == "" {
			baseDNFlagName = "BaseDN"
		} else {
			baseDNFlagName = fmt.Sprintf("%v.BaseDN", cmdPrefix)
		}

		baseDNFlagValue, err := cmd.Flags().GetString(baseDNFlagName)
		if err != nil {
			return err, false
		}
		m.BaseDN = baseDNFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeLDAPSearchSettingsFilterFlags(depth int, m *models.PortainereeLDAPSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filterFlagName := fmt.Sprintf("%v.Filter", cmdPrefix)
	if cmd.Flags().Changed(filterFlagName) {

		var filterFlagName string
		if cmdPrefix == "" {
			filterFlagName = "Filter"
		} else {
			filterFlagName = fmt.Sprintf("%v.Filter", cmdPrefix)
		}

		filterFlagValue, err := cmd.Flags().GetString(filterFlagName)
		if err != nil {
			return err, false
		}
		m.Filter = filterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeLDAPSearchSettingsUserNameAttributeFlags(depth int, m *models.PortainereeLDAPSearchSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userNameAttributeFlagName := fmt.Sprintf("%v.UserNameAttribute", cmdPrefix)
	if cmd.Flags().Changed(userNameAttributeFlagName) {

		var userNameAttributeFlagName string
		if cmdPrefix == "" {
			userNameAttributeFlagName = "UserNameAttribute"
		} else {
			userNameAttributeFlagName = fmt.Sprintf("%v.UserNameAttribute", cmdPrefix)
		}

		userNameAttributeFlagValue, err := cmd.Flags().GetString(userNameAttributeFlagName)
		if err != nil {
			return err, false
		}
		m.UserNameAttribute = userNameAttributeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
