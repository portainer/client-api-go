// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointedgeGenerateKeyResponse

// register flags to command
func registerModelEndpointedgeGenerateKeyResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointedgeGenerateKeyResponseEdgeKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointedgeGenerateKeyResponseEdgeKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeKeyDescription := ``

	var edgeKeyFlagName string
	if cmdPrefix == "" {
		edgeKeyFlagName = "edgeKey"
	} else {
		edgeKeyFlagName = fmt.Sprintf("%v.edgeKey", cmdPrefix)
	}

	var edgeKeyFlagDefault string

	_ = cmd.PersistentFlags().String(edgeKeyFlagName, edgeKeyFlagDefault, edgeKeyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointedgeGenerateKeyResponseFlags(depth int, m *models.EndpointedgeGenerateKeyResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, edgeKeyAdded := retrieveEndpointedgeGenerateKeyResponseEdgeKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeKeyAdded

	return nil, retAdded
}

func retrieveEndpointedgeGenerateKeyResponseEdgeKeyFlags(depth int, m *models.EndpointedgeGenerateKeyResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeKeyFlagName := fmt.Sprintf("%v.edgeKey", cmdPrefix)
	if cmd.Flags().Changed(edgeKeyFlagName) {

		var edgeKeyFlagName string
		if cmdPrefix == "" {
			edgeKeyFlagName = "edgeKey"
		} else {
			edgeKeyFlagName = fmt.Sprintf("%v.edgeKey", cmdPrefix)
		}

		edgeKeyFlagValue, err := cmd.Flags().GetString(edgeKeyFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeKey = edgeKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
