// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for WebhooksWebhookCreatePayload

// register flags to command
func registerModelWebhooksWebhookCreatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebhooksWebhookCreatePayloadEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhooksWebhookCreatePayloadRegistryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhooksWebhookCreatePayloadResourceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhooksWebhookCreatePayloadWebhookType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebhooksWebhookCreatePayloadEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerWebhooksWebhookCreatePayloadRegistryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registryIdDescription := `Registry Identifier`

	var registryIdFlagName string
	if cmdPrefix == "" {
		registryIdFlagName = "registryID"
	} else {
		registryIdFlagName = fmt.Sprintf("%v.registryID", cmdPrefix)
	}

	var registryIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(registryIdFlagName, registryIdFlagDefault, registryIdDescription)

	return nil
}

func registerWebhooksWebhookCreatePayloadResourceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceIdDescription := ``

	var resourceIdFlagName string
	if cmdPrefix == "" {
		resourceIdFlagName = "resourceID"
	} else {
		resourceIdFlagName = fmt.Sprintf("%v.resourceID", cmdPrefix)
	}

	var resourceIdFlagDefault string

	_ = cmd.PersistentFlags().String(resourceIdFlagName, resourceIdFlagDefault, resourceIdDescription)

	return nil
}

func registerWebhooksWebhookCreatePayloadWebhookType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webhookTypeDescription := ``

	var webhookTypeFlagName string
	if cmdPrefix == "" {
		webhookTypeFlagName = "webhookType"
	} else {
		webhookTypeFlagName = fmt.Sprintf("%v.webhookType", cmdPrefix)
	}

	var webhookTypeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(webhookTypeFlagName, webhookTypeFlagDefault, webhookTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebhooksWebhookCreatePayloadFlags(depth int, m *models.WebhooksWebhookCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointIdAdded := retrieveWebhooksWebhookCreatePayloadEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, registryIdAdded := retrieveWebhooksWebhookCreatePayloadRegistryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryIdAdded

	err, resourceIdAdded := retrieveWebhooksWebhookCreatePayloadResourceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceIdAdded

	err, webhookTypeAdded := retrieveWebhooksWebhookCreatePayloadWebhookTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webhookTypeAdded

	return nil, retAdded
}

func retrieveWebhooksWebhookCreatePayloadEndpointIDFlags(depth int, m *models.WebhooksWebhookCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.endpointID", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhooksWebhookCreatePayloadRegistryIDFlags(depth int, m *models.WebhooksWebhookCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryIdFlagName := fmt.Sprintf("%v.registryID", cmdPrefix)
	if cmd.Flags().Changed(registryIdFlagName) {

		var registryIdFlagName string
		if cmdPrefix == "" {
			registryIdFlagName = "registryID"
		} else {
			registryIdFlagName = fmt.Sprintf("%v.registryID", cmdPrefix)
		}

		registryIdFlagValue, err := cmd.Flags().GetInt64(registryIdFlagName)
		if err != nil {
			return err, false
		}
		m.RegistryID = registryIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhooksWebhookCreatePayloadResourceIDFlags(depth int, m *models.WebhooksWebhookCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceIdFlagName := fmt.Sprintf("%v.resourceID", cmdPrefix)
	if cmd.Flags().Changed(resourceIdFlagName) {

		var resourceIdFlagName string
		if cmdPrefix == "" {
			resourceIdFlagName = "resourceID"
		} else {
			resourceIdFlagName = fmt.Sprintf("%v.resourceID", cmdPrefix)
		}

		resourceIdFlagValue, err := cmd.Flags().GetString(resourceIdFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceID = resourceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhooksWebhookCreatePayloadWebhookTypeFlags(depth int, m *models.WebhooksWebhookCreatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webhookTypeFlagName := fmt.Sprintf("%v.webhookType", cmdPrefix)
	if cmd.Flags().Changed(webhookTypeFlagName) {

		var webhookTypeFlagName string
		if cmdPrefix == "" {
			webhookTypeFlagName = "webhookType"
		} else {
			webhookTypeFlagName = fmt.Sprintf("%v.webhookType", cmdPrefix)
		}

		webhookTypeFlagValue, err := cmd.Flags().GetInt64(webhookTypeFlagName)
		if err != nil {
			return err, false
		}
		m.WebhookType = webhookTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
