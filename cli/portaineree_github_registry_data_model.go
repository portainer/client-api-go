// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeGithubRegistryData

// register flags to command
func registerModelPortainereeGithubRegistryDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeGithubRegistryDataOrganisationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeGithubRegistryDataUseOrganisation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeGithubRegistryDataOrganisationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	organisationNameDescription := ``

	var organisationNameFlagName string
	if cmdPrefix == "" {
		organisationNameFlagName = "OrganisationName"
	} else {
		organisationNameFlagName = fmt.Sprintf("%v.OrganisationName", cmdPrefix)
	}

	var organisationNameFlagDefault string

	_ = cmd.PersistentFlags().String(organisationNameFlagName, organisationNameFlagDefault, organisationNameDescription)

	return nil
}

func registerPortainereeGithubRegistryDataUseOrganisation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useOrganisationDescription := ``

	var useOrganisationFlagName string
	if cmdPrefix == "" {
		useOrganisationFlagName = "UseOrganisation"
	} else {
		useOrganisationFlagName = fmt.Sprintf("%v.UseOrganisation", cmdPrefix)
	}

	var useOrganisationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useOrganisationFlagName, useOrganisationFlagDefault, useOrganisationDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeGithubRegistryDataFlags(depth int, m *models.PortainereeGithubRegistryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, organisationNameAdded := retrievePortainereeGithubRegistryDataOrganisationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || organisationNameAdded

	err, useOrganisationAdded := retrievePortainereeGithubRegistryDataUseOrganisationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useOrganisationAdded

	return nil, retAdded
}

func retrievePortainereeGithubRegistryDataOrganisationNameFlags(depth int, m *models.PortainereeGithubRegistryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	organisationNameFlagName := fmt.Sprintf("%v.OrganisationName", cmdPrefix)
	if cmd.Flags().Changed(organisationNameFlagName) {

		var organisationNameFlagName string
		if cmdPrefix == "" {
			organisationNameFlagName = "OrganisationName"
		} else {
			organisationNameFlagName = fmt.Sprintf("%v.OrganisationName", cmdPrefix)
		}

		organisationNameFlagValue, err := cmd.Flags().GetString(organisationNameFlagName)
		if err != nil {
			return err, false
		}
		m.OrganisationName = organisationNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeGithubRegistryDataUseOrganisationFlags(depth int, m *models.PortainereeGithubRegistryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useOrganisationFlagName := fmt.Sprintf("%v.UseOrganisation", cmdPrefix)
	if cmd.Flags().Changed(useOrganisationFlagName) {

		var useOrganisationFlagName string
		if cmdPrefix == "" {
			useOrganisationFlagName = "UseOrganisation"
		} else {
			useOrganisationFlagName = fmt.Sprintf("%v.UseOrganisation", cmdPrefix)
		}

		useOrganisationFlagValue, err := cmd.Flags().GetBool(useOrganisationFlagName)
		if err != nil {
			return err, false
		}
		m.UseOrganisation = &useOrganisationFlagValue

		retAdded = true
	}

	return nil, retAdded
}
