// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for SettingsDefaultRegistryUpdatePayload

// register flags to command
func registerModelSettingsDefaultRegistryUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSettingsDefaultRegistryUpdatePayloadHide(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsDefaultRegistryUpdatePayloadHide(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hideDescription := ``

	var hideFlagName string
	if cmdPrefix == "" {
		hideFlagName = "Hide"
	} else {
		hideFlagName = fmt.Sprintf("%v.Hide", cmdPrefix)
	}

	var hideFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hideFlagName, hideFlagDefault, hideDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSettingsDefaultRegistryUpdatePayloadFlags(depth int, m *models.SettingsDefaultRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hideAdded := retrieveSettingsDefaultRegistryUpdatePayloadHideFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hideAdded

	return nil, retAdded
}

func retrieveSettingsDefaultRegistryUpdatePayloadHideFlags(depth int, m *models.SettingsDefaultRegistryUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hideFlagName := fmt.Sprintf("%v.Hide", cmdPrefix)
	if cmd.Flags().Changed(hideFlagName) {

		var hideFlagName string
		if cmdPrefix == "" {
			hideFlagName = "Hide"
		} else {
			hideFlagName = fmt.Sprintf("%v.Hide", cmdPrefix)
		}

		hideFlagValue, err := cmd.Flags().GetBool(hideFlagName)
		if err != nil {
			return err, false
		}
		m.Hide = &hideFlagValue

		retAdded = true
	}

	return nil, retAdded
}
