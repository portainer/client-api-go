// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointsForceUpdateServicePayload

// register flags to command
func registerModelEndpointsForceUpdateServicePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointsForceUpdateServicePayloadPullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsForceUpdateServicePayloadServiceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsForceUpdateServicePayloadPullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pullImageDescription := `PullImage if true will pull the image`

	var pullImageFlagName string
	if cmdPrefix == "" {
		pullImageFlagName = "pullImage"
	} else {
		pullImageFlagName = fmt.Sprintf("%v.pullImage", cmdPrefix)
	}

	var pullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pullImageFlagName, pullImageFlagDefault, pullImageDescription)

	return nil
}

func registerEndpointsForceUpdateServicePayloadServiceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serviceIdDescription := `ServiceId to update`

	var serviceIdFlagName string
	if cmdPrefix == "" {
		serviceIdFlagName = "serviceID"
	} else {
		serviceIdFlagName = fmt.Sprintf("%v.serviceID", cmdPrefix)
	}

	var serviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(serviceIdFlagName, serviceIdFlagDefault, serviceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointsForceUpdateServicePayloadFlags(depth int, m *models.EndpointsForceUpdateServicePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, pullImageAdded := retrieveEndpointsForceUpdateServicePayloadPullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pullImageAdded

	err, serviceIdAdded := retrieveEndpointsForceUpdateServicePayloadServiceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceIdAdded

	return nil, retAdded
}

func retrieveEndpointsForceUpdateServicePayloadPullImageFlags(depth int, m *models.EndpointsForceUpdateServicePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pullImageFlagName := fmt.Sprintf("%v.pullImage", cmdPrefix)
	if cmd.Flags().Changed(pullImageFlagName) {

		var pullImageFlagName string
		if cmdPrefix == "" {
			pullImageFlagName = "pullImage"
		} else {
			pullImageFlagName = fmt.Sprintf("%v.pullImage", cmdPrefix)
		}

		pullImageFlagValue, err := cmd.Flags().GetBool(pullImageFlagName)
		if err != nil {
			return err, false
		}
		m.PullImage = &pullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsForceUpdateServicePayloadServiceIDFlags(depth int, m *models.EndpointsForceUpdateServicePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceIdFlagName := fmt.Sprintf("%v.serviceID", cmdPrefix)
	if cmd.Flags().Changed(serviceIdFlagName) {

		var serviceIdFlagName string
		if cmdPrefix == "" {
			serviceIdFlagName = "serviceID"
		} else {
			serviceIdFlagName = fmt.Sprintf("%v.serviceID", cmdPrefix)
		}

		serviceIdFlagValue, err := cmd.Flags().GetString(serviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServiceID = serviceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
