// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EdgegroupsDecoratedEdgeGroup

// register flags to command
func registerModelEdgegroupsDecoratedEdgeGroupFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEdgegroupsDecoratedEdgeGroupDynamic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupEndpoints(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupHasEdgeGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupHasEdgeStack(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupPartialMatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupTagIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEdgegroupsDecoratedEdgeGroupEndpointTypes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupDynamic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dynamicDescription := ``

	var dynamicFlagName string
	if cmdPrefix == "" {
		dynamicFlagName = "Dynamic"
	} else {
		dynamicFlagName = fmt.Sprintf("%v.Dynamic", cmdPrefix)
	}

	var dynamicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dynamicFlagName, dynamicFlagDefault, dynamicDescription)

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupEndpoints(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Endpoints []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupHasEdgeGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hasEdgeGroupDescription := ``

	var hasEdgeGroupFlagName string
	if cmdPrefix == "" {
		hasEdgeGroupFlagName = "HasEdgeGroup"
	} else {
		hasEdgeGroupFlagName = fmt.Sprintf("%v.HasEdgeGroup", cmdPrefix)
	}

	var hasEdgeGroupFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hasEdgeGroupFlagName, hasEdgeGroupFlagDefault, hasEdgeGroupDescription)

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupHasEdgeStack(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hasEdgeStackDescription := ``

	var hasEdgeStackFlagName string
	if cmdPrefix == "" {
		hasEdgeStackFlagName = "HasEdgeStack"
	} else {
		hasEdgeStackFlagName = fmt.Sprintf("%v.HasEdgeStack", cmdPrefix)
	}

	var hasEdgeStackFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hasEdgeStackFlagName, hasEdgeStackFlagDefault, hasEdgeStackDescription)

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `EdgeGroup Identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupPartialMatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	partialMatchDescription := ``

	var partialMatchFlagName string
	if cmdPrefix == "" {
		partialMatchFlagName = "PartialMatch"
	} else {
		partialMatchFlagName = fmt.Sprintf("%v.PartialMatch", cmdPrefix)
	}

	var partialMatchFlagDefault bool

	_ = cmd.PersistentFlags().Bool(partialMatchFlagName, partialMatchFlagDefault, partialMatchDescription)

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupTagIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: TagIds []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEdgegroupsDecoratedEdgeGroupEndpointTypes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: endpointTypes []int64 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEdgegroupsDecoratedEdgeGroupFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dynamicAdded := retrieveEdgegroupsDecoratedEdgeGroupDynamicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dynamicAdded

	err, endpointsAdded := retrieveEdgegroupsDecoratedEdgeGroupEndpointsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointsAdded

	err, hasEdgeGroupAdded := retrieveEdgegroupsDecoratedEdgeGroupHasEdgeGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hasEdgeGroupAdded

	err, hasEdgeStackAdded := retrieveEdgegroupsDecoratedEdgeGroupHasEdgeStackFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hasEdgeStackAdded

	err, idAdded := retrieveEdgegroupsDecoratedEdgeGroupIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveEdgegroupsDecoratedEdgeGroupNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, partialMatchAdded := retrieveEdgegroupsDecoratedEdgeGroupPartialMatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partialMatchAdded

	err, tagIdsAdded := retrieveEdgegroupsDecoratedEdgeGroupTagIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagIdsAdded

	err, endpointTypesAdded := retrieveEdgegroupsDecoratedEdgeGroupEndpointTypesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointTypesAdded

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupDynamicFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dynamicFlagName := fmt.Sprintf("%v.Dynamic", cmdPrefix)
	if cmd.Flags().Changed(dynamicFlagName) {

		var dynamicFlagName string
		if cmdPrefix == "" {
			dynamicFlagName = "Dynamic"
		} else {
			dynamicFlagName = fmt.Sprintf("%v.Dynamic", cmdPrefix)
		}

		dynamicFlagValue, err := cmd.Flags().GetBool(dynamicFlagName)
		if err != nil {
			return err, false
		}
		m.Dynamic = &dynamicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupEndpointsFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointsFlagName := fmt.Sprintf("%v.Endpoints", cmdPrefix)
	if cmd.Flags().Changed(endpointsFlagName) {
		// warning: Endpoints array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupHasEdgeGroupFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hasEdgeGroupFlagName := fmt.Sprintf("%v.HasEdgeGroup", cmdPrefix)
	if cmd.Flags().Changed(hasEdgeGroupFlagName) {

		var hasEdgeGroupFlagName string
		if cmdPrefix == "" {
			hasEdgeGroupFlagName = "HasEdgeGroup"
		} else {
			hasEdgeGroupFlagName = fmt.Sprintf("%v.HasEdgeGroup", cmdPrefix)
		}

		hasEdgeGroupFlagValue, err := cmd.Flags().GetBool(hasEdgeGroupFlagName)
		if err != nil {
			return err, false
		}
		m.HasEdgeGroup = &hasEdgeGroupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupHasEdgeStackFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hasEdgeStackFlagName := fmt.Sprintf("%v.HasEdgeStack", cmdPrefix)
	if cmd.Flags().Changed(hasEdgeStackFlagName) {

		var hasEdgeStackFlagName string
		if cmdPrefix == "" {
			hasEdgeStackFlagName = "HasEdgeStack"
		} else {
			hasEdgeStackFlagName = fmt.Sprintf("%v.HasEdgeStack", cmdPrefix)
		}

		hasEdgeStackFlagValue, err := cmd.Flags().GetBool(hasEdgeStackFlagName)
		if err != nil {
			return err, false
		}
		m.HasEdgeStack = &hasEdgeStackFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupIDFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupNameFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupPartialMatchFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partialMatchFlagName := fmt.Sprintf("%v.PartialMatch", cmdPrefix)
	if cmd.Flags().Changed(partialMatchFlagName) {

		var partialMatchFlagName string
		if cmdPrefix == "" {
			partialMatchFlagName = "PartialMatch"
		} else {
			partialMatchFlagName = fmt.Sprintf("%v.PartialMatch", cmdPrefix)
		}

		partialMatchFlagValue, err := cmd.Flags().GetBool(partialMatchFlagName)
		if err != nil {
			return err, false
		}
		m.PartialMatch = &partialMatchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupTagIdsFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagIdsFlagName := fmt.Sprintf("%v.TagIds", cmdPrefix)
	if cmd.Flags().Changed(tagIdsFlagName) {
		// warning: TagIds array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEdgegroupsDecoratedEdgeGroupEndpointTypesFlags(depth int, m *models.EdgegroupsDecoratedEdgeGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointTypesFlagName := fmt.Sprintf("%v.endpointTypes", cmdPrefix)
	if cmd.Flags().Changed(endpointTypesFlagName) {
		// warning: endpointTypes array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
