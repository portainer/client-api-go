// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/helm"

	"github.com/spf13/cobra"
)

// makeOperationHelmHelmDeleteCmd returns a cmd to handle operation helmDelete
func makeOperationHelmHelmDeleteCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "HelmDelete",
		Short: `**Access policy**: authenticated`,
		RunE:  runOperationHelmHelmDelete,
	}

	if err := registerOperationHelmHelmDeleteParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationHelmHelmDelete uses cmd flags to call endpoint api
func runOperationHelmHelmDelete(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := helm.NewHelmDeleteParams()
	if err, _ := retrieveOperationHelmHelmDeleteIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationHelmHelmDeleteNamespaceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationHelmHelmDeleteReleaseFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationHelmHelmDeleteResult(appCli.Helm.HelmDelete(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationHelmHelmDeleteParamFlags registers all flags needed to fill params
func registerOperationHelmHelmDeleteParamFlags(cmd *cobra.Command) error {
	if err := registerOperationHelmHelmDeleteIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationHelmHelmDeleteNamespaceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationHelmHelmDeleteReleaseParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationHelmHelmDeleteIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Environment(Endpoint) identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationHelmHelmDeleteNamespaceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	namespaceDescription := `Required. An optional namespace`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}
func registerOperationHelmHelmDeleteReleaseParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	releaseDescription := `Required. The name of the release/application to uninstall`

	var releaseFlagName string
	if cmdPrefix == "" {
		releaseFlagName = "release"
	} else {
		releaseFlagName = fmt.Sprintf("%v.release", cmdPrefix)
	}

	var releaseFlagDefault string

	_ = cmd.PersistentFlags().String(releaseFlagName, releaseFlagDefault, releaseDescription)

	return nil
}

func retrieveOperationHelmHelmDeleteIDFlag(m *helm.HelmDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationHelmHelmDeleteNamespaceFlag(m *helm.HelmDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("namespace") {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationHelmHelmDeleteReleaseFlag(m *helm.HelmDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("release") {

		var releaseFlagName string
		if cmdPrefix == "" {
			releaseFlagName = "release"
		} else {
			releaseFlagName = fmt.Sprintf("%v.release", cmdPrefix)
		}

		releaseFlagValue, err := cmd.Flags().GetString(releaseFlagName)
		if err != nil {
			return err, false
		}
		m.Release = releaseFlagValue

	}
	return nil, retAdded
}

// parseOperationHelmHelmDeleteResult parses request result and return the string content
func parseOperationHelmHelmDeleteResult(resp0 *helm.HelmDeleteNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning helmDeleteNoContent is not supported

		// Non schema case: warning helmDeleteBadRequest is not supported

		// Non schema case: warning helmDeleteUnauthorized is not supported

		// Non schema case: warning helmDeleteNotFound is not supported

		// Non schema case: warning helmDeleteInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response helmDeleteNoContent is not supported by go-swagger cli yet.

	return "", nil
}
