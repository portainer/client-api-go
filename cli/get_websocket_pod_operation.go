// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/websocket"

	"github.com/spf13/cobra"
)

// makeOperationWebsocketGetWebsocketPodCmd returns a cmd to handle operation getWebsocketPod
func makeOperationWebsocketGetWebsocketPodCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "GetWebsocketPod",
		Short: `The request will be upgraded to the websocket protocol.
**Access policy**: authenticated`,
		RunE: runOperationWebsocketGetWebsocketPod,
	}

	if err := registerOperationWebsocketGetWebsocketPodParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWebsocketGetWebsocketPod uses cmd flags to call endpoint api
func runOperationWebsocketGetWebsocketPod(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := websocket.NewGetWebsocketPodParams()
	if err, _ := retrieveOperationWebsocketGetWebsocketPodCommandFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketPodContainerNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketPodEndpointIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketPodNamespaceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketPodPodNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebsocketGetWebsocketPodTokenFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWebsocketGetWebsocketPodResult(appCli.Websocket.GetWebsocketPod(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationWebsocketGetWebsocketPodParamFlags registers all flags needed to fill params
func registerOperationWebsocketGetWebsocketPodParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWebsocketGetWebsocketPodCommandParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketPodContainerNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketPodEndpointIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketPodNamespaceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketPodPodNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebsocketGetWebsocketPodTokenParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWebsocketGetWebsocketPodCommandParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	commandDescription := `Required. command to execute in the container`

	var commandFlagName string
	if cmdPrefix == "" {
		commandFlagName = "command"
	} else {
		commandFlagName = fmt.Sprintf("%v.command", cmdPrefix)
	}

	var commandFlagDefault string

	_ = cmd.PersistentFlags().String(commandFlagName, commandFlagDefault, commandDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketPodContainerNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	containerNameDescription := `Required. name of the container`

	var containerNameFlagName string
	if cmdPrefix == "" {
		containerNameFlagName = "containerName"
	} else {
		containerNameFlagName = fmt.Sprintf("%v.containerName", cmdPrefix)
	}

	var containerNameFlagDefault string

	_ = cmd.PersistentFlags().String(containerNameFlagName, containerNameFlagDefault, containerNameDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketPodEndpointIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointIdDescription := `Required. environment(endpoint) ID of the environment(endpoint) where the resource is located`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointId"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketPodNamespaceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	namespaceDescription := `Required. namespace where the container is located`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketPodPodNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	podNameDescription := `Required. name of the pod containing the container`

	var podNameFlagName string
	if cmdPrefix == "" {
		podNameFlagName = "podName"
	} else {
		podNameFlagName = fmt.Sprintf("%v.podName", cmdPrefix)
	}

	var podNameFlagDefault string

	_ = cmd.PersistentFlags().String(podNameFlagName, podNameFlagDefault, podNameDescription)

	return nil
}
func registerOperationWebsocketGetWebsocketPodTokenParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tokenDescription := `Required. JWT token used for authentication against this environment(endpoint)`

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

func retrieveOperationWebsocketGetWebsocketPodCommandFlag(m *websocket.GetWebsocketPodParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("command") {

		var commandFlagName string
		if cmdPrefix == "" {
			commandFlagName = "command"
		} else {
			commandFlagName = fmt.Sprintf("%v.command", cmdPrefix)
		}

		commandFlagValue, err := cmd.Flags().GetString(commandFlagName)
		if err != nil {
			return err, false
		}
		m.Command = commandFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketPodContainerNameFlag(m *websocket.GetWebsocketPodParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("containerName") {

		var containerNameFlagName string
		if cmdPrefix == "" {
			containerNameFlagName = "containerName"
		} else {
			containerNameFlagName = fmt.Sprintf("%v.containerName", cmdPrefix)
		}

		containerNameFlagValue, err := cmd.Flags().GetString(containerNameFlagName)
		if err != nil {
			return err, false
		}
		m.ContainerName = containerNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketPodEndpointIDFlag(m *websocket.GetWebsocketPodParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpointId") {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointId"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointId", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketPodNamespaceFlag(m *websocket.GetWebsocketPodParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("namespace") {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketPodPodNameFlag(m *websocket.GetWebsocketPodParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("podName") {

		var podNameFlagName string
		if cmdPrefix == "" {
			podNameFlagName = "podName"
		} else {
			podNameFlagName = fmt.Sprintf("%v.podName", cmdPrefix)
		}

		podNameFlagValue, err := cmd.Flags().GetString(podNameFlagName)
		if err != nil {
			return err, false
		}
		m.PodName = podNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebsocketGetWebsocketPodTokenFlag(m *websocket.GetWebsocketPodParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("token") {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

	}
	return nil, retAdded
}

// parseOperationWebsocketGetWebsocketPodResult parses request result and return the string content
func parseOperationWebsocketGetWebsocketPodResult(resp0 *websocket.GetWebsocketPodOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getWebsocketPodOK is not supported

		// Non schema case: warning getWebsocketPodBadRequest is not supported

		// Non schema case: warning getWebsocketPodForbidden is not supported

		// Non schema case: warning getWebsocketPodNotFound is not supported

		// Non schema case: warning getWebsocketPodInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getWebsocketPodOK is not supported by go-swagger cli yet.

	return "", nil
}
