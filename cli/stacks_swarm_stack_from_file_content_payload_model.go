// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for StacksSwarmStackFromFileContentPayload

// register flags to command
func registerModelStacksSwarmStackFromFileContentPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksSwarmStackFromFileContentPayloadEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromFileContentPayloadFromAppTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromFileContentPayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromFileContentPayloadStackFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromFileContentPayloadSwarmID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksSwarmStackFromFileContentPayloadWebhook(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksSwarmStackFromFileContentPayloadEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: env []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerStacksSwarmStackFromFileContentPayloadFromAppTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fromAppTemplateDescription := `Whether the stack is from a app template`

	var fromAppTemplateFlagName string
	if cmdPrefix == "" {
		fromAppTemplateFlagName = "fromAppTemplate"
	} else {
		fromAppTemplateFlagName = fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
	}

	var fromAppTemplateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(fromAppTemplateFlagName, fromAppTemplateFlagDefault, fromAppTemplateDescription)

	return nil
}

func registerStacksSwarmStackFromFileContentPayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name of the stack`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerStacksSwarmStackFromFileContentPayloadStackFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackFileContentDescription := `Required. Content of the Stack file`

	var stackFileContentFlagName string
	if cmdPrefix == "" {
		stackFileContentFlagName = "stackFileContent"
	} else {
		stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	}

	var stackFileContentFlagDefault string

	_ = cmd.PersistentFlags().String(stackFileContentFlagName, stackFileContentFlagDefault, stackFileContentDescription)

	return nil
}

func registerStacksSwarmStackFromFileContentPayloadSwarmID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	swarmIdDescription := `Required. Swarm cluster identifier`

	var swarmIdFlagName string
	if cmdPrefix == "" {
		swarmIdFlagName = "swarmID"
	} else {
		swarmIdFlagName = fmt.Sprintf("%v.swarmID", cmdPrefix)
	}

	var swarmIdFlagDefault string

	_ = cmd.PersistentFlags().String(swarmIdFlagName, swarmIdFlagDefault, swarmIdDescription)

	return nil
}

func registerStacksSwarmStackFromFileContentPayloadWebhook(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webhookDescription := `A UUID to identify a webhook. The stack will be force updated and pull the latest image when the webhook was invoked.`

	var webhookFlagName string
	if cmdPrefix == "" {
		webhookFlagName = "webhook"
	} else {
		webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
	}

	var webhookFlagDefault string

	_ = cmd.PersistentFlags().String(webhookFlagName, webhookFlagDefault, webhookDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksSwarmStackFromFileContentPayloadFlags(depth int, m *models.StacksSwarmStackFromFileContentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, envAdded := retrieveStacksSwarmStackFromFileContentPayloadEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, fromAppTemplateAdded := retrieveStacksSwarmStackFromFileContentPayloadFromAppTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fromAppTemplateAdded

	err, nameAdded := retrieveStacksSwarmStackFromFileContentPayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, stackFileContentAdded := retrieveStacksSwarmStackFromFileContentPayloadStackFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackFileContentAdded

	err, swarmIdAdded := retrieveStacksSwarmStackFromFileContentPayloadSwarmIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || swarmIdAdded

	err, webhookAdded := retrieveStacksSwarmStackFromFileContentPayloadWebhookFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webhookAdded

	return nil, retAdded
}

func retrieveStacksSwarmStackFromFileContentPayloadEnvFlags(depth int, m *models.StacksSwarmStackFromFileContentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: env array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromFileContentPayloadFromAppTemplateFlags(depth int, m *models.StacksSwarmStackFromFileContentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fromAppTemplateFlagName := fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
	if cmd.Flags().Changed(fromAppTemplateFlagName) {

		var fromAppTemplateFlagName string
		if cmdPrefix == "" {
			fromAppTemplateFlagName = "fromAppTemplate"
		} else {
			fromAppTemplateFlagName = fmt.Sprintf("%v.fromAppTemplate", cmdPrefix)
		}

		fromAppTemplateFlagValue, err := cmd.Flags().GetBool(fromAppTemplateFlagName)
		if err != nil {
			return err, false
		}
		m.FromAppTemplate = &fromAppTemplateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromFileContentPayloadNameFlags(depth int, m *models.StacksSwarmStackFromFileContentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromFileContentPayloadStackFileContentFlags(depth int, m *models.StacksSwarmStackFromFileContentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackFileContentFlagName := fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	if cmd.Flags().Changed(stackFileContentFlagName) {

		var stackFileContentFlagName string
		if cmdPrefix == "" {
			stackFileContentFlagName = "stackFileContent"
		} else {
			stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
		}

		stackFileContentFlagValue, err := cmd.Flags().GetString(stackFileContentFlagName)
		if err != nil {
			return err, false
		}
		m.StackFileContent = &stackFileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromFileContentPayloadSwarmIDFlags(depth int, m *models.StacksSwarmStackFromFileContentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	swarmIdFlagName := fmt.Sprintf("%v.swarmID", cmdPrefix)
	if cmd.Flags().Changed(swarmIdFlagName) {

		var swarmIdFlagName string
		if cmdPrefix == "" {
			swarmIdFlagName = "swarmID"
		} else {
			swarmIdFlagName = fmt.Sprintf("%v.swarmID", cmdPrefix)
		}

		swarmIdFlagValue, err := cmd.Flags().GetString(swarmIdFlagName)
		if err != nil {
			return err, false
		}
		m.SwarmID = &swarmIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksSwarmStackFromFileContentPayloadWebhookFlags(depth int, m *models.StacksSwarmStackFromFileContentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webhookFlagName := fmt.Sprintf("%v.webhook", cmdPrefix)
	if cmd.Flags().Changed(webhookFlagName) {

		var webhookFlagName string
		if cmdPrefix == "" {
			webhookFlagName = "webhook"
		} else {
			webhookFlagName = fmt.Sprintf("%v.webhook", cmdPrefix)
		}

		webhookFlagValue, err := cmd.Flags().GetString(webhookFlagName)
		if err != nil {
			return err, false
		}
		m.Webhook = webhookFlagValue

		retAdded = true
	}

	return nil, retAdded
}
