// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for ProvidersAzureProvisionPayload

// register flags to command
func registerModelProvidersAzureProvisionPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProvidersAzureProvisionPayloadAvailabilityZones(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadCredentialID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadDNSPrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadKubernetesVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadNetworkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadNodeCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadNodeSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadPoolName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadResourceGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadResourceGroupName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProvidersAzureProvisionPayloadTier(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProvidersAzureProvisionPayloadAvailabilityZones(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: availabilityZones []string array type is not supported by go-swagger cli yet

	return nil
}

func registerProvidersAzureProvisionPayloadCredentialID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	credentialIdDescription := `Required. CredentialID holds an ID of the credential used to create the cluster`

	var credentialIdFlagName string
	if cmdPrefix == "" {
		credentialIdFlagName = "credentialID"
	} else {
		credentialIdFlagName = fmt.Sprintf("%v.credentialID", cmdPrefix)
	}

	var credentialIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(credentialIdFlagName, credentialIdFlagDefault, credentialIdDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadDNSPrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dnsPrefixDescription := ``

	var dnsPrefixFlagName string
	if cmdPrefix == "" {
		dnsPrefixFlagName = "dnsPrefix"
	} else {
		dnsPrefixFlagName = fmt.Sprintf("%v.dnsPrefix", cmdPrefix)
	}

	var dnsPrefixFlagDefault string

	_ = cmd.PersistentFlags().String(dnsPrefixFlagName, dnsPrefixFlagDefault, dnsPrefixDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadKubernetesVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubernetesVersionDescription := `Required. `

	var kubernetesVersionFlagName string
	if cmdPrefix == "" {
		kubernetesVersionFlagName = "kubernetesVersion"
	} else {
		kubernetesVersionFlagName = fmt.Sprintf("%v.kubernetesVersion", cmdPrefix)
	}

	var kubernetesVersionFlagDefault string

	_ = cmd.PersistentFlags().String(kubernetesVersionFlagName, kubernetesVersionFlagDefault, kubernetesVersionDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metaFlagName string
	if cmdPrefix == "" {
		metaFlagName = "meta"
	} else {
		metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
	}

	if err := registerModelTypesEnvironmentMetadataFlags(depth+1, metaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProvidersAzureProvisionPayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadNetworkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	networkIdDescription := ``

	var networkIdFlagName string
	if cmdPrefix == "" {
		networkIdFlagName = "networkID"
	} else {
		networkIdFlagName = fmt.Sprintf("%v.networkID", cmdPrefix)
	}

	var networkIdFlagDefault string

	_ = cmd.PersistentFlags().String(networkIdFlagName, networkIdFlagDefault, networkIdDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadNodeCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeCountDescription := `Required. `

	var nodeCountFlagName string
	if cmdPrefix == "" {
		nodeCountFlagName = "nodeCount"
	} else {
		nodeCountFlagName = fmt.Sprintf("%v.nodeCount", cmdPrefix)
	}

	var nodeCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodeCountFlagName, nodeCountFlagDefault, nodeCountDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadNodeSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeSizeDescription := `Required. `

	var nodeSizeFlagName string
	if cmdPrefix == "" {
		nodeSizeFlagName = "nodeSize"
	} else {
		nodeSizeFlagName = fmt.Sprintf("%v.nodeSize", cmdPrefix)
	}

	var nodeSizeFlagDefault string

	_ = cmd.PersistentFlags().String(nodeSizeFlagName, nodeSizeFlagDefault, nodeSizeDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadPoolName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolNameDescription := ``

	var poolNameFlagName string
	if cmdPrefix == "" {
		poolNameFlagName = "poolName"
	} else {
		poolNameFlagName = fmt.Sprintf("%v.poolName", cmdPrefix)
	}

	var poolNameFlagDefault string

	_ = cmd.PersistentFlags().String(poolNameFlagName, poolNameFlagDefault, poolNameDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	regionDescription := `Required. `

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	var regionFlagDefault string

	_ = cmd.PersistentFlags().String(regionFlagName, regionFlagDefault, regionDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadResourceGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceGroupDescription := `Azure specific fields`

	var resourceGroupFlagName string
	if cmdPrefix == "" {
		resourceGroupFlagName = "resourceGroup"
	} else {
		resourceGroupFlagName = fmt.Sprintf("%v.resourceGroup", cmdPrefix)
	}

	var resourceGroupFlagDefault string

	_ = cmd.PersistentFlags().String(resourceGroupFlagName, resourceGroupFlagDefault, resourceGroupDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadResourceGroupName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceGroupNameDescription := ``

	var resourceGroupNameFlagName string
	if cmdPrefix == "" {
		resourceGroupNameFlagName = "resourceGroupName"
	} else {
		resourceGroupNameFlagName = fmt.Sprintf("%v.resourceGroupName", cmdPrefix)
	}

	var resourceGroupNameFlagDefault string

	_ = cmd.PersistentFlags().String(resourceGroupNameFlagName, resourceGroupNameFlagDefault, resourceGroupNameDescription)

	return nil
}

func registerProvidersAzureProvisionPayloadTier(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tierDescription := ``

	var tierFlagName string
	if cmdPrefix == "" {
		tierFlagName = "tier"
	} else {
		tierFlagName = fmt.Sprintf("%v.tier", cmdPrefix)
	}

	var tierFlagDefault string

	_ = cmd.PersistentFlags().String(tierFlagName, tierFlagDefault, tierDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProvidersAzureProvisionPayloadFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, availabilityZonesAdded := retrieveProvidersAzureProvisionPayloadAvailabilityZonesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availabilityZonesAdded

	err, credentialIdAdded := retrieveProvidersAzureProvisionPayloadCredentialIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialIdAdded

	err, dnsPrefixAdded := retrieveProvidersAzureProvisionPayloadDNSPrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsPrefixAdded

	err, kubernetesVersionAdded := retrieveProvidersAzureProvisionPayloadKubernetesVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubernetesVersionAdded

	err, metaAdded := retrieveProvidersAzureProvisionPayloadMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	err, nameAdded := retrieveProvidersAzureProvisionPayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, networkIdAdded := retrieveProvidersAzureProvisionPayloadNetworkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkIdAdded

	err, nodeCountAdded := retrieveProvidersAzureProvisionPayloadNodeCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeCountAdded

	err, nodeSizeAdded := retrieveProvidersAzureProvisionPayloadNodeSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeSizeAdded

	err, poolNameAdded := retrieveProvidersAzureProvisionPayloadPoolNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolNameAdded

	err, regionAdded := retrieveProvidersAzureProvisionPayloadRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	err, resourceGroupAdded := retrieveProvidersAzureProvisionPayloadResourceGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceGroupAdded

	err, resourceGroupNameAdded := retrieveProvidersAzureProvisionPayloadResourceGroupNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceGroupNameAdded

	err, tierAdded := retrieveProvidersAzureProvisionPayloadTierFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tierAdded

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadAvailabilityZonesFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	availabilityZonesFlagName := fmt.Sprintf("%v.availabilityZones", cmdPrefix)
	if cmd.Flags().Changed(availabilityZonesFlagName) {
		// warning: availabilityZones array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadCredentialIDFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	credentialIdFlagName := fmt.Sprintf("%v.credentialID", cmdPrefix)
	if cmd.Flags().Changed(credentialIdFlagName) {

		var credentialIdFlagName string
		if cmdPrefix == "" {
			credentialIdFlagName = "credentialID"
		} else {
			credentialIdFlagName = fmt.Sprintf("%v.credentialID", cmdPrefix)
		}

		credentialIdFlagValue, err := cmd.Flags().GetInt64(credentialIdFlagName)
		if err != nil {
			return err, false
		}
		m.CredentialID = &credentialIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadDNSPrefixFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsPrefixFlagName := fmt.Sprintf("%v.dnsPrefix", cmdPrefix)
	if cmd.Flags().Changed(dnsPrefixFlagName) {

		var dnsPrefixFlagName string
		if cmdPrefix == "" {
			dnsPrefixFlagName = "dnsPrefix"
		} else {
			dnsPrefixFlagName = fmt.Sprintf("%v.dnsPrefix", cmdPrefix)
		}

		dnsPrefixFlagValue, err := cmd.Flags().GetString(dnsPrefixFlagName)
		if err != nil {
			return err, false
		}
		m.DNSPrefix = dnsPrefixFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadKubernetesVersionFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubernetesVersionFlagName := fmt.Sprintf("%v.kubernetesVersion", cmdPrefix)
	if cmd.Flags().Changed(kubernetesVersionFlagName) {

		var kubernetesVersionFlagName string
		if cmdPrefix == "" {
			kubernetesVersionFlagName = "kubernetesVersion"
		} else {
			kubernetesVersionFlagName = fmt.Sprintf("%v.kubernetesVersion", cmdPrefix)
		}

		kubernetesVersionFlagValue, err := cmd.Flags().GetString(kubernetesVersionFlagName)
		if err != nil {
			return err, false
		}
		m.KubernetesVersion = &kubernetesVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadMetaFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {
		// info: complex object meta TypesEnvironmentMetadata is retrieved outside this Changed() block
	}
	metaFlagValue := m.Meta
	if swag.IsZero(metaFlagValue) {
		metaFlagValue = &models.TypesEnvironmentMetadata{}
	}

	err, metaAdded := retrieveModelTypesEnvironmentMetadataFlags(depth+1, metaFlagValue, metaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded
	if metaAdded {
		m.Meta = metaFlagValue
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadNameFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadNetworkIDFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkIdFlagName := fmt.Sprintf("%v.networkID", cmdPrefix)
	if cmd.Flags().Changed(networkIdFlagName) {

		var networkIdFlagName string
		if cmdPrefix == "" {
			networkIdFlagName = "networkID"
		} else {
			networkIdFlagName = fmt.Sprintf("%v.networkID", cmdPrefix)
		}

		networkIdFlagValue, err := cmd.Flags().GetString(networkIdFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkID = networkIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadNodeCountFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeCountFlagName := fmt.Sprintf("%v.nodeCount", cmdPrefix)
	if cmd.Flags().Changed(nodeCountFlagName) {

		var nodeCountFlagName string
		if cmdPrefix == "" {
			nodeCountFlagName = "nodeCount"
		} else {
			nodeCountFlagName = fmt.Sprintf("%v.nodeCount", cmdPrefix)
		}

		nodeCountFlagValue, err := cmd.Flags().GetInt64(nodeCountFlagName)
		if err != nil {
			return err, false
		}
		m.NodeCount = &nodeCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadNodeSizeFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeSizeFlagName := fmt.Sprintf("%v.nodeSize", cmdPrefix)
	if cmd.Flags().Changed(nodeSizeFlagName) {

		var nodeSizeFlagName string
		if cmdPrefix == "" {
			nodeSizeFlagName = "nodeSize"
		} else {
			nodeSizeFlagName = fmt.Sprintf("%v.nodeSize", cmdPrefix)
		}

		nodeSizeFlagValue, err := cmd.Flags().GetString(nodeSizeFlagName)
		if err != nil {
			return err, false
		}
		m.NodeSize = &nodeSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadPoolNameFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolNameFlagName := fmt.Sprintf("%v.poolName", cmdPrefix)
	if cmd.Flags().Changed(poolNameFlagName) {

		var poolNameFlagName string
		if cmdPrefix == "" {
			poolNameFlagName = "poolName"
		} else {
			poolNameFlagName = fmt.Sprintf("%v.poolName", cmdPrefix)
		}

		poolNameFlagValue, err := cmd.Flags().GetString(poolNameFlagName)
		if err != nil {
			return err, false
		}
		m.PoolName = poolNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadRegionFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {

		var regionFlagName string
		if cmdPrefix == "" {
			regionFlagName = "region"
		} else {
			regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
		}

		regionFlagValue, err := cmd.Flags().GetString(regionFlagName)
		if err != nil {
			return err, false
		}
		m.Region = &regionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadResourceGroupFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceGroupFlagName := fmt.Sprintf("%v.resourceGroup", cmdPrefix)
	if cmd.Flags().Changed(resourceGroupFlagName) {

		var resourceGroupFlagName string
		if cmdPrefix == "" {
			resourceGroupFlagName = "resourceGroup"
		} else {
			resourceGroupFlagName = fmt.Sprintf("%v.resourceGroup", cmdPrefix)
		}

		resourceGroupFlagValue, err := cmd.Flags().GetString(resourceGroupFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceGroup = resourceGroupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadResourceGroupNameFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceGroupNameFlagName := fmt.Sprintf("%v.resourceGroupName", cmdPrefix)
	if cmd.Flags().Changed(resourceGroupNameFlagName) {

		var resourceGroupNameFlagName string
		if cmdPrefix == "" {
			resourceGroupNameFlagName = "resourceGroupName"
		} else {
			resourceGroupNameFlagName = fmt.Sprintf("%v.resourceGroupName", cmdPrefix)
		}

		resourceGroupNameFlagValue, err := cmd.Flags().GetString(resourceGroupNameFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceGroupName = resourceGroupNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProvidersAzureProvisionPayloadTierFlags(depth int, m *models.ProvidersAzureProvisionPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tierFlagName := fmt.Sprintf("%v.tier", cmdPrefix)
	if cmd.Flags().Changed(tierFlagName) {

		var tierFlagName string
		if cmdPrefix == "" {
			tierFlagName = "tier"
		} else {
			tierFlagName = fmt.Sprintf("%v.tier", cmdPrefix)
		}

		tierFlagValue, err := cmd.Flags().GetString(tierFlagName)
		if err != nil {
			return err, false
		}
		m.Tier = tierFlagValue

		retAdded = true
	}

	return nil, retAdded
}
