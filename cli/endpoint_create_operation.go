// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/endpoints"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEndpointsEndpointCreateCmd returns a cmd to handle operation endpointCreate
func makeOperationEndpointsEndpointCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "EndpointCreate",
		Short: `Create a new environment(endpoint) that will be used to manage an environment(endpoint).
**Access policy**: administrator`,
		RunE: runOperationEndpointsEndpointCreate,
	}

	if err := registerOperationEndpointsEndpointCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEndpointsEndpointCreate uses cmd flags to call endpoint api
func runOperationEndpointsEndpointCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := endpoints.NewEndpointCreateParams()
	if err, _ := retrieveOperationEndpointsEndpointCreateAzureApplicationIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateAzureAuthenticationKeyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateAzureTenantIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateEdgeCheckinIntervalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateEdgeTunnelServerAddressFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateEndpointCreationTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateGpusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateGroupIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateIsEdgeDeviceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreatePublicURLFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateTLSFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateTLSCACertFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateTLSCertFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateTLSKeyFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateTLSSkipClientVerifyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateTLSSkipVerifyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateTagIDsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEndpointsEndpointCreateURLFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEndpointsEndpointCreateResult(appCli.Endpoints.EndpointCreate(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEndpointsEndpointCreateParamFlags registers all flags needed to fill params
func registerOperationEndpointsEndpointCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEndpointsEndpointCreateAzureApplicationIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateAzureAuthenticationKeyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateAzureTenantIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateEdgeCheckinIntervalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateEdgeTunnelServerAddressParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateEndpointCreationTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateGpusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateGroupIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateIsEdgeDeviceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreatePublicURLParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateTLSParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateTLSCACertFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateTLSCertFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateTLSKeyFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateTLSSkipClientVerifyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateTLSSkipVerifyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateTagIDsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEndpointsEndpointCreateURLParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEndpointsEndpointCreateAzureApplicationIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	azureApplicationIdDescription := `Azure application ID. Required if environment(endpoint) type is set to 3`

	var azureApplicationIdFlagName string
	if cmdPrefix == "" {
		azureApplicationIdFlagName = "AzureApplicationID"
	} else {
		azureApplicationIdFlagName = fmt.Sprintf("%v.AzureApplicationID", cmdPrefix)
	}

	var azureApplicationIdFlagDefault string

	_ = cmd.PersistentFlags().String(azureApplicationIdFlagName, azureApplicationIdFlagDefault, azureApplicationIdDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateAzureAuthenticationKeyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	azureAuthenticationKeyDescription := `Azure authentication key. Required if environment(endpoint) type is set to 3`

	var azureAuthenticationKeyFlagName string
	if cmdPrefix == "" {
		azureAuthenticationKeyFlagName = "AzureAuthenticationKey"
	} else {
		azureAuthenticationKeyFlagName = fmt.Sprintf("%v.AzureAuthenticationKey", cmdPrefix)
	}

	var azureAuthenticationKeyFlagDefault string

	_ = cmd.PersistentFlags().String(azureAuthenticationKeyFlagName, azureAuthenticationKeyFlagDefault, azureAuthenticationKeyDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateAzureTenantIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	azureTenantIdDescription := `Azure tenant ID. Required if environment(endpoint) type is set to 3`

	var azureTenantIdFlagName string
	if cmdPrefix == "" {
		azureTenantIdFlagName = "AzureTenantID"
	} else {
		azureTenantIdFlagName = fmt.Sprintf("%v.AzureTenantID", cmdPrefix)
	}

	var azureTenantIdFlagDefault string

	_ = cmd.PersistentFlags().String(azureTenantIdFlagName, azureTenantIdFlagDefault, azureTenantIdDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateEdgeCheckinIntervalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	edgeCheckinIntervalDescription := `The check in interval for edge agent (in seconds)`

	var edgeCheckinIntervalFlagName string
	if cmdPrefix == "" {
		edgeCheckinIntervalFlagName = "EdgeCheckinInterval"
	} else {
		edgeCheckinIntervalFlagName = fmt.Sprintf("%v.EdgeCheckinInterval", cmdPrefix)
	}

	var edgeCheckinIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeCheckinIntervalFlagName, edgeCheckinIntervalFlagDefault, edgeCheckinIntervalDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateEdgeTunnelServerAddressParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	edgeTunnelServerAddressDescription := `Required. URL or IP address that will be used to establish a reverse tunnel`

	var edgeTunnelServerAddressFlagName string
	if cmdPrefix == "" {
		edgeTunnelServerAddressFlagName = "EdgeTunnelServerAddress"
	} else {
		edgeTunnelServerAddressFlagName = fmt.Sprintf("%v.EdgeTunnelServerAddress", cmdPrefix)
	}

	var edgeTunnelServerAddressFlagDefault string

	_ = cmd.PersistentFlags().String(edgeTunnelServerAddressFlagName, edgeTunnelServerAddressFlagDefault, edgeTunnelServerAddressDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateEndpointCreationTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endpointCreationTypeDescription := `Required. Environment(Endpoint) type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment`

	var endpointCreationTypeFlagName string
	if cmdPrefix == "" {
		endpointCreationTypeFlagName = "EndpointCreationType"
	} else {
		endpointCreationTypeFlagName = fmt.Sprintf("%v.EndpointCreationType", cmdPrefix)
	}

	var endpointCreationTypeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointCreationTypeFlagName, endpointCreationTypeFlagDefault, endpointCreationTypeDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateGpusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	gpusDescription := `List of GPUs`

	var gpusFlagName string
	if cmdPrefix == "" {
		gpusFlagName = "Gpus"
	} else {
		gpusFlagName = fmt.Sprintf("%v.Gpus", cmdPrefix)
	}

	var gpusFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(gpusFlagName, gpusFlagDefault, gpusDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateGroupIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	groupIdDescription := `Environment(Endpoint) group identifier. If not specified will default to 1 (unassigned).`

	var groupIdFlagName string
	if cmdPrefix == "" {
		groupIdFlagName = "GroupID"
	} else {
		groupIdFlagName = fmt.Sprintf("%v.GroupID", cmdPrefix)
	}

	var groupIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(groupIdFlagName, groupIdFlagDefault, groupIdDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateIsEdgeDeviceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	isEdgeDeviceDescription := `Is Edge Device`

	var isEdgeDeviceFlagName string
	if cmdPrefix == "" {
		isEdgeDeviceFlagName = "IsEdgeDevice"
	} else {
		isEdgeDeviceFlagName = fmt.Sprintf("%v.IsEdgeDevice", cmdPrefix)
	}

	var isEdgeDeviceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isEdgeDeviceFlagName, isEdgeDeviceFlagDefault, isEdgeDeviceDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. Name that will be used to identify this environment(endpoint) (example: my-environment)`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationEndpointsEndpointCreatePublicURLParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	publicUrlDescription := `URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)`

	var publicUrlFlagName string
	if cmdPrefix == "" {
		publicUrlFlagName = "PublicURL"
	} else {
		publicUrlFlagName = fmt.Sprintf("%v.PublicURL", cmdPrefix)
	}

	var publicUrlFlagDefault string

	_ = cmd.PersistentFlags().String(publicUrlFlagName, publicUrlFlagDefault, publicUrlDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateTLSParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tlsDescription := `Require TLS to connect against this environment(endpoint)`

	var tlsFlagName string
	if cmdPrefix == "" {
		tlsFlagName = "TLS"
	} else {
		tlsFlagName = fmt.Sprintf("%v.TLS", cmdPrefix)
	}

	var tlsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsFlagName, tlsFlagDefault, tlsDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateTLSCACertFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: primitive TLSCACertFile io.ReadCloser is not supported by go-swagger cli yet

	return nil
}
func registerOperationEndpointsEndpointCreateTLSCertFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: primitive TLSCertFile io.ReadCloser is not supported by go-swagger cli yet

	return nil
}
func registerOperationEndpointsEndpointCreateTLSKeyFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: primitive TLSKeyFile io.ReadCloser is not supported by go-swagger cli yet

	return nil
}
func registerOperationEndpointsEndpointCreateTLSSkipClientVerifyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tlsSkipClientVerifyDescription := `Skip client verification when using TLS`

	var tlsSkipClientVerifyFlagName string
	if cmdPrefix == "" {
		tlsSkipClientVerifyFlagName = "TLSSkipClientVerify"
	} else {
		tlsSkipClientVerifyFlagName = fmt.Sprintf("%v.TLSSkipClientVerify", cmdPrefix)
	}

	var tlsSkipClientVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsSkipClientVerifyFlagName, tlsSkipClientVerifyFlagDefault, tlsSkipClientVerifyDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateTLSSkipVerifyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tlsSkipVerifyDescription := `Skip server verification when using TLS`

	var tlsSkipVerifyFlagName string
	if cmdPrefix == "" {
		tlsSkipVerifyFlagName = "TLSSkipVerify"
	} else {
		tlsSkipVerifyFlagName = fmt.Sprintf("%v.TLSSkipVerify", cmdPrefix)
	}

	var tlsSkipVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsSkipVerifyFlagName, tlsSkipVerifyFlagDefault, tlsSkipVerifyDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateTagIDsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tagIDsDescription := `List of tag identifiers to which this environment(endpoint) is associated`

	var tagIDsFlagName string
	if cmdPrefix == "" {
		tagIDsFlagName = "TagIDs"
	} else {
		tagIDsFlagName = fmt.Sprintf("%v.TagIDs", cmdPrefix)
	}

	var tagIDsFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(tagIDsFlagName, tagIDsFlagDefault, tagIDsDescription)

	return nil
}
func registerOperationEndpointsEndpointCreateURLParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	urlDescription := `URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine)`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "URL"
	} else {
		urlFlagName = fmt.Sprintf("%v.URL", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

func retrieveOperationEndpointsEndpointCreateAzureApplicationIDFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("AzureApplicationID") {

		var azureApplicationIdFlagName string
		if cmdPrefix == "" {
			azureApplicationIdFlagName = "AzureApplicationID"
		} else {
			azureApplicationIdFlagName = fmt.Sprintf("%v.AzureApplicationID", cmdPrefix)
		}

		azureApplicationIdFlagValue, err := cmd.Flags().GetString(azureApplicationIdFlagName)
		if err != nil {
			return err, false
		}
		m.AzureApplicationID = &azureApplicationIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateAzureAuthenticationKeyFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("AzureAuthenticationKey") {

		var azureAuthenticationKeyFlagName string
		if cmdPrefix == "" {
			azureAuthenticationKeyFlagName = "AzureAuthenticationKey"
		} else {
			azureAuthenticationKeyFlagName = fmt.Sprintf("%v.AzureAuthenticationKey", cmdPrefix)
		}

		azureAuthenticationKeyFlagValue, err := cmd.Flags().GetString(azureAuthenticationKeyFlagName)
		if err != nil {
			return err, false
		}
		m.AzureAuthenticationKey = &azureAuthenticationKeyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateAzureTenantIDFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("AzureTenantID") {

		var azureTenantIdFlagName string
		if cmdPrefix == "" {
			azureTenantIdFlagName = "AzureTenantID"
		} else {
			azureTenantIdFlagName = fmt.Sprintf("%v.AzureTenantID", cmdPrefix)
		}

		azureTenantIdFlagValue, err := cmd.Flags().GetString(azureTenantIdFlagName)
		if err != nil {
			return err, false
		}
		m.AzureTenantID = &azureTenantIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateEdgeCheckinIntervalFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("EdgeCheckinInterval") {

		var edgeCheckinIntervalFlagName string
		if cmdPrefix == "" {
			edgeCheckinIntervalFlagName = "EdgeCheckinInterval"
		} else {
			edgeCheckinIntervalFlagName = fmt.Sprintf("%v.EdgeCheckinInterval", cmdPrefix)
		}

		edgeCheckinIntervalFlagValue, err := cmd.Flags().GetInt64(edgeCheckinIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeCheckinInterval = &edgeCheckinIntervalFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateEdgeTunnelServerAddressFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("EdgeTunnelServerAddress") {

		var edgeTunnelServerAddressFlagName string
		if cmdPrefix == "" {
			edgeTunnelServerAddressFlagName = "EdgeTunnelServerAddress"
		} else {
			edgeTunnelServerAddressFlagName = fmt.Sprintf("%v.EdgeTunnelServerAddress", cmdPrefix)
		}

		edgeTunnelServerAddressFlagValue, err := cmd.Flags().GetString(edgeTunnelServerAddressFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeTunnelServerAddress = edgeTunnelServerAddressFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateEndpointCreationTypeFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("EndpointCreationType") {

		var endpointCreationTypeFlagName string
		if cmdPrefix == "" {
			endpointCreationTypeFlagName = "EndpointCreationType"
		} else {
			endpointCreationTypeFlagName = fmt.Sprintf("%v.EndpointCreationType", cmdPrefix)
		}

		endpointCreationTypeFlagValue, err := cmd.Flags().GetInt64(endpointCreationTypeFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointCreationType = endpointCreationTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateGpusFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Gpus") {

		var gpusFlagName string
		if cmdPrefix == "" {
			gpusFlagName = "Gpus"
		} else {
			gpusFlagName = fmt.Sprintf("%v.Gpus", cmdPrefix)
		}

		gpusFlagValues, err := cmd.Flags().GetStringSlice(gpusFlagName)
		if err != nil {
			return err, false
		}
		m.Gpus = gpusFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateGroupIDFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("GroupID") {

		var groupIdFlagName string
		if cmdPrefix == "" {
			groupIdFlagName = "GroupID"
		} else {
			groupIdFlagName = fmt.Sprintf("%v.GroupID", cmdPrefix)
		}

		groupIdFlagValue, err := cmd.Flags().GetInt64(groupIdFlagName)
		if err != nil {
			return err, false
		}
		m.GroupID = &groupIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateIsEdgeDeviceFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("IsEdgeDevice") {

		var isEdgeDeviceFlagName string
		if cmdPrefix == "" {
			isEdgeDeviceFlagName = "IsEdgeDevice"
		} else {
			isEdgeDeviceFlagName = fmt.Sprintf("%v.IsEdgeDevice", cmdPrefix)
		}

		isEdgeDeviceFlagValue, err := cmd.Flags().GetBool(isEdgeDeviceFlagName)
		if err != nil {
			return err, false
		}
		m.IsEdgeDevice = &isEdgeDeviceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateNameFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreatePublicURLFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("PublicURL") {

		var publicUrlFlagName string
		if cmdPrefix == "" {
			publicUrlFlagName = "PublicURL"
		} else {
			publicUrlFlagName = fmt.Sprintf("%v.PublicURL", cmdPrefix)
		}

		publicUrlFlagValue, err := cmd.Flags().GetString(publicUrlFlagName)
		if err != nil {
			return err, false
		}
		m.PublicURL = &publicUrlFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateTLSFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("TLS") {

		var tlsFlagName string
		if cmdPrefix == "" {
			tlsFlagName = "TLS"
		} else {
			tlsFlagName = fmt.Sprintf("%v.TLS", cmdPrefix)
		}

		tlsFlagValue, err := cmd.Flags().GetBool(tlsFlagName)
		if err != nil {
			return err, false
		}
		m.TLS = &tlsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateTLSCACertFileFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("TLSCACertFile") {

		// warning: primitive TLSCACertFile io.ReadCloser is not supported by go-swagger cli yet

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateTLSCertFileFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("TLSCertFile") {

		// warning: primitive TLSCertFile io.ReadCloser is not supported by go-swagger cli yet

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateTLSKeyFileFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("TLSKeyFile") {

		// warning: primitive TLSKeyFile io.ReadCloser is not supported by go-swagger cli yet

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateTLSSkipClientVerifyFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("TLSSkipClientVerify") {

		var tlsSkipClientVerifyFlagName string
		if cmdPrefix == "" {
			tlsSkipClientVerifyFlagName = "TLSSkipClientVerify"
		} else {
			tlsSkipClientVerifyFlagName = fmt.Sprintf("%v.TLSSkipClientVerify", cmdPrefix)
		}

		tlsSkipClientVerifyFlagValue, err := cmd.Flags().GetBool(tlsSkipClientVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.TLSSkipClientVerify = &tlsSkipClientVerifyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateTLSSkipVerifyFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("TLSSkipVerify") {

		var tlsSkipVerifyFlagName string
		if cmdPrefix == "" {
			tlsSkipVerifyFlagName = "TLSSkipVerify"
		} else {
			tlsSkipVerifyFlagName = fmt.Sprintf("%v.TLSSkipVerify", cmdPrefix)
		}

		tlsSkipVerifyFlagValue, err := cmd.Flags().GetBool(tlsSkipVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.TLSSkipVerify = &tlsSkipVerifyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateTagIDsFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("TagIDs") {

		var tagIDsFlagName string
		if cmdPrefix == "" {
			tagIDsFlagName = "TagIDs"
		} else {
			tagIDsFlagName = fmt.Sprintf("%v.TagIDs", cmdPrefix)
		}

		tagIDsFlagValues, err := cmd.Flags().GetInt64Slice(tagIDsFlagName)
		if err != nil {
			return err, false
		}
		m.TagIDs = tagIDsFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEndpointsEndpointCreateURLFlag(m *endpoints.EndpointCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("URL") {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "URL"
		} else {
			urlFlagName = fmt.Sprintf("%v.URL", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = &urlFlagValue

	}
	return nil, retAdded
}

// parseOperationEndpointsEndpointCreateResult parses request result and return the string content
func parseOperationEndpointsEndpointCreateResult(resp0 *endpoints.EndpointCreateOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*endpoints.EndpointCreateOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning endpointCreateBadRequest is not supported

		// Non schema case: warning endpointCreateInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
