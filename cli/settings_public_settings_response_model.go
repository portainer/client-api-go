// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for SettingsPublicSettingsResponse

// register flags to command
func registerModelSettingsPublicSettingsResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSettingsPublicSettingsResponseAuthenticationMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseCustomLoginBanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseEnableEdgeComputeFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseEnableTelemetry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseGlobalDeploymentOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseLogoURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseOAuthHideInternalAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseOAuthLoginURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseOAuthLogoutURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseRequiredPasswordLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseShowKomposeBuildOption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseTeamSync(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseDefaultRegistry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseEdge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseIsAMTEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseIsFDOEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseKubeconfigExpiry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsPublicSettingsResponseAuthenticationMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationMethodDescription := `Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth`

	var authenticationMethodFlagName string
	if cmdPrefix == "" {
		authenticationMethodFlagName = "AuthenticationMethod"
	} else {
		authenticationMethodFlagName = fmt.Sprintf("%v.AuthenticationMethod", cmdPrefix)
	}

	var authenticationMethodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(authenticationMethodFlagName, authenticationMethodFlagDefault, authenticationMethodDescription)

	return nil
}

func registerSettingsPublicSettingsResponseCustomLoginBanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customLoginBannerDescription := `The content in plaintext used to display in the login page. Will hide when value is empty string`

	var customLoginBannerFlagName string
	if cmdPrefix == "" {
		customLoginBannerFlagName = "CustomLoginBanner"
	} else {
		customLoginBannerFlagName = fmt.Sprintf("%v.CustomLoginBanner", cmdPrefix)
	}

	var customLoginBannerFlagDefault string

	_ = cmd.PersistentFlags().String(customLoginBannerFlagName, customLoginBannerFlagDefault, customLoginBannerDescription)

	return nil
}

func registerSettingsPublicSettingsResponseEnableEdgeComputeFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableEdgeComputeFeaturesDescription := `Whether edge compute features are enabled`

	var enableEdgeComputeFeaturesFlagName string
	if cmdPrefix == "" {
		enableEdgeComputeFeaturesFlagName = "EnableEdgeComputeFeatures"
	} else {
		enableEdgeComputeFeaturesFlagName = fmt.Sprintf("%v.EnableEdgeComputeFeatures", cmdPrefix)
	}

	var enableEdgeComputeFeaturesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableEdgeComputeFeaturesFlagName, enableEdgeComputeFeaturesFlagDefault, enableEdgeComputeFeaturesDescription)

	return nil
}

func registerSettingsPublicSettingsResponseEnableTelemetry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableTelemetryDescription := `Whether telemetry is enabled`

	var enableTelemetryFlagName string
	if cmdPrefix == "" {
		enableTelemetryFlagName = "EnableTelemetry"
	} else {
		enableTelemetryFlagName = fmt.Sprintf("%v.EnableTelemetry", cmdPrefix)
	}

	var enableTelemetryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableTelemetryFlagName, enableTelemetryFlagDefault, enableTelemetryDescription)

	return nil
}

func registerSettingsPublicSettingsResponseFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Features map[string]bool map type is not supported by go-swagger cli yet

	return nil
}

func registerSettingsPublicSettingsResponseGlobalDeploymentOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var globalDeploymentOptionsFlagName string
	if cmdPrefix == "" {
		globalDeploymentOptionsFlagName = "GlobalDeploymentOptions"
	} else {
		globalDeploymentOptionsFlagName = fmt.Sprintf("%v.GlobalDeploymentOptions", cmdPrefix)
	}

	if err := registerModelPortainereeGlobalDeploymentOptionsFlags(depth+1, globalDeploymentOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsPublicSettingsResponseLogoURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logoUrlDescription := `URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string`

	var logoUrlFlagName string
	if cmdPrefix == "" {
		logoUrlFlagName = "LogoURL"
	} else {
		logoUrlFlagName = fmt.Sprintf("%v.LogoURL", cmdPrefix)
	}

	var logoUrlFlagDefault string

	_ = cmd.PersistentFlags().String(logoUrlFlagName, logoUrlFlagDefault, logoUrlDescription)

	return nil
}

func registerSettingsPublicSettingsResponseOAuthHideInternalAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oAuthHideInternalAuthDescription := `Whether portainer internal auth view will be hidden`

	var oAuthHideInternalAuthFlagName string
	if cmdPrefix == "" {
		oAuthHideInternalAuthFlagName = "OAuthHideInternalAuth"
	} else {
		oAuthHideInternalAuthFlagName = fmt.Sprintf("%v.OAuthHideInternalAuth", cmdPrefix)
	}

	var oAuthHideInternalAuthFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oAuthHideInternalAuthFlagName, oAuthHideInternalAuthFlagDefault, oAuthHideInternalAuthDescription)

	return nil
}

func registerSettingsPublicSettingsResponseOAuthLoginURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oAuthLoginUriDescription := `The URL used for oauth login`

	var oAuthLoginUriFlagName string
	if cmdPrefix == "" {
		oAuthLoginUriFlagName = "OAuthLoginURI"
	} else {
		oAuthLoginUriFlagName = fmt.Sprintf("%v.OAuthLoginURI", cmdPrefix)
	}

	var oAuthLoginUriFlagDefault string

	_ = cmd.PersistentFlags().String(oAuthLoginUriFlagName, oAuthLoginUriFlagDefault, oAuthLoginUriDescription)

	return nil
}

func registerSettingsPublicSettingsResponseOAuthLogoutURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oAuthLogoutUriDescription := `The URL used for oauth logout`

	var oAuthLogoutUriFlagName string
	if cmdPrefix == "" {
		oAuthLogoutUriFlagName = "OAuthLogoutURI"
	} else {
		oAuthLogoutUriFlagName = fmt.Sprintf("%v.OAuthLogoutURI", cmdPrefix)
	}

	var oAuthLogoutUriFlagDefault string

	_ = cmd.PersistentFlags().String(oAuthLogoutUriFlagName, oAuthLogoutUriFlagDefault, oAuthLogoutUriDescription)

	return nil
}

func registerSettingsPublicSettingsResponseRequiredPasswordLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	requiredPasswordLengthDescription := `The minimum required length for a password of any user when using internal auth mode`

	var requiredPasswordLengthFlagName string
	if cmdPrefix == "" {
		requiredPasswordLengthFlagName = "RequiredPasswordLength"
	} else {
		requiredPasswordLengthFlagName = fmt.Sprintf("%v.RequiredPasswordLength", cmdPrefix)
	}

	var requiredPasswordLengthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(requiredPasswordLengthFlagName, requiredPasswordLengthFlagDefault, requiredPasswordLengthDescription)

	return nil
}

func registerSettingsPublicSettingsResponseShowKomposeBuildOption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	showKomposeBuildOptionDescription := `Show the Kompose build option (discontinued in 2.18)`

	var showKomposeBuildOptionFlagName string
	if cmdPrefix == "" {
		showKomposeBuildOptionFlagName = "ShowKomposeBuildOption"
	} else {
		showKomposeBuildOptionFlagName = fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
	}

	var showKomposeBuildOptionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(showKomposeBuildOptionFlagName, showKomposeBuildOptionFlagDefault, showKomposeBuildOptionDescription)

	return nil
}

func registerSettingsPublicSettingsResponseTeamSync(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	teamSyncDescription := `Whether team sync is enabled`

	var teamSyncFlagName string
	if cmdPrefix == "" {
		teamSyncFlagName = "TeamSync"
	} else {
		teamSyncFlagName = fmt.Sprintf("%v.TeamSync", cmdPrefix)
	}

	var teamSyncFlagDefault bool

	_ = cmd.PersistentFlags().Bool(teamSyncFlagName, teamSyncFlagDefault, teamSyncDescription)

	return nil
}

func registerSettingsPublicSettingsResponseDefaultRegistry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var defaultRegistryFlagName string
	if cmdPrefix == "" {
		defaultRegistryFlagName = "defaultRegistry"
	} else {
		defaultRegistryFlagName = fmt.Sprintf("%v.defaultRegistry", cmdPrefix)
	}

	if err := registerModelSettingsPublicSettingsResponseDefaultRegistryFlags(depth+1, defaultRegistryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsPublicSettingsResponseEdge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var edgeFlagName string
	if cmdPrefix == "" {
		edgeFlagName = "edge"
	} else {
		edgeFlagName = fmt.Sprintf("%v.edge", cmdPrefix)
	}

	if err := registerModelSettingsPublicSettingsResponseEdgeFlags(depth+1, edgeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsPublicSettingsResponseIsAMTEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isAMTEnabledDescription := `Whether AMT is enabled`

	var isAMTEnabledFlagName string
	if cmdPrefix == "" {
		isAMTEnabledFlagName = "isAMTEnabled"
	} else {
		isAMTEnabledFlagName = fmt.Sprintf("%v.isAMTEnabled", cmdPrefix)
	}

	var isAMTEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isAMTEnabledFlagName, isAMTEnabledFlagDefault, isAMTEnabledDescription)

	return nil
}

func registerSettingsPublicSettingsResponseIsFDOEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isFDOEnabledDescription := `Whether FDO is enabled`

	var isFDOEnabledFlagName string
	if cmdPrefix == "" {
		isFDOEnabledFlagName = "isFDOEnabled"
	} else {
		isFDOEnabledFlagName = fmt.Sprintf("%v.isFDOEnabled", cmdPrefix)
	}

	var isFDOEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isFDOEnabledFlagName, isFDOEnabledFlagDefault, isFDOEnabledDescription)

	return nil
}

func registerSettingsPublicSettingsResponseKubeconfigExpiry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kubeconfigExpiryDescription := `The expiry of a Kubeconfig`

	var kubeconfigExpiryFlagName string
	if cmdPrefix == "" {
		kubeconfigExpiryFlagName = "kubeconfigExpiry"
	} else {
		kubeconfigExpiryFlagName = fmt.Sprintf("%v.kubeconfigExpiry", cmdPrefix)
	}

	var kubeconfigExpiryFlagDefault string = "0"

	_ = cmd.PersistentFlags().String(kubeconfigExpiryFlagName, kubeconfigExpiryFlagDefault, kubeconfigExpiryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSettingsPublicSettingsResponseFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authenticationMethodAdded := retrieveSettingsPublicSettingsResponseAuthenticationMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationMethodAdded

	err, customLoginBannerAdded := retrieveSettingsPublicSettingsResponseCustomLoginBannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customLoginBannerAdded

	err, enableEdgeComputeFeaturesAdded := retrieveSettingsPublicSettingsResponseEnableEdgeComputeFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableEdgeComputeFeaturesAdded

	err, enableTelemetryAdded := retrieveSettingsPublicSettingsResponseEnableTelemetryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableTelemetryAdded

	err, featuresAdded := retrieveSettingsPublicSettingsResponseFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded

	err, globalDeploymentOptionsAdded := retrieveSettingsPublicSettingsResponseGlobalDeploymentOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalDeploymentOptionsAdded

	err, logoUrlAdded := retrieveSettingsPublicSettingsResponseLogoURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoUrlAdded

	err, oAuthHideInternalAuthAdded := retrieveSettingsPublicSettingsResponseOAuthHideInternalAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthHideInternalAuthAdded

	err, oAuthLoginUriAdded := retrieveSettingsPublicSettingsResponseOAuthLoginURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthLoginUriAdded

	err, oAuthLogoutUriAdded := retrieveSettingsPublicSettingsResponseOAuthLogoutURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oAuthLogoutUriAdded

	err, requiredPasswordLengthAdded := retrieveSettingsPublicSettingsResponseRequiredPasswordLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || requiredPasswordLengthAdded

	err, showKomposeBuildOptionAdded := retrieveSettingsPublicSettingsResponseShowKomposeBuildOptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || showKomposeBuildOptionAdded

	err, teamSyncAdded := retrieveSettingsPublicSettingsResponseTeamSyncFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamSyncAdded

	err, defaultRegistryAdded := retrieveSettingsPublicSettingsResponseDefaultRegistryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultRegistryAdded

	err, edgeAdded := retrieveSettingsPublicSettingsResponseEdgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded

	err, isAMTEnabledAdded := retrieveSettingsPublicSettingsResponseIsAMTEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isAMTEnabledAdded

	err, isFDOEnabledAdded := retrieveSettingsPublicSettingsResponseIsFDOEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isFDOEnabledAdded

	err, kubeconfigExpiryAdded := retrieveSettingsPublicSettingsResponseKubeconfigExpiryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubeconfigExpiryAdded

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseAuthenticationMethodFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationMethodFlagName := fmt.Sprintf("%v.AuthenticationMethod", cmdPrefix)
	if cmd.Flags().Changed(authenticationMethodFlagName) {

		var authenticationMethodFlagName string
		if cmdPrefix == "" {
			authenticationMethodFlagName = "AuthenticationMethod"
		} else {
			authenticationMethodFlagName = fmt.Sprintf("%v.AuthenticationMethod", cmdPrefix)
		}

		authenticationMethodFlagValue, err := cmd.Flags().GetInt64(authenticationMethodFlagName)
		if err != nil {
			return err, false
		}
		m.AuthenticationMethod = authenticationMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseCustomLoginBannerFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customLoginBannerFlagName := fmt.Sprintf("%v.CustomLoginBanner", cmdPrefix)
	if cmd.Flags().Changed(customLoginBannerFlagName) {

		var customLoginBannerFlagName string
		if cmdPrefix == "" {
			customLoginBannerFlagName = "CustomLoginBanner"
		} else {
			customLoginBannerFlagName = fmt.Sprintf("%v.CustomLoginBanner", cmdPrefix)
		}

		customLoginBannerFlagValue, err := cmd.Flags().GetString(customLoginBannerFlagName)
		if err != nil {
			return err, false
		}
		m.CustomLoginBanner = customLoginBannerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEnableEdgeComputeFeaturesFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableEdgeComputeFeaturesFlagName := fmt.Sprintf("%v.EnableEdgeComputeFeatures", cmdPrefix)
	if cmd.Flags().Changed(enableEdgeComputeFeaturesFlagName) {

		var enableEdgeComputeFeaturesFlagName string
		if cmdPrefix == "" {
			enableEdgeComputeFeaturesFlagName = "EnableEdgeComputeFeatures"
		} else {
			enableEdgeComputeFeaturesFlagName = fmt.Sprintf("%v.EnableEdgeComputeFeatures", cmdPrefix)
		}

		enableEdgeComputeFeaturesFlagValue, err := cmd.Flags().GetBool(enableEdgeComputeFeaturesFlagName)
		if err != nil {
			return err, false
		}
		m.EnableEdgeComputeFeatures = &enableEdgeComputeFeaturesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEnableTelemetryFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableTelemetryFlagName := fmt.Sprintf("%v.EnableTelemetry", cmdPrefix)
	if cmd.Flags().Changed(enableTelemetryFlagName) {

		var enableTelemetryFlagName string
		if cmdPrefix == "" {
			enableTelemetryFlagName = "EnableTelemetry"
		} else {
			enableTelemetryFlagName = fmt.Sprintf("%v.EnableTelemetry", cmdPrefix)
		}

		enableTelemetryFlagValue, err := cmd.Flags().GetBool(enableTelemetryFlagName)
		if err != nil {
			return err, false
		}
		m.EnableTelemetry = &enableTelemetryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseFeaturesFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featuresFlagName := fmt.Sprintf("%v.Features", cmdPrefix)
	if cmd.Flags().Changed(featuresFlagName) {
		// warning: Features map type map[string]bool is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseGlobalDeploymentOptionsFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalDeploymentOptionsFlagName := fmt.Sprintf("%v.GlobalDeploymentOptions", cmdPrefix)
	if cmd.Flags().Changed(globalDeploymentOptionsFlagName) {
		// info: complex object GlobalDeploymentOptions PortainereeGlobalDeploymentOptions is retrieved outside this Changed() block
	}
	globalDeploymentOptionsFlagValue := m.GlobalDeploymentOptions
	if swag.IsZero(globalDeploymentOptionsFlagValue) {
		globalDeploymentOptionsFlagValue = &models.PortainereeGlobalDeploymentOptions{}
	}

	err, globalDeploymentOptionsAdded := retrieveModelPortainereeGlobalDeploymentOptionsFlags(depth+1, globalDeploymentOptionsFlagValue, globalDeploymentOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalDeploymentOptionsAdded
	if globalDeploymentOptionsAdded {
		m.GlobalDeploymentOptions = globalDeploymentOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseLogoURLFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logoUrlFlagName := fmt.Sprintf("%v.LogoURL", cmdPrefix)
	if cmd.Flags().Changed(logoUrlFlagName) {

		var logoUrlFlagName string
		if cmdPrefix == "" {
			logoUrlFlagName = "LogoURL"
		} else {
			logoUrlFlagName = fmt.Sprintf("%v.LogoURL", cmdPrefix)
		}

		logoUrlFlagValue, err := cmd.Flags().GetString(logoUrlFlagName)
		if err != nil {
			return err, false
		}
		m.LogoURL = logoUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseOAuthHideInternalAuthFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthHideInternalAuthFlagName := fmt.Sprintf("%v.OAuthHideInternalAuth", cmdPrefix)
	if cmd.Flags().Changed(oAuthHideInternalAuthFlagName) {

		var oAuthHideInternalAuthFlagName string
		if cmdPrefix == "" {
			oAuthHideInternalAuthFlagName = "OAuthHideInternalAuth"
		} else {
			oAuthHideInternalAuthFlagName = fmt.Sprintf("%v.OAuthHideInternalAuth", cmdPrefix)
		}

		oAuthHideInternalAuthFlagValue, err := cmd.Flags().GetBool(oAuthHideInternalAuthFlagName)
		if err != nil {
			return err, false
		}
		m.OAuthHideInternalAuth = &oAuthHideInternalAuthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseOAuthLoginURIFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthLoginUriFlagName := fmt.Sprintf("%v.OAuthLoginURI", cmdPrefix)
	if cmd.Flags().Changed(oAuthLoginUriFlagName) {

		var oAuthLoginUriFlagName string
		if cmdPrefix == "" {
			oAuthLoginUriFlagName = "OAuthLoginURI"
		} else {
			oAuthLoginUriFlagName = fmt.Sprintf("%v.OAuthLoginURI", cmdPrefix)
		}

		oAuthLoginUriFlagValue, err := cmd.Flags().GetString(oAuthLoginUriFlagName)
		if err != nil {
			return err, false
		}
		m.OAuthLoginURI = oAuthLoginUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseOAuthLogoutURIFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oAuthLogoutUriFlagName := fmt.Sprintf("%v.OAuthLogoutURI", cmdPrefix)
	if cmd.Flags().Changed(oAuthLogoutUriFlagName) {

		var oAuthLogoutUriFlagName string
		if cmdPrefix == "" {
			oAuthLogoutUriFlagName = "OAuthLogoutURI"
		} else {
			oAuthLogoutUriFlagName = fmt.Sprintf("%v.OAuthLogoutURI", cmdPrefix)
		}

		oAuthLogoutUriFlagValue, err := cmd.Flags().GetString(oAuthLogoutUriFlagName)
		if err != nil {
			return err, false
		}
		m.OAuthLogoutURI = oAuthLogoutUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseRequiredPasswordLengthFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	requiredPasswordLengthFlagName := fmt.Sprintf("%v.RequiredPasswordLength", cmdPrefix)
	if cmd.Flags().Changed(requiredPasswordLengthFlagName) {

		var requiredPasswordLengthFlagName string
		if cmdPrefix == "" {
			requiredPasswordLengthFlagName = "RequiredPasswordLength"
		} else {
			requiredPasswordLengthFlagName = fmt.Sprintf("%v.RequiredPasswordLength", cmdPrefix)
		}

		requiredPasswordLengthFlagValue, err := cmd.Flags().GetInt64(requiredPasswordLengthFlagName)
		if err != nil {
			return err, false
		}
		m.RequiredPasswordLength = requiredPasswordLengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseShowKomposeBuildOptionFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	showKomposeBuildOptionFlagName := fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
	if cmd.Flags().Changed(showKomposeBuildOptionFlagName) {

		var showKomposeBuildOptionFlagName string
		if cmdPrefix == "" {
			showKomposeBuildOptionFlagName = "ShowKomposeBuildOption"
		} else {
			showKomposeBuildOptionFlagName = fmt.Sprintf("%v.ShowKomposeBuildOption", cmdPrefix)
		}

		showKomposeBuildOptionFlagValue, err := cmd.Flags().GetBool(showKomposeBuildOptionFlagName)
		if err != nil {
			return err, false
		}
		m.ShowKomposeBuildOption = &showKomposeBuildOptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseTeamSyncFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamSyncFlagName := fmt.Sprintf("%v.TeamSync", cmdPrefix)
	if cmd.Flags().Changed(teamSyncFlagName) {

		var teamSyncFlagName string
		if cmdPrefix == "" {
			teamSyncFlagName = "TeamSync"
		} else {
			teamSyncFlagName = fmt.Sprintf("%v.TeamSync", cmdPrefix)
		}

		teamSyncFlagValue, err := cmd.Flags().GetBool(teamSyncFlagName)
		if err != nil {
			return err, false
		}
		m.TeamSync = &teamSyncFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseDefaultRegistryFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultRegistryFlagName := fmt.Sprintf("%v.defaultRegistry", cmdPrefix)
	if cmd.Flags().Changed(defaultRegistryFlagName) {
		// info: complex object defaultRegistry SettingsPublicSettingsResponseDefaultRegistry is retrieved outside this Changed() block
	}
	defaultRegistryFlagValue := m.DefaultRegistry
	if swag.IsZero(defaultRegistryFlagValue) {
		defaultRegistryFlagValue = &models.SettingsPublicSettingsResponseDefaultRegistry{}
	}

	err, defaultRegistryAdded := retrieveModelSettingsPublicSettingsResponseDefaultRegistryFlags(depth+1, defaultRegistryFlagValue, defaultRegistryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultRegistryAdded
	if defaultRegistryAdded {
		m.DefaultRegistry = defaultRegistryFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEdgeFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeFlagName := fmt.Sprintf("%v.edge", cmdPrefix)
	if cmd.Flags().Changed(edgeFlagName) {
		// info: complex object edge SettingsPublicSettingsResponseEdge is retrieved outside this Changed() block
	}
	edgeFlagValue := m.Edge
	if swag.IsZero(edgeFlagValue) {
		edgeFlagValue = &models.SettingsPublicSettingsResponseEdge{}
	}

	err, edgeAdded := retrieveModelSettingsPublicSettingsResponseEdgeFlags(depth+1, edgeFlagValue, edgeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded
	if edgeAdded {
		m.Edge = edgeFlagValue
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseIsAMTEnabledFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isAMTEnabledFlagName := fmt.Sprintf("%v.isAMTEnabled", cmdPrefix)
	if cmd.Flags().Changed(isAMTEnabledFlagName) {

		var isAMTEnabledFlagName string
		if cmdPrefix == "" {
			isAMTEnabledFlagName = "isAMTEnabled"
		} else {
			isAMTEnabledFlagName = fmt.Sprintf("%v.isAMTEnabled", cmdPrefix)
		}

		isAMTEnabledFlagValue, err := cmd.Flags().GetBool(isAMTEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsAMTEnabled = &isAMTEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseIsFDOEnabledFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isFDOEnabledFlagName := fmt.Sprintf("%v.isFDOEnabled", cmdPrefix)
	if cmd.Flags().Changed(isFDOEnabledFlagName) {

		var isFDOEnabledFlagName string
		if cmdPrefix == "" {
			isFDOEnabledFlagName = "isFDOEnabled"
		} else {
			isFDOEnabledFlagName = fmt.Sprintf("%v.isFDOEnabled", cmdPrefix)
		}

		isFDOEnabledFlagValue, err := cmd.Flags().GetBool(isFDOEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsFDOEnabled = &isFDOEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseKubeconfigExpiryFlags(depth int, m *models.SettingsPublicSettingsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubeconfigExpiryFlagName := fmt.Sprintf("%v.kubeconfigExpiry", cmdPrefix)
	if cmd.Flags().Changed(kubeconfigExpiryFlagName) {

		var kubeconfigExpiryFlagName string
		if cmdPrefix == "" {
			kubeconfigExpiryFlagName = "kubeconfigExpiry"
		} else {
			kubeconfigExpiryFlagName = fmt.Sprintf("%v.kubeconfigExpiry", cmdPrefix)
		}

		kubeconfigExpiryFlagValue, err := cmd.Flags().GetString(kubeconfigExpiryFlagName)
		if err != nil {
			return err, false
		}
		m.KubeconfigExpiry = &kubeconfigExpiryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SettingsPublicSettingsResponseDefaultRegistry

// register flags to command
func registerModelSettingsPublicSettingsResponseDefaultRegistryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSettingsPublicSettingsResponseDefaultRegistryHide(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsPublicSettingsResponseDefaultRegistryHide(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hideDescription := ``

	var hideFlagName string
	if cmdPrefix == "" {
		hideFlagName = "Hide"
	} else {
		hideFlagName = fmt.Sprintf("%v.Hide", cmdPrefix)
	}

	var hideFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hideFlagName, hideFlagDefault, hideDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSettingsPublicSettingsResponseDefaultRegistryFlags(depth int, m *models.SettingsPublicSettingsResponseDefaultRegistry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hideAdded := retrieveSettingsPublicSettingsResponseDefaultRegistryHideFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hideAdded

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseDefaultRegistryHideFlags(depth int, m *models.SettingsPublicSettingsResponseDefaultRegistry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hideFlagName := fmt.Sprintf("%v.Hide", cmdPrefix)
	if cmd.Flags().Changed(hideFlagName) {

		var hideFlagName string
		if cmdPrefix == "" {
			hideFlagName = "Hide"
		} else {
			hideFlagName = fmt.Sprintf("%v.Hide", cmdPrefix)
		}

		hideFlagValue, err := cmd.Flags().GetBool(hideFlagName)
		if err != nil {
			return err, false
		}
		m.Hide = hideFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SettingsPublicSettingsResponseEdge

// register flags to command
func registerModelSettingsPublicSettingsResponseEdgeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSettingsPublicSettingsResponseEdgeCommandInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseEdgePingInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseEdgeSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseEdgeAsyncMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSettingsPublicSettingsResponseEdgeCheckinInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSettingsPublicSettingsResponseEdgeCommandInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commandIntervalDescription := `The command list interval for edge agent - used in edge async mode [seconds]`

	var commandIntervalFlagName string
	if cmdPrefix == "" {
		commandIntervalFlagName = "CommandInterval"
	} else {
		commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	}

	var commandIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(commandIntervalFlagName, commandIntervalFlagDefault, commandIntervalDescription)

	return nil
}

func registerSettingsPublicSettingsResponseEdgePingInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pingIntervalDescription := `The ping interval for edge agent - used in edge async mode [seconds]`

	var pingIntervalFlagName string
	if cmdPrefix == "" {
		pingIntervalFlagName = "PingInterval"
	} else {
		pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
	}

	var pingIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pingIntervalFlagName, pingIntervalFlagDefault, pingIntervalDescription)

	return nil
}

func registerSettingsPublicSettingsResponseEdgeSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := `The snapshot interval for edge agent - used in edge async mode [seconds]`

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "SnapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

func registerSettingsPublicSettingsResponseEdgeAsyncMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	asyncModeDescription := `Whether the device has been started in edge async mode`

	var asyncModeFlagName string
	if cmdPrefix == "" {
		asyncModeFlagName = "asyncMode"
	} else {
		asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
	}

	var asyncModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(asyncModeFlagName, asyncModeFlagDefault, asyncModeDescription)

	return nil
}

func registerSettingsPublicSettingsResponseEdgeCheckinInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkinIntervalDescription := `The check in interval for edge agent (in seconds) - used in non async mode [seconds]`

	var checkinIntervalFlagName string
	if cmdPrefix == "" {
		checkinIntervalFlagName = "checkinInterval"
	} else {
		checkinIntervalFlagName = fmt.Sprintf("%v.checkinInterval", cmdPrefix)
	}

	var checkinIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkinIntervalFlagName, checkinIntervalFlagDefault, checkinIntervalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSettingsPublicSettingsResponseEdgeFlags(depth int, m *models.SettingsPublicSettingsResponseEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commandIntervalAdded := retrieveSettingsPublicSettingsResponseEdgeCommandIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandIntervalAdded

	err, pingIntervalAdded := retrieveSettingsPublicSettingsResponseEdgePingIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingIntervalAdded

	err, snapshotIntervalAdded := retrieveSettingsPublicSettingsResponseEdgeSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	err, asyncModeAdded := retrieveSettingsPublicSettingsResponseEdgeAsyncModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || asyncModeAdded

	err, checkinIntervalAdded := retrieveSettingsPublicSettingsResponseEdgeCheckinIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkinIntervalAdded

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEdgeCommandIntervalFlags(depth int, m *models.SettingsPublicSettingsResponseEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandIntervalFlagName := fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	if cmd.Flags().Changed(commandIntervalFlagName) {

		var commandIntervalFlagName string
		if cmdPrefix == "" {
			commandIntervalFlagName = "CommandInterval"
		} else {
			commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
		}

		commandIntervalFlagValue, err := cmd.Flags().GetInt64(commandIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.CommandInterval = commandIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEdgePingIntervalFlags(depth int, m *models.SettingsPublicSettingsResponseEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingIntervalFlagName := fmt.Sprintf("%v.PingInterval", cmdPrefix)
	if cmd.Flags().Changed(pingIntervalFlagName) {

		var pingIntervalFlagName string
		if cmdPrefix == "" {
			pingIntervalFlagName = "PingInterval"
		} else {
			pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
		}

		pingIntervalFlagValue, err := cmd.Flags().GetInt64(pingIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.PingInterval = pingIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEdgeSnapshotIntervalFlags(depth int, m *models.SettingsPublicSettingsResponseEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "SnapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetInt64(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEdgeAsyncModeFlags(depth int, m *models.SettingsPublicSettingsResponseEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	asyncModeFlagName := fmt.Sprintf("%v.asyncMode", cmdPrefix)
	if cmd.Flags().Changed(asyncModeFlagName) {

		var asyncModeFlagName string
		if cmdPrefix == "" {
			asyncModeFlagName = "asyncMode"
		} else {
			asyncModeFlagName = fmt.Sprintf("%v.asyncMode", cmdPrefix)
		}

		asyncModeFlagValue, err := cmd.Flags().GetBool(asyncModeFlagName)
		if err != nil {
			return err, false
		}
		m.AsyncMode = &asyncModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSettingsPublicSettingsResponseEdgeCheckinIntervalFlags(depth int, m *models.SettingsPublicSettingsResponseEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkinIntervalFlagName := fmt.Sprintf("%v.checkinInterval", cmdPrefix)
	if cmd.Flags().Changed(checkinIntervalFlagName) {

		var checkinIntervalFlagName string
		if cmdPrefix == "" {
			checkinIntervalFlagName = "checkinInterval"
		} else {
			checkinIntervalFlagName = fmt.Sprintf("%v.checkinInterval", cmdPrefix)
		}

		checkinIntervalFlagValue, err := cmd.Flags().GetInt64(checkinIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.CheckinInterval = checkinIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
