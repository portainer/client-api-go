// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for GithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponse

// register flags to command
func registerModelGithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponseNodes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponseNodes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodesDescription := ``

	var nodesFlagName string
	if cmdPrefix == "" {
		nodesFlagName = "nodes"
	} else {
		nodesFlagName = fmt.Sprintf("%v.nodes", cmdPrefix)
	}

	var nodesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodesFlagName, nodesFlagDefault, nodesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponseFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nodesAdded := retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponseNodesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodesAdded

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponseNodesFlags(depth int, m *models.GithubComPortainerPortainerEeAPIHTTPHandlerSystemNodesCountResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodesFlagName := fmt.Sprintf("%v.nodes", cmdPrefix)
	if cmd.Flags().Changed(nodesFlagName) {

		var nodesFlagName string
		if cmdPrefix == "" {
			nodesFlagName = "nodes"
		} else {
			nodesFlagName = fmt.Sprintf("%v.nodes", cmdPrefix)
		}

		nodesFlagValue, err := cmd.Flags().GetInt64(nodesFlagName)
		if err != nil {
			return err, false
		}
		m.Nodes = nodesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
