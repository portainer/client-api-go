// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainereeEdgeAsyncCommand

// register flags to command
func registerModelPortainereeEdgeAsyncCommandFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainereeEdgeAsyncCommandEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandExecuted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandOp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandScheduledTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainereeEdgeAsyncCommandValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainereeEdgeAsyncCommandEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandExecuted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executedDescription := ``

	var executedFlagName string
	if cmdPrefix == "" {
		executedFlagName = "executed"
	} else {
		executedFlagName = fmt.Sprintf("%v.executed", cmdPrefix)
	}

	var executedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(executedFlagName, executedFlagDefault, executedDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandOp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	opDescription := ``

	var opFlagName string
	if cmdPrefix == "" {
		opFlagName = "op"
	} else {
		opFlagName = fmt.Sprintf("%v.op", cmdPrefix)
	}

	var opFlagDefault string

	_ = cmd.PersistentFlags().String(opFlagName, opFlagDefault, opDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := ``

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandScheduledTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scheduledTimeDescription := ``

	var scheduledTimeFlagName string
	if cmdPrefix == "" {
		scheduledTimeFlagName = "scheduledTime"
	} else {
		scheduledTimeFlagName = fmt.Sprintf("%v.scheduledTime", cmdPrefix)
	}

	var scheduledTimeFlagDefault string

	_ = cmd.PersistentFlags().String(scheduledTimeFlagName, scheduledTimeFlagDefault, scheduledTimeDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timestampDescription := ``

	var timestampFlagName string
	if cmdPrefix == "" {
		timestampFlagName = "timestamp"
	} else {
		timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	var timestampFlagDefault string

	_ = cmd.PersistentFlags().String(timestampFlagName, timestampFlagDefault, timestampDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerPortainereeEdgeAsyncCommandValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: value interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainereeEdgeAsyncCommandFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointIdAdded := retrievePortainereeEdgeAsyncCommandEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, executedAdded := retrievePortainereeEdgeAsyncCommandExecutedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executedAdded

	err, idAdded := retrievePortainereeEdgeAsyncCommandIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, opAdded := retrievePortainereeEdgeAsyncCommandOpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || opAdded

	err, pathAdded := retrievePortainereeEdgeAsyncCommandPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	err, scheduledTimeAdded := retrievePortainereeEdgeAsyncCommandScheduledTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduledTimeAdded

	err, timestampAdded := retrievePortainereeEdgeAsyncCommandTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampAdded

	err, typeAdded := retrievePortainereeEdgeAsyncCommandTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, valueAdded := retrievePortainereeEdgeAsyncCommandValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandEndpointIDFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.endpointID", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandExecutedFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executedFlagName := fmt.Sprintf("%v.executed", cmdPrefix)
	if cmd.Flags().Changed(executedFlagName) {

		var executedFlagName string
		if cmdPrefix == "" {
			executedFlagName = "executed"
		} else {
			executedFlagName = fmt.Sprintf("%v.executed", cmdPrefix)
		}

		executedFlagValue, err := cmd.Flags().GetBool(executedFlagName)
		if err != nil {
			return err, false
		}
		m.Executed = &executedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandIDFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandOpFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	opFlagName := fmt.Sprintf("%v.op", cmdPrefix)
	if cmd.Flags().Changed(opFlagName) {

		var opFlagName string
		if cmdPrefix == "" {
			opFlagName = "op"
		} else {
			opFlagName = fmt.Sprintf("%v.op", cmdPrefix)
		}

		opFlagValue, err := cmd.Flags().GetString(opFlagName)
		if err != nil {
			return err, false
		}
		m.Op = opFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandPathFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathFlagName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandScheduledTimeFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduledTimeFlagName := fmt.Sprintf("%v.scheduledTime", cmdPrefix)
	if cmd.Flags().Changed(scheduledTimeFlagName) {

		var scheduledTimeFlagName string
		if cmdPrefix == "" {
			scheduledTimeFlagName = "scheduledTime"
		} else {
			scheduledTimeFlagName = fmt.Sprintf("%v.scheduledTime", cmdPrefix)
		}

		scheduledTimeFlagValue, err := cmd.Flags().GetString(scheduledTimeFlagName)
		if err != nil {
			return err, false
		}
		m.ScheduledTime = scheduledTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandTimestampFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampFlagName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(timestampFlagName) {

		var timestampFlagName string
		if cmdPrefix == "" {
			timestampFlagName = "timestamp"
		} else {
			timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		timestampFlagValue, err := cmd.Flags().GetString(timestampFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamp = timestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandTypeFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainereeEdgeAsyncCommandValueFlags(depth int, m *models.PortainereeEdgeAsyncCommand, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {
		// warning: value map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
