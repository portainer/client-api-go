// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for EndpointsEndpointUpdatePayload

// register flags to command
func registerModelEndpointsEndpointUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointsEndpointUpdatePayloadDeploymentOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadAzureApplicationID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadAzureAuthenticationKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadAzureTenantID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadChangeWindow(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadEdge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadEdgeCheckinInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadGpus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadGroupID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadKubernetes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadPublicURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadTagIDs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadTeamAccessPolicies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadTLS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadTlsskipClientVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadTlsskipVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadUserAccessPolicies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointUpdatePayloadDeploymentOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deploymentOptionsFlagName string
	if cmdPrefix == "" {
		deploymentOptionsFlagName = "DeploymentOptions"
	} else {
		deploymentOptionsFlagName = fmt.Sprintf("%v.DeploymentOptions", cmdPrefix)
	}

	if err := registerModelPortainereeDeploymentOptionsFlags(depth+1, deploymentOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointUpdatePayloadAzureApplicationID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	azureApplicationIdDescription := `Azure application ID`

	var azureApplicationIdFlagName string
	if cmdPrefix == "" {
		azureApplicationIdFlagName = "azureApplicationID"
	} else {
		azureApplicationIdFlagName = fmt.Sprintf("%v.azureApplicationID", cmdPrefix)
	}

	var azureApplicationIdFlagDefault string

	_ = cmd.PersistentFlags().String(azureApplicationIdFlagName, azureApplicationIdFlagDefault, azureApplicationIdDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadAzureAuthenticationKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	azureAuthenticationKeyDescription := `Azure authentication key`

	var azureAuthenticationKeyFlagName string
	if cmdPrefix == "" {
		azureAuthenticationKeyFlagName = "azureAuthenticationKey"
	} else {
		azureAuthenticationKeyFlagName = fmt.Sprintf("%v.azureAuthenticationKey", cmdPrefix)
	}

	var azureAuthenticationKeyFlagDefault string

	_ = cmd.PersistentFlags().String(azureAuthenticationKeyFlagName, azureAuthenticationKeyFlagDefault, azureAuthenticationKeyDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadAzureTenantID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	azureTenantIdDescription := `Azure tenant ID`

	var azureTenantIdFlagName string
	if cmdPrefix == "" {
		azureTenantIdFlagName = "azureTenantID"
	} else {
		azureTenantIdFlagName = fmt.Sprintf("%v.azureTenantID", cmdPrefix)
	}

	var azureTenantIdFlagDefault string

	_ = cmd.PersistentFlags().String(azureTenantIdFlagName, azureTenantIdFlagDefault, azureTenantIdDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadChangeWindow(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var changeWindowFlagName string
	if cmdPrefix == "" {
		changeWindowFlagName = "changeWindow"
	} else {
		changeWindowFlagName = fmt.Sprintf("%v.changeWindow", cmdPrefix)
	}

	if err := registerModelPortainereeEndpointChangeWindowFlags(depth+1, changeWindowFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointUpdatePayloadEdge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var edgeFlagName string
	if cmdPrefix == "" {
		edgeFlagName = "edge"
	} else {
		edgeFlagName = fmt.Sprintf("%v.edge", cmdPrefix)
	}

	if err := registerModelEndpointsEndpointUpdatePayloadEdgeFlags(depth+1, edgeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointUpdatePayloadEdgeCheckinInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	edgeCheckinIntervalDescription := `The check in interval for edge agent (in seconds)`

	var edgeCheckinIntervalFlagName string
	if cmdPrefix == "" {
		edgeCheckinIntervalFlagName = "edgeCheckinInterval"
	} else {
		edgeCheckinIntervalFlagName = fmt.Sprintf("%v.edgeCheckinInterval", cmdPrefix)
	}

	var edgeCheckinIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(edgeCheckinIntervalFlagName, edgeCheckinIntervalFlagDefault, edgeCheckinIntervalDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadGpus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: gpus []*PortainereePair array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointsEndpointUpdatePayloadGroupID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	groupIdDescription := `Group identifier`

	var groupIdFlagName string
	if cmdPrefix == "" {
		groupIdFlagName = "groupID"
	} else {
		groupIdFlagName = fmt.Sprintf("%v.groupID", cmdPrefix)
	}

	var groupIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(groupIdFlagName, groupIdFlagDefault, groupIdDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadKubernetes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var kubernetesFlagName string
	if cmdPrefix == "" {
		kubernetesFlagName = "kubernetes"
	} else {
		kubernetesFlagName = fmt.Sprintf("%v.kubernetes", cmdPrefix)
	}

	if err := registerModelPortainereeKubernetesDataFlags(depth+1, kubernetesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointUpdatePayloadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name that will be used to identify this environment(endpoint)`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadPublicURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicUrlDescription := `URL or IP address where exposed containers will be reachable.\
Defaults to URL if not specified`

	var publicUrlFlagName string
	if cmdPrefix == "" {
		publicUrlFlagName = "publicURL"
	} else {
		publicUrlFlagName = fmt.Sprintf("%v.publicURL", cmdPrefix)
	}

	var publicUrlFlagDefault string

	_ = cmd.PersistentFlags().String(publicUrlFlagName, publicUrlFlagDefault, publicUrlDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The status of the environment(endpoint) (1 - up, 2 - down)`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadTagIDs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tagIDs []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointsEndpointUpdatePayloadTeamAccessPolicies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: teamAccessPolicies PortainereeTeamAccessPolicies map type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointsEndpointUpdatePayloadTLS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsDescription := `Require TLS to connect against this environment(endpoint)`

	var tlsFlagName string
	if cmdPrefix == "" {
		tlsFlagName = "tls"
	} else {
		tlsFlagName = fmt.Sprintf("%v.tls", cmdPrefix)
	}

	var tlsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsFlagName, tlsFlagDefault, tlsDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadTlsskipClientVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsskipClientVerifyDescription := `Skip client verification when using TLS`

	var tlsskipClientVerifyFlagName string
	if cmdPrefix == "" {
		tlsskipClientVerifyFlagName = "tlsskipClientVerify"
	} else {
		tlsskipClientVerifyFlagName = fmt.Sprintf("%v.tlsskipClientVerify", cmdPrefix)
	}

	var tlsskipClientVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsskipClientVerifyFlagName, tlsskipClientVerifyFlagDefault, tlsskipClientVerifyDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadTlsskipVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsskipVerifyDescription := `Skip server verification when using TLS`

	var tlsskipVerifyFlagName string
	if cmdPrefix == "" {
		tlsskipVerifyFlagName = "tlsskipVerify"
	} else {
		tlsskipVerifyFlagName = fmt.Sprintf("%v.tlsskipVerify", cmdPrefix)
	}

	var tlsskipVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsskipVerifyFlagName, tlsskipVerifyFlagDefault, tlsskipVerifyDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `URL or IP address of a Docker host`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadUserAccessPolicies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: userAccessPolicies PortainereeUserAccessPolicies map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointsEndpointUpdatePayloadFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deploymentOptionsAdded := retrieveEndpointsEndpointUpdatePayloadDeploymentOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentOptionsAdded

	err, azureApplicationIdAdded := retrieveEndpointsEndpointUpdatePayloadAzureApplicationIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || azureApplicationIdAdded

	err, azureAuthenticationKeyAdded := retrieveEndpointsEndpointUpdatePayloadAzureAuthenticationKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || azureAuthenticationKeyAdded

	err, azureTenantIdAdded := retrieveEndpointsEndpointUpdatePayloadAzureTenantIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || azureTenantIdAdded

	err, changeWindowAdded := retrieveEndpointsEndpointUpdatePayloadChangeWindowFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || changeWindowAdded

	err, edgeAdded := retrieveEndpointsEndpointUpdatePayloadEdgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded

	err, edgeCheckinIntervalAdded := retrieveEndpointsEndpointUpdatePayloadEdgeCheckinIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeCheckinIntervalAdded

	err, gpusAdded := retrieveEndpointsEndpointUpdatePayloadGpusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpusAdded

	err, groupIdAdded := retrieveEndpointsEndpointUpdatePayloadGroupIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || groupIdAdded

	err, kubernetesAdded := retrieveEndpointsEndpointUpdatePayloadKubernetesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubernetesAdded

	err, nameAdded := retrieveEndpointsEndpointUpdatePayloadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, publicUrlAdded := retrieveEndpointsEndpointUpdatePayloadPublicURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicUrlAdded

	err, statusAdded := retrieveEndpointsEndpointUpdatePayloadStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, tagIDsAdded := retrieveEndpointsEndpointUpdatePayloadTagIDsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagIDsAdded

	err, teamAccessPoliciesAdded := retrieveEndpointsEndpointUpdatePayloadTeamAccessPoliciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAccessPoliciesAdded

	err, tlsAdded := retrieveEndpointsEndpointUpdatePayloadTLSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsAdded

	err, tlsskipClientVerifyAdded := retrieveEndpointsEndpointUpdatePayloadTlsskipClientVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsskipClientVerifyAdded

	err, tlsskipVerifyAdded := retrieveEndpointsEndpointUpdatePayloadTlsskipVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsskipVerifyAdded

	err, urlAdded := retrieveEndpointsEndpointUpdatePayloadURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	err, userAccessPoliciesAdded := retrieveEndpointsEndpointUpdatePayloadUserAccessPoliciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAccessPoliciesAdded

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadDeploymentOptionsFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deploymentOptionsFlagName := fmt.Sprintf("%v.DeploymentOptions", cmdPrefix)
	if cmd.Flags().Changed(deploymentOptionsFlagName) {
		// info: complex object DeploymentOptions PortainereeDeploymentOptions is retrieved outside this Changed() block
	}
	deploymentOptionsFlagValue := m.DeploymentOptions
	if swag.IsZero(deploymentOptionsFlagValue) {
		deploymentOptionsFlagValue = &models.PortainereeDeploymentOptions{}
	}

	err, deploymentOptionsAdded := retrieveModelPortainereeDeploymentOptionsFlags(depth+1, deploymentOptionsFlagValue, deploymentOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploymentOptionsAdded
	if deploymentOptionsAdded {
		m.DeploymentOptions = deploymentOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadAzureApplicationIDFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	azureApplicationIdFlagName := fmt.Sprintf("%v.azureApplicationID", cmdPrefix)
	if cmd.Flags().Changed(azureApplicationIdFlagName) {

		var azureApplicationIdFlagName string
		if cmdPrefix == "" {
			azureApplicationIdFlagName = "azureApplicationID"
		} else {
			azureApplicationIdFlagName = fmt.Sprintf("%v.azureApplicationID", cmdPrefix)
		}

		azureApplicationIdFlagValue, err := cmd.Flags().GetString(azureApplicationIdFlagName)
		if err != nil {
			return err, false
		}
		m.AzureApplicationID = azureApplicationIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadAzureAuthenticationKeyFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	azureAuthenticationKeyFlagName := fmt.Sprintf("%v.azureAuthenticationKey", cmdPrefix)
	if cmd.Flags().Changed(azureAuthenticationKeyFlagName) {

		var azureAuthenticationKeyFlagName string
		if cmdPrefix == "" {
			azureAuthenticationKeyFlagName = "azureAuthenticationKey"
		} else {
			azureAuthenticationKeyFlagName = fmt.Sprintf("%v.azureAuthenticationKey", cmdPrefix)
		}

		azureAuthenticationKeyFlagValue, err := cmd.Flags().GetString(azureAuthenticationKeyFlagName)
		if err != nil {
			return err, false
		}
		m.AzureAuthenticationKey = azureAuthenticationKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadAzureTenantIDFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	azureTenantIdFlagName := fmt.Sprintf("%v.azureTenantID", cmdPrefix)
	if cmd.Flags().Changed(azureTenantIdFlagName) {

		var azureTenantIdFlagName string
		if cmdPrefix == "" {
			azureTenantIdFlagName = "azureTenantID"
		} else {
			azureTenantIdFlagName = fmt.Sprintf("%v.azureTenantID", cmdPrefix)
		}

		azureTenantIdFlagValue, err := cmd.Flags().GetString(azureTenantIdFlagName)
		if err != nil {
			return err, false
		}
		m.AzureTenantID = azureTenantIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadChangeWindowFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	changeWindowFlagName := fmt.Sprintf("%v.changeWindow", cmdPrefix)
	if cmd.Flags().Changed(changeWindowFlagName) {
		// info: complex object changeWindow PortainereeEndpointChangeWindow is retrieved outside this Changed() block
	}
	changeWindowFlagValue := m.ChangeWindow
	if swag.IsZero(changeWindowFlagValue) {
		changeWindowFlagValue = &models.PortainereeEndpointChangeWindow{}
	}

	err, changeWindowAdded := retrieveModelPortainereeEndpointChangeWindowFlags(depth+1, changeWindowFlagValue, changeWindowFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || changeWindowAdded
	if changeWindowAdded {
		m.ChangeWindow = changeWindowFlagValue
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadEdgeFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeFlagName := fmt.Sprintf("%v.edge", cmdPrefix)
	if cmd.Flags().Changed(edgeFlagName) {
		// info: complex object edge EndpointsEndpointUpdatePayloadEdge is retrieved outside this Changed() block
	}
	edgeFlagValue := m.Edge
	if swag.IsZero(edgeFlagValue) {
		edgeFlagValue = &models.EndpointsEndpointUpdatePayloadEdge{}
	}

	err, edgeAdded := retrieveModelEndpointsEndpointUpdatePayloadEdgeFlags(depth+1, edgeFlagValue, edgeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || edgeAdded
	if edgeAdded {
		m.Edge = edgeFlagValue
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadEdgeCheckinIntervalFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	edgeCheckinIntervalFlagName := fmt.Sprintf("%v.edgeCheckinInterval", cmdPrefix)
	if cmd.Flags().Changed(edgeCheckinIntervalFlagName) {

		var edgeCheckinIntervalFlagName string
		if cmdPrefix == "" {
			edgeCheckinIntervalFlagName = "edgeCheckinInterval"
		} else {
			edgeCheckinIntervalFlagName = fmt.Sprintf("%v.edgeCheckinInterval", cmdPrefix)
		}

		edgeCheckinIntervalFlagValue, err := cmd.Flags().GetInt64(edgeCheckinIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.EdgeCheckinInterval = edgeCheckinIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadGpusFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpusFlagName := fmt.Sprintf("%v.gpus", cmdPrefix)
	if cmd.Flags().Changed(gpusFlagName) {
		// warning: gpus array type []*PortainereePair is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadGroupIDFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	groupIdFlagName := fmt.Sprintf("%v.groupID", cmdPrefix)
	if cmd.Flags().Changed(groupIdFlagName) {

		var groupIdFlagName string
		if cmdPrefix == "" {
			groupIdFlagName = "groupID"
		} else {
			groupIdFlagName = fmt.Sprintf("%v.groupID", cmdPrefix)
		}

		groupIdFlagValue, err := cmd.Flags().GetInt64(groupIdFlagName)
		if err != nil {
			return err, false
		}
		m.GroupID = groupIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadKubernetesFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kubernetesFlagName := fmt.Sprintf("%v.kubernetes", cmdPrefix)
	if cmd.Flags().Changed(kubernetesFlagName) {
		// info: complex object kubernetes PortainereeKubernetesData is retrieved outside this Changed() block
	}
	kubernetesFlagValue := m.Kubernetes
	if swag.IsZero(kubernetesFlagValue) {
		kubernetesFlagValue = &models.PortainereeKubernetesData{}
	}

	err, kubernetesAdded := retrieveModelPortainereeKubernetesDataFlags(depth+1, kubernetesFlagValue, kubernetesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kubernetesAdded
	if kubernetesAdded {
		m.Kubernetes = kubernetesFlagValue
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadNameFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadPublicURLFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicUrlFlagName := fmt.Sprintf("%v.publicURL", cmdPrefix)
	if cmd.Flags().Changed(publicUrlFlagName) {

		var publicUrlFlagName string
		if cmdPrefix == "" {
			publicUrlFlagName = "publicURL"
		} else {
			publicUrlFlagName = fmt.Sprintf("%v.publicURL", cmdPrefix)
		}

		publicUrlFlagValue, err := cmd.Flags().GetString(publicUrlFlagName)
		if err != nil {
			return err, false
		}
		m.PublicURL = publicUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadStatusFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt64(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadTagIDsFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagIDsFlagName := fmt.Sprintf("%v.tagIDs", cmdPrefix)
	if cmd.Flags().Changed(tagIDsFlagName) {
		// warning: tagIDs array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadTeamAccessPoliciesFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamAccessPoliciesFlagName := fmt.Sprintf("%v.teamAccessPolicies", cmdPrefix)
	if cmd.Flags().Changed(teamAccessPoliciesFlagName) {
		// warning: teamAccessPolicies map type PortainereeTeamAccessPolicies is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadTLSFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsFlagName := fmt.Sprintf("%v.tls", cmdPrefix)
	if cmd.Flags().Changed(tlsFlagName) {

		var tlsFlagName string
		if cmdPrefix == "" {
			tlsFlagName = "tls"
		} else {
			tlsFlagName = fmt.Sprintf("%v.tls", cmdPrefix)
		}

		tlsFlagValue, err := cmd.Flags().GetBool(tlsFlagName)
		if err != nil {
			return err, false
		}
		m.TLS = &tlsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadTlsskipClientVerifyFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsskipClientVerifyFlagName := fmt.Sprintf("%v.tlsskipClientVerify", cmdPrefix)
	if cmd.Flags().Changed(tlsskipClientVerifyFlagName) {

		var tlsskipClientVerifyFlagName string
		if cmdPrefix == "" {
			tlsskipClientVerifyFlagName = "tlsskipClientVerify"
		} else {
			tlsskipClientVerifyFlagName = fmt.Sprintf("%v.tlsskipClientVerify", cmdPrefix)
		}

		tlsskipClientVerifyFlagValue, err := cmd.Flags().GetBool(tlsskipClientVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.TlsskipClientVerify = &tlsskipClientVerifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadTlsskipVerifyFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsskipVerifyFlagName := fmt.Sprintf("%v.tlsskipVerify", cmdPrefix)
	if cmd.Flags().Changed(tlsskipVerifyFlagName) {

		var tlsskipVerifyFlagName string
		if cmdPrefix == "" {
			tlsskipVerifyFlagName = "tlsskipVerify"
		} else {
			tlsskipVerifyFlagName = fmt.Sprintf("%v.tlsskipVerify", cmdPrefix)
		}

		tlsskipVerifyFlagValue, err := cmd.Flags().GetBool(tlsskipVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.TlsskipVerify = &tlsskipVerifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadURLFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadUserAccessPoliciesFlags(depth int, m *models.EndpointsEndpointUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userAccessPoliciesFlagName := fmt.Sprintf("%v.userAccessPolicies", cmdPrefix)
	if cmd.Flags().Changed(userAccessPoliciesFlagName) {
		// warning: userAccessPolicies map type PortainereeUserAccessPolicies is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for EndpointsEndpointUpdatePayloadEdge

// register flags to command
func registerModelEndpointsEndpointUpdatePayloadEdgeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointsEndpointUpdatePayloadEdgeCommandInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadEdgePingInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointsEndpointUpdatePayloadEdgeSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointsEndpointUpdatePayloadEdgeCommandInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commandIntervalDescription := `The command list interval for edge agent - used in edge async mode (in seconds)`

	var commandIntervalFlagName string
	if cmdPrefix == "" {
		commandIntervalFlagName = "CommandInterval"
	} else {
		commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	}

	var commandIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(commandIntervalFlagName, commandIntervalFlagDefault, commandIntervalDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadEdgePingInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pingIntervalDescription := `The ping interval for edge agent - used in edge async mode (in seconds)`

	var pingIntervalFlagName string
	if cmdPrefix == "" {
		pingIntervalFlagName = "PingInterval"
	} else {
		pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
	}

	var pingIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pingIntervalFlagName, pingIntervalFlagDefault, pingIntervalDescription)

	return nil
}

func registerEndpointsEndpointUpdatePayloadEdgeSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snapshotIntervalDescription := `The snapshot interval for edge agent - used in edge async mode (in seconds)`

	var snapshotIntervalFlagName string
	if cmdPrefix == "" {
		snapshotIntervalFlagName = "SnapshotInterval"
	} else {
		snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	}

	var snapshotIntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(snapshotIntervalFlagName, snapshotIntervalFlagDefault, snapshotIntervalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointsEndpointUpdatePayloadEdgeFlags(depth int, m *models.EndpointsEndpointUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commandIntervalAdded := retrieveEndpointsEndpointUpdatePayloadEdgeCommandIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commandIntervalAdded

	err, pingIntervalAdded := retrieveEndpointsEndpointUpdatePayloadEdgePingIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingIntervalAdded

	err, snapshotIntervalAdded := retrieveEndpointsEndpointUpdatePayloadEdgeSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snapshotIntervalAdded

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadEdgeCommandIntervalFlags(depth int, m *models.EndpointsEndpointUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commandIntervalFlagName := fmt.Sprintf("%v.CommandInterval", cmdPrefix)
	if cmd.Flags().Changed(commandIntervalFlagName) {

		var commandIntervalFlagName string
		if cmdPrefix == "" {
			commandIntervalFlagName = "CommandInterval"
		} else {
			commandIntervalFlagName = fmt.Sprintf("%v.CommandInterval", cmdPrefix)
		}

		commandIntervalFlagValue, err := cmd.Flags().GetInt64(commandIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.CommandInterval = commandIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadEdgePingIntervalFlags(depth int, m *models.EndpointsEndpointUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingIntervalFlagName := fmt.Sprintf("%v.PingInterval", cmdPrefix)
	if cmd.Flags().Changed(pingIntervalFlagName) {

		var pingIntervalFlagName string
		if cmdPrefix == "" {
			pingIntervalFlagName = "PingInterval"
		} else {
			pingIntervalFlagName = fmt.Sprintf("%v.PingInterval", cmdPrefix)
		}

		pingIntervalFlagValue, err := cmd.Flags().GetInt64(pingIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.PingInterval = pingIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointsEndpointUpdatePayloadEdgeSnapshotIntervalFlags(depth int, m *models.EndpointsEndpointUpdatePayloadEdge, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snapshotIntervalFlagName := fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(snapshotIntervalFlagName) {

		var snapshotIntervalFlagName string
		if cmdPrefix == "" {
			snapshotIntervalFlagName = "SnapshotInterval"
		} else {
			snapshotIntervalFlagName = fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
		}

		snapshotIntervalFlagValue, err := cmd.Flags().GetInt64(snapshotIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.SnapshotInterval = snapshotIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
