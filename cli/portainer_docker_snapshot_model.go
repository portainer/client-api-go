// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortainerDockerSnapshot

// register flags to command
func registerModelPortainerDockerSnapshotFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainerDockerSnapshotDockerSnapshotRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotDockerVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotGpuUseAll(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotGpuUseList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotHealthyContainerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotImageCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotNodeCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotRunningContainerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotServiceCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotStackCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotStoppedContainerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotSwarm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotTotalCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotTotalMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotUnhealthyContainerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerDockerSnapshotVolumeCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainerDockerSnapshotDockerSnapshotRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DockerSnapshotRaw PortainerDockerSnapshotRaw map type is not supported by go-swagger cli yet

	return nil
}

func registerPortainerDockerSnapshotDockerVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dockerVersionDescription := ``

	var dockerVersionFlagName string
	if cmdPrefix == "" {
		dockerVersionFlagName = "DockerVersion"
	} else {
		dockerVersionFlagName = fmt.Sprintf("%v.DockerVersion", cmdPrefix)
	}

	var dockerVersionFlagDefault string

	_ = cmd.PersistentFlags().String(dockerVersionFlagName, dockerVersionFlagDefault, dockerVersionDescription)

	return nil
}

func registerPortainerDockerSnapshotGpuUseAll(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gpuUseAllDescription := ``

	var gpuUseAllFlagName string
	if cmdPrefix == "" {
		gpuUseAllFlagName = "GpuUseAll"
	} else {
		gpuUseAllFlagName = fmt.Sprintf("%v.GpuUseAll", cmdPrefix)
	}

	var gpuUseAllFlagDefault bool

	_ = cmd.PersistentFlags().Bool(gpuUseAllFlagName, gpuUseAllFlagDefault, gpuUseAllDescription)

	return nil
}

func registerPortainerDockerSnapshotGpuUseList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: GpuUseList []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPortainerDockerSnapshotHealthyContainerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	healthyContainerCountDescription := ``

	var healthyContainerCountFlagName string
	if cmdPrefix == "" {
		healthyContainerCountFlagName = "HealthyContainerCount"
	} else {
		healthyContainerCountFlagName = fmt.Sprintf("%v.HealthyContainerCount", cmdPrefix)
	}

	var healthyContainerCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(healthyContainerCountFlagName, healthyContainerCountFlagDefault, healthyContainerCountDescription)

	return nil
}

func registerPortainerDockerSnapshotImageCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageCountDescription := ``

	var imageCountFlagName string
	if cmdPrefix == "" {
		imageCountFlagName = "ImageCount"
	} else {
		imageCountFlagName = fmt.Sprintf("%v.ImageCount", cmdPrefix)
	}

	var imageCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(imageCountFlagName, imageCountFlagDefault, imageCountDescription)

	return nil
}

func registerPortainerDockerSnapshotNodeCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeCountDescription := ``

	var nodeCountFlagName string
	if cmdPrefix == "" {
		nodeCountFlagName = "NodeCount"
	} else {
		nodeCountFlagName = fmt.Sprintf("%v.NodeCount", cmdPrefix)
	}

	var nodeCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nodeCountFlagName, nodeCountFlagDefault, nodeCountDescription)

	return nil
}

func registerPortainerDockerSnapshotRunningContainerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runningContainerCountDescription := ``

	var runningContainerCountFlagName string
	if cmdPrefix == "" {
		runningContainerCountFlagName = "RunningContainerCount"
	} else {
		runningContainerCountFlagName = fmt.Sprintf("%v.RunningContainerCount", cmdPrefix)
	}

	var runningContainerCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(runningContainerCountFlagName, runningContainerCountFlagDefault, runningContainerCountDescription)

	return nil
}

func registerPortainerDockerSnapshotServiceCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serviceCountDescription := ``

	var serviceCountFlagName string
	if cmdPrefix == "" {
		serviceCountFlagName = "ServiceCount"
	} else {
		serviceCountFlagName = fmt.Sprintf("%v.ServiceCount", cmdPrefix)
	}

	var serviceCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serviceCountFlagName, serviceCountFlagDefault, serviceCountDescription)

	return nil
}

func registerPortainerDockerSnapshotStackCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackCountDescription := ``

	var stackCountFlagName string
	if cmdPrefix == "" {
		stackCountFlagName = "StackCount"
	} else {
		stackCountFlagName = fmt.Sprintf("%v.StackCount", cmdPrefix)
	}

	var stackCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(stackCountFlagName, stackCountFlagDefault, stackCountDescription)

	return nil
}

func registerPortainerDockerSnapshotStoppedContainerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stoppedContainerCountDescription := ``

	var stoppedContainerCountFlagName string
	if cmdPrefix == "" {
		stoppedContainerCountFlagName = "StoppedContainerCount"
	} else {
		stoppedContainerCountFlagName = fmt.Sprintf("%v.StoppedContainerCount", cmdPrefix)
	}

	var stoppedContainerCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(stoppedContainerCountFlagName, stoppedContainerCountFlagDefault, stoppedContainerCountDescription)

	return nil
}

func registerPortainerDockerSnapshotSwarm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	swarmDescription := ``

	var swarmFlagName string
	if cmdPrefix == "" {
		swarmFlagName = "Swarm"
	} else {
		swarmFlagName = fmt.Sprintf("%v.Swarm", cmdPrefix)
	}

	var swarmFlagDefault bool

	_ = cmd.PersistentFlags().Bool(swarmFlagName, swarmFlagDefault, swarmDescription)

	return nil
}

func registerPortainerDockerSnapshotTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeDescription := ``

	var timeFlagName string
	if cmdPrefix == "" {
		timeFlagName = "Time"
	} else {
		timeFlagName = fmt.Sprintf("%v.Time", cmdPrefix)
	}

	var timeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeFlagName, timeFlagDefault, timeDescription)

	return nil
}

func registerPortainerDockerSnapshotTotalCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalCpuDescription := ``

	var totalCpuFlagName string
	if cmdPrefix == "" {
		totalCpuFlagName = "TotalCPU"
	} else {
		totalCpuFlagName = fmt.Sprintf("%v.TotalCPU", cmdPrefix)
	}

	var totalCpuFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalCpuFlagName, totalCpuFlagDefault, totalCpuDescription)

	return nil
}

func registerPortainerDockerSnapshotTotalMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalMemoryDescription := ``

	var totalMemoryFlagName string
	if cmdPrefix == "" {
		totalMemoryFlagName = "TotalMemory"
	} else {
		totalMemoryFlagName = fmt.Sprintf("%v.TotalMemory", cmdPrefix)
	}

	var totalMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalMemoryFlagName, totalMemoryFlagDefault, totalMemoryDescription)

	return nil
}

func registerPortainerDockerSnapshotUnhealthyContainerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unhealthyContainerCountDescription := ``

	var unhealthyContainerCountFlagName string
	if cmdPrefix == "" {
		unhealthyContainerCountFlagName = "UnhealthyContainerCount"
	} else {
		unhealthyContainerCountFlagName = fmt.Sprintf("%v.UnhealthyContainerCount", cmdPrefix)
	}

	var unhealthyContainerCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(unhealthyContainerCountFlagName, unhealthyContainerCountFlagDefault, unhealthyContainerCountDescription)

	return nil
}

func registerPortainerDockerSnapshotVolumeCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	volumeCountDescription := ``

	var volumeCountFlagName string
	if cmdPrefix == "" {
		volumeCountFlagName = "VolumeCount"
	} else {
		volumeCountFlagName = fmt.Sprintf("%v.VolumeCount", cmdPrefix)
	}

	var volumeCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(volumeCountFlagName, volumeCountFlagDefault, volumeCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainerDockerSnapshotFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dockerSnapshotRawAdded := retrievePortainerDockerSnapshotDockerSnapshotRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dockerSnapshotRawAdded

	err, dockerVersionAdded := retrievePortainerDockerSnapshotDockerVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dockerVersionAdded

	err, gpuUseAllAdded := retrievePortainerDockerSnapshotGpuUseAllFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpuUseAllAdded

	err, gpuUseListAdded := retrievePortainerDockerSnapshotGpuUseListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpuUseListAdded

	err, healthyContainerCountAdded := retrievePortainerDockerSnapshotHealthyContainerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || healthyContainerCountAdded

	err, imageCountAdded := retrievePortainerDockerSnapshotImageCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageCountAdded

	err, nodeCountAdded := retrievePortainerDockerSnapshotNodeCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeCountAdded

	err, runningContainerCountAdded := retrievePortainerDockerSnapshotRunningContainerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runningContainerCountAdded

	err, serviceCountAdded := retrievePortainerDockerSnapshotServiceCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceCountAdded

	err, stackCountAdded := retrievePortainerDockerSnapshotStackCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackCountAdded

	err, stoppedContainerCountAdded := retrievePortainerDockerSnapshotStoppedContainerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stoppedContainerCountAdded

	err, swarmAdded := retrievePortainerDockerSnapshotSwarmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || swarmAdded

	err, timeAdded := retrievePortainerDockerSnapshotTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeAdded

	err, totalCpuAdded := retrievePortainerDockerSnapshotTotalCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalCpuAdded

	err, totalMemoryAdded := retrievePortainerDockerSnapshotTotalMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalMemoryAdded

	err, unhealthyContainerCountAdded := retrievePortainerDockerSnapshotUnhealthyContainerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unhealthyContainerCountAdded

	err, volumeCountAdded := retrievePortainerDockerSnapshotVolumeCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumeCountAdded

	return nil, retAdded
}

func retrievePortainerDockerSnapshotDockerSnapshotRawFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dockerSnapshotRawFlagName := fmt.Sprintf("%v.DockerSnapshotRaw", cmdPrefix)
	if cmd.Flags().Changed(dockerSnapshotRawFlagName) {
		// warning: DockerSnapshotRaw map type PortainerDockerSnapshotRaw is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotDockerVersionFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dockerVersionFlagName := fmt.Sprintf("%v.DockerVersion", cmdPrefix)
	if cmd.Flags().Changed(dockerVersionFlagName) {

		var dockerVersionFlagName string
		if cmdPrefix == "" {
			dockerVersionFlagName = "DockerVersion"
		} else {
			dockerVersionFlagName = fmt.Sprintf("%v.DockerVersion", cmdPrefix)
		}

		dockerVersionFlagValue, err := cmd.Flags().GetString(dockerVersionFlagName)
		if err != nil {
			return err, false
		}
		m.DockerVersion = dockerVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotGpuUseAllFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpuUseAllFlagName := fmt.Sprintf("%v.GpuUseAll", cmdPrefix)
	if cmd.Flags().Changed(gpuUseAllFlagName) {

		var gpuUseAllFlagName string
		if cmdPrefix == "" {
			gpuUseAllFlagName = "GpuUseAll"
		} else {
			gpuUseAllFlagName = fmt.Sprintf("%v.GpuUseAll", cmdPrefix)
		}

		gpuUseAllFlagValue, err := cmd.Flags().GetBool(gpuUseAllFlagName)
		if err != nil {
			return err, false
		}
		m.GpuUseAll = &gpuUseAllFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotGpuUseListFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpuUseListFlagName := fmt.Sprintf("%v.GpuUseList", cmdPrefix)
	if cmd.Flags().Changed(gpuUseListFlagName) {
		// warning: GpuUseList array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotHealthyContainerCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	healthyContainerCountFlagName := fmt.Sprintf("%v.HealthyContainerCount", cmdPrefix)
	if cmd.Flags().Changed(healthyContainerCountFlagName) {

		var healthyContainerCountFlagName string
		if cmdPrefix == "" {
			healthyContainerCountFlagName = "HealthyContainerCount"
		} else {
			healthyContainerCountFlagName = fmt.Sprintf("%v.HealthyContainerCount", cmdPrefix)
		}

		healthyContainerCountFlagValue, err := cmd.Flags().GetInt64(healthyContainerCountFlagName)
		if err != nil {
			return err, false
		}
		m.HealthyContainerCount = healthyContainerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotImageCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imageCountFlagName := fmt.Sprintf("%v.ImageCount", cmdPrefix)
	if cmd.Flags().Changed(imageCountFlagName) {

		var imageCountFlagName string
		if cmdPrefix == "" {
			imageCountFlagName = "ImageCount"
		} else {
			imageCountFlagName = fmt.Sprintf("%v.ImageCount", cmdPrefix)
		}

		imageCountFlagValue, err := cmd.Flags().GetInt64(imageCountFlagName)
		if err != nil {
			return err, false
		}
		m.ImageCount = imageCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotNodeCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeCountFlagName := fmt.Sprintf("%v.NodeCount", cmdPrefix)
	if cmd.Flags().Changed(nodeCountFlagName) {

		var nodeCountFlagName string
		if cmdPrefix == "" {
			nodeCountFlagName = "NodeCount"
		} else {
			nodeCountFlagName = fmt.Sprintf("%v.NodeCount", cmdPrefix)
		}

		nodeCountFlagValue, err := cmd.Flags().GetInt64(nodeCountFlagName)
		if err != nil {
			return err, false
		}
		m.NodeCount = nodeCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotRunningContainerCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runningContainerCountFlagName := fmt.Sprintf("%v.RunningContainerCount", cmdPrefix)
	if cmd.Flags().Changed(runningContainerCountFlagName) {

		var runningContainerCountFlagName string
		if cmdPrefix == "" {
			runningContainerCountFlagName = "RunningContainerCount"
		} else {
			runningContainerCountFlagName = fmt.Sprintf("%v.RunningContainerCount", cmdPrefix)
		}

		runningContainerCountFlagValue, err := cmd.Flags().GetInt64(runningContainerCountFlagName)
		if err != nil {
			return err, false
		}
		m.RunningContainerCount = runningContainerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotServiceCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceCountFlagName := fmt.Sprintf("%v.ServiceCount", cmdPrefix)
	if cmd.Flags().Changed(serviceCountFlagName) {

		var serviceCountFlagName string
		if cmdPrefix == "" {
			serviceCountFlagName = "ServiceCount"
		} else {
			serviceCountFlagName = fmt.Sprintf("%v.ServiceCount", cmdPrefix)
		}

		serviceCountFlagValue, err := cmd.Flags().GetInt64(serviceCountFlagName)
		if err != nil {
			return err, false
		}
		m.ServiceCount = serviceCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotStackCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackCountFlagName := fmt.Sprintf("%v.StackCount", cmdPrefix)
	if cmd.Flags().Changed(stackCountFlagName) {

		var stackCountFlagName string
		if cmdPrefix == "" {
			stackCountFlagName = "StackCount"
		} else {
			stackCountFlagName = fmt.Sprintf("%v.StackCount", cmdPrefix)
		}

		stackCountFlagValue, err := cmd.Flags().GetInt64(stackCountFlagName)
		if err != nil {
			return err, false
		}
		m.StackCount = stackCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotStoppedContainerCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stoppedContainerCountFlagName := fmt.Sprintf("%v.StoppedContainerCount", cmdPrefix)
	if cmd.Flags().Changed(stoppedContainerCountFlagName) {

		var stoppedContainerCountFlagName string
		if cmdPrefix == "" {
			stoppedContainerCountFlagName = "StoppedContainerCount"
		} else {
			stoppedContainerCountFlagName = fmt.Sprintf("%v.StoppedContainerCount", cmdPrefix)
		}

		stoppedContainerCountFlagValue, err := cmd.Flags().GetInt64(stoppedContainerCountFlagName)
		if err != nil {
			return err, false
		}
		m.StoppedContainerCount = stoppedContainerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotSwarmFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	swarmFlagName := fmt.Sprintf("%v.Swarm", cmdPrefix)
	if cmd.Flags().Changed(swarmFlagName) {

		var swarmFlagName string
		if cmdPrefix == "" {
			swarmFlagName = "Swarm"
		} else {
			swarmFlagName = fmt.Sprintf("%v.Swarm", cmdPrefix)
		}

		swarmFlagValue, err := cmd.Flags().GetBool(swarmFlagName)
		if err != nil {
			return err, false
		}
		m.Swarm = &swarmFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotTimeFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFlagName := fmt.Sprintf("%v.Time", cmdPrefix)
	if cmd.Flags().Changed(timeFlagName) {

		var timeFlagName string
		if cmdPrefix == "" {
			timeFlagName = "Time"
		} else {
			timeFlagName = fmt.Sprintf("%v.Time", cmdPrefix)
		}

		timeFlagValue, err := cmd.Flags().GetInt64(timeFlagName)
		if err != nil {
			return err, false
		}
		m.Time = timeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotTotalCPUFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalCpuFlagName := fmt.Sprintf("%v.TotalCPU", cmdPrefix)
	if cmd.Flags().Changed(totalCpuFlagName) {

		var totalCpuFlagName string
		if cmdPrefix == "" {
			totalCpuFlagName = "TotalCPU"
		} else {
			totalCpuFlagName = fmt.Sprintf("%v.TotalCPU", cmdPrefix)
		}

		totalCpuFlagValue, err := cmd.Flags().GetInt64(totalCpuFlagName)
		if err != nil {
			return err, false
		}
		m.TotalCPU = totalCpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotTotalMemoryFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalMemoryFlagName := fmt.Sprintf("%v.TotalMemory", cmdPrefix)
	if cmd.Flags().Changed(totalMemoryFlagName) {

		var totalMemoryFlagName string
		if cmdPrefix == "" {
			totalMemoryFlagName = "TotalMemory"
		} else {
			totalMemoryFlagName = fmt.Sprintf("%v.TotalMemory", cmdPrefix)
		}

		totalMemoryFlagValue, err := cmd.Flags().GetInt64(totalMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.TotalMemory = totalMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotUnhealthyContainerCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unhealthyContainerCountFlagName := fmt.Sprintf("%v.UnhealthyContainerCount", cmdPrefix)
	if cmd.Flags().Changed(unhealthyContainerCountFlagName) {

		var unhealthyContainerCountFlagName string
		if cmdPrefix == "" {
			unhealthyContainerCountFlagName = "UnhealthyContainerCount"
		} else {
			unhealthyContainerCountFlagName = fmt.Sprintf("%v.UnhealthyContainerCount", cmdPrefix)
		}

		unhealthyContainerCountFlagValue, err := cmd.Flags().GetInt64(unhealthyContainerCountFlagName)
		if err != nil {
			return err, false
		}
		m.UnhealthyContainerCount = unhealthyContainerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerDockerSnapshotVolumeCountFlags(depth int, m *models.PortainerDockerSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	volumeCountFlagName := fmt.Sprintf("%v.VolumeCount", cmdPrefix)
	if cmd.Flags().Changed(volumeCountFlagName) {

		var volumeCountFlagName string
		if cmdPrefix == "" {
			volumeCountFlagName = "VolumeCount"
		} else {
			volumeCountFlagName = fmt.Sprintf("%v.VolumeCount", cmdPrefix)
		}

		volumeCountFlagValue, err := cmd.Flags().GetInt64(volumeCountFlagName)
		if err != nil {
			return err, false
		}
		m.VolumeCount = volumeCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
