// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/portainer/client-api-go/v2/client/endpoint_groups"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEndpointGroupsGetEndpointGroupsIDCmd returns a cmd to handle operation getEndpointGroupsId
func makeOperationEndpointGroupsGetEndpointGroupsIDCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "GetEndpointGroupsID",
		Short: `Retrieve details abont an environment(endpoint) group.
**Access policy**: administrator`,
		RunE: runOperationEndpointGroupsGetEndpointGroupsID,
	}

	if err := registerOperationEndpointGroupsGetEndpointGroupsIDParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEndpointGroupsGetEndpointGroupsID uses cmd flags to call endpoint api
func runOperationEndpointGroupsGetEndpointGroupsID(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := endpoint_groups.NewGetEndpointGroupsIDParams()
	if err, _ := retrieveOperationEndpointGroupsGetEndpointGroupsIDIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEndpointGroupsGetEndpointGroupsIDResult(appCli.EndpointGroups.GetEndpointGroupsID(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEndpointGroupsGetEndpointGroupsIDParamFlags registers all flags needed to fill params
func registerOperationEndpointGroupsGetEndpointGroupsIDParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEndpointGroupsGetEndpointGroupsIDIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEndpointGroupsGetEndpointGroupsIDIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Environment(Endpoint) group identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationEndpointGroupsGetEndpointGroupsIDIDFlag(m *endpoint_groups.GetEndpointGroupsIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationEndpointGroupsGetEndpointGroupsIDResult parses request result and return the string content
func parseOperationEndpointGroupsGetEndpointGroupsIDResult(resp0 *endpoint_groups.GetEndpointGroupsIDOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*endpoint_groups.GetEndpointGroupsIDOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getEndpointGroupsIdBadRequest is not supported

		// Non schema case: warning getEndpointGroupsIdNotFound is not supported

		// Non schema case: warning getEndpointGroupsIdInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
