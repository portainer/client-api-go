// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for NetworkEndpointSettings

// register flags to command
func registerModelNetworkEndpointSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkEndpointSettingsAliases(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsDriverOpts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsGlobalIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsGlobalIPV6PrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsIpaddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsIpamconfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsIpprefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsIPV6Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEndpointSettingsNetworkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkEndpointSettingsAliases(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: aliases []string array type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkEndpointSettingsDriverOpts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: driverOpts map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkEndpointSettingsEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "endpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
	}

	var endpointIdFlagDefault string

	_ = cmd.PersistentFlags().String(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerNetworkEndpointSettingsGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := ``

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerNetworkEndpointSettingsGlobalIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	globalIpv6AddressDescription := ``

	var globalIpv6AddressFlagName string
	if cmdPrefix == "" {
		globalIpv6AddressFlagName = "globalIPv6Address"
	} else {
		globalIpv6AddressFlagName = fmt.Sprintf("%v.globalIPv6Address", cmdPrefix)
	}

	var globalIpv6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(globalIpv6AddressFlagName, globalIpv6AddressFlagDefault, globalIpv6AddressDescription)

	return nil
}

func registerNetworkEndpointSettingsGlobalIPV6PrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	globalIpv6PrefixLenDescription := ``

	var globalIpv6PrefixLenFlagName string
	if cmdPrefix == "" {
		globalIpv6PrefixLenFlagName = "globalIPv6PrefixLen"
	} else {
		globalIpv6PrefixLenFlagName = fmt.Sprintf("%v.globalIPv6PrefixLen", cmdPrefix)
	}

	var globalIpv6PrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(globalIpv6PrefixLenFlagName, globalIpv6PrefixLenFlagDefault, globalIpv6PrefixLenDescription)

	return nil
}

func registerNetworkEndpointSettingsIpaddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipaddressDescription := ``

	var ipaddressFlagName string
	if cmdPrefix == "" {
		ipaddressFlagName = "ipaddress"
	} else {
		ipaddressFlagName = fmt.Sprintf("%v.ipaddress", cmdPrefix)
	}

	var ipaddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipaddressFlagName, ipaddressFlagDefault, ipaddressDescription)

	return nil
}

func registerNetworkEndpointSettingsIpamconfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ipamconfigFlagName string
	if cmdPrefix == "" {
		ipamconfigFlagName = "ipamconfig"
	} else {
		ipamconfigFlagName = fmt.Sprintf("%v.ipamconfig", cmdPrefix)
	}

	if err := registerModelNetworkEndpointIPAMConfigFlags(depth+1, ipamconfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkEndpointSettingsIpprefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipprefixLenDescription := ``

	var ipprefixLenFlagName string
	if cmdPrefix == "" {
		ipprefixLenFlagName = "ipprefixLen"
	} else {
		ipprefixLenFlagName = fmt.Sprintf("%v.ipprefixLen", cmdPrefix)
	}

	var ipprefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ipprefixLenFlagName, ipprefixLenFlagDefault, ipprefixLenDescription)

	return nil
}

func registerNetworkEndpointSettingsIPV6Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipv6GatewayDescription := ``

	var ipv6GatewayFlagName string
	if cmdPrefix == "" {
		ipv6GatewayFlagName = "ipv6Gateway"
	} else {
		ipv6GatewayFlagName = fmt.Sprintf("%v.ipv6Gateway", cmdPrefix)
	}

	var ipv6GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(ipv6GatewayFlagName, ipv6GatewayFlagDefault, ipv6GatewayDescription)

	return nil
}

func registerNetworkEndpointSettingsLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: links []string array type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkEndpointSettingsMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macAddressDescription := ``

	var macAddressFlagName string
	if cmdPrefix == "" {
		macAddressFlagName = "macAddress"
	} else {
		macAddressFlagName = fmt.Sprintf("%v.macAddress", cmdPrefix)
	}

	var macAddressFlagDefault string

	_ = cmd.PersistentFlags().String(macAddressFlagName, macAddressFlagDefault, macAddressDescription)

	return nil
}

func registerNetworkEndpointSettingsNetworkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	networkIdDescription := `Operational data`

	var networkIdFlagName string
	if cmdPrefix == "" {
		networkIdFlagName = "networkID"
	} else {
		networkIdFlagName = fmt.Sprintf("%v.networkID", cmdPrefix)
	}

	var networkIdFlagDefault string

	_ = cmd.PersistentFlags().String(networkIdFlagName, networkIdFlagDefault, networkIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkEndpointSettingsFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aliasesAdded := retrieveNetworkEndpointSettingsAliasesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aliasesAdded

	err, driverOptsAdded := retrieveNetworkEndpointSettingsDriverOptsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverOptsAdded

	err, endpointIdAdded := retrieveNetworkEndpointSettingsEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, gatewayAdded := retrieveNetworkEndpointSettingsGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, globalIpv6AddressAdded := retrieveNetworkEndpointSettingsGlobalIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalIpv6AddressAdded

	err, globalIpv6PrefixLenAdded := retrieveNetworkEndpointSettingsGlobalIPV6PrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalIpv6PrefixLenAdded

	err, ipaddressAdded := retrieveNetworkEndpointSettingsIpaddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipaddressAdded

	err, ipamconfigAdded := retrieveNetworkEndpointSettingsIpamconfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipamconfigAdded

	err, ipprefixLenAdded := retrieveNetworkEndpointSettingsIpprefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipprefixLenAdded

	err, ipv6GatewayAdded := retrieveNetworkEndpointSettingsIPV6GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipv6GatewayAdded

	err, linksAdded := retrieveNetworkEndpointSettingsLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linksAdded

	err, macAddressAdded := retrieveNetworkEndpointSettingsMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAddressAdded

	err, networkIdAdded := retrieveNetworkEndpointSettingsNetworkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkIdAdded

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsAliasesFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aliasesFlagName := fmt.Sprintf("%v.aliases", cmdPrefix)
	if cmd.Flags().Changed(aliasesFlagName) {
		// warning: aliases array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsDriverOptsFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	driverOptsFlagName := fmt.Sprintf("%v.driverOpts", cmdPrefix)
	if cmd.Flags().Changed(driverOptsFlagName) {
		// warning: driverOpts map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsEndpointIDFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.endpointID", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "endpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.endpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetString(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsGatewayFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gatewayFlagName := fmt.Sprintf("%v.gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = gatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsGlobalIPV6AddressFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalIpv6AddressFlagName := fmt.Sprintf("%v.globalIPv6Address", cmdPrefix)
	if cmd.Flags().Changed(globalIpv6AddressFlagName) {

		var globalIpv6AddressFlagName string
		if cmdPrefix == "" {
			globalIpv6AddressFlagName = "globalIPv6Address"
		} else {
			globalIpv6AddressFlagName = fmt.Sprintf("%v.globalIPv6Address", cmdPrefix)
		}

		globalIpv6AddressFlagValue, err := cmd.Flags().GetString(globalIpv6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6Address = globalIpv6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsGlobalIPV6PrefixLenFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalIpv6PrefixLenFlagName := fmt.Sprintf("%v.globalIPv6PrefixLen", cmdPrefix)
	if cmd.Flags().Changed(globalIpv6PrefixLenFlagName) {

		var globalIpv6PrefixLenFlagName string
		if cmdPrefix == "" {
			globalIpv6PrefixLenFlagName = "globalIPv6PrefixLen"
		} else {
			globalIpv6PrefixLenFlagName = fmt.Sprintf("%v.globalIPv6PrefixLen", cmdPrefix)
		}

		globalIpv6PrefixLenFlagValue, err := cmd.Flags().GetInt64(globalIpv6PrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6PrefixLen = globalIpv6PrefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsIpaddressFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipaddressFlagName := fmt.Sprintf("%v.ipaddress", cmdPrefix)
	if cmd.Flags().Changed(ipaddressFlagName) {

		var ipaddressFlagName string
		if cmdPrefix == "" {
			ipaddressFlagName = "ipaddress"
		} else {
			ipaddressFlagName = fmt.Sprintf("%v.ipaddress", cmdPrefix)
		}

		ipaddressFlagValue, err := cmd.Flags().GetString(ipaddressFlagName)
		if err != nil {
			return err, false
		}
		m.Ipaddress = ipaddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsIpamconfigFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipamconfigFlagName := fmt.Sprintf("%v.ipamconfig", cmdPrefix)
	if cmd.Flags().Changed(ipamconfigFlagName) {
		// info: complex object ipamconfig NetworkEndpointIPAMConfig is retrieved outside this Changed() block
	}
	ipamconfigFlagValue := m.Ipamconfig
	if swag.IsZero(ipamconfigFlagValue) {
		ipamconfigFlagValue = &models.NetworkEndpointIPAMConfig{}
	}

	err, ipamconfigAdded := retrieveModelNetworkEndpointIPAMConfigFlags(depth+1, ipamconfigFlagValue, ipamconfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipamconfigAdded
	if ipamconfigAdded {
		m.Ipamconfig = ipamconfigFlagValue
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsIpprefixLenFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipprefixLenFlagName := fmt.Sprintf("%v.ipprefixLen", cmdPrefix)
	if cmd.Flags().Changed(ipprefixLenFlagName) {

		var ipprefixLenFlagName string
		if cmdPrefix == "" {
			ipprefixLenFlagName = "ipprefixLen"
		} else {
			ipprefixLenFlagName = fmt.Sprintf("%v.ipprefixLen", cmdPrefix)
		}

		ipprefixLenFlagValue, err := cmd.Flags().GetInt64(ipprefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.IpprefixLen = ipprefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsIPV6GatewayFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipv6GatewayFlagName := fmt.Sprintf("%v.ipv6Gateway", cmdPrefix)
	if cmd.Flags().Changed(ipv6GatewayFlagName) {

		var ipv6GatewayFlagName string
		if cmdPrefix == "" {
			ipv6GatewayFlagName = "ipv6Gateway"
		} else {
			ipv6GatewayFlagName = fmt.Sprintf("%v.ipv6Gateway", cmdPrefix)
		}

		ipv6GatewayFlagValue, err := cmd.Flags().GetString(ipv6GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Gateway = ipv6GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsLinksFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linksFlagName := fmt.Sprintf("%v.links", cmdPrefix)
	if cmd.Flags().Changed(linksFlagName) {
		// warning: links array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsMacAddressFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macAddressFlagName := fmt.Sprintf("%v.macAddress", cmdPrefix)
	if cmd.Flags().Changed(macAddressFlagName) {

		var macAddressFlagName string
		if cmdPrefix == "" {
			macAddressFlagName = "macAddress"
		} else {
			macAddressFlagName = fmt.Sprintf("%v.macAddress", cmdPrefix)
		}

		macAddressFlagValue, err := cmd.Flags().GetString(macAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = macAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEndpointSettingsNetworkIDFlags(depth int, m *models.NetworkEndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkIdFlagName := fmt.Sprintf("%v.networkID", cmdPrefix)
	if cmd.Flags().Changed(networkIdFlagName) {

		var networkIdFlagName string
		if cmdPrefix == "" {
			networkIdFlagName = "networkID"
		} else {
			networkIdFlagName = fmt.Sprintf("%v.networkID", cmdPrefix)
		}

		networkIdFlagValue, err := cmd.Flags().GetString(networkIdFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkID = networkIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
