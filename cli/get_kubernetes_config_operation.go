// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/client/kubernetes"

	"github.com/spf13/cobra"
)

// makeOperationKubernetesGetKubernetesConfigCmd returns a cmd to handle operation getKubernetesConfig
func makeOperationKubernetesGetKubernetesConfigCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "GetKubernetesConfig",
		Short: `Generates kubeconfig file enabling client communication with k8s api server
**Access policy**: authenticated`,
		RunE: runOperationKubernetesGetKubernetesConfig,
	}

	if err := registerOperationKubernetesGetKubernetesConfigParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationKubernetesGetKubernetesConfig uses cmd flags to call endpoint api
func runOperationKubernetesGetKubernetesConfig(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := kubernetes.NewGetKubernetesConfigParams()
	if err, _ := retrieveOperationKubernetesGetKubernetesConfigExcludeIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationKubernetesGetKubernetesConfigIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationKubernetesGetKubernetesConfigResult(appCli.Kubernetes.GetKubernetesConfig(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationKubernetesGetKubernetesConfigParamFlags registers all flags needed to fill params
func registerOperationKubernetesGetKubernetesConfigParamFlags(cmd *cobra.Command) error {
	if err := registerOperationKubernetesGetKubernetesConfigExcludeIdsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationKubernetesGetKubernetesConfigIdsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationKubernetesGetKubernetesConfigExcludeIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	excludeIdsDescription := `will exclude these environments(endpoints)`

	var excludeIdsFlagName string
	if cmdPrefix == "" {
		excludeIdsFlagName = "excludeIds"
	} else {
		excludeIdsFlagName = fmt.Sprintf("%v.excludeIds", cmdPrefix)
	}

	var excludeIdsFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(excludeIdsFlagName, excludeIdsFlagDefault, excludeIdsDescription)

	return nil
}
func registerOperationKubernetesGetKubernetesConfigIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idsDescription := `will include only these environments(endpoints)`

	var idsFlagName string
	if cmdPrefix == "" {
		idsFlagName = "ids"
	} else {
		idsFlagName = fmt.Sprintf("%v.ids", cmdPrefix)
	}

	var idsFlagDefault []int64

	_ = cmd.PersistentFlags().Int64Slice(idsFlagName, idsFlagDefault, idsDescription)

	return nil
}

func retrieveOperationKubernetesGetKubernetesConfigExcludeIdsFlag(m *kubernetes.GetKubernetesConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("excludeIds") {

		var excludeIdsFlagName string
		if cmdPrefix == "" {
			excludeIdsFlagName = "excludeIds"
		} else {
			excludeIdsFlagName = fmt.Sprintf("%v.excludeIds", cmdPrefix)
		}

		excludeIdsFlagValues, err := cmd.Flags().GetInt64Slice(excludeIdsFlagName)
		if err != nil {
			return err, false
		}
		m.ExcludeIds = excludeIdsFlagValues

	}
	return nil, retAdded
}
func retrieveOperationKubernetesGetKubernetesConfigIdsFlag(m *kubernetes.GetKubernetesConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("ids") {

		var idsFlagName string
		if cmdPrefix == "" {
			idsFlagName = "ids"
		} else {
			idsFlagName = fmt.Sprintf("%v.ids", cmdPrefix)
		}

		idsFlagValues, err := cmd.Flags().GetInt64Slice(idsFlagName)
		if err != nil {
			return err, false
		}
		m.Ids = idsFlagValues

	}
	return nil, retAdded
}

// parseOperationKubernetesGetKubernetesConfigResult parses request result and return the string content
func parseOperationKubernetesGetKubernetesConfigResult(resp0 *kubernetes.GetKubernetesConfigOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getKubernetesConfigOK is not supported

		// Non schema case: warning getKubernetesConfigBadRequest is not supported

		// Non schema case: warning getKubernetesConfigUnauthorized is not supported

		// Non schema case: warning getKubernetesConfigForbidden is not supported

		// Non schema case: warning getKubernetesConfigNotFound is not supported

		// Non schema case: warning getKubernetesConfigInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getKubernetesConfigOK is not supported by go-swagger cli yet.

	return "", nil
}
