// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for ReleaseHookExecution

// register flags to command
func registerModelReleaseHookExecutionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReleaseHookExecutionCompletedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookExecutionPhase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReleaseHookExecutionStartedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReleaseHookExecutionCompletedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	completedAtDescription := `CompletedAt indicates the date/time this hook was completed.`

	var completedAtFlagName string
	if cmdPrefix == "" {
		completedAtFlagName = "completed_at"
	} else {
		completedAtFlagName = fmt.Sprintf("%v.completed_at", cmdPrefix)
	}

	var completedAtFlagDefault string

	_ = cmd.PersistentFlags().String(completedAtFlagName, completedAtFlagDefault, completedAtDescription)

	return nil
}

func registerReleaseHookExecutionPhase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	phaseDescription := `Phase indicates whether the hook completed successfully`

	var phaseFlagName string
	if cmdPrefix == "" {
		phaseFlagName = "phase"
	} else {
		phaseFlagName = fmt.Sprintf("%v.phase", cmdPrefix)
	}

	var phaseFlagDefault string

	_ = cmd.PersistentFlags().String(phaseFlagName, phaseFlagDefault, phaseDescription)

	return nil
}

func registerReleaseHookExecutionStartedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startedAtDescription := `StartedAt indicates the date/time this hook was started`

	var startedAtFlagName string
	if cmdPrefix == "" {
		startedAtFlagName = "started_at"
	} else {
		startedAtFlagName = fmt.Sprintf("%v.started_at", cmdPrefix)
	}

	var startedAtFlagDefault string

	_ = cmd.PersistentFlags().String(startedAtFlagName, startedAtFlagDefault, startedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReleaseHookExecutionFlags(depth int, m *models.ReleaseHookExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, completedAtAdded := retrieveReleaseHookExecutionCompletedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || completedAtAdded

	err, phaseAdded := retrieveReleaseHookExecutionPhaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || phaseAdded

	err, startedAtAdded := retrieveReleaseHookExecutionStartedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startedAtAdded

	return nil, retAdded
}

func retrieveReleaseHookExecutionCompletedAtFlags(depth int, m *models.ReleaseHookExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	completedAtFlagName := fmt.Sprintf("%v.completed_at", cmdPrefix)
	if cmd.Flags().Changed(completedAtFlagName) {

		var completedAtFlagName string
		if cmdPrefix == "" {
			completedAtFlagName = "completed_at"
		} else {
			completedAtFlagName = fmt.Sprintf("%v.completed_at", cmdPrefix)
		}

		completedAtFlagValue, err := cmd.Flags().GetString(completedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CompletedAt = completedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseHookExecutionPhaseFlags(depth int, m *models.ReleaseHookExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	phaseFlagName := fmt.Sprintf("%v.phase", cmdPrefix)
	if cmd.Flags().Changed(phaseFlagName) {

		var phaseFlagName string
		if cmdPrefix == "" {
			phaseFlagName = "phase"
		} else {
			phaseFlagName = fmt.Sprintf("%v.phase", cmdPrefix)
		}

		phaseFlagValue, err := cmd.Flags().GetString(phaseFlagName)
		if err != nil {
			return err, false
		}
		m.Phase = phaseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReleaseHookExecutionStartedAtFlags(depth int, m *models.ReleaseHookExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startedAtFlagName := fmt.Sprintf("%v.started_at", cmdPrefix)
	if cmd.Flags().Changed(startedAtFlagName) {

		var startedAtFlagName string
		if cmdPrefix == "" {
			startedAtFlagName = "started_at"
		} else {
			startedAtFlagName = fmt.Sprintf("%v.started_at", cmdPrefix)
		}

		startedAtFlagValue, err := cmd.Flags().GetString(startedAtFlagName)
		if err != nil {
			return err, false
		}
		m.StartedAt = startedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}
