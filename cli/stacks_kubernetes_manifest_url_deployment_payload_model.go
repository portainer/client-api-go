// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for StacksKubernetesManifestURLDeploymentPayload

// register flags to command
func registerModelStacksKubernetesManifestURLDeploymentPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStacksKubernetesManifestURLDeploymentPayloadComposeFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesManifestURLDeploymentPayloadManifestURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesManifestURLDeploymentPayloadNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStacksKubernetesManifestURLDeploymentPayloadStackName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStacksKubernetesManifestURLDeploymentPayloadComposeFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	composeFormatDescription := ``

	var composeFormatFlagName string
	if cmdPrefix == "" {
		composeFormatFlagName = "composeFormat"
	} else {
		composeFormatFlagName = fmt.Sprintf("%v.composeFormat", cmdPrefix)
	}

	var composeFormatFlagDefault bool

	_ = cmd.PersistentFlags().Bool(composeFormatFlagName, composeFormatFlagDefault, composeFormatDescription)

	return nil
}

func registerStacksKubernetesManifestURLDeploymentPayloadManifestURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	manifestUrlDescription := ``

	var manifestUrlFlagName string
	if cmdPrefix == "" {
		manifestUrlFlagName = "manifestURL"
	} else {
		manifestUrlFlagName = fmt.Sprintf("%v.manifestURL", cmdPrefix)
	}

	var manifestUrlFlagDefault string

	_ = cmd.PersistentFlags().String(manifestUrlFlagName, manifestUrlFlagDefault, manifestUrlDescription)

	return nil
}

func registerStacksKubernetesManifestURLDeploymentPayloadNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := ``

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerStacksKubernetesManifestURLDeploymentPayloadStackName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackNameDescription := ``

	var stackNameFlagName string
	if cmdPrefix == "" {
		stackNameFlagName = "stackName"
	} else {
		stackNameFlagName = fmt.Sprintf("%v.stackName", cmdPrefix)
	}

	var stackNameFlagDefault string

	_ = cmd.PersistentFlags().String(stackNameFlagName, stackNameFlagDefault, stackNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStacksKubernetesManifestURLDeploymentPayloadFlags(depth int, m *models.StacksKubernetesManifestURLDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, composeFormatAdded := retrieveStacksKubernetesManifestURLDeploymentPayloadComposeFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || composeFormatAdded

	err, manifestUrlAdded := retrieveStacksKubernetesManifestURLDeploymentPayloadManifestURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || manifestUrlAdded

	err, namespaceAdded := retrieveStacksKubernetesManifestURLDeploymentPayloadNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, stackNameAdded := retrieveStacksKubernetesManifestURLDeploymentPayloadStackNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackNameAdded

	return nil, retAdded
}

func retrieveStacksKubernetesManifestURLDeploymentPayloadComposeFormatFlags(depth int, m *models.StacksKubernetesManifestURLDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	composeFormatFlagName := fmt.Sprintf("%v.composeFormat", cmdPrefix)
	if cmd.Flags().Changed(composeFormatFlagName) {

		var composeFormatFlagName string
		if cmdPrefix == "" {
			composeFormatFlagName = "composeFormat"
		} else {
			composeFormatFlagName = fmt.Sprintf("%v.composeFormat", cmdPrefix)
		}

		composeFormatFlagValue, err := cmd.Flags().GetBool(composeFormatFlagName)
		if err != nil {
			return err, false
		}
		m.ComposeFormat = &composeFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesManifestURLDeploymentPayloadManifestURLFlags(depth int, m *models.StacksKubernetesManifestURLDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	manifestUrlFlagName := fmt.Sprintf("%v.manifestURL", cmdPrefix)
	if cmd.Flags().Changed(manifestUrlFlagName) {

		var manifestUrlFlagName string
		if cmdPrefix == "" {
			manifestUrlFlagName = "manifestURL"
		} else {
			manifestUrlFlagName = fmt.Sprintf("%v.manifestURL", cmdPrefix)
		}

		manifestUrlFlagValue, err := cmd.Flags().GetString(manifestUrlFlagName)
		if err != nil {
			return err, false
		}
		m.ManifestURL = manifestUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesManifestURLDeploymentPayloadNamespaceFlags(depth int, m *models.StacksKubernetesManifestURLDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStacksKubernetesManifestURLDeploymentPayloadStackNameFlags(depth int, m *models.StacksKubernetesManifestURLDeploymentPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackNameFlagName := fmt.Sprintf("%v.stackName", cmdPrefix)
	if cmd.Flags().Changed(stackNameFlagName) {

		var stackNameFlagName string
		if cmdPrefix == "" {
			stackNameFlagName = "stackName"
		} else {
			stackNameFlagName = fmt.Sprintf("%v.stackName", cmdPrefix)
		}

		stackNameFlagValue, err := cmd.Flags().GetString(stackNameFlagName)
		if err != nil {
			return err, false
		}
		m.StackName = stackNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
