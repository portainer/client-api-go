// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for UsersUserUpdatePayload

// register flags to command
func registerModelUsersUserUpdatePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUsersUserUpdatePayloadPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUsersUserUpdatePayloadRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUsersUserUpdatePayloadTheme(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUsersUserUpdatePayloadUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUsersUserUpdatePayloadPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `Required. `

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerUsersUserUpdatePayloadRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := `Enum: [1,2]. Required. User role (1 for administrator account and 2 for regular account)`

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault int64

	_ = cmd.PersistentFlags().Int64(roleFlagName, roleFlagDefault, roleDescription)

	if err := cmd.RegisterFlagCompletionFunc(roleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUsersUserUpdatePayloadTheme(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var themeFlagName string
	if cmdPrefix == "" {
		themeFlagName = "theme"
	} else {
		themeFlagName = fmt.Sprintf("%v.theme", cmdPrefix)
	}

	if err := registerModelUsersThemePayloadFlags(depth+1, themeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUsersUserUpdatePayloadUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUsersUserUpdatePayloadFlags(depth int, m *models.UsersUserUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, passwordAdded := retrieveUsersUserUpdatePayloadPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, roleAdded := retrieveUsersUserUpdatePayloadRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, themeAdded := retrieveUsersUserUpdatePayloadThemeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || themeAdded

	err, usernameAdded := retrieveUsersUserUpdatePayloadUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveUsersUserUpdatePayloadPasswordFlags(depth int, m *models.UsersUserUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = &passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUsersUserUpdatePayloadRoleFlags(depth int, m *models.UsersUserUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetInt64(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = &roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUsersUserUpdatePayloadThemeFlags(depth int, m *models.UsersUserUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	themeFlagName := fmt.Sprintf("%v.theme", cmdPrefix)
	if cmd.Flags().Changed(themeFlagName) {
		// info: complex object theme UsersThemePayload is retrieved outside this Changed() block
	}
	themeFlagValue := m.Theme
	if swag.IsZero(themeFlagValue) {
		themeFlagValue = &models.UsersThemePayload{}
	}

	err, themeAdded := retrieveModelUsersThemePayloadFlags(depth+1, themeFlagValue, themeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || themeAdded
	if themeAdded {
		m.Theme = themeFlagValue
	}

	return nil, retAdded
}

func retrieveUsersUserUpdatePayloadUsernameFlags(depth int, m *models.UsersUserUpdatePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = &usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
