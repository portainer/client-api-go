// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointedgeEndpointEdgeStatusInspectResponse

// register flags to command
func registerModelEndpointedgeEndpointEdgeStatusInspectResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointedgeEndpointEdgeStatusInspectResponseCheckin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEndpointEdgeStatusInspectResponseCredentials(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEndpointEdgeStatusInspectResponsePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEndpointEdgeStatusInspectResponseSchedules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEndpointEdgeStatusInspectResponseStacks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeEndpointEdgeStatusInspectResponseStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointedgeEndpointEdgeStatusInspectResponseCheckin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkinDescription := `The current value of CheckinInterval`

	var checkinFlagName string
	if cmdPrefix == "" {
		checkinFlagName = "checkin"
	} else {
		checkinFlagName = fmt.Sprintf("%v.checkin", cmdPrefix)
	}

	var checkinFlagDefault int64

	_ = cmd.PersistentFlags().Int64(checkinFlagName, checkinFlagDefault, checkinDescription)

	return nil
}

func registerEndpointedgeEndpointEdgeStatusInspectResponseCredentials(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	credentialsDescription := ``

	var credentialsFlagName string
	if cmdPrefix == "" {
		credentialsFlagName = "credentials"
	} else {
		credentialsFlagName = fmt.Sprintf("%v.credentials", cmdPrefix)
	}

	var credentialsFlagDefault string

	_ = cmd.PersistentFlags().String(credentialsFlagName, credentialsFlagDefault, credentialsDescription)

	return nil
}

func registerEndpointedgeEndpointEdgeStatusInspectResponsePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `The tunnel port`

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerEndpointedgeEndpointEdgeStatusInspectResponseSchedules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: schedules []*EndpointedgeEdgeJobResponse array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointedgeEndpointEdgeStatusInspectResponseStacks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: stacks []*EndpointedgeStackStatusResponse array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointedgeEndpointEdgeStatusInspectResponseStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Status represents the environment(endpoint) status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointedgeEndpointEdgeStatusInspectResponseFlags(depth int, m *models.EndpointedgeEndpointEdgeStatusInspectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, checkinAdded := retrieveEndpointedgeEndpointEdgeStatusInspectResponseCheckinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkinAdded

	err, credentialsAdded := retrieveEndpointedgeEndpointEdgeStatusInspectResponseCredentialsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialsAdded

	err, portAdded := retrieveEndpointedgeEndpointEdgeStatusInspectResponsePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, schedulesAdded := retrieveEndpointedgeEndpointEdgeStatusInspectResponseSchedulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schedulesAdded

	err, stacksAdded := retrieveEndpointedgeEndpointEdgeStatusInspectResponseStacksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stacksAdded

	err, statusAdded := retrieveEndpointedgeEndpointEdgeStatusInspectResponseStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveEndpointedgeEndpointEdgeStatusInspectResponseCheckinFlags(depth int, m *models.EndpointedgeEndpointEdgeStatusInspectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkinFlagName := fmt.Sprintf("%v.checkin", cmdPrefix)
	if cmd.Flags().Changed(checkinFlagName) {

		var checkinFlagName string
		if cmdPrefix == "" {
			checkinFlagName = "checkin"
		} else {
			checkinFlagName = fmt.Sprintf("%v.checkin", cmdPrefix)
		}

		checkinFlagValue, err := cmd.Flags().GetInt64(checkinFlagName)
		if err != nil {
			return err, false
		}
		m.Checkin = checkinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEndpointEdgeStatusInspectResponseCredentialsFlags(depth int, m *models.EndpointedgeEndpointEdgeStatusInspectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	credentialsFlagName := fmt.Sprintf("%v.credentials", cmdPrefix)
	if cmd.Flags().Changed(credentialsFlagName) {

		var credentialsFlagName string
		if cmdPrefix == "" {
			credentialsFlagName = "credentials"
		} else {
			credentialsFlagName = fmt.Sprintf("%v.credentials", cmdPrefix)
		}

		credentialsFlagValue, err := cmd.Flags().GetString(credentialsFlagName)
		if err != nil {
			return err, false
		}
		m.Credentials = credentialsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEndpointEdgeStatusInspectResponsePortFlags(depth int, m *models.EndpointedgeEndpointEdgeStatusInspectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeEndpointEdgeStatusInspectResponseSchedulesFlags(depth int, m *models.EndpointedgeEndpointEdgeStatusInspectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schedulesFlagName := fmt.Sprintf("%v.schedules", cmdPrefix)
	if cmd.Flags().Changed(schedulesFlagName) {
		// warning: schedules array type []*EndpointedgeEdgeJobResponse is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointedgeEndpointEdgeStatusInspectResponseStacksFlags(depth int, m *models.EndpointedgeEndpointEdgeStatusInspectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stacksFlagName := fmt.Sprintf("%v.stacks", cmdPrefix)
	if cmd.Flags().Changed(stacksFlagName) {
		// warning: stacks array type []*EndpointedgeStackStatusResponse is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointedgeEndpointEdgeStatusInspectResponseStatusFlags(depth int, m *models.EndpointedgeEndpointEdgeStatusInspectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
