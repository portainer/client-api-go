// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for OpenamtDeviceFeaturesPayload

// register flags to command
func registerModelOpenamtDeviceFeaturesPayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOpenamtDeviceFeaturesPayloadFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOpenamtDeviceFeaturesPayloadFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var featuresFlagName string
	if cmdPrefix == "" {
		featuresFlagName = "features"
	} else {
		featuresFlagName = fmt.Sprintf("%v.features", cmdPrefix)
	}

	if err := registerModelPortainerOpenAMTDeviceEnabledFeaturesFlags(depth+1, featuresFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOpenamtDeviceFeaturesPayloadFlags(depth int, m *models.OpenamtDeviceFeaturesPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, featuresAdded := retrieveOpenamtDeviceFeaturesPayloadFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded

	return nil, retAdded
}

func retrieveOpenamtDeviceFeaturesPayloadFeaturesFlags(depth int, m *models.OpenamtDeviceFeaturesPayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featuresFlagName := fmt.Sprintf("%v.features", cmdPrefix)
	if cmd.Flags().Changed(featuresFlagName) {
		// info: complex object features PortainerOpenAMTDeviceEnabledFeatures is retrieved outside this Changed() block
	}
	featuresFlagValue := m.Features
	if swag.IsZero(featuresFlagValue) {
		featuresFlagValue = &models.PortainerOpenAMTDeviceEnabledFeatures{}
	}

	err, featuresAdded := retrieveModelPortainerOpenAMTDeviceEnabledFeaturesFlags(depth+1, featuresFlagValue, featuresFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded
	if featuresAdded {
		m.Features = featuresFlagValue
	}

	return nil, retAdded
}
