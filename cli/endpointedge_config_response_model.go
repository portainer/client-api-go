// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/portainer/client-api-go/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointedgeConfigResponse

// register flags to command
func registerModelEndpointedgeConfigResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointedgeConfigResponseName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeConfigResponseNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeConfigResponsePrePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeConfigResponseRePullImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeConfigResponseRegistryCredentials(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointedgeConfigResponseStackFileContent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointedgeConfigResponseName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEndpointedgeConfigResponseNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := `Namespace to use for Kubernetes manifests, leave empty to use the namespaces defined in the manifest`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

func registerEndpointedgeConfigResponsePrePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prePullImageDescription := ``

	var prePullImageFlagName string
	if cmdPrefix == "" {
		prePullImageFlagName = "prePullImage"
	} else {
		prePullImageFlagName = fmt.Sprintf("%v.prePullImage", cmdPrefix)
	}

	var prePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(prePullImageFlagName, prePullImageFlagDefault, prePullImageDescription)

	return nil
}

func registerEndpointedgeConfigResponseRePullImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rePullImageDescription := ``

	var rePullImageFlagName string
	if cmdPrefix == "" {
		rePullImageFlagName = "rePullImage"
	} else {
		rePullImageFlagName = fmt.Sprintf("%v.rePullImage", cmdPrefix)
	}

	var rePullImageFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rePullImageFlagName, rePullImageFlagDefault, rePullImageDescription)

	return nil
}

func registerEndpointedgeConfigResponseRegistryCredentials(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: registryCredentials []*PortainereeEdgeRegistryCredential array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointedgeConfigResponseStackFileContent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stackFileContentDescription := ``

	var stackFileContentFlagName string
	if cmdPrefix == "" {
		stackFileContentFlagName = "stackFileContent"
	} else {
		stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	}

	var stackFileContentFlagDefault string

	_ = cmd.PersistentFlags().String(stackFileContentFlagName, stackFileContentFlagDefault, stackFileContentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointedgeConfigResponseFlags(depth int, m *models.EndpointedgeConfigResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nameAdded := retrieveEndpointedgeConfigResponseNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, namespaceAdded := retrieveEndpointedgeConfigResponseNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	err, prePullImageAdded := retrieveEndpointedgeConfigResponsePrePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prePullImageAdded

	err, rePullImageAdded := retrieveEndpointedgeConfigResponseRePullImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rePullImageAdded

	err, registryCredentialsAdded := retrieveEndpointedgeConfigResponseRegistryCredentialsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryCredentialsAdded

	err, stackFileContentAdded := retrieveEndpointedgeConfigResponseStackFileContentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackFileContentAdded

	return nil, retAdded
}

func retrieveEndpointedgeConfigResponseNameFlags(depth int, m *models.EndpointedgeConfigResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeConfigResponseNamespaceFlags(depth int, m *models.EndpointedgeConfigResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeConfigResponsePrePullImageFlags(depth int, m *models.EndpointedgeConfigResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prePullImageFlagName := fmt.Sprintf("%v.prePullImage", cmdPrefix)
	if cmd.Flags().Changed(prePullImageFlagName) {

		var prePullImageFlagName string
		if cmdPrefix == "" {
			prePullImageFlagName = "prePullImage"
		} else {
			prePullImageFlagName = fmt.Sprintf("%v.prePullImage", cmdPrefix)
		}

		prePullImageFlagValue, err := cmd.Flags().GetBool(prePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.PrePullImage = &prePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeConfigResponseRePullImageFlags(depth int, m *models.EndpointedgeConfigResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rePullImageFlagName := fmt.Sprintf("%v.rePullImage", cmdPrefix)
	if cmd.Flags().Changed(rePullImageFlagName) {

		var rePullImageFlagName string
		if cmdPrefix == "" {
			rePullImageFlagName = "rePullImage"
		} else {
			rePullImageFlagName = fmt.Sprintf("%v.rePullImage", cmdPrefix)
		}

		rePullImageFlagValue, err := cmd.Flags().GetBool(rePullImageFlagName)
		if err != nil {
			return err, false
		}
		m.RePullImage = &rePullImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointedgeConfigResponseRegistryCredentialsFlags(depth int, m *models.EndpointedgeConfigResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryCredentialsFlagName := fmt.Sprintf("%v.registryCredentials", cmdPrefix)
	if cmd.Flags().Changed(registryCredentialsFlagName) {
		// warning: registryCredentials array type []*PortainereeEdgeRegistryCredential is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointedgeConfigResponseStackFileContentFlags(depth int, m *models.EndpointedgeConfigResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackFileContentFlagName := fmt.Sprintf("%v.stackFileContent", cmdPrefix)
	if cmd.Flags().Changed(stackFileContentFlagName) {

		var stackFileContentFlagName string
		if cmdPrefix == "" {
			stackFileContentFlagName = "stackFileContent"
		} else {
			stackFileContentFlagName = fmt.Sprintf("%v.stackFileContent", cmdPrefix)
		}

		stackFileContentFlagValue, err := cmd.Flags().GetString(stackFileContentFlagName)
		if err != nil {
			return err, false
		}
		m.StackFileContent = stackFileContentFlagValue

		retAdded = true
	}

	return nil, retAdded
}
