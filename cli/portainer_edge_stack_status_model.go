// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for PortainerEdgeStackStatus

// register flags to command
func registerModelPortainerEdgeStackStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortainerEdgeStackStatusDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerEdgeStackStatusEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerEdgeStackStatusError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortainerEdgeStackStatusType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainerEdgeStackStatusDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var detailsFlagName string
	if cmdPrefix == "" {
		detailsFlagName = "Details"
	} else {
		detailsFlagName = fmt.Sprintf("%v.Details", cmdPrefix)
	}

	if err := registerModelPortainerEdgeStackStatusDetailsFlags(depth+1, detailsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortainerEdgeStackStatusEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "EndpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
	}

	var endpointIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerPortainerEdgeStackStatusError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorDescription := ``

	var errorFlagName string
	if cmdPrefix == "" {
		errorFlagName = "Error"
	} else {
		errorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
	}

	var errorFlagDefault string

	_ = cmd.PersistentFlags().String(errorFlagName, errorFlagDefault, errorDescription)

	return nil
}

func registerPortainerEdgeStackStatusType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Deprecated`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortainerEdgeStackStatusFlags(depth int, m *models.PortainerEdgeStackStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, detailsAdded := retrievePortainerEdgeStackStatusDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || detailsAdded

	err, endpointIdAdded := retrievePortainerEdgeStackStatusEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, errorAdded := retrievePortainerEdgeStackStatusErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorAdded

	err, typeAdded := retrievePortainerEdgeStackStatusTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePortainerEdgeStackStatusDetailsFlags(depth int, m *models.PortainerEdgeStackStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	detailsFlagName := fmt.Sprintf("%v.Details", cmdPrefix)
	if cmd.Flags().Changed(detailsFlagName) {
		// info: complex object Details PortainerEdgeStackStatusDetails is retrieved outside this Changed() block
	}
	detailsFlagValue := m.Details
	if swag.IsZero(detailsFlagValue) {
		detailsFlagValue = &models.PortainerEdgeStackStatusDetails{}
	}

	err, detailsAdded := retrieveModelPortainerEdgeStackStatusDetailsFlags(depth+1, detailsFlagValue, detailsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || detailsAdded
	if detailsAdded {
		m.Details = detailsFlagValue
	}

	return nil, retAdded
}

func retrievePortainerEdgeStackStatusEndpointIDFlags(depth int, m *models.PortainerEdgeStackStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.EndpointID", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "EndpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetInt64(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerEdgeStackStatusErrorFlags(depth int, m *models.PortainerEdgeStackStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorFlagName := fmt.Sprintf("%v.Error", cmdPrefix)
	if cmd.Flags().Changed(errorFlagName) {

		var errorFlagName string
		if cmdPrefix == "" {
			errorFlagName = "Error"
		} else {
			errorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
		}

		errorFlagValue, err := cmd.Flags().GetString(errorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = errorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortainerEdgeStackStatusTypeFlags(depth int, m *models.PortainerEdgeStackStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetInt64(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
