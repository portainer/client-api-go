// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/portainer/client-api-go/v2/models"

	"github.com/spf13/cobra"
)

// Schema cli for GithubComPortainerPortainerAPIHTTPHandlerSystemStatus

// register flags to command
func registerModelGithubComPortainerPortainerAPIHTTPHandlerSystemStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemStatusVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemStatusDemoEnvironment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGithubComPortainerPortainerAPIHTTPHandlerSystemStatusInstanceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemStatusVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Portainer API version`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "Version"
	} else {
		versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemStatusDemoEnvironment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var demoEnvironmentFlagName string
	if cmdPrefix == "" {
		demoEnvironmentFlagName = "demoEnvironment"
	} else {
		demoEnvironmentFlagName = fmt.Sprintf("%v.demoEnvironment", cmdPrefix)
	}

	if err := registerModelGithubComPortainerPortainerAPIDemoEnvironmentDetailsFlags(depth+1, demoEnvironmentFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGithubComPortainerPortainerAPIHTTPHandlerSystemStatusInstanceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	instanceIdDescription := `Server Instance ID`

	var instanceIdFlagName string
	if cmdPrefix == "" {
		instanceIdFlagName = "instanceID"
	} else {
		instanceIdFlagName = fmt.Sprintf("%v.instanceID", cmdPrefix)
	}

	var instanceIdFlagDefault string

	_ = cmd.PersistentFlags().String(instanceIdFlagName, instanceIdFlagDefault, instanceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGithubComPortainerPortainerAPIHTTPHandlerSystemStatusFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, versionAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemStatusVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, demoEnvironmentAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemStatusDemoEnvironmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || demoEnvironmentAdded

	err, instanceIdAdded := retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemStatusInstanceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceIdAdded

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemStatusVersionFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "Version"
		} else {
			versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemStatusDemoEnvironmentFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	demoEnvironmentFlagName := fmt.Sprintf("%v.demoEnvironment", cmdPrefix)
	if cmd.Flags().Changed(demoEnvironmentFlagName) {
		// info: complex object demoEnvironment GithubComPortainerPortainerAPIDemoEnvironmentDetails is retrieved outside this Changed() block
	}
	demoEnvironmentFlagValue := m.DemoEnvironment
	if swag.IsZero(demoEnvironmentFlagValue) {
		demoEnvironmentFlagValue = &models.GithubComPortainerPortainerAPIDemoEnvironmentDetails{}
	}

	err, demoEnvironmentAdded := retrieveModelGithubComPortainerPortainerAPIDemoEnvironmentDetailsFlags(depth+1, demoEnvironmentFlagValue, demoEnvironmentFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || demoEnvironmentAdded
	if demoEnvironmentAdded {
		m.DemoEnvironment = demoEnvironmentFlagValue
	}

	return nil, retAdded
}

func retrieveGithubComPortainerPortainerAPIHTTPHandlerSystemStatusInstanceIDFlags(depth int, m *models.GithubComPortainerPortainerAPIHTTPHandlerSystemStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceIdFlagName := fmt.Sprintf("%v.instanceID", cmdPrefix)
	if cmd.Flags().Changed(instanceIdFlagName) {

		var instanceIdFlagName string
		if cmdPrefix == "" {
			instanceIdFlagName = "instanceID"
		} else {
			instanceIdFlagName = fmt.Sprintf("%v.instanceID", cmdPrefix)
		}

		instanceIdFlagValue, err := cmd.Flags().GetString(instanceIdFlagName)
		if err != nil {
			return err, false
		}
		m.InstanceID = instanceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
