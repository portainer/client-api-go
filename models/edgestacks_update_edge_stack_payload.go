// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgestacksUpdateEdgeStackPayload edgestacks update edge stack payload
//
// swagger:model edgestacks.updateEdgeStackPayload
type EdgestacksUpdateEdgeStackPayload struct {

	// Deployment type to deploy this stack
	// Valid values are: 0 - 'compose', 1 - 'kubernetes'
	// for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
	// kubernetes deploytype is enabled only for kubernetes environments(endpoints)
	// Example: 0
	// Enum: [0 1]
	DeploymentType int64 `json:"deploymentType,omitempty"`

	// edge groups
	EdgeGroups []int64 `json:"edgeGroups"`

	// stack file content
	StackFileContent string `json:"stackFileContent,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this edgestacks update edge stack payload
func (m *EdgestacksUpdateEdgeStackPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var edgestacksUpdateEdgeStackPayloadTypeDeploymentTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgestacksUpdateEdgeStackPayloadTypeDeploymentTypePropEnum = append(edgestacksUpdateEdgeStackPayloadTypeDeploymentTypePropEnum, v)
	}
}

// prop value enum
func (m *EdgestacksUpdateEdgeStackPayload) validateDeploymentTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, edgestacksUpdateEdgeStackPayloadTypeDeploymentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EdgestacksUpdateEdgeStackPayload) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentTypeEnum("deploymentType", "body", m.DeploymentType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this edgestacks update edge stack payload based on context it is used
func (m *EdgestacksUpdateEdgeStackPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EdgestacksUpdateEdgeStackPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgestacksUpdateEdgeStackPayload) UnmarshalBinary(b []byte) error {
	var res EdgestacksUpdateEdgeStackPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
