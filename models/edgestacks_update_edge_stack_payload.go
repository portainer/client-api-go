// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EdgestacksUpdateEdgeStackPayload edgestacks update edge stack payload
//
// swagger:model edgestacks.updateEdgeStackPayload
type EdgestacksUpdateEdgeStackPayload struct {

	// deployment type
	DeploymentType PortainereeEdgeStackDeploymentType `json:"deploymentType,omitempty"`

	// edge groups
	EdgeGroups []int64 `json:"edgeGroups"`

	// pre pull image
	PrePullImage *bool `json:"prePullImage,omitempty"`

	// re pull image
	RePullImage *bool `json:"rePullImage,omitempty"`

	// registries
	Registries []int64 `json:"registries"`

	// retry deploy
	RetryDeploy *bool `json:"retryDeploy,omitempty"`

	// stack file content
	StackFileContent string `json:"stackFileContent,omitempty"`

	// Uses the manifest's namespaces instead of the default one
	UseManifestNamespaces *bool `json:"useManifestNamespaces,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this edgestacks update edge stack payload
func (m *EdgestacksUpdateEdgeStackPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgestacksUpdateEdgeStackPayload) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	if err := m.DeploymentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deploymentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deploymentType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this edgestacks update edge stack payload based on the context it is used
func (m *EdgestacksUpdateEdgeStackPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeploymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgestacksUpdateEdgeStackPayload) contextValidateDeploymentType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeploymentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deploymentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deploymentType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgestacksUpdateEdgeStackPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgestacksUpdateEdgeStackPayload) UnmarshalBinary(b []byte) error {
	var res EdgestacksUpdateEdgeStackPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
