// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PodsecuritySupplementalGroupsStrategyType podsecurity supplemental groups strategy type
//
// swagger:model podsecurity.SupplementalGroupsStrategyType
type PodsecuritySupplementalGroupsStrategyType string

func NewPodsecuritySupplementalGroupsStrategyType(value PodsecuritySupplementalGroupsStrategyType) *PodsecuritySupplementalGroupsStrategyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PodsecuritySupplementalGroupsStrategyType.
func (m PodsecuritySupplementalGroupsStrategyType) Pointer() *PodsecuritySupplementalGroupsStrategyType {
	return &m
}

const (

	// PodsecuritySupplementalGroupsStrategyTypeMayRunAs captures enum value "MayRunAs"
	PodsecuritySupplementalGroupsStrategyTypeMayRunAs PodsecuritySupplementalGroupsStrategyType = "MayRunAs"

	// PodsecuritySupplementalGroupsStrategyTypeMustRunAs captures enum value "MustRunAs"
	PodsecuritySupplementalGroupsStrategyTypeMustRunAs PodsecuritySupplementalGroupsStrategyType = "MustRunAs"

	// PodsecuritySupplementalGroupsStrategyTypeRunAsAny captures enum value "RunAsAny"
	PodsecuritySupplementalGroupsStrategyTypeRunAsAny PodsecuritySupplementalGroupsStrategyType = "RunAsAny"
)

// for schema
var podsecuritySupplementalGroupsStrategyTypeEnum []interface{}

func init() {
	var res []PodsecuritySupplementalGroupsStrategyType
	if err := json.Unmarshal([]byte(`["MayRunAs","MustRunAs","RunAsAny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		podsecuritySupplementalGroupsStrategyTypeEnum = append(podsecuritySupplementalGroupsStrategyTypeEnum, v)
	}
}

func (m PodsecuritySupplementalGroupsStrategyType) validatePodsecuritySupplementalGroupsStrategyTypeEnum(path, location string, value PodsecuritySupplementalGroupsStrategyType) error {
	if err := validate.EnumCase(path, location, value, podsecuritySupplementalGroupsStrategyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this podsecurity supplemental groups strategy type
func (m PodsecuritySupplementalGroupsStrategyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePodsecuritySupplementalGroupsStrategyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this podsecurity supplemental groups strategy type based on context it is used
func (m PodsecuritySupplementalGroupsStrategyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
