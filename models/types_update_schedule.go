// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesUpdateSchedule types update schedule
//
// swagger:model types.UpdateSchedule
type TypesUpdateSchedule struct {

	// Name of the agent image, does not include the registry
	// Example: portainer/agent:latest
	AgentImage string `json:"agentImage,omitempty"`

	// Created timestamp
	// Example: 1564897200
	Created int64 `json:"created,omitempty"`

	// Created by user id
	// Example: 1
	CreatedBy int64 `json:"createdBy,omitempty"`

	// EdgeGroups to be updated
	//
	// There is some duplication here with EdgeStack.EdgeGroups
	// EdgeStack.EdgeGroup should have only one group which a temporary group, used only for the update
	// This field is saved only to show which groups the user chose when creating the schedule
	// Example: [1]
	EdgeGroupIds []int64 `json:"edgeGroupIds"`

	// EdgeStack Identifier
	// Example: 1
	EdgeStackID int64 `json:"edgeStackId,omitempty"`

	// Deprecated - use Environment.Agent.PreviousVersion instead
	EnvironmentsPreviousVersions map[string]string `json:"environmentsPreviousVersions,omitempty"`

	// EdgeUpdateSchedule Identifier
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the schedule
	// Example: Update Schedule
	Name string `json:"name,omitempty"`

	// ID of registry
	// Example: 1
	RegistryID int64 `json:"registryId,omitempty"`

	// Type of the update (1 - update, 2 - rollback)
	// Example: 1
	// Enum: [1,2]
	Type int64 `json:"type,omitempty"`

	// Name of the updater image, does not include the registry but must include a tag
	// Example: portainer/portainer-updater:latest
	UpdaterImage string `json:"updaterImage,omitempty"`

	// Deprecated
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this types update schedule
func (m *TypesUpdateSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var typesUpdateScheduleTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesUpdateScheduleTypeTypePropEnum = append(typesUpdateScheduleTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *TypesUpdateSchedule) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, typesUpdateScheduleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TypesUpdateSchedule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this types update schedule based on context it is used
func (m *TypesUpdateSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TypesUpdateSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesUpdateSchedule) UnmarshalBinary(b []byte) error {
	var res TypesUpdateSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
