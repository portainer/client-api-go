// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SettingsSettingsUpdatePayload settings settings update payload
//
// swagger:model settings.settingsUpdatePayload
type SettingsSettingsUpdatePayload struct {

	// Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth
	// Example: 1
	AuthenticationMethod int64 `json:"authenticationMethod,omitempty"`

	// A list of label name & value that will be used to hide containers when querying containers
	BlackListedLabels []*PortainerPair `json:"blackListedLabels"`

	// The default check in interval for edge agent (in seconds)
	// Example: 5
	EdgeAgentCheckinInterval int64 `json:"edgeAgentCheckinInterval,omitempty"`

	// Whether edge compute features are enabled
	// Example: true
	EnableEdgeComputeFeatures bool `json:"enableEdgeComputeFeatures,omitempty"`

	// Whether telemetry is enabled
	// Example: false
	EnableTelemetry bool `json:"enableTelemetry,omitempty"`

	// Helm repository URL
	// Example: https://charts.bitnami.com/bitnami
	HelmRepositoryURL string `json:"helmRepositoryURL,omitempty"`

	// The expiry of a Kubeconfig
	// Example: 24h
	KubeconfigExpiry *string `json:"kubeconfigExpiry,omitempty"`

	// Kubectl Shell Image
	// Example: portainer/kubectl-shell:latest
	KubectlShellImage string `json:"kubectlShellImage,omitempty"`

	// ldapsettings
	Ldapsettings *PortainerLDAPSettings `json:"ldapsettings,omitempty"`

	// URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string
	// Example: https://mycompany.mydomain.tld/logo.png
	LogoURL string `json:"logoURL,omitempty"`

	// oauth settings
	OauthSettings *PortainerOAuthSettings `json:"oauthSettings,omitempty"`

	// The interval in which environment(endpoint) snapshots are created
	// Example: 5m
	SnapshotInterval string `json:"snapshotInterval,omitempty"`

	// URL to the templates that will be displayed in the UI when navigating to App Templates
	// Example: https://raw.githubusercontent.com/portainer/templates/master/templates.json
	TemplatesURL string `json:"templatesURL,omitempty"`

	// The duration of a user session
	// Example: 5m
	UserSessionTimeout string `json:"userSessionTimeout,omitempty"`
}

// Validate validates this settings settings update payload
func (m *SettingsSettingsUpdatePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlackListedLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapsettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsSettingsUpdatePayload) validateBlackListedLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.BlackListedLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.BlackListedLabels); i++ {
		if swag.IsZero(m.BlackListedLabels[i]) { // not required
			continue
		}

		if m.BlackListedLabels[i] != nil {
			if err := m.BlackListedLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) validateLdapsettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Ldapsettings) { // not required
		return nil
	}

	if m.Ldapsettings != nil {
		if err := m.Ldapsettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapsettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapsettings")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) validateOauthSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthSettings) { // not required
		return nil
	}

	if m.OauthSettings != nil {
		if err := m.OauthSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oauthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oauthSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this settings settings update payload based on the context it is used
func (m *SettingsSettingsUpdatePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlackListedLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapsettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOauthSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateBlackListedLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlackListedLabels); i++ {

		if m.BlackListedLabels[i] != nil {
			if err := m.BlackListedLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateLdapsettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Ldapsettings != nil {
		if err := m.Ldapsettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapsettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapsettings")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateOauthSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.OauthSettings != nil {
		if err := m.OauthSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oauthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oauthSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsSettingsUpdatePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsSettingsUpdatePayload) UnmarshalBinary(b []byte) error {
	var res SettingsSettingsUpdatePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
