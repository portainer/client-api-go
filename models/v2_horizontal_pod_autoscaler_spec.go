// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2HorizontalPodAutoscalerSpec v2 horizontal pod autoscaler spec
//
// swagger:model v2.HorizontalPodAutoscalerSpec
type V2HorizontalPodAutoscalerSpec struct {

	// behavior configures the scaling behavior of the target
	// in both Up and Down directions (scaleUp and scaleDown fields respectively).
	// If not set, the default HPAScalingRules for scale up and scale down are used.
	// +optional
	Behavior *V2HorizontalPodAutoscalerBehavior `json:"behavior,omitempty"`

	// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
	// It cannot be less that minReplicas.
	MaxReplicas int64 `json:"maxReplicas,omitempty"`

	// metrics contains the specifications for which to use to calculate the
	// desired replica count (the maximum replica count across all metrics will
	// be used).  The desired replica count is calculated multiplying the
	// ratio between the target value and the current value by the current
	// number of pods.  Ergo, metrics used must decrease as the pod count is
	// increased, and vice-versa.  See the individual metric source types for
	// more information about how each type of metric must respond.
	// If not set, the default metric will be set to 80% average CPU utilization.
	// +listType=atomic
	// +optional
	Metrics []*V2MetricSpec `json:"metrics"`

	// minReplicas is the lower limit for the number of replicas to which the autoscaler
	// can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
	// alpha feature gate HPAScaleToZero is enabled and at least one Object or External
	// metric is configured.  Scaling is active as long as at least one metric value is
	// available.
	// +optional
	MinReplicas int64 `json:"minReplicas,omitempty"`

	// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
	// should be collected, as well as to actually change the replica count.
	ScaleTargetRef *V2CrossVersionObjectReference `json:"scaleTargetRef,omitempty"`
}

// Validate validates this v2 horizontal pod autoscaler spec
func (m *V2HorizontalPodAutoscalerSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBehavior(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleTargetRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2HorizontalPodAutoscalerSpec) validateBehavior(formats strfmt.Registry) error {
	if swag.IsZero(m.Behavior) { // not required
		return nil
	}

	if m.Behavior != nil {
		if err := m.Behavior.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("behavior")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("behavior")
			}
			return err
		}
	}

	return nil
}

func (m *V2HorizontalPodAutoscalerSpec) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2HorizontalPodAutoscalerSpec) validateScaleTargetRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleTargetRef) { // not required
		return nil
	}

	if m.ScaleTargetRef != nil {
		if err := m.ScaleTargetRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleTargetRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleTargetRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 horizontal pod autoscaler spec based on the context it is used
func (m *V2HorizontalPodAutoscalerSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBehavior(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleTargetRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2HorizontalPodAutoscalerSpec) contextValidateBehavior(ctx context.Context, formats strfmt.Registry) error {

	if m.Behavior != nil {

		if swag.IsZero(m.Behavior) { // not required
			return nil
		}

		if err := m.Behavior.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("behavior")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("behavior")
			}
			return err
		}
	}

	return nil
}

func (m *V2HorizontalPodAutoscalerSpec) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metrics); i++ {

		if m.Metrics[i] != nil {

			if swag.IsZero(m.Metrics[i]) { // not required
				return nil
			}

			if err := m.Metrics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2HorizontalPodAutoscalerSpec) contextValidateScaleTargetRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ScaleTargetRef != nil {

		if swag.IsZero(m.ScaleTargetRef) { // not required
			return nil
		}

		if err := m.ScaleTargetRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleTargetRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleTargetRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2HorizontalPodAutoscalerSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2HorizontalPodAutoscalerSpec) UnmarshalBinary(b []byte) error {
	var res V2HorizontalPodAutoscalerSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
