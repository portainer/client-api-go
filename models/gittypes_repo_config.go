// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GittypesRepoConfig gittypes repo config
//
// swagger:model gittypes.RepoConfig
type GittypesRepoConfig struct {

	// Git credentials
	Authentication *GittypesGitAuthentication `json:"authentication,omitempty"`

	// Path to where the config file is in this url/refName
	// Example: docker-compose.yml
	ConfigFilePath string `json:"configFilePath,omitempty"`

	// Repository hash
	// Example: bc4c183d756879ea4d173315338110b31004b8e0
	ConfigHash string `json:"configHash,omitempty"`

	// The reference name
	// Example: refs/heads/branch_name
	ReferenceName string `json:"referenceName,omitempty"`

	// TLSSkipVerify skips SSL verification when cloning the Git repository
	// Example: false
	TlsskipVerify bool `json:"tlsskipVerify,omitempty"`

	// The repo url
	// Example: https://github.com/portainer/portainer.git
	URL string `json:"url,omitempty"`
}

// Validate validates this gittypes repo config
func (m *GittypesRepoConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GittypesRepoConfig) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	if m.Authentication != nil {
		if err := m.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gittypes repo config based on the context it is used
func (m *GittypesRepoConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GittypesRepoConfig) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.Authentication != nil {

		if swag.IsZero(m.Authentication) { // not required
			return nil
		}

		if err := m.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GittypesRepoConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GittypesRepoConfig) UnmarshalBinary(b []byte) error {
	var res GittypesRepoConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
