// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainereeResourceControl portaineree resource control
//
// swagger:model portaineree.ResourceControl
type PortainereeResourceControl struct {

	// access level
	AccessLevel PortainereeResourceAccessLevel `json:"AccessLevel,omitempty"`

	// Permit access to resource only to admins
	// Example: true
	AdministratorsOnly bool `json:"AdministratorsOnly,omitempty"`

	// ResourceControl Identifier
	// Example: 1
	ID int64 `json:"Id,omitempty"`

	// Deprecated fields
	// Deprecated in DBVersion == 2
	OwnerID int64 `json:"OwnerId,omitempty"`

	// Permit access to the associated resource to any user
	// Example: true
	Public bool `json:"Public,omitempty"`

	// Docker resource identifier on which access control will be applied.\
	// In the case of a resource control applied to a stack, use the stack name as identifier
	// Example: 617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08
	ResourceID string `json:"ResourceId,omitempty"`

	// List of Docker resources that will inherit this access control
	// Example: ["617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"]
	SubResourceIds []string `json:"SubResourceIds"`

	// system
	System bool `json:"System,omitempty"`

	// team accesses
	TeamAccesses []*PortainereeTeamResourceAccess `json:"TeamAccesses"`

	// Type of Docker resource. Valid values are: 1- container, 2 -service
	// 3 - volume, 4 - secret, 5 - stack, 6 - config or 7 - custom template
	// Example: 1
	Type struct {
		PortainereeResourceControlType
	} `json:"Type,omitempty"`

	// user accesses
	UserAccesses []*PortainereeUserResourceAccess `json:"UserAccesses"`
}

// Validate validates this portaineree resource control
func (m *PortainereeResourceControl) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAccesses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeResourceControl) validateAccessLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessLevel) { // not required
		return nil
	}

	if err := m.AccessLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AccessLevel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AccessLevel")
		}
		return err
	}

	return nil
}

func (m *PortainereeResourceControl) validateTeamAccesses(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamAccesses) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamAccesses); i++ {
		if swag.IsZero(m.TeamAccesses[i]) { // not required
			continue
		}

		if m.TeamAccesses[i] != nil {
			if err := m.TeamAccesses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TeamAccesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TeamAccesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortainereeResourceControl) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	return nil
}

func (m *PortainereeResourceControl) validateUserAccesses(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAccesses) { // not required
		return nil
	}

	for i := 0; i < len(m.UserAccesses); i++ {
		if swag.IsZero(m.UserAccesses[i]) { // not required
			continue
		}

		if m.UserAccesses[i] != nil {
			if err := m.UserAccesses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserAccesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UserAccesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this portaineree resource control based on the context it is used
func (m *PortainereeResourceControl) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeResourceControl) contextValidateAccessLevel(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccessLevel.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AccessLevel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AccessLevel")
		}
		return err
	}

	return nil
}

func (m *PortainereeResourceControl) contextValidateTeamAccesses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TeamAccesses); i++ {

		if m.TeamAccesses[i] != nil {
			if err := m.TeamAccesses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TeamAccesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TeamAccesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortainereeResourceControl) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PortainereeResourceControl) contextValidateUserAccesses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserAccesses); i++ {

		if m.UserAccesses[i] != nil {
			if err := m.UserAccesses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserAccesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UserAccesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeResourceControl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeResourceControl) UnmarshalBinary(b []byte) error {
	var res PortainereeResourceControl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
