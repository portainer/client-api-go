// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesK8sVolumeInfo kubernetes k8s volume info
//
// swagger:model kubernetes.K8sVolumeInfo
type KubernetesK8sVolumeInfo struct {

	// persistent volume
	PersistentVolume *KubernetesK8sPersistentVolume `json:"persistentVolume,omitempty"`

	// persistent volume claim
	PersistentVolumeClaim *KubernetesK8sPersistentVolumeClaim `json:"persistentVolumeClaim,omitempty"`

	// storage class
	StorageClass *KubernetesK8sStorageClass `json:"storageClass,omitempty"`
}

// Validate validates this kubernetes k8s volume info
func (m *KubernetesK8sVolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePersistentVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentVolumeClaim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sVolumeInfo) validatePersistentVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.PersistentVolume) { // not required
		return nil
	}

	if m.PersistentVolume != nil {
		if err := m.PersistentVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolume")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sVolumeInfo) validatePersistentVolumeClaim(formats strfmt.Registry) error {
	if swag.IsZero(m.PersistentVolumeClaim) { // not required
		return nil
	}

	if m.PersistentVolumeClaim != nil {
		if err := m.PersistentVolumeClaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sVolumeInfo) validateStorageClass(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageClass) { // not required
		return nil
	}

	if m.StorageClass != nil {
		if err := m.StorageClass.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageClass")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes k8s volume info based on the context it is used
func (m *KubernetesK8sVolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePersistentVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersistentVolumeClaim(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sVolumeInfo) contextValidatePersistentVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.PersistentVolume != nil {

		if swag.IsZero(m.PersistentVolume) { // not required
			return nil
		}

		if err := m.PersistentVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolume")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sVolumeInfo) contextValidatePersistentVolumeClaim(ctx context.Context, formats strfmt.Registry) error {

	if m.PersistentVolumeClaim != nil {

		if swag.IsZero(m.PersistentVolumeClaim) { // not required
			return nil
		}

		if err := m.PersistentVolumeClaim.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sVolumeInfo) contextValidateStorageClass(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageClass != nil {

		if swag.IsZero(m.StorageClass) { // not required
			return nil
		}

		if err := m.StorageClass.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageClass")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesK8sVolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesK8sVolumeInfo) UnmarshalBinary(b []byte) error {
	var res KubernetesK8sVolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
