// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainereeAuthActivityLog portaineree auth activity log
//
// swagger:model portaineree.AuthActivityLog
type PortainereeAuthActivityLog struct {

	// context
	Context PortainereeAuthenticationMethod `json:"context,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// origin
	Origin string `json:"origin,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// type
	Type PortainereeAuthenticationActivityType `json:"type,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this portaineree auth activity log
func (m *PortainereeAuthActivityLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeAuthActivityLog) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if err := m.Context.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("context")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("context")
		}
		return err
	}

	return nil
}

func (m *PortainereeAuthActivityLog) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this portaineree auth activity log based on the context it is used
func (m *PortainereeAuthActivityLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeAuthActivityLog) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Context.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("context")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("context")
		}
		return err
	}

	return nil
}

func (m *PortainereeAuthActivityLog) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeAuthActivityLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeAuthActivityLog) UnmarshalBinary(b []byte) error {
	var res PortainereeAuthActivityLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
