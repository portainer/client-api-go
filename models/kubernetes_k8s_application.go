// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesK8sApplication kubernetes k8s application
//
// swagger:model kubernetes.K8sApplication
type KubernetesK8sApplication struct {

	// application owner
	ApplicationOwner string `json:"ApplicationOwner,omitempty"`

	// application type
	ApplicationType string `json:"ApplicationType,omitempty"`

	// configurations
	Configurations []*KubernetesConfiguration `json:"Configurations"`

	// containers
	Containers []interface{} `json:"Containers"`

	// creation date
	CreationDate string `json:"CreationDate,omitempty"`

	// deployment type
	DeploymentType string `json:"DeploymentType,omitempty"`

	// horizontal pod autoscaler
	HorizontalPodAutoscaler *V2HorizontalPodAutoscaler `json:"HorizontalPodAutoscaler,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// image
	Image string `json:"Image,omitempty"`

	// kind
	Kind string `json:"Kind,omitempty"`

	// labels
	Labels map[string]string `json:"Labels,omitempty"`

	// load balancer IP address
	LoadBalancerIPAddress string `json:"LoadBalancerIPAddress,omitempty"`

	// match labels
	MatchLabels map[string]string `json:"MatchLabels,omitempty"`

	// metadata
	Metadata *KubernetesMetadata `json:"Metadata,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// namespace
	Namespace string `json:"Namespace,omitempty"`

	// pods
	Pods []*KubernetesPod `json:"Pods"`

	// published ports
	PublishedPorts []*KubernetesPublishedPort `json:"PublishedPorts"`

	// resource
	Resource *KubernetesK8sApplicationResource `json:"Resource,omitempty"`

	// resource pool
	ResourcePool string `json:"ResourcePool,omitempty"`

	// running pods count
	RunningPodsCount int64 `json:"RunningPodsCount,omitempty"`

	// service Id
	ServiceID string `json:"ServiceId,omitempty"`

	// service name
	ServiceName string `json:"ServiceName,omitempty"`

	// service type
	ServiceType string `json:"ServiceType,omitempty"`

	// services
	Services []*V1Service `json:"Services"`

	// stack Id
	StackID string `json:"StackId,omitempty"`

	// stack name
	StackName string `json:"StackName,omitempty"`

	// status
	Status string `json:"Status,omitempty"`

	// total pods count
	TotalPodsCount int64 `json:"TotalPodsCount,omitempty"`

	// Uid
	UID string `json:"Uid,omitempty"`
}

// Validate validates this kubernetes k8s application
func (m *KubernetesK8sApplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHorizontalPodAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sApplication) validateConfigurations(formats strfmt.Registry) error {
	if swag.IsZero(m.Configurations) { // not required
		return nil
	}

	for i := 0; i < len(m.Configurations); i++ {
		if swag.IsZero(m.Configurations[i]) { // not required
			continue
		}

		if m.Configurations[i] != nil {
			if err := m.Configurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Configurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Configurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesK8sApplication) validateHorizontalPodAutoscaler(formats strfmt.Registry) error {
	if swag.IsZero(m.HorizontalPodAutoscaler) { // not required
		return nil
	}

	if m.HorizontalPodAutoscaler != nil {
		if err := m.HorizontalPodAutoscaler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HorizontalPodAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HorizontalPodAutoscaler")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sApplication) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sApplication) validatePods(formats strfmt.Registry) error {
	if swag.IsZero(m.Pods) { // not required
		return nil
	}

	for i := 0; i < len(m.Pods); i++ {
		if swag.IsZero(m.Pods[i]) { // not required
			continue
		}

		if m.Pods[i] != nil {
			if err := m.Pods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Pods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesK8sApplication) validatePublishedPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishedPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.PublishedPorts); i++ {
		if swag.IsZero(m.PublishedPorts[i]) { // not required
			continue
		}

		if m.PublishedPorts[i] != nil {
			if err := m.PublishedPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PublishedPorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PublishedPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesK8sApplication) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sApplication) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kubernetes k8s application based on the context it is used
func (m *KubernetesK8sApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHorizontalPodAutoscaler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublishedPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sApplication) contextValidateConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Configurations); i++ {

		if m.Configurations[i] != nil {

			if swag.IsZero(m.Configurations[i]) { // not required
				return nil
			}

			if err := m.Configurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Configurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Configurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesK8sApplication) contextValidateHorizontalPodAutoscaler(ctx context.Context, formats strfmt.Registry) error {

	if m.HorizontalPodAutoscaler != nil {

		if swag.IsZero(m.HorizontalPodAutoscaler) { // not required
			return nil
		}

		if err := m.HorizontalPodAutoscaler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HorizontalPodAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HorizontalPodAutoscaler")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sApplication) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sApplication) contextValidatePods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pods); i++ {

		if m.Pods[i] != nil {

			if swag.IsZero(m.Pods[i]) { // not required
				return nil
			}

			if err := m.Pods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Pods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesK8sApplication) contextValidatePublishedPorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PublishedPorts); i++ {

		if m.PublishedPorts[i] != nil {

			if swag.IsZero(m.PublishedPorts[i]) { // not required
				return nil
			}

			if err := m.PublishedPorts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PublishedPorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PublishedPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesK8sApplication) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {

		if swag.IsZero(m.Resource) { // not required
			return nil
		}

		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sApplication) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesK8sApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesK8sApplication) UnmarshalBinary(b []byte) error {
	var res KubernetesK8sApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
