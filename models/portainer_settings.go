// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainerSettings portainer settings
//
// swagger:model portainer.Settings
type PortainerSettings struct {

	// Whether non-administrator should be able to use bind mounts when creating containers
	// Example: false
	AllowBindMountsForRegularUsers bool `json:"AllowBindMountsForRegularUsers,omitempty"`

	// Whether non-administrator should be able to use container capabilities
	AllowContainerCapabilitiesForRegularUsers bool `json:"AllowContainerCapabilitiesForRegularUsers,omitempty"`

	// Whether non-administrator should be able to use device mapping
	AllowDeviceMappingForRegularUsers bool `json:"AllowDeviceMappingForRegularUsers,omitempty"`

	// Whether non-administrator should be able to use the host pid
	AllowHostNamespaceForRegularUsers bool `json:"AllowHostNamespaceForRegularUsers,omitempty"`

	// Whether non-administrator should be able to use privileged mode when creating containers
	// Example: false
	AllowPrivilegedModeForRegularUsers bool `json:"AllowPrivilegedModeForRegularUsers,omitempty"`

	// Whether non-administrator should be able to manage stacks
	AllowStackManagementForRegularUsers bool `json:"AllowStackManagementForRegularUsers,omitempty"`

	// Whether non-administrator should be able to browse volumes
	AllowVolumeBrowserForRegularUsers bool `json:"AllowVolumeBrowserForRegularUsers,omitempty"`

	// Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth
	// Example: 1
	AuthenticationMethod int64 `json:"AuthenticationMethod,omitempty"`

	// A list of label name & value that will be used to hide containers when querying containers
	BlackListedLabels []*PortainerPair `json:"BlackListedLabels"`

	// The default check in interval for edge agent (in seconds)
	// Example: 5
	EdgeAgentCheckinInterval int64 `json:"EdgeAgentCheckinInterval,omitempty"`

	// Whether edge compute features are enabled
	EnableEdgeComputeFeatures bool `json:"EnableEdgeComputeFeatures,omitempty"`

	// Whether host management features are enabled
	EnableHostManagementFeatures bool `json:"EnableHostManagementFeatures,omitempty"`

	// Whether telemetry is enabled
	// Example: false
	EnableTelemetry bool `json:"EnableTelemetry,omitempty"`

	// l d a p settings
	LDAPSettings *PortainerLDAPSettings `json:"LDAPSettings,omitempty"`

	// URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string
	// Example: https://mycompany.mydomain.tld/logo.png
	LogoURL string `json:"LogoURL,omitempty"`

	// o auth settings
	OAuthSettings *PortainerOAuthSettings `json:"OAuthSettings,omitempty"`

	// The interval in which endpoint snapshots are created
	// Example: 5m
	SnapshotInterval string `json:"SnapshotInterval,omitempty"`

	// URL to the templates that will be displayed in the UI when navigating to App Templates
	// Example: https://raw.githubusercontent.com/portainer/templates/master/templates.json
	TemplatesURL string `json:"TemplatesURL,omitempty"`

	// The duration of a user session
	// Example: 5m
	UserSessionTimeout string `json:"UserSessionTimeout,omitempty"`

	// Deprecated fields
	DisplayDonationHeader bool `json:"displayDonationHeader,omitempty"`

	// display external contributors
	DisplayExternalContributors bool `json:"displayExternalContributors,omitempty"`
}

// Validate validates this portainer settings
func (m *PortainerSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlackListedLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLDAPSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOAuthSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainerSettings) validateBlackListedLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.BlackListedLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.BlackListedLabels); i++ {
		if swag.IsZero(m.BlackListedLabels[i]) { // not required
			continue
		}

		if m.BlackListedLabels[i] != nil {
			if err := m.BlackListedLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BlackListedLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BlackListedLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortainerSettings) validateLDAPSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LDAPSettings) { // not required
		return nil
	}

	if m.LDAPSettings != nil {
		if err := m.LDAPSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LDAPSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LDAPSettings")
			}
			return err
		}
	}

	return nil
}

func (m *PortainerSettings) validateOAuthSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.OAuthSettings) { // not required
		return nil
	}

	if m.OAuthSettings != nil {
		if err := m.OAuthSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OAuthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OAuthSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this portainer settings based on the context it is used
func (m *PortainerSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlackListedLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLDAPSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOAuthSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainerSettings) contextValidateBlackListedLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlackListedLabels); i++ {

		if m.BlackListedLabels[i] != nil {
			if err := m.BlackListedLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BlackListedLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BlackListedLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PortainerSettings) contextValidateLDAPSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LDAPSettings != nil {
		if err := m.LDAPSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LDAPSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LDAPSettings")
			}
			return err
		}
	}

	return nil
}

func (m *PortainerSettings) contextValidateOAuthSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.OAuthSettings != nil {
		if err := m.OAuthSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OAuthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OAuthSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainerSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainerSettings) UnmarshalBinary(b []byte) error {
	var res PortainerSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
