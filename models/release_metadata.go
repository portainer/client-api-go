// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReleaseMetadata release metadata
//
// swagger:model release.Metadata
type ReleaseMetadata struct {

	// Annotations are additional mappings uninterpreted by Helm,
	// made available for inspection by other applications.
	Annotations map[string]string `json:"annotations,omitempty"`

	// The API Version of this chart. Required.
	APIVersion string `json:"apiVersion,omitempty"`

	// The version of the application enclosed inside of this chart.
	AppVersion string `json:"appVersion,omitempty"`

	// The condition to check to enable chart
	Condition string `json:"condition,omitempty"`

	// Dependencies are a list of dependencies for a chart.
	Dependencies []*ReleaseDependency `json:"dependencies"`

	// Whether or not this chart is deprecated
	Deprecated *bool `json:"deprecated,omitempty"`

	// A one-sentence description of the chart
	Description string `json:"description,omitempty"`

	// The URL to a relevant project page, git repo, or contact person
	Home string `json:"home,omitempty"`

	// The URL to an icon file.
	Icon string `json:"icon,omitempty"`

	// A list of string keywords
	Keywords []string `json:"keywords"`

	// KubeVersion is a SemVer constraint specifying the version of Kubernetes required.
	KubeVersion string `json:"kubeVersion,omitempty"`

	// A list of name and URL/email address combinations for the maintainer(s)
	Maintainers []*ReleaseMaintainer `json:"maintainers"`

	// The name of the chart. Required.
	Name string `json:"name,omitempty"`

	// Source is the URL to the source code of this chart
	Sources []string `json:"sources"`

	// The tags to check to enable chart
	Tags string `json:"tags,omitempty"`

	// Specifies the chart type: application or library
	Type string `json:"type,omitempty"`

	// A SemVer 2 conformant version string of the chart. Required.
	Version string `json:"version,omitempty"`
}

// Validate validates this release metadata
func (m *ReleaseMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintainers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseMetadata) validateDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseMetadata) validateMaintainers(formats strfmt.Registry) error {
	if swag.IsZero(m.Maintainers) { // not required
		return nil
	}

	for i := 0; i < len(m.Maintainers); i++ {
		if swag.IsZero(m.Maintainers[i]) { // not required
			continue
		}

		if m.Maintainers[i] != nil {
			if err := m.Maintainers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("maintainers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("maintainers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this release metadata based on the context it is used
func (m *ReleaseMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintainers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseMetadata) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dependencies); i++ {

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseMetadata) contextValidateMaintainers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Maintainers); i++ {

		if m.Maintainers[i] != nil {
			if err := m.Maintainers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("maintainers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("maintainers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseMetadata) UnmarshalBinary(b []byte) error {
	var res ReleaseMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
