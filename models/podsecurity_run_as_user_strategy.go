// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PodsecurityRunAsUserStrategy podsecurity run as user strategy
//
// swagger:model podsecurity.RunAsUserStrategy
type PodsecurityRunAsUserStrategy string

func NewPodsecurityRunAsUserStrategy(value PodsecurityRunAsUserStrategy) *PodsecurityRunAsUserStrategy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PodsecurityRunAsUserStrategy.
func (m PodsecurityRunAsUserStrategy) Pointer() *PodsecurityRunAsUserStrategy {
	return &m
}

const (

	// PodsecurityRunAsUserStrategyMustRunAs captures enum value "MustRunAs"
	PodsecurityRunAsUserStrategyMustRunAs PodsecurityRunAsUserStrategy = "MustRunAs"

	// PodsecurityRunAsUserStrategyMustRunAsNonRoot captures enum value "MustRunAsNonRoot"
	PodsecurityRunAsUserStrategyMustRunAsNonRoot PodsecurityRunAsUserStrategy = "MustRunAsNonRoot"

	// PodsecurityRunAsUserStrategyRunAsAny captures enum value "RunAsAny"
	PodsecurityRunAsUserStrategyRunAsAny PodsecurityRunAsUserStrategy = "RunAsAny"
)

// for schema
var podsecurityRunAsUserStrategyEnum []interface{}

func init() {
	var res []PodsecurityRunAsUserStrategy
	if err := json.Unmarshal([]byte(`["MustRunAs","MustRunAsNonRoot","RunAsAny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		podsecurityRunAsUserStrategyEnum = append(podsecurityRunAsUserStrategyEnum, v)
	}
}

func (m PodsecurityRunAsUserStrategy) validatePodsecurityRunAsUserStrategyEnum(path, location string, value PodsecurityRunAsUserStrategy) error {
	if err := validate.EnumCase(path, location, value, podsecurityRunAsUserStrategyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this podsecurity run as user strategy
func (m PodsecurityRunAsUserStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePodsecurityRunAsUserStrategyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this podsecurity run as user strategy based on context it is used
func (m PodsecurityRunAsUserStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
