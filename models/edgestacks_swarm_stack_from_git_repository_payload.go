// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EdgestacksSwarmStackFromGitRepositoryPayload edgestacks swarm stack from git repository payload
//
// swagger:model edgestacks.swarmStackFromGitRepositoryPayload
type EdgestacksSwarmStackFromGitRepositoryPayload struct {

	// compose file path in repository
	ComposeFilePathInRepository string `json:"composeFilePathInRepository,omitempty"`

	// edge groups
	EdgeGroups []int64 `json:"edgeGroups"`

	// name
	Name string `json:"name,omitempty"`

	// repository authentication
	RepositoryAuthentication bool `json:"repositoryAuthentication,omitempty"`

	// repository password
	RepositoryPassword string `json:"repositoryPassword,omitempty"`

	// repository reference name
	RepositoryReferenceName string `json:"repositoryReferenceName,omitempty"`

	// repository URL
	RepositoryURL string `json:"repositoryURL,omitempty"`

	// repository username
	RepositoryUsername string `json:"repositoryUsername,omitempty"`
}

// Validate validates this edgestacks swarm stack from git repository payload
func (m *EdgestacksSwarmStackFromGitRepositoryPayload) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this edgestacks swarm stack from git repository payload based on context it is used
func (m *EdgestacksSwarmStackFromGitRepositoryPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EdgestacksSwarmStackFromGitRepositoryPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgestacksSwarmStackFromGitRepositoryPayload) UnmarshalBinary(b []byte) error {
	var res EdgestacksSwarmStackFromGitRepositoryPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
