// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PodsecurityFSGroupStrategyType podsecurity f s group strategy type
//
// swagger:model podsecurity.FSGroupStrategyType
type PodsecurityFSGroupStrategyType string

func NewPodsecurityFSGroupStrategyType(value PodsecurityFSGroupStrategyType) *PodsecurityFSGroupStrategyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PodsecurityFSGroupStrategyType.
func (m PodsecurityFSGroupStrategyType) Pointer() *PodsecurityFSGroupStrategyType {
	return &m
}

const (

	// PodsecurityFSGroupStrategyTypeMayRunAs captures enum value "MayRunAs"
	PodsecurityFSGroupStrategyTypeMayRunAs PodsecurityFSGroupStrategyType = "MayRunAs"

	// PodsecurityFSGroupStrategyTypeMustRunAs captures enum value "MustRunAs"
	PodsecurityFSGroupStrategyTypeMustRunAs PodsecurityFSGroupStrategyType = "MustRunAs"

	// PodsecurityFSGroupStrategyTypeRunAsAny captures enum value "RunAsAny"
	PodsecurityFSGroupStrategyTypeRunAsAny PodsecurityFSGroupStrategyType = "RunAsAny"
)

// for schema
var podsecurityFSGroupStrategyTypeEnum []interface{}

func init() {
	var res []PodsecurityFSGroupStrategyType
	if err := json.Unmarshal([]byte(`["MayRunAs","MustRunAs","RunAsAny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		podsecurityFSGroupStrategyTypeEnum = append(podsecurityFSGroupStrategyTypeEnum, v)
	}
}

func (m PodsecurityFSGroupStrategyType) validatePodsecurityFSGroupStrategyTypeEnum(path, location string, value PodsecurityFSGroupStrategyType) error {
	if err := validate.EnumCase(path, location, value, podsecurityFSGroupStrategyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this podsecurity f s group strategy type
func (m PodsecurityFSGroupStrategyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePodsecurityFSGroupStrategyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this podsecurity f s group strategy type based on context it is used
func (m PodsecurityFSGroupStrategyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
