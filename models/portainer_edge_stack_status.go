// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainerEdgeStackStatus portainer edge stack status
//
// swagger:model portainer.EdgeStackStatus
type PortainerEdgeStackStatus struct {

	// Deprecated
	Type int64 `json:"Type,omitempty"`

	// EE only feature
	DeploymentInfo *PortainerStackDeploymentInfo `json:"deploymentInfo,omitempty"`

	// Deprecated
	Details *PortainerEdgeStackStatusDetails `json:"details,omitempty"`

	// endpoint ID
	EndpointID int64 `json:"endpointID,omitempty"`

	// Deprecated
	Error string `json:"error,omitempty"`

	// ReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image
	ReadyRePullImage bool `json:"readyRePullImage,omitempty"`

	// status
	Status []*PortainerEdgeStackDeploymentStatus `json:"status"`
}

// Validate validates this portainer edge stack status
func (m *PortainerEdgeStackStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainerEdgeStackStatus) validateDeploymentInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentInfo) { // not required
		return nil
	}

	if m.DeploymentInfo != nil {
		if err := m.DeploymentInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PortainerEdgeStackStatus) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if m.Details != nil {
		if err := m.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *PortainerEdgeStackStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	for i := 0; i < len(m.Status); i++ {
		if swag.IsZero(m.Status[i]) { // not required
			continue
		}

		if m.Status[i] != nil {
			if err := m.Status[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this portainer edge stack status based on the context it is used
func (m *PortainerEdgeStackStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeploymentInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainerEdgeStackStatus) contextValidateDeploymentInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentInfo != nil {

		if swag.IsZero(m.DeploymentInfo) { // not required
			return nil
		}

		if err := m.DeploymentInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PortainerEdgeStackStatus) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.Details != nil {

		if swag.IsZero(m.Details) { // not required
			return nil
		}

		if err := m.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *PortainerEdgeStackStatus) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Status); i++ {

		if m.Status[i] != nil {

			if swag.IsZero(m.Status[i]) { // not required
				return nil
			}

			if err := m.Status[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainerEdgeStackStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainerEdgeStackStatus) UnmarshalBinary(b []byte) error {
	var res PortainerEdgeStackStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
