// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EdgeStackPayload edge stack payload
//
// swagger:model edge.StackPayload
type EdgeStackPayload struct {

	// Content of stack folder
	DirEntries []*FilesystemDirEntry `json:"dirEntries"`

	// EdgeUpdateID is the ID of the edge update related to this stack.
	// Used only for EE
	EdgeUpdateID int64 `json:"edgeUpdateID,omitempty"`

	// Name of the stack entry file
	EntryFileName string `json:"entryFileName,omitempty"`

	// Used only for EE
	// EnvVars is a list of environment variables to inject into the stack
	EnvVars []*PortainerPair `json:"envVars"`

	// Mount point for relative path
	FilesystemPath string `json:"filesystemPath,omitempty"`

	// ID of the stack
	ID int64 `json:"id,omitempty"`

	// Name of the stack
	Name string `json:"name,omitempty"`

	// Namespace to use for kubernetes stack. Keep empty to use the manifest namespace.
	Namespace string `json:"namespace,omitempty"`

	// PrePullImage is a flag indicating if the agent should pull the image before deploying the stack.
	// Used only for EE
	PrePullImage bool `json:"prePullImage,omitempty"`

	// RePullImage is a flag indicating if the agent should pull the image if it is already present on the node.
	// Used only for EE
	RePullImage bool `json:"rePullImage,omitempty"`

	// RegistryCredentials holds the credentials for a Docker registry.
	// Used only for EE
	RegistryCredentials []*EdgeRegistryCredentials `json:"registryCredentials"`

	// RetryDeploy is a flag indicating if the agent should retry to deploy the stack if it fails.
	// Used only for EE
	RetryDeploy bool `json:"retryDeploy,omitempty"`

	// RollbackTo specifies the stack file version to rollback to (only support to rollback to the last version currently)
	RollbackTo int64 `json:"rollbackTo,omitempty"`

	// Content of the stack file (for compatibility to agent version less than 2.19.0)
	StackFileContent string `json:"stackFileContent,omitempty"`

	// Is relative path supported
	SupportRelativePath bool `json:"supportRelativePath,omitempty"`

	// Version of the stack file
	Version int64 `json:"version,omitempty"`
}

// Validate validates this edge stack payload
func (m *EdgeStackPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvVars(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeStackPayload) validateDirEntries(formats strfmt.Registry) error {
	if swag.IsZero(m.DirEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.DirEntries); i++ {
		if swag.IsZero(m.DirEntries[i]) { // not required
			continue
		}

		if m.DirEntries[i] != nil {
			if err := m.DirEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dirEntries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dirEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeStackPayload) validateEnvVars(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvVars) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvVars); i++ {
		if swag.IsZero(m.EnvVars[i]) { // not required
			continue
		}

		if m.EnvVars[i] != nil {
			if err := m.EnvVars[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envVars" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envVars" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeStackPayload) validateRegistryCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.RegistryCredentials); i++ {
		if swag.IsZero(m.RegistryCredentials[i]) { // not required
			continue
		}

		if m.RegistryCredentials[i] != nil {
			if err := m.RegistryCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registryCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registryCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this edge stack payload based on the context it is used
func (m *EdgeStackPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvVars(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistryCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeStackPayload) contextValidateDirEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DirEntries); i++ {

		if m.DirEntries[i] != nil {
			if err := m.DirEntries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dirEntries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dirEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeStackPayload) contextValidateEnvVars(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnvVars); i++ {

		if m.EnvVars[i] != nil {
			if err := m.EnvVars[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envVars" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envVars" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EdgeStackPayload) contextValidateRegistryCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegistryCredentials); i++ {

		if m.RegistryCredentials[i] != nil {
			if err := m.RegistryCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registryCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registryCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeStackPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeStackPayload) UnmarshalBinary(b []byte) error {
	var res EdgeStackPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
