// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LiblicensePortainerLicense liblicense portainer license
//
// swagger:model liblicense.PortainerLicense
type LiblicensePortainerLicense struct {

	// company
	Company string `json:"company,omitempty"`

	// created
	Created int64 `json:"created,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// expires after
	ExpiresAfter int64 `json:"expiresAfter,omitempty"`

	// expires at
	ExpiresAt int64 `json:"expiresAt,omitempty"`

	// first checkin
	FirstCheckin int64 `json:"firstCheckin,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last checkin
	LastCheckin int64 `json:"lastCheckin,omitempty"`

	// license key
	LicenseKey string `json:"licenseKey,omitempty"`

	// nodes
	Nodes int64 `json:"nodes,omitempty"`

	// ProductEdition was created originally with plans on having a
	// seperate portainer product for Enterprise users and Business users
	// with differing features. This didn't wind up coming about, but may
	// still serve useful in the future if we need to issue keys for a
	// different product entirely.
	// Originally, the ProductEdition was used as the prefix for generating
	// license keys, but in practice most people thought it was the
	// "version" due to us having the original extension licenses which can
	// be thought of as the true version 1 licenses.
	ProductEdition int64 `json:"productEdition,omitempty"`

	// redis ref
	RedisRef string `json:"redisRef,omitempty"`

	// reference
	Reference string `json:"reference,omitempty"`

	// revoked
	Revoked bool `json:"revoked,omitempty"`

	// revoked at
	RevokedAt int64 `json:"revokedAt,omitempty"`

	// Type is used to distinguish different kinds of licenses, trial
	// licenses, enterprise subscriptions
	Type int64 `json:"type,omitempty"`

	// unique Id
	UniqueID string `json:"uniqueId,omitempty"`

	// Version indicates which key should be used to encode/decode the
	// license string.
	Version int64 `json:"version,omitempty"`
}

// Validate validates this liblicense portainer license
func (m *LiblicensePortainerLicense) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this liblicense portainer license based on context it is used
func (m *LiblicensePortainerLicense) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LiblicensePortainerLicense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LiblicensePortainerLicense) UnmarshalBinary(b []byte) error {
	var res LiblicensePortainerLicense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
