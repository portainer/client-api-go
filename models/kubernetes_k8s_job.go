// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesK8sJob kubernetes k8s job
//
// swagger:model kubernetes.K8sJob
type KubernetesK8sJob struct {

	// backoff limit
	BackoffLimit int64 `json:"BackoffLimit,omitempty"`

	// command
	Command string `json:"Command,omitempty"`

	// completions
	Completions int64 `json:"Completions,omitempty"`

	// container
	Container *V1Container `json:"Container,omitempty"`

	// duration
	Duration string `json:"Duration,omitempty"`

	// failed reason
	FailedReason string `json:"FailedReason,omitempty"`

	// finish time
	FinishTime string `json:"FinishTime,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is system
	IsSystem bool `json:"IsSystem,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// namespace
	Namespace string `json:"Namespace,omitempty"`

	// pod name
	PodName string `json:"PodName,omitempty"`

	// start time
	StartTime string `json:"StartTime,omitempty"`

	// status
	Status string `json:"Status,omitempty"`
}

// Validate validates this kubernetes k8s job
func (m *KubernetesK8sJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sJob) validateContainer(formats strfmt.Registry) error {
	if swag.IsZero(m.Container) { // not required
		return nil
	}

	if m.Container != nil {
		if err := m.Container.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Container")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Container")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes k8s job based on the context it is used
func (m *KubernetesK8sJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sJob) contextValidateContainer(ctx context.Context, formats strfmt.Registry) error {

	if m.Container != nil {

		if swag.IsZero(m.Container) { // not required
			return nil
		}

		if err := m.Container.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Container")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Container")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesK8sJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesK8sJob) UnmarshalBinary(b []byte) error {
	var res KubernetesK8sJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
