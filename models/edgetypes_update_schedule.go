// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgetypesUpdateSchedule edgetypes update schedule
//
// swagger:model edgetypes.UpdateSchedule
type EdgetypesUpdateSchedule struct {

	// Created timestamp
	// Example: 1564897200
	Created int64 `json:"created,omitempty"`

	// Created by user id
	// Example: 1
	CreatedBy int64 `json:"createdBy,omitempty"`

	// EdgeGroups to be updated
	// Example: [1]
	GroupIds []int64 `json:"groupIds"`

	// EdgeUpdateSchedule Identifier
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the schedule
	// Example: Update Schedule
	Name string `json:"name,omitempty"`

	// Status of the schedule, grouped by environment id
	Status map[string]EdgetypesUpdateScheduleStatus `json:"status,omitempty"`

	// Type of the schedule
	// Example: 1564897200
	Time int64 `json:"time,omitempty"`

	// Type of the update (1 - update, 2 - rollback)
	// Example: 1
	// Enum: [1 2]
	Type int64 `json:"type,omitempty"`
}

// Validate validates this edgetypes update schedule
func (m *EdgetypesUpdateSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgetypesUpdateSchedule) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	for k := range m.Status {

		if err := validate.Required("status"+"."+k, "body", m.Status[k]); err != nil {
			return err
		}
		if val, ok := m.Status[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

var edgetypesUpdateScheduleTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgetypesUpdateScheduleTypeTypePropEnum = append(edgetypesUpdateScheduleTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *EdgetypesUpdateSchedule) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, edgetypesUpdateScheduleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EdgetypesUpdateSchedule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this edgetypes update schedule based on the context it is used
func (m *EdgetypesUpdateSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgetypesUpdateSchedule) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Status {

		if val, ok := m.Status[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgetypesUpdateSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgetypesUpdateSchedule) UnmarshalBinary(b []byte) error {
	var res EdgetypesUpdateSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
