// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PortainereeEdgeJob portaineree edge job
//
// swagger:model portaineree.EdgeJob
type PortainereeEdgeJob struct {

	// created
	Created int64 `json:"Created,omitempty"`

	// cron expression
	CronExpression string `json:"CronExpression,omitempty"`

	// endpoints
	Endpoints map[string]PortainereeEdgeJobEndpointMeta `json:"Endpoints,omitempty"`

	// EdgeJob Identifier
	// Example: 1
	ID int64 `json:"Id,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// recurring
	Recurring bool `json:"Recurring,omitempty"`

	// script path
	ScriptPath string `json:"ScriptPath,omitempty"`

	// version
	Version int64 `json:"Version,omitempty"`
}

// Validate validates this portaineree edge job
func (m *PortainereeEdgeJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeEdgeJob) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for k := range m.Endpoints {

		if err := validate.Required("Endpoints"+"."+k, "body", m.Endpoints[k]); err != nil {
			return err
		}
		if val, ok := m.Endpoints[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Endpoints" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Endpoints" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this portaineree edge job based on the context it is used
func (m *PortainereeEdgeJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeEdgeJob) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Endpoints {

		if val, ok := m.Endpoints[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeEdgeJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeEdgeJob) UnmarshalBinary(b []byte) error {
	var res PortainereeEdgeJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
