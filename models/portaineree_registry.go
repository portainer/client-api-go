// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PortainereeRegistry portaineree registry
//
// swagger:model portaineree.Registry
type PortainereeRegistry struct {

	// Stores temporary access token
	AccessToken string `json:"AccessToken,omitempty"`

	// access token expiry
	AccessTokenExpiry int64 `json:"AccessTokenExpiry,omitempty"`

	// Is authentication against this registry enabled
	// Example: true
	Authentication bool `json:"Authentication,omitempty"`

	// Deprecated in DBVersion == 18
	AuthorizedTeams []int64 `json:"AuthorizedTeams"`

	// Deprecated in DBVersion == 18
	AuthorizedUsers []int64 `json:"AuthorizedUsers"`

	// Base URL, introduced for ProGet registry
	// Example: registry.mydomain.tld:2375
	BaseURL string `json:"BaseURL,omitempty"`

	// ecr
	Ecr *PortainereeEcrData `json:"Ecr,omitempty"`

	// gitlab
	Gitlab *PortainereeGitlabRegistryData `json:"Gitlab,omitempty"`

	// Registry Identifier
	// Example: 1
	ID int64 `json:"Id,omitempty"`

	// management configuration
	ManagementConfiguration *PortainereeRegistryManagementConfiguration `json:"ManagementConfiguration,omitempty"`

	// Registry Name
	// Example: my-registry
	Name string `json:"Name,omitempty"`

	// Password or SecretAccessKey used to authenticate against this registry
	// Example: registry_password
	Password string `json:"Password,omitempty"`

	// quay
	Quay *PortainereeQuayRegistryData `json:"Quay,omitempty"`

	// registry accesses
	RegistryAccesses PortainereeRegistryAccesses `json:"RegistryAccesses,omitempty"`

	// Deprecated in DBVersion == 31
	TeamAccessPolicies PortainereeTeamAccessPolicies `json:"TeamAccessPolicies,omitempty"`

	// Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR)
	// Enum: [1 2 3 4 5 6 7]
	Type int64 `json:"Type,omitempty"`

	// URL or IP address of the Docker registry
	// Example: registry.mydomain.tld:2375/feed-name
	URL string `json:"URL,omitempty"`

	// Deprecated fields
	// Deprecated in DBVersion == 31
	UserAccessPolicies PortainereeUserAccessPolicies `json:"UserAccessPolicies,omitempty"`

	// Username or AccessKeyID used to authenticate against this registry
	// Example: registry user
	Username string `json:"Username,omitempty"`
}

// Validate validates this portaineree registry
func (m *PortainereeRegistry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEcr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitlab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamAccessPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAccessPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeRegistry) validateEcr(formats strfmt.Registry) error {
	if swag.IsZero(m.Ecr) { // not required
		return nil
	}

	if m.Ecr != nil {
		if err := m.Ecr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ecr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Ecr")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) validateGitlab(formats strfmt.Registry) error {
	if swag.IsZero(m.Gitlab) { // not required
		return nil
	}

	if m.Gitlab != nil {
		if err := m.Gitlab.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Gitlab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Gitlab")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) validateManagementConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementConfiguration) { // not required
		return nil
	}

	if m.ManagementConfiguration != nil {
		if err := m.ManagementConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ManagementConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) validateQuay(formats strfmt.Registry) error {
	if swag.IsZero(m.Quay) { // not required
		return nil
	}

	if m.Quay != nil {
		if err := m.Quay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Quay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Quay")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) validateRegistryAccesses(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryAccesses) { // not required
		return nil
	}

	if m.RegistryAccesses != nil {
		if err := m.RegistryAccesses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegistryAccesses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RegistryAccesses")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) validateTeamAccessPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamAccessPolicies) { // not required
		return nil
	}

	if m.TeamAccessPolicies != nil {
		if err := m.TeamAccessPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TeamAccessPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TeamAccessPolicies")
			}
			return err
		}
	}

	return nil
}

var portainereeRegistryTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portainereeRegistryTypeTypePropEnum = append(portainereeRegistryTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *PortainereeRegistry) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, portainereeRegistryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PortainereeRegistry) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PortainereeRegistry) validateUserAccessPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAccessPolicies) { // not required
		return nil
	}

	if m.UserAccessPolicies != nil {
		if err := m.UserAccessPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserAccessPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserAccessPolicies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this portaineree registry based on the context it is used
func (m *PortainereeRegistry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEcr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGitlab(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagementConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistryAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamAccessPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAccessPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeRegistry) contextValidateEcr(ctx context.Context, formats strfmt.Registry) error {

	if m.Ecr != nil {
		if err := m.Ecr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ecr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Ecr")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) contextValidateGitlab(ctx context.Context, formats strfmt.Registry) error {

	if m.Gitlab != nil {
		if err := m.Gitlab.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Gitlab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Gitlab")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) contextValidateManagementConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementConfiguration != nil {
		if err := m.ManagementConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ManagementConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) contextValidateQuay(ctx context.Context, formats strfmt.Registry) error {

	if m.Quay != nil {
		if err := m.Quay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Quay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Quay")
			}
			return err
		}
	}

	return nil
}

func (m *PortainereeRegistry) contextValidateRegistryAccesses(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RegistryAccesses.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RegistryAccesses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RegistryAccesses")
		}
		return err
	}

	return nil
}

func (m *PortainereeRegistry) contextValidateTeamAccessPolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TeamAccessPolicies.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TeamAccessPolicies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TeamAccessPolicies")
		}
		return err
	}

	return nil
}

func (m *PortainereeRegistry) contextValidateUserAccessPolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserAccessPolicies.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("UserAccessPolicies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("UserAccessPolicies")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeRegistry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeRegistry) UnmarshalBinary(b []byte) error {
	var res PortainereeRegistry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
