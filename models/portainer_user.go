// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainerUser portainer user
//
// swagger:model portainer.User
type PortainerUser struct {

	// endpoint authorizations
	EndpointAuthorizations PortainerEndpointAuthorizations `json:"EndpointAuthorizations,omitempty"`

	// User Identifier
	// Example: 1
	ID int64 `json:"Id,omitempty"`

	// password
	// Example: passwd
	Password string `json:"Password,omitempty"`

	// Deprecated fields
	// Deprecated in DBVersion == 25
	PortainerAuthorizations PortainerAuthorizations `json:"PortainerAuthorizations,omitempty"`

	// User role (1 for administrator account and 2 for regular account)
	// Example: 1
	Role int64 `json:"Role,omitempty"`

	// username
	// Example: bob
	Username string `json:"Username,omitempty"`
}

// Validate validates this portainer user
func (m *PortainerUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortainerAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainerUser) validateEndpointAuthorizations(formats strfmt.Registry) error {
	if swag.IsZero(m.EndpointAuthorizations) { // not required
		return nil
	}

	if m.EndpointAuthorizations != nil {
		if err := m.EndpointAuthorizations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndpointAuthorizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EndpointAuthorizations")
			}
			return err
		}
	}

	return nil
}

func (m *PortainerUser) validatePortainerAuthorizations(formats strfmt.Registry) error {
	if swag.IsZero(m.PortainerAuthorizations) { // not required
		return nil
	}

	if m.PortainerAuthorizations != nil {
		if err := m.PortainerAuthorizations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PortainerAuthorizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PortainerAuthorizations")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this portainer user based on the context it is used
func (m *PortainerUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpointAuthorizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortainerAuthorizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainerUser) contextValidateEndpointAuthorizations(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EndpointAuthorizations.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("EndpointAuthorizations")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("EndpointAuthorizations")
		}
		return err
	}

	return nil
}

func (m *PortainerUser) contextValidatePortainerAuthorizations(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PortainerAuthorizations.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PortainerAuthorizations")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PortainerAuthorizations")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainerUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainerUser) UnmarshalBinary(b []byte) error {
	var res PortainerUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
