// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourcecontrolsResourceControlCreatePayload resourcecontrols resource control create payload
//
// swagger:model resourcecontrols.resourceControlCreatePayload
type ResourcecontrolsResourceControlCreatePayload struct {

	// Permit access to resource only to admins
	// Example: true
	AdministratorsOnly bool `json:"administratorsOnly,omitempty"`

	// Permit access to the associated resource to any user
	// Example: true
	Public bool `json:"public,omitempty"`

	// resource ID
	// Example: 617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08
	// Required: true
	ResourceID *string `json:"resourceID"`

	// List of Docker resources that will inherit this access control
	// Example: ["617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"]
	SubResourceIDs []string `json:"subResourceIDs"`

	// List of team identifiers with access to the associated resource
	// Example: [56,7]
	Teams []int64 `json:"teams"`

	// Type of Resource. Valid values are: 1 - container, 2 - service
	// 3 - volume, 4 - network, 5 - secret, 6 - stack, 7 - config, 8 - custom template, 9 - azure-container-group
	// Example: 1
	// Required: true
	// Enum: [1 2 3 4 5 6 7 8 9]
	Type *int64 `json:"type"`

	// List of user identifiers with access to the associated resource
	// Example: [1,4]
	Users []int64 `json:"users"`
}

// Validate validates this resourcecontrols resource control create payload
func (m *ResourcecontrolsResourceControlCreatePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcecontrolsResourceControlCreatePayload) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceID", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

var resourcecontrolsResourceControlCreatePayloadTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7,8,9]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourcecontrolsResourceControlCreatePayloadTypeTypePropEnum = append(resourcecontrolsResourceControlCreatePayloadTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *ResourcecontrolsResourceControlCreatePayload) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, resourcecontrolsResourceControlCreatePayloadTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourcecontrolsResourceControlCreatePayload) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resourcecontrols resource control create payload based on context it is used
func (m *ResourcecontrolsResourceControlCreatePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourcecontrolsResourceControlCreatePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcecontrolsResourceControlCreatePayload) UnmarshalBinary(b []byte) error {
	var res ResourcecontrolsResourceControlCreatePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
