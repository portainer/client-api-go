// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesMountPoint types mount point
//
// swagger:model types.MountPoint
type TypesMountPoint struct {

	// Destination is the path relative to the container root (`/`) where the
	// Source is mounted inside the container.
	Destination string `json:"destination,omitempty"`

	// Driver is the volume driver used to create the volume (if it is a volume).
	Driver string `json:"driver,omitempty"`

	// Mode is a comma separated list of options supplied by the user when
	// creating the bind/volume mount.
	//
	// The default is platform-specific (`"z"` on Linux, empty on Windows).
	Mode string `json:"mode,omitempty"`

	// Name is the name reference to the underlying data defined by `Source`
	// e.g., the volume name.
	Name string `json:"name,omitempty"`

	// Propagation describes how mounts are propagated from the host into the
	// mount point, and vice-versa. Refer to the Linux kernel documentation
	// for details:
	// https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt
	//
	// This field is not used on Windows.
	Propagation string `json:"propagation,omitempty"`

	// RW indicates whether the mount is mounted writable (read-write).
	Rw bool `json:"rw,omitempty"`

	// Source is the source location of the mount.
	//
	// For volumes, this contains the storage location of the volume (within
	// `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
	// the source (host) part of the bind-mount. For `tmpfs` mount points, this
	// field is empty.
	Source string `json:"source,omitempty"`

	// Type is the type of mount, see `Type<foo>` definitions in
	// github.com/docker/docker/api/types/mount.Type
	Type string `json:"type,omitempty"`
}

// Validate validates this types mount point
func (m *TypesMountPoint) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this types mount point based on context it is used
func (m *TypesMountPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TypesMountPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesMountPoint) UnmarshalBinary(b []byte) error {
	var res TypesMountPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
