// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesK8sSecret kubernetes k8s secret
//
// swagger:model kubernetes.K8sSecret
type KubernetesK8sSecret struct {

	// annotations
	Annotations map[string]string `json:"Annotations,omitempty"`

	// configuration owner
	ConfigurationOwner string `json:"ConfigurationOwner,omitempty"`

	// configuration owner Id
	ConfigurationOwnerID string `json:"ConfigurationOwnerId,omitempty"`

	// configuration owners
	ConfigurationOwners []*KubernetesK8sConfigurationOwnerResource `json:"ConfigurationOwners"`

	// creation date
	CreationDate string `json:"CreationDate,omitempty"`

	// data
	Data map[string]string `json:"Data,omitempty"`

	// is used
	IsUsed bool `json:"IsUsed,omitempty"`

	// labels
	Labels map[string]string `json:"Labels,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// namespace
	Namespace string `json:"Namespace,omitempty"`

	// secret type
	SecretType string `json:"SecretType,omitempty"`

	// UID
	UID string `json:"UID,omitempty"`
}

// Validate validates this kubernetes k8s secret
func (m *KubernetesK8sSecret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationOwners(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sSecret) validateConfigurationOwners(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigurationOwners) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigurationOwners); i++ {
		if swag.IsZero(m.ConfigurationOwners[i]) { // not required
			continue
		}

		if m.ConfigurationOwners[i] != nil {
			if err := m.ConfigurationOwners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ConfigurationOwners" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ConfigurationOwners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kubernetes k8s secret based on the context it is used
func (m *KubernetesK8sSecret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigurationOwners(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sSecret) contextValidateConfigurationOwners(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigurationOwners); i++ {

		if m.ConfigurationOwners[i] != nil {

			if swag.IsZero(m.ConfigurationOwners[i]) { // not required
				return nil
			}

			if err := m.ConfigurationOwners[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ConfigurationOwners" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ConfigurationOwners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesK8sSecret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesK8sSecret) UnmarshalBinary(b []byte) error {
	var res KubernetesK8sSecret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
