// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MountPropagation mount propagation
//
// swagger:model mount.Propagation
type MountPropagation string

func NewMountPropagation(value MountPropagation) *MountPropagation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MountPropagation.
func (m MountPropagation) Pointer() *MountPropagation {
	return &m
}

const (

	// MountPropagationRprivate captures enum value "rprivate"
	MountPropagationRprivate MountPropagation = "rprivate"

	// MountPropagationPrivate captures enum value "private"
	MountPropagationPrivate MountPropagation = "private"

	// MountPropagationRshared captures enum value "rshared"
	MountPropagationRshared MountPropagation = "rshared"

	// MountPropagationShared captures enum value "shared"
	MountPropagationShared MountPropagation = "shared"

	// MountPropagationRslave captures enum value "rslave"
	MountPropagationRslave MountPropagation = "rslave"

	// MountPropagationSlave captures enum value "slave"
	MountPropagationSlave MountPropagation = "slave"
)

// for schema
var mountPropagationEnum []interface{}

func init() {
	var res []MountPropagation
	if err := json.Unmarshal([]byte(`["rprivate","private","rshared","shared","rslave","slave"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mountPropagationEnum = append(mountPropagationEnum, v)
	}
}

func (m MountPropagation) validateMountPropagationEnum(path, location string, value MountPropagation) error {
	if err := validate.EnumCase(path, location, value, mountPropagationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this mount propagation
func (m MountPropagation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMountPropagationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this mount propagation based on context it is used
func (m MountPropagation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
