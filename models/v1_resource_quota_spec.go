// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ResourceQuotaSpec v1 resource quota spec
//
// swagger:model v1.ResourceQuotaSpec
type V1ResourceQuotaSpec struct {

	// hard is the set of desired hard limits for each named resource.
	// More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	// +optional
	Hard V1ResourceList `json:"hard,omitempty"`

	// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota
	// but expressed using ScopeSelectorOperator in combination with possible values.
	// For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
	// +optional
	ScopeSelector *V1ScopeSelector `json:"scopeSelector,omitempty"`

	// A collection of filters that must match each object tracked by a quota.
	// If not specified, the quota matches all objects.
	// +optional
	Scopes []string `json:"scopes"`
}

// Validate validates this v1 resource quota spec
func (m *V1ResourceQuotaSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ResourceQuotaSpec) validateHard(formats strfmt.Registry) error {
	if swag.IsZero(m.Hard) { // not required
		return nil
	}

	if m.Hard != nil {
		if err := m.Hard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hard")
			}
			return err
		}
	}

	return nil
}

func (m *V1ResourceQuotaSpec) validateScopeSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopeSelector) { // not required
		return nil
	}

	if m.ScopeSelector != nil {
		if err := m.ScopeSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopeSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopeSelector")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 resource quota spec based on the context it is used
func (m *V1ResourceQuotaSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopeSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ResourceQuotaSpec) contextValidateHard(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Hard) { // not required
		return nil
	}

	if err := m.Hard.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hard")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hard")
		}
		return err
	}

	return nil
}

func (m *V1ResourceQuotaSpec) contextValidateScopeSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopeSelector != nil {

		if swag.IsZero(m.ScopeSelector) { // not required
			return nil
		}

		if err := m.ScopeSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopeSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopeSelector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ResourceQuotaSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ResourceQuotaSpec) UnmarshalBinary(b []byte) error {
	var res V1ResourceQuotaSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
