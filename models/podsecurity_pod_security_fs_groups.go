// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodsecurityPodSecurityFsGroups podsecurity pod security fs groups
//
// swagger:model podsecurity.PodSecurityFsGroups
type PodsecurityPodSecurityFsGroups struct {

	// idrange
	Idrange []*PodsecurityPodSecurityIdrange `json:"idrange"`

	// type
	Type PodsecurityFSGroupStrategyType `json:"type,omitempty"`
}

// Validate validates this podsecurity pod security fs groups
func (m *PodsecurityPodSecurityFsGroups) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdrange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodsecurityPodSecurityFsGroups) validateIdrange(formats strfmt.Registry) error {
	if swag.IsZero(m.Idrange) { // not required
		return nil
	}

	for i := 0; i < len(m.Idrange); i++ {
		if swag.IsZero(m.Idrange[i]) { // not required
			continue
		}

		if m.Idrange[i] != nil {
			if err := m.Idrange[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("idrange" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("idrange" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PodsecurityPodSecurityFsGroups) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this podsecurity pod security fs groups based on the context it is used
func (m *PodsecurityPodSecurityFsGroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdrange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodsecurityPodSecurityFsGroups) contextValidateIdrange(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Idrange); i++ {

		if m.Idrange[i] != nil {
			if err := m.Idrange[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("idrange" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("idrange" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PodsecurityPodSecurityFsGroups) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodsecurityPodSecurityFsGroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodsecurityPodSecurityFsGroups) UnmarshalBinary(b []byte) error {
	var res PodsecurityPodSecurityFsGroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
