// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse github com portainer portainer api http handler system version response
//
// swagger:model github.com_portainer_portainer_api_http_handler_system.versionResponse
type GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse struct {

	// The latest version available
	// Example: 2.0.0
	LatestVersion string `json:"LatestVersion,omitempty"`

	// Whether portainer has an update available
	// Example: false
	UpdateAvailable bool `json:"UpdateAvailable,omitempty"`

	// build
	Build *GithubComPortainerPortainerAPIHTTPHandlerSystemBuildInfo `json:"build,omitempty"`

	// database version
	DatabaseVersion string `json:"databaseVersion,omitempty"`

	// server version
	ServerVersion string `json:"serverVersion,omitempty"`
}

// Validate validates this github com portainer portainer api http handler system version response
func (m *GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse) validateBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this github com portainer portainer api http handler system version response based on the context it is used
func (m *GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse) contextValidateBuild(ctx context.Context, formats strfmt.Registry) error {

	if m.Build != nil {
		if err := m.Build.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse) UnmarshalBinary(b []byte) error {
	var res GithubComPortainerPortainerAPIHTTPHandlerSystemVersionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
