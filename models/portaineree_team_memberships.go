// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainereeTeamMemberships portaineree team memberships
//
// swagger:model portaineree.TeamMemberships
type PortainereeTeamMemberships struct {

	// admin auto populate
	AdminAutoPopulate bool `json:"AdminAutoPopulate,omitempty"`

	// admin group claims regex list
	AdminGroupClaimsRegexList []string `json:"AdminGroupClaimsRegexList"`

	// o auth claim mappings
	OAuthClaimMappings []*PortainereeOAuthClaimMappings `json:"OAuthClaimMappings"`

	// o auth claim name
	OAuthClaimName string `json:"OAuthClaimName,omitempty"`
}

// Validate validates this portaineree team memberships
func (m *PortainereeTeamMemberships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOAuthClaimMappings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeTeamMemberships) validateOAuthClaimMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.OAuthClaimMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.OAuthClaimMappings); i++ {
		if swag.IsZero(m.OAuthClaimMappings[i]) { // not required
			continue
		}

		if m.OAuthClaimMappings[i] != nil {
			if err := m.OAuthClaimMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OAuthClaimMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OAuthClaimMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this portaineree team memberships based on the context it is used
func (m *PortainereeTeamMemberships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOAuthClaimMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeTeamMemberships) contextValidateOAuthClaimMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OAuthClaimMappings); i++ {

		if m.OAuthClaimMappings[i] != nil {
			if err := m.OAuthClaimMappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OAuthClaimMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OAuthClaimMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeTeamMemberships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeTeamMemberships) UnmarshalBinary(b []byte) error {
	var res PortainereeTeamMemberships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
