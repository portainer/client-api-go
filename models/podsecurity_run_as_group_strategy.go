// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PodsecurityRunAsGroupStrategy podsecurity run as group strategy
//
// swagger:model podsecurity.RunAsGroupStrategy
type PodsecurityRunAsGroupStrategy string

func NewPodsecurityRunAsGroupStrategy(value PodsecurityRunAsGroupStrategy) *PodsecurityRunAsGroupStrategy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PodsecurityRunAsGroupStrategy.
func (m PodsecurityRunAsGroupStrategy) Pointer() *PodsecurityRunAsGroupStrategy {
	return &m
}

const (

	// PodsecurityRunAsGroupStrategyMayRunAs captures enum value "MayRunAs"
	PodsecurityRunAsGroupStrategyMayRunAs PodsecurityRunAsGroupStrategy = "MayRunAs"

	// PodsecurityRunAsGroupStrategyMustRunAs captures enum value "MustRunAs"
	PodsecurityRunAsGroupStrategyMustRunAs PodsecurityRunAsGroupStrategy = "MustRunAs"

	// PodsecurityRunAsGroupStrategyRunAsAny captures enum value "RunAsAny"
	PodsecurityRunAsGroupStrategyRunAsAny PodsecurityRunAsGroupStrategy = "RunAsAny"
)

// for schema
var podsecurityRunAsGroupStrategyEnum []interface{}

func init() {
	var res []PodsecurityRunAsGroupStrategy
	if err := json.Unmarshal([]byte(`["MayRunAs","MustRunAs","RunAsAny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		podsecurityRunAsGroupStrategyEnum = append(podsecurityRunAsGroupStrategyEnum, v)
	}
}

func (m PodsecurityRunAsGroupStrategy) validatePodsecurityRunAsGroupStrategyEnum(path, location string, value PodsecurityRunAsGroupStrategy) error {
	if err := validate.EnumCase(path, location, value, podsecurityRunAsGroupStrategyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this podsecurity run as group strategy
func (m PodsecurityRunAsGroupStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePodsecurityRunAsGroupStrategyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this podsecurity run as group strategy based on context it is used
func (m PodsecurityRunAsGroupStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
