// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CSIPersistentVolumeSource v1 c s i persistent volume source
//
// swagger:model v1.CSIPersistentVolumeSource
type V1CSIPersistentVolumeSource struct {

	// controllerExpandSecretRef is a reference to the secret object containing
	// sensitive information to pass to the CSI driver to complete the CSI
	// ControllerExpandVolume call.
	// This field is optional, and may be empty if no secret is required. If the
	// secret object contains more than one secret, all secrets are passed.
	// +optional
	ControllerExpandSecretRef *V1SecretReference `json:"controllerExpandSecretRef,omitempty"`

	// controllerPublishSecretRef is a reference to the secret object containing
	// sensitive information to pass to the CSI driver to complete the CSI
	// ControllerPublishVolume and ControllerUnpublishVolume calls.
	// This field is optional, and may be empty if no secret is required. If the
	// secret object contains more than one secret, all secrets are passed.
	// +optional
	ControllerPublishSecretRef *V1SecretReference `json:"controllerPublishSecretRef,omitempty"`

	// driver is the name of the driver to use for this volume.
	// Required.
	Driver string `json:"driver,omitempty"`

	// fsType to mount. Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs".
	// +optional
	FsType string `json:"fsType,omitempty"`

	// nodeExpandSecretRef is a reference to the secret object containing
	// sensitive information to pass to the CSI driver to complete the CSI
	// NodeExpandVolume call.
	// This field is optional, may be omitted if no secret is required. If the
	// secret object contains more than one secret, all secrets are passed.
	// +optional
	NodeExpandSecretRef *V1SecretReference `json:"nodeExpandSecretRef,omitempty"`

	// nodePublishSecretRef is a reference to the secret object containing
	// sensitive information to pass to the CSI driver to complete the CSI
	// NodePublishVolume and NodeUnpublishVolume calls.
	// This field is optional, and may be empty if no secret is required. If the
	// secret object contains more than one secret, all secrets are passed.
	// +optional
	NodePublishSecretRef *V1SecretReference `json:"nodePublishSecretRef,omitempty"`

	// nodeStageSecretRef is a reference to the secret object containing sensitive
	// information to pass to the CSI driver to complete the CSI NodeStageVolume
	// and NodeStageVolume and NodeUnstageVolume calls.
	// This field is optional, and may be empty if no secret is required. If the
	// secret object contains more than one secret, all secrets are passed.
	// +optional
	NodeStageSecretRef *V1SecretReference `json:"nodeStageSecretRef,omitempty"`

	// readOnly value to pass to ControllerPublishVolumeRequest.
	// Defaults to false (read/write).
	// +optional
	ReadOnly bool `json:"readOnly,omitempty"`

	// volumeAttributes of the volume to publish.
	// +optional
	VolumeAttributes map[string]string `json:"volumeAttributes,omitempty"`

	// volumeHandle is the unique volume name returned by the CSI volume
	// pluginâ€™s CreateVolume to refer to the volume on all subsequent calls.
	// Required.
	VolumeHandle string `json:"volumeHandle,omitempty"`
}

// Validate validates this v1 c s i persistent volume source
func (m *V1CSIPersistentVolumeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerExpandSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerPublishSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeExpandSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePublishSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeStageSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CSIPersistentVolumeSource) validateControllerExpandSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerExpandSecretRef) { // not required
		return nil
	}

	if m.ControllerExpandSecretRef != nil {
		if err := m.ControllerExpandSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerExpandSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerExpandSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) validateControllerPublishSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerPublishSecretRef) { // not required
		return nil
	}

	if m.ControllerPublishSecretRef != nil {
		if err := m.ControllerPublishSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerPublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerPublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) validateNodeExpandSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeExpandSecretRef) { // not required
		return nil
	}

	if m.NodeExpandSecretRef != nil {
		if err := m.NodeExpandSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeExpandSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeExpandSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) validateNodePublishSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NodePublishSecretRef) { // not required
		return nil
	}

	if m.NodePublishSecretRef != nil {
		if err := m.NodePublishSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodePublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodePublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) validateNodeStageSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeStageSecretRef) { // not required
		return nil
	}

	if m.NodeStageSecretRef != nil {
		if err := m.NodeStageSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeStageSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeStageSecretRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 c s i persistent volume source based on the context it is used
func (m *V1CSIPersistentVolumeSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControllerExpandSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerPublishSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeExpandSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodePublishSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeStageSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CSIPersistentVolumeSource) contextValidateControllerExpandSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerExpandSecretRef != nil {

		if swag.IsZero(m.ControllerExpandSecretRef) { // not required
			return nil
		}

		if err := m.ControllerExpandSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerExpandSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerExpandSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) contextValidateControllerPublishSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerPublishSecretRef != nil {

		if swag.IsZero(m.ControllerPublishSecretRef) { // not required
			return nil
		}

		if err := m.ControllerPublishSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerPublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerPublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) contextValidateNodeExpandSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeExpandSecretRef != nil {

		if swag.IsZero(m.NodeExpandSecretRef) { // not required
			return nil
		}

		if err := m.NodeExpandSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeExpandSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeExpandSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) contextValidateNodePublishSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NodePublishSecretRef != nil {

		if swag.IsZero(m.NodePublishSecretRef) { // not required
			return nil
		}

		if err := m.NodePublishSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodePublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodePublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1CSIPersistentVolumeSource) contextValidateNodeStageSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeStageSecretRef != nil {

		if swag.IsZero(m.NodeStageSecretRef) { // not required
			return nil
		}

		if err := m.NodeStageSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeStageSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeStageSecretRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CSIPersistentVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CSIPersistentVolumeSource) UnmarshalBinary(b []byte) error {
	var res V1CSIPersistentVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
