// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChatChatQueryPayload chat chat query payload
//
// swagger:model chat.chatQueryPayload
type ChatChatQueryPayload struct {

	// Context is used to build a context that will be added to the prompt sent to OpenAI.
	// Only accepts a list of specific values:
	// environment_aware will create a context based on environment information (EnvironmentID parameter is mandatory).
	// Example: environment_aware
	// Required: true
	Context *string `json:"context"`

	// EnvironmentID is the ID of the environment for which the chat query is being made
	// it will be used to retrieve context information about the environment and pass it to then OpenAI API.
	// Mandatory when environment_aware context is used.
	// Example: 1
	EnvironmentID int64 `json:"environmentID,omitempty"`

	// Message is the message that will be forwarded to the OpenAI API.
	// Example: I would like to deploy a wordpress production setup
	// Required: true
	Message *string `json:"message"`

	// Model is the name of the OpenAI model that will be used to generate the response.
	// Only accepts a list of specific values: text-davinci-003, gpt-3.5-turbo, gpt-4
	// Note that the use of the GPT-4 model requires access to its API.
	// Optional: will default to gpt-3.5-turbo if not provided.
	// Example: gpt-3.5-turbo
	Model string `json:"model,omitempty"`
}

// Validate validates this chat chat query payload
func (m *ChatChatQueryPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChatChatQueryPayload) validateContext(formats strfmt.Registry) error {

	if err := validate.Required("context", "body", m.Context); err != nil {
		return err
	}

	return nil
}

func (m *ChatChatQueryPayload) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this chat chat query payload based on context it is used
func (m *ChatChatQueryPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChatChatQueryPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChatChatQueryPayload) UnmarshalBinary(b []byte) error {
	var res ChatChatQueryPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
