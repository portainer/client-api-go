// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesK8sClusterRoleBinding kubernetes k8s cluster role binding
//
// swagger:model kubernetes.K8sClusterRoleBinding
type KubernetesK8sClusterRoleBinding struct {

	// creation date
	CreationDate string `json:"creationDate,omitempty"`

	// is system
	IsSystem bool `json:"isSystem,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// role ref
	RoleRef *V1RoleRef `json:"roleRef,omitempty"`

	// subjects
	Subjects []*V1Subject `json:"subjects"`

	// UID of the referent.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	UID string `json:"uid,omitempty"`
}

// Validate validates this kubernetes k8s cluster role binding
func (m *KubernetesK8sClusterRoleBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sClusterRoleBinding) validateRoleRef(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleRef) { // not required
		return nil
	}

	if m.RoleRef != nil {
		if err := m.RoleRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleRef")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sClusterRoleBinding) validateSubjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Subjects) { // not required
		return nil
	}

	for i := 0; i < len(m.Subjects); i++ {
		if swag.IsZero(m.Subjects[i]) { // not required
			continue
		}

		if m.Subjects[i] != nil {
			if err := m.Subjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kubernetes k8s cluster role binding based on the context it is used
func (m *KubernetesK8sClusterRoleBinding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sClusterRoleBinding) contextValidateRoleRef(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleRef != nil {

		if swag.IsZero(m.RoleRef) { // not required
			return nil
		}

		if err := m.RoleRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleRef")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesK8sClusterRoleBinding) contextValidateSubjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subjects); i++ {

		if m.Subjects[i] != nil {

			if swag.IsZero(m.Subjects[i]) { // not required
				return nil
			}

			if err := m.Subjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesK8sClusterRoleBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesK8sClusterRoleBinding) UnmarshalBinary(b []byte) error {
	var res KubernetesK8sClusterRoleBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
