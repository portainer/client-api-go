// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistriesRegistryUpdatePayload registries registry update payload
//
// swagger:model registries.registryUpdatePayload
type RegistriesRegistryUpdatePayload struct {

	// authentication
	// Example: false
	// Required: true
	Authentication *bool `json:"authentication"`

	// base URL
	// Example: registry.mydomain.tld:2375
	BaseURL string `json:"baseURL,omitempty"`

	// ecr
	Ecr *PortainerEcrData `json:"ecr,omitempty"`

	// github
	Github *PortainereeGithubRegistryData `json:"github,omitempty"`

	// name
	// Example: my-registry
	// Required: true
	Name *string `json:"name"`

	// password
	// Example: registry_password
	Password string `json:"password,omitempty"`

	// quay
	Quay *PortainerQuayRegistryData `json:"quay,omitempty"`

	// registry accesses
	RegistryAccesses PortainerRegistryAccesses `json:"registryAccesses,omitempty"`

	// url
	// Example: registry.mydomain.tld:2375/feed
	// Required: true
	URL *string `json:"url"`

	// username
	// Example: registry_user
	Username string `json:"username,omitempty"`
}

// Validate validates this registries registry update payload
func (m *RegistriesRegistryUpdatePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGithub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistriesRegistryUpdatePayload) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) validateEcr(formats strfmt.Registry) error {
	if swag.IsZero(m.Ecr) { // not required
		return nil
	}

	if m.Ecr != nil {
		if err := m.Ecr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecr")
			}
			return err
		}
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) validateGithub(formats strfmt.Registry) error {
	if swag.IsZero(m.Github) { // not required
		return nil
	}

	if m.Github != nil {
		if err := m.Github.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("github")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("github")
			}
			return err
		}
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) validateQuay(formats strfmt.Registry) error {
	if swag.IsZero(m.Quay) { // not required
		return nil
	}

	if m.Quay != nil {
		if err := m.Quay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quay")
			}
			return err
		}
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) validateRegistryAccesses(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryAccesses) { // not required
		return nil
	}

	if m.RegistryAccesses != nil {
		if err := m.RegistryAccesses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registryAccesses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registryAccesses")
			}
			return err
		}
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this registries registry update payload based on the context it is used
func (m *RegistriesRegistryUpdatePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEcr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGithub(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistryAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistriesRegistryUpdatePayload) contextValidateEcr(ctx context.Context, formats strfmt.Registry) error {

	if m.Ecr != nil {

		if swag.IsZero(m.Ecr) { // not required
			return nil
		}

		if err := m.Ecr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecr")
			}
			return err
		}
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) contextValidateGithub(ctx context.Context, formats strfmt.Registry) error {

	if m.Github != nil {

		if swag.IsZero(m.Github) { // not required
			return nil
		}

		if err := m.Github.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("github")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("github")
			}
			return err
		}
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) contextValidateQuay(ctx context.Context, formats strfmt.Registry) error {

	if m.Quay != nil {

		if swag.IsZero(m.Quay) { // not required
			return nil
		}

		if err := m.Quay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quay")
			}
			return err
		}
	}

	return nil
}

func (m *RegistriesRegistryUpdatePayload) contextValidateRegistryAccesses(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RegistryAccesses) { // not required
		return nil
	}

	if err := m.RegistryAccesses.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registryAccesses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("registryAccesses")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegistriesRegistryUpdatePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistriesRegistryUpdatePayload) UnmarshalBinary(b []byte) error {
	var res RegistriesRegistryUpdatePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
