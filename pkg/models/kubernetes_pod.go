// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesPod kubernetes pod
//
// swagger:model kubernetes.Pod
type KubernetesPod struct {

	// container name
	ContainerName string `json:"ContainerName,omitempty"`

	// creation date
	CreationDate string `json:"CreationDate,omitempty"`

	// image
	Image string `json:"Image,omitempty"`

	// image pull policy
	ImagePullPolicy string `json:"ImagePullPolicy,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// node name
	NodeName string `json:"NodeName,omitempty"`

	// pod IP
	PodIP string `json:"PodIP,omitempty"`

	// resource
	Resource *KubernetesK8sApplicationResource `json:"Resource,omitempty"`

	// status
	Status string `json:"Status,omitempty"`

	// Uid
	UID string `json:"Uid,omitempty"`
}

// Validate validates this kubernetes pod
func (m *KubernetesPod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesPod) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes pod based on the context it is used
func (m *KubernetesPod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesPod) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {

		if swag.IsZero(m.Resource) { // not required
			return nil
		}

		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesPod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesPod) UnmarshalBinary(b []byte) error {
	var res KubernetesPod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
