// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesK8sEvent kubernetes k8s event
//
// swagger:model kubernetes.K8sEvent
type KubernetesK8sEvent struct {

	// count
	Count int64 `json:"count,omitempty"`

	// event time
	EventTime string `json:"eventTime,omitempty"`

	// first timestamp
	FirstTimestamp string `json:"firstTimestamp,omitempty"`

	// involved object
	InvolvedObject *KubernetesK8sEventInvolvedObject `json:"involvedObject,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// last timestamp
	LastTimestamp string `json:"lastTimestamp,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this kubernetes k8s event
func (m *KubernetesK8sEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvolvedObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sEvent) validateInvolvedObject(formats strfmt.Registry) error {
	if swag.IsZero(m.InvolvedObject) { // not required
		return nil
	}

	if m.InvolvedObject != nil {
		if err := m.InvolvedObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("involvedObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("involvedObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes k8s event based on the context it is used
func (m *KubernetesK8sEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvolvedObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesK8sEvent) contextValidateInvolvedObject(ctx context.Context, formats strfmt.Registry) error {

	if m.InvolvedObject != nil {

		if swag.IsZero(m.InvolvedObject) { // not required
			return nil
		}

		if err := m.InvolvedObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("involvedObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("involvedObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesK8sEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesK8sEvent) UnmarshalBinary(b []byte) error {
	var res KubernetesK8sEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
