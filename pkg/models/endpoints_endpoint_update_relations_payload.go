// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EndpointsEndpointUpdateRelationsPayload endpoints endpoint update relations payload
//
// swagger:model endpoints.endpointUpdateRelationsPayload
type EndpointsEndpointUpdateRelationsPayload struct {

	// relations
	Relations map[string]EndpointsEndpointUpdateRelationsPayloadRelationsAnon `json:"relations,omitempty"`
}

// Validate validates this endpoints endpoint update relations payload
func (m *EndpointsEndpointUpdateRelationsPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointsEndpointUpdateRelationsPayload) validateRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	for k := range m.Relations {

		if swag.IsZero(m.Relations[k]) { // not required
			continue
		}
		if val, ok := m.Relations[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relations" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relations" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this endpoints endpoint update relations payload based on the context it is used
func (m *EndpointsEndpointUpdateRelationsPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointsEndpointUpdateRelationsPayload) contextValidateRelations(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Relations {

		if val, ok := m.Relations[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointsEndpointUpdateRelationsPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointsEndpointUpdateRelationsPayload) UnmarshalBinary(b []byte) error {
	var res EndpointsEndpointUpdateRelationsPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EndpointsEndpointUpdateRelationsPayloadRelationsAnon endpoints endpoint update relations payload relations anon
//
// swagger:model EndpointsEndpointUpdateRelationsPayloadRelationsAnon
type EndpointsEndpointUpdateRelationsPayloadRelationsAnon struct {

	// edge groups
	EdgeGroups []int64 `json:"edgeGroups"`

	// Environment(Endpoint) group identifier
	// Example: 1
	Group int64 `json:"group,omitempty"`

	// tags
	Tags []int64 `json:"tags"`
}

// Validate validates this endpoints endpoint update relations payload relations anon
func (m *EndpointsEndpointUpdateRelationsPayloadRelationsAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this endpoints endpoint update relations payload relations anon based on context it is used
func (m *EndpointsEndpointUpdateRelationsPayloadRelationsAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EndpointsEndpointUpdateRelationsPayloadRelationsAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointsEndpointUpdateRelationsPayloadRelationsAnon) UnmarshalBinary(b []byte) error {
	var res EndpointsEndpointUpdateRelationsPayloadRelationsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
