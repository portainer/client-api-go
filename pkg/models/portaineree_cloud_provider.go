// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortainereeCloudProvider portaineree cloud provider
//
// swagger:model portaineree.CloudProvider
type PortainereeCloudProvider struct {

	// MicroK8S specific fields
	AddonWithArgs []*PortainereeMicroK8sAddon `json:"AddonWithArgs"`

	// Amazon specific fields
	AmiType string `json:"AmiType,omitempty"`

	// CPU
	CPU int64 `json:"CPU,omitempty"`

	// CredentialID holds an ID of the credential used to create the cluster
	CredentialID int64 `json:"CredentialID,omitempty"`

	// h d d
	HDD int64 `json:"HDD,omitempty"`

	// instance type
	InstanceType string `json:"InstanceType,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// Pointer will hide this field for providers other than civo which do
	// not use this field.
	NetworkID string `json:"NetworkID,omitempty"`

	// node count
	NodeCount int64 `json:"NodeCount,omitempty"`

	// node i ps
	NodeIPs string `json:"NodeIPs,omitempty"`

	// node volume size
	NodeVolumeSize int64 `json:"NodeVolumeSize,omitempty"`

	// offline install
	OfflineInstall bool `json:"OfflineInstall,omitempty"`

	// provider
	Provider string `json:"Provider,omitempty"`

	// RAM
	RAM float64 `json:"RAM,omitempty"`

	// region
	Region string `json:"Region,omitempty"`

	// size
	Size string `json:"Size,omitempty"`

	// URL
	URL string `json:"URL,omitempty"`

	// dnsprefix
	Dnsprefix string `json:"dnsprefix,omitempty"`

	// kubernetes version
	KubernetesVersion string `json:"kubernetesVersion,omitempty"`

	// pool name
	PoolName string `json:"poolName,omitempty"`

	// Azure specific fields
	ResourceGroup string `json:"resourceGroup,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`
}

// Validate validates this portaineree cloud provider
func (m *PortainereeCloudProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddonWithArgs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeCloudProvider) validateAddonWithArgs(formats strfmt.Registry) error {
	if swag.IsZero(m.AddonWithArgs) { // not required
		return nil
	}

	for i := 0; i < len(m.AddonWithArgs); i++ {
		if swag.IsZero(m.AddonWithArgs[i]) { // not required
			continue
		}

		if m.AddonWithArgs[i] != nil {
			if err := m.AddonWithArgs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddonWithArgs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AddonWithArgs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this portaineree cloud provider based on the context it is used
func (m *PortainereeCloudProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddonWithArgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortainereeCloudProvider) contextValidateAddonWithArgs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AddonWithArgs); i++ {

		if m.AddonWithArgs[i] != nil {

			if swag.IsZero(m.AddonWithArgs[i]) { // not required
				return nil
			}

			if err := m.AddonWithArgs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AddonWithArgs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AddonWithArgs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortainereeCloudProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortainereeCloudProvider) UnmarshalBinary(b []byte) error {
	var res PortainereeCloudProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
