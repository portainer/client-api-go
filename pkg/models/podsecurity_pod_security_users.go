// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodsecurityPodSecurityUsers podsecurity pod security users
//
// swagger:model podsecurity.PodSecurityUsers
type PodsecurityPodSecurityUsers struct {

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// fs groups
	FsGroups *PodsecurityPodSecurityFsGroups `json:"fsGroups,omitempty"`

	// run as group
	RunAsGroup *PodsecurityPodSecurityRunAsGroup `json:"runAsGroup,omitempty"`

	// run as user
	RunAsUser *PodsecurityPodSecurityRunAsUser `json:"runAsUser,omitempty"`

	// supplemental groups
	SupplementalGroups *PodsecurityPodSecuritySupplementalGroups `json:"supplementalGroups,omitempty"`
}

// Validate validates this podsecurity pod security users
func (m *PodsecurityPodSecurityUsers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFsGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplementalGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodsecurityPodSecurityUsers) validateFsGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.FsGroups) { // not required
		return nil
	}

	if m.FsGroups != nil {
		if err := m.FsGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fsGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fsGroups")
			}
			return err
		}
	}

	return nil
}

func (m *PodsecurityPodSecurityUsers) validateRunAsGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.RunAsGroup) { // not required
		return nil
	}

	if m.RunAsGroup != nil {
		if err := m.RunAsGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runAsGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runAsGroup")
			}
			return err
		}
	}

	return nil
}

func (m *PodsecurityPodSecurityUsers) validateRunAsUser(formats strfmt.Registry) error {
	if swag.IsZero(m.RunAsUser) { // not required
		return nil
	}

	if m.RunAsUser != nil {
		if err := m.RunAsUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runAsUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runAsUser")
			}
			return err
		}
	}

	return nil
}

func (m *PodsecurityPodSecurityUsers) validateSupplementalGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.SupplementalGroups) { // not required
		return nil
	}

	if m.SupplementalGroups != nil {
		if err := m.SupplementalGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplementalGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supplementalGroups")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this podsecurity pod security users based on the context it is used
func (m *PodsecurityPodSecurityUsers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFsGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunAsGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunAsUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupplementalGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodsecurityPodSecurityUsers) contextValidateFsGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.FsGroups != nil {

		if swag.IsZero(m.FsGroups) { // not required
			return nil
		}

		if err := m.FsGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fsGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fsGroups")
			}
			return err
		}
	}

	return nil
}

func (m *PodsecurityPodSecurityUsers) contextValidateRunAsGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.RunAsGroup != nil {

		if swag.IsZero(m.RunAsGroup) { // not required
			return nil
		}

		if err := m.RunAsGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runAsGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runAsGroup")
			}
			return err
		}
	}

	return nil
}

func (m *PodsecurityPodSecurityUsers) contextValidateRunAsUser(ctx context.Context, formats strfmt.Registry) error {

	if m.RunAsUser != nil {

		if swag.IsZero(m.RunAsUser) { // not required
			return nil
		}

		if err := m.RunAsUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runAsUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runAsUser")
			}
			return err
		}
	}

	return nil
}

func (m *PodsecurityPodSecurityUsers) contextValidateSupplementalGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.SupplementalGroups != nil {

		if swag.IsZero(m.SupplementalGroups) { // not required
			return nil
		}

		if err := m.SupplementalGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplementalGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supplementalGroups")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodsecurityPodSecurityUsers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodsecurityPodSecurityUsers) UnmarshalBinary(b []byte) error {
	var res PodsecurityPodSecurityUsers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
