// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SettingsSettingsUpdatePayload settings settings update payload
//
// swagger:model settings.settingsUpdatePayload
type SettingsSettingsUpdatePayload struct {

	// EdgePortainerURL is the URL that is exposed to edge agents
	EdgePortainerURL string `json:"EdgePortainerURL,omitempty"`

	// Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth
	// Example: 1
	AuthenticationMethod int64 `json:"authenticationMethod,omitempty"`

	// A list of label name & value that will be used to hide containers when querying containers
	BlackListedLabels []*PortainerPair `json:"blackListedLabels"`

	// The content in plaintext used to display in the login page. Will hide when value is empty string
	// Example: notice or agreement
	CustomLoginBanner string `json:"customLoginBanner,omitempty"`

	// Whether to disable kube roles sync for all built-in roles
	// Example: false
	DisableKubeRolesSync bool `json:"disableKubeRolesSync,omitempty"`

	// Whether to disable kubeshell access for non-admin users
	// Example: false
	DisableKubeShell bool `json:"disableKubeShell,omitempty"`

	// Whether to disable kubeconfig download for non-admin users
	// Example: false
	DisableKubeconfigDownload bool `json:"disableKubeconfigDownload,omitempty"`

	// edge
	Edge *SettingsSettingsUpdatePayloadEdge `json:"edge,omitempty"`

	// The default check in interval for edge agent (in seconds)
	// Example: 5
	EdgeAgentCheckinInterval int64 `json:"edgeAgentCheckinInterval,omitempty"`

	// Whether edge compute features are enabled
	// Example: true
	EnableEdgeComputeFeatures bool `json:"enableEdgeComputeFeatures,omitempty"`

	// Whether telemetry is enabled
	// Example: false
	EnableTelemetry bool `json:"enableTelemetry,omitempty"`

	// EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone
	// Example: false
	EnforceEdgeID bool `json:"enforceEdgeID,omitempty"`

	// Deployment options for encouraging deployment as code
	GlobalDeploymentOptions *PortainereeGlobalDeploymentOptions `json:"globalDeploymentOptions,omitempty"`

	// Helm repository URL
	// Example: https://kubernetes.github.io/ingress-nginx
	HelmRepositoryURL string `json:"helmRepositoryURL,omitempty"`

	// internal auth settings
	InternalAuthSettings *PortainerInternalAuthSettings `json:"internalAuthSettings,omitempty"`

	// The expiry of a Kubeconfig
	// Example: 24h
	KubeconfigExpiry *string `json:"kubeconfigExpiry,omitempty"`

	// Kubec	tl Shell Image Name/Tag
	// Example: portainer/kubectl-shell:latest
	KubectlShellImage string `json:"kubectlShellImage,omitempty"`

	// ldapsettings
	Ldapsettings *PortainereeLDAPSettings `json:"ldapsettings,omitempty"`

	// URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string
	// Example: https://mycompany.mydomain.tld/logo.png
	LogoURL string `json:"logoURL,omitempty"`

	// oauth settings
	OauthSettings *PortainereeOAuthSettings `json:"oauthSettings,omitempty"`

	// The interval in which environment(endpoint) snapshots are created
	// Example: 5m
	SnapshotInterval string `json:"snapshotInterval,omitempty"`

	// URL to the templates that will be displayed in the UI when navigating to App Templates
	// Example: https://raw.githubusercontent.com/portainer/templates/master/templates.json
	TemplatesURL string `json:"templatesURL,omitempty"`

	// TrustOnFirstConnect makes Portainer accepting edge agent connection by default
	// Example: false
	TrustOnFirstConnect bool `json:"trustOnFirstConnect,omitempty"`

	// The duration of a user session
	// Example: 5m
	UserSessionTimeout string `json:"userSessionTimeout,omitempty"`
}

// Validate validates this settings settings update payload
func (m *SettingsSettingsUpdatePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlackListedLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalDeploymentOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalAuthSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapsettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsSettingsUpdatePayload) validateBlackListedLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.BlackListedLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.BlackListedLabels); i++ {
		if swag.IsZero(m.BlackListedLabels[i]) { // not required
			continue
		}

		if m.BlackListedLabels[i] != nil {
			if err := m.BlackListedLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) validateEdge(formats strfmt.Registry) error {
	if swag.IsZero(m.Edge) { // not required
		return nil
	}

	if m.Edge != nil {
		if err := m.Edge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) validateGlobalDeploymentOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalDeploymentOptions) { // not required
		return nil
	}

	if m.GlobalDeploymentOptions != nil {
		if err := m.GlobalDeploymentOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalDeploymentOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalDeploymentOptions")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) validateInternalAuthSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.InternalAuthSettings) { // not required
		return nil
	}

	if m.InternalAuthSettings != nil {
		if err := m.InternalAuthSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("internalAuthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("internalAuthSettings")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) validateLdapsettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Ldapsettings) { // not required
		return nil
	}

	if m.Ldapsettings != nil {
		if err := m.Ldapsettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapsettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapsettings")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) validateOauthSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.OauthSettings) { // not required
		return nil
	}

	if m.OauthSettings != nil {
		if err := m.OauthSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oauthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oauthSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this settings settings update payload based on the context it is used
func (m *SettingsSettingsUpdatePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlackListedLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalDeploymentOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternalAuthSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapsettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOauthSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateBlackListedLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlackListedLabels); i++ {

		if m.BlackListedLabels[i] != nil {

			if swag.IsZero(m.BlackListedLabels[i]) { // not required
				return nil
			}

			if err := m.BlackListedLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("blackListedLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateEdge(ctx context.Context, formats strfmt.Registry) error {

	if m.Edge != nil {

		if swag.IsZero(m.Edge) { // not required
			return nil
		}

		if err := m.Edge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateGlobalDeploymentOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalDeploymentOptions != nil {

		if swag.IsZero(m.GlobalDeploymentOptions) { // not required
			return nil
		}

		if err := m.GlobalDeploymentOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalDeploymentOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalDeploymentOptions")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateInternalAuthSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.InternalAuthSettings != nil {

		if swag.IsZero(m.InternalAuthSettings) { // not required
			return nil
		}

		if err := m.InternalAuthSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("internalAuthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("internalAuthSettings")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateLdapsettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Ldapsettings != nil {

		if swag.IsZero(m.Ldapsettings) { // not required
			return nil
		}

		if err := m.Ldapsettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapsettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapsettings")
			}
			return err
		}
	}

	return nil
}

func (m *SettingsSettingsUpdatePayload) contextValidateOauthSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.OauthSettings != nil {

		if swag.IsZero(m.OauthSettings) { // not required
			return nil
		}

		if err := m.OauthSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oauthSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oauthSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsSettingsUpdatePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsSettingsUpdatePayload) UnmarshalBinary(b []byte) error {
	var res SettingsSettingsUpdatePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsSettingsUpdatePayloadEdge settings settings update payload edge
//
// swagger:model SettingsSettingsUpdatePayloadEdge
type SettingsSettingsUpdatePayloadEdge struct {

	// The command list interval for edge agent - used in edge async mode (in seconds)
	// Example: 5
	CommandInterval int64 `json:"CommandInterval,omitempty"`

	// The ping interval for edge agent - used in edge async mode (in seconds)
	// Example: 5
	PingInterval int64 `json:"PingInterval,omitempty"`

	// The snapshot interval for edge agent - used in edge async mode (in seconds)
	// Example: 5
	SnapshotInterval int64 `json:"SnapshotInterval,omitempty"`

	// AsyncMode enables edge agent to run in async mode by default
	AsyncMode bool `json:"asyncMode,omitempty"`

	// mtls
	Mtls *SettingsmTLSPayload `json:"mtls,omitempty"`

	// The address where the tunneling server can be reached by Edge agents
	TunnelServerAddress string `json:"tunnelServerAddress,omitempty"`
}

// Validate validates this settings settings update payload edge
func (m *SettingsSettingsUpdatePayloadEdge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMtls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsSettingsUpdatePayloadEdge) validateMtls(formats strfmt.Registry) error {
	if swag.IsZero(m.Mtls) { // not required
		return nil
	}

	if m.Mtls != nil {
		if err := m.Mtls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge" + "." + "mtls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge" + "." + "mtls")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this settings settings update payload edge based on the context it is used
func (m *SettingsSettingsUpdatePayloadEdge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMtls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsSettingsUpdatePayloadEdge) contextValidateMtls(ctx context.Context, formats strfmt.Registry) error {

	if m.Mtls != nil {

		if swag.IsZero(m.Mtls) { // not required
			return nil
		}

		if err := m.Mtls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge" + "." + "mtls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge" + "." + "mtls")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsSettingsUpdatePayloadEdge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsSettingsUpdatePayloadEdge) UnmarshalBinary(b []byte) error {
	var res SettingsSettingsUpdatePayloadEdge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
