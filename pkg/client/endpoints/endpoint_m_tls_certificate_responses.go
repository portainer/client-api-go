// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api-go/v2/pkg/models"
)

// EndpointMTLSCertificateReader is a Reader for the EndpointMTLSCertificate structure.
type EndpointMTLSCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EndpointMTLSCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEndpointMTLSCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEndpointMTLSCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEndpointMTLSCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEndpointMTLSCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /endpoints/{id}/mtls_certificate] EndpointMTLSCertificate", response, response.Code())
	}
}

// NewEndpointMTLSCertificateOK creates a EndpointMTLSCertificateOK with default headers values
func NewEndpointMTLSCertificateOK() *EndpointMTLSCertificateOK {
	return &EndpointMTLSCertificateOK{}
}

/*
EndpointMTLSCertificateOK describes a response with status code 200, with default header values.

Success
*/
type EndpointMTLSCertificateOK struct {
	Payload *models.EndpointsEndpointMTLSCertResponse
}

// IsSuccess returns true when this endpoint m Tls certificate o k response has a 2xx status code
func (o *EndpointMTLSCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this endpoint m Tls certificate o k response has a 3xx status code
func (o *EndpointMTLSCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this endpoint m Tls certificate o k response has a 4xx status code
func (o *EndpointMTLSCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this endpoint m Tls certificate o k response has a 5xx status code
func (o *EndpointMTLSCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this endpoint m Tls certificate o k response a status code equal to that given
func (o *EndpointMTLSCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the endpoint m Tls certificate o k response
func (o *EndpointMTLSCertificateOK) Code() int {
	return 200
}

func (o *EndpointMTLSCertificateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateOK %s", 200, payload)
}

func (o *EndpointMTLSCertificateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateOK %s", 200, payload)
}

func (o *EndpointMTLSCertificateOK) GetPayload() *models.EndpointsEndpointMTLSCertResponse {
	return o.Payload
}

func (o *EndpointMTLSCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EndpointsEndpointMTLSCertResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEndpointMTLSCertificateBadRequest creates a EndpointMTLSCertificateBadRequest with default headers values
func NewEndpointMTLSCertificateBadRequest() *EndpointMTLSCertificateBadRequest {
	return &EndpointMTLSCertificateBadRequest{}
}

/*
EndpointMTLSCertificateBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type EndpointMTLSCertificateBadRequest struct {
}

// IsSuccess returns true when this endpoint m Tls certificate bad request response has a 2xx status code
func (o *EndpointMTLSCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this endpoint m Tls certificate bad request response has a 3xx status code
func (o *EndpointMTLSCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this endpoint m Tls certificate bad request response has a 4xx status code
func (o *EndpointMTLSCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this endpoint m Tls certificate bad request response has a 5xx status code
func (o *EndpointMTLSCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this endpoint m Tls certificate bad request response a status code equal to that given
func (o *EndpointMTLSCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the endpoint m Tls certificate bad request response
func (o *EndpointMTLSCertificateBadRequest) Code() int {
	return 400
}

func (o *EndpointMTLSCertificateBadRequest) Error() string {
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateBadRequest", 400)
}

func (o *EndpointMTLSCertificateBadRequest) String() string {
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateBadRequest", 400)
}

func (o *EndpointMTLSCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEndpointMTLSCertificateNotFound creates a EndpointMTLSCertificateNotFound with default headers values
func NewEndpointMTLSCertificateNotFound() *EndpointMTLSCertificateNotFound {
	return &EndpointMTLSCertificateNotFound{}
}

/*
EndpointMTLSCertificateNotFound describes a response with status code 404, with default header values.

Environment(Endpoint) not found
*/
type EndpointMTLSCertificateNotFound struct {
}

// IsSuccess returns true when this endpoint m Tls certificate not found response has a 2xx status code
func (o *EndpointMTLSCertificateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this endpoint m Tls certificate not found response has a 3xx status code
func (o *EndpointMTLSCertificateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this endpoint m Tls certificate not found response has a 4xx status code
func (o *EndpointMTLSCertificateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this endpoint m Tls certificate not found response has a 5xx status code
func (o *EndpointMTLSCertificateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this endpoint m Tls certificate not found response a status code equal to that given
func (o *EndpointMTLSCertificateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the endpoint m Tls certificate not found response
func (o *EndpointMTLSCertificateNotFound) Code() int {
	return 404
}

func (o *EndpointMTLSCertificateNotFound) Error() string {
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateNotFound", 404)
}

func (o *EndpointMTLSCertificateNotFound) String() string {
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateNotFound", 404)
}

func (o *EndpointMTLSCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEndpointMTLSCertificateInternalServerError creates a EndpointMTLSCertificateInternalServerError with default headers values
func NewEndpointMTLSCertificateInternalServerError() *EndpointMTLSCertificateInternalServerError {
	return &EndpointMTLSCertificateInternalServerError{}
}

/*
EndpointMTLSCertificateInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type EndpointMTLSCertificateInternalServerError struct {
}

// IsSuccess returns true when this endpoint m Tls certificate internal server error response has a 2xx status code
func (o *EndpointMTLSCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this endpoint m Tls certificate internal server error response has a 3xx status code
func (o *EndpointMTLSCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this endpoint m Tls certificate internal server error response has a 4xx status code
func (o *EndpointMTLSCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this endpoint m Tls certificate internal server error response has a 5xx status code
func (o *EndpointMTLSCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this endpoint m Tls certificate internal server error response a status code equal to that given
func (o *EndpointMTLSCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the endpoint m Tls certificate internal server error response
func (o *EndpointMTLSCertificateInternalServerError) Code() int {
	return 500
}

func (o *EndpointMTLSCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateInternalServerError", 500)
}

func (o *EndpointMTLSCertificateInternalServerError) String() string {
	return fmt.Sprintf("[GET /endpoints/{id}/mtls_certificate][%d] endpointMTlsCertificateInternalServerError", 500)
}

func (o *EndpointMTLSCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
