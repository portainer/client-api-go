// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new users API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new users API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CurrentUserEndpointAuthorizationsInspect(params *CurrentUserEndpointAuthorizationsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CurrentUserEndpointAuthorizationsInspectOK, error)

	CurrentUserInspect(params *CurrentUserInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CurrentUserInspectOK, error)

	UserAdminCheck(params *UserAdminCheckParams, opts ...ClientOption) (*UserAdminCheckNoContent, error)

	UserAdminInit(params *UserAdminInitParams, opts ...ClientOption) (*UserAdminInitOK, error)

	UserCreate(params *UserCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserCreateOK, error)

	UserCreateGitCredential(params *UserCreateGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserCreateGitCredentialCreated, error)

	UserDelete(params *UserDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserDeleteNoContent, error)

	UserGenerateAPIKey(params *UserGenerateAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGenerateAPIKeyOK, error)

	UserGetAPIKeys(params *UserGetAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGetAPIKeysOK, error)

	UserGetGitCredential(params *UserGetGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGetGitCredentialOK, error)

	UserGetGitCredentials(params *UserGetGitCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGetGitCredentialsOK, error)

	UserInspect(params *UserInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserInspectOK, error)

	UserList(params *UserListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserListOK, error)

	UserMembershipsInspect(params *UserMembershipsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserMembershipsInspectOK, error)

	UserNamespaces(params *UserNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserNamespacesOK, error)

	UserRemoveAPIKey(params *UserRemoveAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserRemoveAPIKeyNoContent, error)

	UserRemoveGitCredential(params *UserRemoveGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserRemoveGitCredentialNoContent, error)

	UserUpdate(params *UserUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdateOK, error)

	UserUpdateGitCredential(params *UserUpdateGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdateGitCredentialNoContent, error)

	UserUpdateOpenAIConfig(params *UserUpdateOpenAIConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdateOpenAIConfigNoContent, error)

	UserUpdatePassword(params *UserUpdatePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdatePasswordNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CurrentUserEndpointAuthorizationsInspect inspects environment authorizations for the current user

	Retrieve environment authorizations for the current  user.

**Access policy**: authenticated
*/
func (a *Client) CurrentUserEndpointAuthorizationsInspect(params *CurrentUserEndpointAuthorizationsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CurrentUserEndpointAuthorizationsInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrentUserEndpointAuthorizationsInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrentUserEndpointAuthorizationsInspect",
		Method:             "GET",
		PathPattern:        "/users/me/auth/{endpointID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CurrentUserEndpointAuthorizationsInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrentUserEndpointAuthorizationsInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CurrentUserEndpointAuthorizationsInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CurrentUserInspect inspects the current user

	Retrieve details about the current user.

User passwords are filtered out, and should never be accessible.
**Access policy**: authenticated
*/
func (a *Client) CurrentUserInspect(params *CurrentUserInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CurrentUserInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrentUserInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrentUserInspect",
		Method:             "GET",
		PathPattern:        "/users/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CurrentUserInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrentUserInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CurrentUserInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserAdminCheck checks administrator account existence

	Check if an administrator account exists in the database.

**Access policy**: public
*/
func (a *Client) UserAdminCheck(params *UserAdminCheckParams, opts ...ClientOption) (*UserAdminCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAdminCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAdminCheck",
		Method:             "GET",
		PathPattern:        "/users/admin/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserAdminCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAdminCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAdminCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserAdminInit initializes administrator account

	Initialize the 'admin' user account.

**Access policy**: public
*/
func (a *Client) UserAdminInit(params *UserAdminInitParams, opts ...ClientOption) (*UserAdminInitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAdminInitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAdminInit",
		Method:             "POST",
		PathPattern:        "/users/admin/init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserAdminInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAdminInitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAdminInit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserCreate creates a new user

	Create a new Portainer user.

Only administrators can create users.
**Access policy**: restricted
*/
func (a *Client) UserCreate(params *UserCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserCreate",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserCreateGitCredential stores a git credential for a user

	Store a Git Credential for a user.

Only the calling user can store a git credential for themselves.
**Access policy**: restricted
*/
func (a *Client) UserCreateGitCredential(params *UserCreateGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserCreateGitCredentialCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateGitCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserCreateGitCredential",
		Method:             "POST",
		PathPattern:        "/users/{id}/gitcredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserCreateGitCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateGitCredentialCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserCreateGitCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserDelete removes a user

	Remove a user.

**Access policy**: administrator
*/
func (a *Client) UserDelete(params *UserDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserDelete",
		Method:             "DELETE",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserGenerateAPIKey generates an API key for a user

	Generates an API key for a user.

Only the calling user can generate a token for themselves.
Password is required only for internal authentication.
**Access policy**: restricted
*/
func (a *Client) UserGenerateAPIKey(params *UserGenerateAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGenerateAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGenerateAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserGenerateAPIKey",
		Method:             "POST",
		PathPattern:        "/users/{id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserGenerateAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGenerateAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGenerateAPIKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserGetAPIKeys gets all API keys for a user

	Gets all API keys for a user.

Only the calling user or admin can retrieve api-keys.
**Access policy**: authenticated
*/
func (a *Client) UserGetAPIKeys(params *UserGetAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGetAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetAPIKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserGetAPIKeys",
		Method:             "GET",
		PathPattern:        "/users/{id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserGetAPIKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGetAPIKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGetAPIKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserGetGitCredential gets the specific saved git credential for a user

	Gets the specific saved git credential for a user.

Only the calling user can retrieve git credential
**Access policy**: authenticated
*/
func (a *Client) UserGetGitCredential(params *UserGetGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGetGitCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetGitCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserGetGitCredential",
		Method:             "GET",
		PathPattern:        "/users/{id}/gitcredentials/{credentialID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserGetGitCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGetGitCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGetGitCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserGetGitCredentials gets all saved git credentials for a user

	Gets all saved git credentials for a user.

Only the calling user can retrieve git credentials
**Access policy**: authenticated
*/
func (a *Client) UserGetGitCredentials(params *UserGetGitCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserGetGitCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetGitCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserGetGitCredentials",
		Method:             "GET",
		PathPattern:        "/users/{id}/gitcredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserGetGitCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGetGitCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGetGitCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserInspect inspects a user

	Retrieve details about a user.

User passwords are filtered out, and should never be accessible.
**Access policy**: authenticated
*/
func (a *Client) UserInspect(params *UserInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserInspect",
		Method:             "GET",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserList lists users

	List Portainer users.

Non-administrator users will only be able to list other non-administrator user accounts.
User passwords are filtered out, and should never be accessible.
**Access policy**: restricted
*/
func (a *Client) UserList(params *UserListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserList",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserMembershipsInspect inspects a user memberships

	Inspect a user memberships.

**Access policy**: restricted
*/
func (a *Client) UserMembershipsInspect(params *UserMembershipsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserMembershipsInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserMembershipsInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserMembershipsInspect",
		Method:             "GET",
		PathPattern:        "/users/{id}/memberships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserMembershipsInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserMembershipsInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserMembershipsInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserNamespaces retrieves all k8s namespaces for an user

	Retrieves user's role authorizations of all namespaces in all k8s environments(endpoints)

**Access policy**: restricted
*/
func (a *Client) UserNamespaces(params *UserNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserNamespacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserNamespaces",
		Method:             "GET",
		PathPattern:        "/users/{id}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserNamespacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserRemoveAPIKey removes an api key associated to a user

	Remove an api-key associated to a user..

Only the calling user or admin can remove api-key.
**Access policy**: authenticated
*/
func (a *Client) UserRemoveAPIKey(params *UserRemoveAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserRemoveAPIKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRemoveAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserRemoveAPIKey",
		Method:             "DELETE",
		PathPattern:        "/users/{id}/tokens/{keyID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserRemoveAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserRemoveAPIKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserRemoveAPIKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserRemoveGitCredential removes a git credential associated to a user

	Remove a git-credential associated to a user..

Only the calling user can remove git-credential
**Access policy**: authenticated
*/
func (a *Client) UserRemoveGitCredential(params *UserRemoveGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserRemoveGitCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRemoveGitCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserRemoveGitCredential",
		Method:             "DELETE",
		PathPattern:        "/users/{id}/gitcredentials/{credentialID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserRemoveGitCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserRemoveGitCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserRemoveGitCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserUpdate updates a user

	Update user details. A regular user account can only update his details.

A regular user account cannot change their username or role.
**Access policy**: authenticated
*/
func (a *Client) UserUpdate(params *UserUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserUpdate",
		Method:             "PUT",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserUpdateGitCredential updates a git credential associated to a user

	Update a git-credential associated to a user..

Only the calling user can update git-credential
**Access policy**: authenticated
*/
func (a *Client) UserUpdateGitCredential(params *UserUpdateGitCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdateGitCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateGitCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserUpdateGitCredential",
		Method:             "PUT",
		PathPattern:        "/users/{id}/gitcredentials/{credentialID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserUpdateGitCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateGitCredentialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserUpdateGitCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserUpdateOpenAIConfig updates the open a i API configuration associated to a user

	Update the OpenAI API key and OpenAI model associated to a user. Requires the OpenAI experimental feature setting to be enabled.

This configuration will be used when interacting with the OpenAI chat.
Only an administrator user or the user itself can update the OpenAI API key.
**Access policy**: restricted
*/
func (a *Client) UserUpdateOpenAIConfig(params *UserUpdateOpenAIConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdateOpenAIConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateOpenAIConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserUpdateOpenAIConfig",
		Method:             "PUT",
		PathPattern:        "/users/{id}/openai",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserUpdateOpenAIConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateOpenAIConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserUpdateOpenAIConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UserUpdatePassword updates password for a user

	Update password for the specified user.

**Access policy**: authenticated
*/
func (a *Client) UserUpdatePassword(params *UserUpdatePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UserUpdatePasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdatePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserUpdatePassword",
		Method:             "PUT",
		PathPattern:        "/users/{id}/passwd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserUpdatePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdatePasswordNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserUpdatePassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
