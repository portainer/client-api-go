// Code generated by go-swagger; DO NOT EDIT.

package kubernetes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new kubernetes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new kubernetes API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new kubernetes API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for kubernetes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationYaml sets the Accept header to " application/yaml".
func WithAcceptApplicationYaml(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{" application/yaml"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateKubernetesIngress(params *CreateKubernetesIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesIngressNoContent, error)

	CreateKubernetesNamespace(params *CreateKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesNamespaceOK, error)

	CreateKubernetesService(params *CreateKubernetesServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesServiceNoContent, error)

	DeleteClusterRoleBindings(params *DeleteClusterRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterRoleBindingsNoContent, error)

	DeleteClusterRoles(params *DeleteClusterRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterRolesNoContent, error)

	DeleteCronJobs(params *DeleteCronJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCronJobsNoContent, error)

	DeleteJobs(params *DeleteJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJobsNoContent, error)

	DeleteKubernetesIngresses(params *DeleteKubernetesIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKubernetesIngressesNoContent, error)

	DeleteKubernetesNamespace(params *DeleteKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKubernetesNamespaceOK, error)

	DeleteKubernetesServices(params *DeleteKubernetesServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKubernetesServicesNoContent, error)

	DeleteRoleBindings(params *DeleteRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRoleBindingsNoContent, error)

	DeleteRoles(params *DeleteRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRolesNoContent, error)

	DeleteServiceAccounts(params *DeleteServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceAccountsNoContent, error)

	GetAllKubernetesApplications(params *GetAllKubernetesApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesApplicationsOK, error)

	GetAllKubernetesClusterIngresses(params *GetAllKubernetesClusterIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterIngressesOK, error)

	GetAllKubernetesClusterIngressesCount(params *GetAllKubernetesClusterIngressesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterIngressesCountOK, error)

	GetAllKubernetesClusterRoleBindings(params *GetAllKubernetesClusterRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterRoleBindingsOK, error)

	GetAllKubernetesClusterRoles(params *GetAllKubernetesClusterRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterRolesOK, error)

	GetAllKubernetesConfigMaps(params *GetAllKubernetesConfigMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesConfigMapsOK, error)

	GetAllKubernetesConfigMapsCount(params *GetAllKubernetesConfigMapsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesConfigMapsCountOK, error)

	GetAllKubernetesIngressControllers(params *GetAllKubernetesIngressControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesIngressControllersOK, error)

	GetAllKubernetesIngresses(params *GetAllKubernetesIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesIngressesOK, error)

	GetAllKubernetesServicesCount(params *GetAllKubernetesServicesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesServicesCountOK, error)

	GetAllKubernetesVolumes(params *GetAllKubernetesVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesVolumesOK, error)

	GetApplicationsResources(params *GetApplicationsResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationsResourcesOK, error)

	GetKubernetesConfig(params *GetKubernetesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesConfigOK, error)

	GetKubernetesConfigMap(params *GetKubernetesConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesConfigMapOK, error)

	GetKubernetesCronJobs(params *GetKubernetesCronJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesCronJobsOK, error)

	GetKubernetesDashboard(params *GetKubernetesDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesDashboardOK, error)

	GetKubernetesIngress(params *GetKubernetesIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesIngressOK, error)

	GetKubernetesIngressControllersByNamespace(params *GetKubernetesIngressControllersByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesIngressControllersByNamespaceOK, error)

	GetKubernetesJobs(params *GetKubernetesJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesJobsOK, error)

	GetKubernetesMaxResourceLimits(params *GetKubernetesMaxResourceLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMaxResourceLimitsOK, error)

	GetKubernetesMetricsForAllNodes(params *GetKubernetesMetricsForAllNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForAllNodesOK, error)

	GetKubernetesMetricsForAllPods(params *GetKubernetesMetricsForAllPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForAllPodsOK, error)

	GetKubernetesMetricsForNode(params *GetKubernetesMetricsForNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForNodeOK, error)

	GetKubernetesMetricsForPod(params *GetKubernetesMetricsForPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForPodOK, error)

	GetKubernetesNamespace(params *GetKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNamespaceOK, error)

	GetKubernetesNamespaces(params *GetKubernetesNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNamespacesOK, error)

	GetKubernetesNamespacesCount(params *GetKubernetesNamespacesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNamespacesCountOK, error)

	GetKubernetesNodesLimits(params *GetKubernetesNodesLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNodesLimitsOK, error)

	GetKubernetesRBACStatus(params *GetKubernetesRBACStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesRBACStatusOK, error)

	GetKubernetesRoleBindings(params *GetKubernetesRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesRoleBindingsOK, error)

	GetKubernetesRoles(params *GetKubernetesRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesRolesOK, error)

	GetKubernetesSecret(params *GetKubernetesSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesSecretOK, error)

	GetKubernetesSecrets(params *GetKubernetesSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesSecretsOK, error)

	GetKubernetesSecretsCount(params *GetKubernetesSecretsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesSecretsCountOK, error)

	GetKubernetesServiceAccounts(params *GetKubernetesServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesServiceAccountsOK, error)

	GetKubernetesServices(params *GetKubernetesServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesServicesOK, error)

	GetKubernetesServicesByNamespace(params *GetKubernetesServicesByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesServicesByNamespaceOK, error)

	GetKubernetesVolume(params *GetKubernetesVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesVolumeOK, error)

	GetKubernetesVolumesInNamespace(params *GetKubernetesVolumesInNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesVolumesInNamespaceOK, error)

	KubernetesNamespacesToggleSystem(params *KubernetesNamespacesToggleSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesNamespacesToggleSystemNoContent, error)

	UpdateKubernetesIngress(params *UpdateKubernetesIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesIngressNoContent, error)

	UpdateKubernetesIngressControllers(params *UpdateKubernetesIngressControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesIngressControllersNoContent, error)

	UpdateKubernetesIngressControllersByNamespace(params *UpdateKubernetesIngressControllersByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesIngressControllersByNamespaceNoContent, error)

	UpdateKubernetesNamespace(params *UpdateKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesNamespaceOK, error)

	UpdateKubernetesNamespaceDeprecated(params *UpdateKubernetesNamespaceDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesNamespaceDeprecatedOK, error)

	UpdateKubernetesService(params *UpdateKubernetesServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesServiceNoContent, error)

	GetAllKubernetesApplicationsCount(params *GetAllKubernetesApplicationsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesApplicationsCountOK, error)

	GetAllKubernetesVolumesCount(params *GetAllKubernetesVolumesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesVolumesCountOK, error)

	GetKubernetesPodSecurityRule(params *GetKubernetesPodSecurityRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesPodSecurityRuleOK, error)

	RestartKubernetesApplication(params *RestartKubernetesApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartKubernetesApplicationNoContent, error)

	UpdateK8sPodSecurityRule(params *UpdateK8sPodSecurityRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateK8sPodSecurityRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateKubernetesIngress creates an ingress

	Create an Ingress for the provided environment.

**Access policy**: Authenticated user.
*/
func (a *Client) CreateKubernetesIngress(params *CreateKubernetesIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesIngressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKubernetesIngressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateKubernetesIngress",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKubernetesIngressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKubernetesIngressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateKubernetesIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateKubernetesNamespace creates a namespace

	Create a namespace within the given environment.

**Access policy**: Authenticated user.
*/
func (a *Client) CreateKubernetesNamespace(params *CreateKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKubernetesNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateKubernetesNamespace",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKubernetesNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKubernetesNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateKubernetesNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateKubernetesService creates a service

	Create a service within a given namespace

**Access policy**: Authenticated user.
*/
func (a *Client) CreateKubernetesService(params *CreateKubernetesServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesServiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKubernetesServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateKubernetesService",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKubernetesServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKubernetesServiceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateKubernetesService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteClusterRoleBindings deletes cluster role bindings

	Delete the provided list of cluster role bindings.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteClusterRoleBindings(params *DeleteClusterRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterRoleBindingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClusterRoleBindings",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/cluster_role_bindings/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterRoleBindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterRoleBindingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteClusterRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteClusterRoles deletes cluster roles

	Delete the provided list of cluster roles.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteClusterRoles(params *DeleteClusterRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterRolesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClusterRoles",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/cluster_roles/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterRolesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteClusterRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteCronJobs deletes cron jobs

	Delete the provided list of Cron Jobs.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteCronJobs(params *DeleteCronJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCronJobsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCronJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCronJobs",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/cron_jobs/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCronJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCronJobsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCronJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteJobs deletes jobs

	Delete the provided list of Jobs.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteJobs(params *DeleteJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJobsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteJobs",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/jobs/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteKubernetesIngresses deletes one or more ingresses

	Delete one or more Ingresses in the provided environment.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteKubernetesIngresses(params *DeleteKubernetesIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKubernetesIngressesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKubernetesIngressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteKubernetesIngresses",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/ingresses/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKubernetesIngressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKubernetesIngressesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteKubernetesIngresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteKubernetesNamespace deletes a kubernetes namespace

	Delete a kubernetes namespace within the given environment.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteKubernetesNamespace(params *DeleteKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKubernetesNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKubernetesNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteKubernetesNamespace",
		Method:             "DELETE",
		PathPattern:        "/kubernetes/{id}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKubernetesNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKubernetesNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteKubernetesNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteKubernetesServices deletes services

	Delete the provided list of services.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteKubernetesServices(params *DeleteKubernetesServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKubernetesServicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKubernetesServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteKubernetesServices",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/services/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKubernetesServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKubernetesServicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteKubernetesServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteRoleBindings deletes role bindings

	Delete the provided list of role bindings.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteRoleBindings(params *DeleteRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRoleBindingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRoleBindings",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/role_bindings/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRoleBindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleBindingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteRoles deletes roles

	Delete the provided list of roles.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteRoles(params *DeleteRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRolesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRoles",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/roles/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRolesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteServiceAccounts deletes service accounts

	Delete the provided list of service accounts.

**Access policy**: Authenticated user.
*/
func (a *Client) DeleteServiceAccounts(params *DeleteServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceAccountsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteServiceAccounts",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/service_accounts/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServiceAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceAccountsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteServiceAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesApplications gets a list of applications across all namespaces in the cluster if the node name is provided it will return the applications running on that node

	Get a list of applications across all namespaces in the cluster. If the nodeName is provided, it will return the applications running on that node.

**Access policy**: authenticated
*/
func (a *Client) GetAllKubernetesApplications(params *GetAllKubernetesApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesApplications",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesClusterIngresses gets kubernetes ingresses at the cluster level

	Get kubernetes ingresses at the cluster level for the provided environment.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesClusterIngresses(params *GetAllKubernetesClusterIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterIngressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesClusterIngressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesClusterIngresses",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/ingresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesClusterIngressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesClusterIngressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesClusterIngresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesClusterIngressesCount gets ingresses count

	Get the number of kubernetes ingresses within the given environment.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesClusterIngressesCount(params *GetAllKubernetesClusterIngressesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterIngressesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesClusterIngressesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesClusterIngressesCount",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/ingresses/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesClusterIngressesCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesClusterIngressesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesClusterIngressesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesClusterRoleBindings gets a list of kubernetes cluster role bindings

	Get a list of kubernetes cluster role bindings within the given environment at the cluster level.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesClusterRoleBindings(params *GetAllKubernetesClusterRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterRoleBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesClusterRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesClusterRoleBindings",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesClusterRoleBindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesClusterRoleBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesClusterRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesClusterRoles gets a list of kubernetes cluster roles

	Get a list of kubernetes cluster roles within the given environment at the cluster level.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesClusterRoles(params *GetAllKubernetesClusterRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesClusterRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesClusterRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesClusterRoles",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/clusterroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesClusterRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesClusterRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesClusterRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesConfigMaps gets a list of config maps

	Get a list of ConfigMaps across all namespaces in the cluster. For non-admin users, it will only return ConfigMaps based on the namespaces that they have access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesConfigMaps(params *GetAllKubernetesConfigMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesConfigMapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesConfigMapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesConfigMaps",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/configmaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesConfigMapsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesConfigMapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesConfigMaps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesConfigMapsCount gets config maps count

	Get the count of ConfigMaps across all namespaces in the cluster. For non-admin users, it will only return the count of ConfigMaps based on the namespaces that they have access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesConfigMapsCount(params *GetAllKubernetesConfigMapsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesConfigMapsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesConfigMapsCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesConfigMapsCount",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/configmaps/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesConfigMapsCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesConfigMapsCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesConfigMapsCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesIngressControllers gets a list of ingress controllers

	Get a list of ingress controllers for the given environment. If the allowedOnly query parameter is set, only ingress controllers that are allowed by the environment's ingress configuration will be returned.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesIngressControllers(params *GetAllKubernetesIngressControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesIngressControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesIngressControllersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesIngressControllers",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/ingresscontrollers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesIngressControllersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesIngressControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesIngressControllers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesIngresses gets a list of ingresses

	Get a list of Ingresses. If namespace is provided, it will return the list of Ingresses in that namespace.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesIngresses(params *GetAllKubernetesIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesIngressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesIngressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesIngresses",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesIngressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesIngressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesIngresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesServicesCount gets services count

	Get the count of services that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesServicesCount(params *GetAllKubernetesServicesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesServicesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesServicesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesServicesCount",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/services/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesServicesCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesServicesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesServicesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesVolumes gets kubernetes volumes within the given portainer environment

	Get a list of all kubernetes volumes within the given environment (Endpoint). The Endpoint ID must be a valid Portainer environment identifier.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesVolumes(params *GetAllKubernetesVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesVolumesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKubernetesVolumes",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKubernetesVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetApplicationsResources gets the total CPU cores and memory requests m b and limits of all applications across all namespaces

	Get the total CPU (cores) and memory (bytes) requests and limits of all applications across all namespaces.

**Access policy**: authenticated
*/
func (a *Client) GetApplicationsResources(params *GetApplicationsResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationsResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplicationsResources",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/metrics/applications_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetApplicationsResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetApplicationsResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesConfig generates a kubeconfig file

	Generate a kubeconfig file that allows a client to communicate with the Kubernetes API server

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesConfig(params *GetKubernetesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesConfig",
		Method:             "GET",
		PathPattern:        "/kubernetes/config",
		ProducesMediaTypes: []string{"application/json", " application/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesConfigMap gets a config map

	Get a ConfigMap by name for a given namespace.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesConfigMap(params *GetKubernetesConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesConfigMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesConfigMap",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/configmaps/{configmap}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesCronJobs gets a list of kubernetes cron jobs

	Get a list of kubernetes Cron Jobs that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesCronJobs(params *GetKubernetesCronJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesCronJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesCronJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesCronJobs",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/cron_jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesCronJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesCronJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesCronJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesDashboard gets the dashboard summary data

	Get the dashboard summary data which is simply a count of a range of different commonly used kubernetes resources.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesDashboard(params *GetKubernetesDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesDashboard",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/dashboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesIngress gets an ingress by name

	Get an Ingress by name for the provided environment.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesIngress(params *GetKubernetesIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesIngressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesIngress",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/ingresses/{ingress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesIngressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesIngressControllersByNamespace gets a list ingress controllers by namespace

	Get a list of ingress controllers for the given environment in the provided namespace.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesIngressControllersByNamespace(params *GetKubernetesIngressControllersByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesIngressControllersByNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesIngressControllersByNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesIngressControllersByNamespace",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesIngressControllersByNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesIngressControllersByNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesIngressControllersByNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesJobs gets a list of kubernetes jobs

	Get a list of kubernetes Jobs that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesJobs(params *GetKubernetesJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesJobs",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesMaxResourceLimits gets max CPU and memory limits of all nodes within k8s cluster

	Get max CPU and memory limits (unused resources) of all nodes within k8s cluster.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesMaxResourceLimits(params *GetKubernetesMaxResourceLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMaxResourceLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesMaxResourceLimitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesMaxResourceLimits",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/max_resource_limits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesMaxResourceLimitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesMaxResourceLimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesMaxResourceLimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesMetricsForAllNodes gets a list of nodes with their live metrics

	Get a list of metrics associated with all nodes of a cluster.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesMetricsForAllNodes(params *GetKubernetesMetricsForAllNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForAllNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesMetricsForAllNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesMetricsForAllNodes",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/metrics/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesMetricsForAllNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesMetricsForAllNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesMetricsForAllNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesMetricsForAllPods gets a list of pods with their live metrics

	Get a list of pods with their live metrics for the specified namespace.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesMetricsForAllPods(params *GetKubernetesMetricsForAllPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForAllPodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesMetricsForAllPodsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesMetricsForAllPods",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/metrics/pods/{namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesMetricsForAllPodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesMetricsForAllPodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesMetricsForAllPods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesMetricsForNode gets live metrics for a node

	Get live metrics for the specified node.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesMetricsForNode(params *GetKubernetesMetricsForNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesMetricsForNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesMetricsForNode",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/metrics/nodes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesMetricsForNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesMetricsForNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesMetricsForNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesMetricsForPod gets live metrics for a pod

	Get live metrics for the specified pod.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesMetricsForPod(params *GetKubernetesMetricsForPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesMetricsForPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesMetricsForPodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesMetricsForPod",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/metrics/pods/{namespace}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesMetricsForPodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesMetricsForPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesMetricsForPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesNamespace gets namespace details

	Get namespace details for the provided namespace within the given environment.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesNamespace(params *GetKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesNamespace",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesNamespaces gets a list of namespaces

	Get a list of all namespaces within the given environment based on the user role and permissions. If the user is an admin, they can access all namespaces. If the user is not an admin, they can only access namespaces that they have access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesNamespaces(params *GetKubernetesNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesNamespacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesNamespaces",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesNamespacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesNamespacesCount gets the total number of kubernetes namespaces within the given portainer environment

	Get the total number of kubernetes namespaces within the given environment, including the system namespaces. The total count depends on the user's role and permissions.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesNamespacesCount(params *GetKubernetesNamespacesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNamespacesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesNamespacesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesNamespacesCount",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesNamespacesCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesNamespacesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesNamespacesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesNodesLimits gets CPU and memory limits of all nodes within k8s cluster

	Get CPU and memory limits of all nodes within k8s cluster.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesNodesLimits(params *GetKubernetesNodesLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesNodesLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesNodesLimitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesNodesLimits",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/nodes_limits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesNodesLimitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesNodesLimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesNodesLimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesRBACStatus checks if r b a c is enabled

	Check if RBAC is enabled in the specified Kubernetes cluster.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesRBACStatus(params *GetKubernetesRBACStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesRBACStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesRBACStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesRBACStatus",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/rbac_enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesRBACStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesRBACStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesRBACStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesRoleBindings gets a list of kubernetes role bindings

	Get a list of kubernetes role bindings that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesRoleBindings(params *GetKubernetesRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesRoleBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesRoleBindings",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/rolebindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesRoleBindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesRoleBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesRoles gets a list of kubernetes roles

	Get a list of kubernetes roles that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesRoles(params *GetKubernetesRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesRoles",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesSecret gets a secret

	Get a Secret by name for a given namespace.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesSecret(params *GetKubernetesSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesSecret",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/secrets/{secret}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesSecrets gets a list of secrets

	Get a list of Secrets for a given namespace. If isUsed is set to true, information about the applications that use the secrets is also returned.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesSecrets(params *GetKubernetesSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesSecrets",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesSecretsCount gets secrets count

	Get the count of Secrets across all namespaces that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesSecretsCount(params *GetKubernetesSecretsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesSecretsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesSecretsCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesSecretsCount",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/secrets/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesSecretsCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesSecretsCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesSecretsCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesServiceAccounts gets a list of kubernetes service accounts

	Get a list of kubernetes service accounts that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesServiceAccounts(params *GetKubernetesServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesServiceAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesServiceAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesServiceAccounts",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/serviceaccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesServiceAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesServiceAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesServiceAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesServices gets a list of services

	Get a list of services that the user has access to.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesServices(params *GetKubernetesServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesServices",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesServicesByNamespace gets a list of services for a given namespace

	Get a list of services for a given namespace.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesServicesByNamespace(params *GetKubernetesServicesByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesServicesByNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesServicesByNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesServicesByNamespace",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesServicesByNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesServicesByNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesServicesByNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesVolume gets a kubernetes volume within the given portainer environment

	Get a Kubernetes volume within the given environment (Endpoint). The Endpoint ID must be a valid Portainer environment identifier.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesVolume(params *GetKubernetesVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesVolume",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/volumes/{namespace}/{volume}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesVolumesInNamespace gets kubernetes volumes within a namespace in the given portainer environment

	Get a list of kubernetes volumes within the specified namespace in the given environment (Endpoint). The Endpoint ID must be a valid Portainer environment identifier.

**Access policy**: Authenticated user.
*/
func (a *Client) GetKubernetesVolumesInNamespace(params *GetKubernetesVolumesInNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesVolumesInNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesVolumesInNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesVolumesInNamespace",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesVolumesInNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesVolumesInNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesVolumesInNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	KubernetesNamespacesToggleSystem toggles the system state for a namespace

	Toggle the system state for a namespace

**Access policy**: Administrator or environment administrator.
*/
func (a *Client) KubernetesNamespacesToggleSystem(params *KubernetesNamespacesToggleSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesNamespacesToggleSystemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesNamespacesToggleSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KubernetesNamespacesToggleSystem",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KubernetesNamespacesToggleSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesNamespacesToggleSystemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for KubernetesNamespacesToggleSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateKubernetesIngress updates an ingress

	Update an Ingress for the provided environment.

**Access policy**: Authenticated user.
*/
func (a *Client) UpdateKubernetesIngress(params *UpdateKubernetesIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesIngressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesIngressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKubernetesIngress",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateKubernetesIngressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubernetesIngressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKubernetesIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateKubernetesIngressControllers updates block unblock ingress controllers

	Update (block/unblock) ingress controllers for the provided environment.

**Access policy**: Authenticated user.
*/
func (a *Client) UpdateKubernetesIngressControllers(params *UpdateKubernetesIngressControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesIngressControllersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesIngressControllersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKubernetesIngressControllers",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{id}/ingresscontrollers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateKubernetesIngressControllersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubernetesIngressControllersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKubernetesIngressControllers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateKubernetesIngressControllersByNamespace updates block unblock ingress controllers by namespace

	Update (block/unblock) ingress controllers by namespace for the provided environment.

**Access policy**: Authenticated user.
*/
func (a *Client) UpdateKubernetesIngressControllersByNamespace(params *UpdateKubernetesIngressControllersByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesIngressControllersByNamespaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesIngressControllersByNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKubernetesIngressControllersByNamespace",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateKubernetesIngressControllersByNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubernetesIngressControllersByNamespaceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKubernetesIngressControllersByNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateKubernetesNamespace updates a namespace

	Update a namespace within the given environment.

**Access policy**: Authenticated user.
*/
func (a *Client) UpdateKubernetesNamespace(params *UpdateKubernetesNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKubernetesNamespace",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateKubernetesNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubernetesNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKubernetesNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateKubernetesNamespaceDeprecated updates a namespace

	Update a namespace within the given environment.

**Access policy**: Authenticated user.
*/
func (a *Client) UpdateKubernetesNamespaceDeprecated(params *UpdateKubernetesNamespaceDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesNamespaceDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesNamespaceDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKubernetesNamespaceDeprecated",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{id}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateKubernetesNamespaceDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubernetesNamespaceDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKubernetesNamespaceDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateKubernetesService updates a service

	Update a service within a given namespace.

**Access policy**: Authenticated user.
*/
func (a *Client) UpdateKubernetesService(params *UpdateKubernetesServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesServiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKubernetesService",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateKubernetesServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubernetesServiceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKubernetesService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesApplicationsCount gets applications count

	Get the count of Applications across all namespaces in the cluster. If the nodeName is provided, it will return the count of applications running on that node.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesApplicationsCount(params *GetAllKubernetesApplicationsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesApplicationsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesApplicationsCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllKubernetesApplicationsCount",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/applications/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesApplicationsCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesApplicationsCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllKubernetesApplicationsCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllKubernetesVolumesCount gets the total number of kubernetes volumes within the given portainer environment

	Get the total number of kubernetes volumes within the given environment (Endpoint). The total count depends on the user's role and permissions. The Endpoint ID must be a valid Portainer environment identifier.

**Access policy**: Authenticated user.
*/
func (a *Client) GetAllKubernetesVolumesCount(params *GetAllKubernetesVolumesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKubernetesVolumesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKubernetesVolumesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllKubernetesVolumesCount",
		Method:             "GET",
		PathPattern:        "/kubernetes/{id}/volumes/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKubernetesVolumesCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKubernetesVolumesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllKubernetesVolumesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetKubernetesPodSecurityRule gets pod security rule within k8s cluster if not found the frontend will create a default

	Get Pod Security Rule within k8s cluster

**Access policy**: authenticated
*/
func (a *Client) GetKubernetesPodSecurityRule(params *GetKubernetesPodSecurityRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubernetesPodSecurityRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesPodSecurityRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubernetesPodSecurityRule",
		Method:             "GET",
		PathPattern:        "/kubernetes/{environmentId}/opa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesPodSecurityRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesPodSecurityRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubernetesPodSecurityRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RestartKubernetesApplication restarts a kubernetes application

	Restart a Kubernetes deployment, statefulset and daemonset application, using a kubectl rollout-restart

**Access policy**: authenticated
*/
func (a *Client) RestartKubernetesApplication(params *RestartKubernetesApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartKubernetesApplicationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartKubernetesApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restartKubernetesApplication",
		Method:             "POST",
		PathPattern:        "/kubernetes/{id}/namespaces/{namespace}/applications/{kind}/{name}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestartKubernetesApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartKubernetesApplicationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restartKubernetesApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateK8sPodSecurityRule updates pod security rule within k8s cluster

	Update Pod Security Rule within k8s cluster

**Access policy**: authenticated
*/
func (a *Client) UpdateK8sPodSecurityRule(params *UpdateK8sPodSecurityRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateK8sPodSecurityRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateK8sPodSecurityRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateK8sPodSecurityRule",
		Method:             "PUT",
		PathPattern:        "/kubernetes/{environmentId}/opa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateK8sPodSecurityRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateK8sPodSecurityRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateK8sPodSecurityRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
