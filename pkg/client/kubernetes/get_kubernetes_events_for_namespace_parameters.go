// Code generated by go-swagger; DO NOT EDIT.

package kubernetes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetKubernetesEventsForNamespaceParams creates a new GetKubernetesEventsForNamespaceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetKubernetesEventsForNamespaceParams() *GetKubernetesEventsForNamespaceParams {
	return &GetKubernetesEventsForNamespaceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetKubernetesEventsForNamespaceParamsWithTimeout creates a new GetKubernetesEventsForNamespaceParams object
// with the ability to set a timeout on a request.
func NewGetKubernetesEventsForNamespaceParamsWithTimeout(timeout time.Duration) *GetKubernetesEventsForNamespaceParams {
	return &GetKubernetesEventsForNamespaceParams{
		timeout: timeout,
	}
}

// NewGetKubernetesEventsForNamespaceParamsWithContext creates a new GetKubernetesEventsForNamespaceParams object
// with the ability to set a context for a request.
func NewGetKubernetesEventsForNamespaceParamsWithContext(ctx context.Context) *GetKubernetesEventsForNamespaceParams {
	return &GetKubernetesEventsForNamespaceParams{
		Context: ctx,
	}
}

// NewGetKubernetesEventsForNamespaceParamsWithHTTPClient creates a new GetKubernetesEventsForNamespaceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetKubernetesEventsForNamespaceParamsWithHTTPClient(client *http.Client) *GetKubernetesEventsForNamespaceParams {
	return &GetKubernetesEventsForNamespaceParams{
		HTTPClient: client,
	}
}

/*
GetKubernetesEventsForNamespaceParams contains all the parameters to send to the API endpoint

	for the get kubernetes events for namespace operation.

	Typically these are written to a http.Request.
*/
type GetKubernetesEventsForNamespaceParams struct {

	/* ID.

	   Environment identifier
	*/
	ID int64

	/* Namespace.

	   The namespace name the events are associated to
	*/
	Namespace string

	/* ResourceID.

	   The resource id of the involved kubernetes object
	*/
	ResourceID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get kubernetes events for namespace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKubernetesEventsForNamespaceParams) WithDefaults() *GetKubernetesEventsForNamespaceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get kubernetes events for namespace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKubernetesEventsForNamespaceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) WithTimeout(timeout time.Duration) *GetKubernetesEventsForNamespaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) WithContext(ctx context.Context) *GetKubernetesEventsForNamespaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) WithHTTPClient(client *http.Client) *GetKubernetesEventsForNamespaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) WithID(id int64) *GetKubernetesEventsForNamespaceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) SetID(id int64) {
	o.ID = id
}

// WithNamespace adds the namespace to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) WithNamespace(namespace string) *GetKubernetesEventsForNamespaceParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithResourceID adds the resourceID to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) WithResourceID(resourceID *string) *GetKubernetesEventsForNamespaceParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the get kubernetes events for namespace params
func (o *GetKubernetesEventsForNamespaceParams) SetResourceID(resourceID *string) {
	o.ResourceID = resourceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetKubernetesEventsForNamespaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.ResourceID != nil {

		// query param resourceId
		var qrResourceID string

		if o.ResourceID != nil {
			qrResourceID = *o.ResourceID
		}
		qResourceID := qrResourceID
		if qResourceID != "" {

			if err := r.SetQueryParam("resourceId", qResourceID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
