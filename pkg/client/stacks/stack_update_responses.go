// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api-go/v2/pkg/models"
)

// StackUpdateReader is a Reader for the StackUpdate structure.
type StackUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStackUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /stacks/{id}] StackUpdate", response, response.Code())
	}
}

// NewStackUpdateOK creates a StackUpdateOK with default headers values
func NewStackUpdateOK() *StackUpdateOK {
	return &StackUpdateOK{}
}

/*
StackUpdateOK describes a response with status code 200, with default header values.

Success
*/
type StackUpdateOK struct {
	Payload *models.PortainereeStack
}

// IsSuccess returns true when this stack update o k response has a 2xx status code
func (o *StackUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stack update o k response has a 3xx status code
func (o *StackUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack update o k response has a 4xx status code
func (o *StackUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack update o k response has a 5xx status code
func (o *StackUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stack update o k response a status code equal to that given
func (o *StackUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stack update o k response
func (o *StackUpdateOK) Code() int {
	return 200
}

func (o *StackUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateOK %s", 200, payload)
}

func (o *StackUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateOK %s", 200, payload)
}

func (o *StackUpdateOK) GetPayload() *models.PortainereeStack {
	return o.Payload
}

func (o *StackUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortainereeStack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackUpdateBadRequest creates a StackUpdateBadRequest with default headers values
func NewStackUpdateBadRequest() *StackUpdateBadRequest {
	return &StackUpdateBadRequest{}
}

/*
StackUpdateBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type StackUpdateBadRequest struct {
}

// IsSuccess returns true when this stack update bad request response has a 2xx status code
func (o *StackUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack update bad request response has a 3xx status code
func (o *StackUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack update bad request response has a 4xx status code
func (o *StackUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack update bad request response has a 5xx status code
func (o *StackUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stack update bad request response a status code equal to that given
func (o *StackUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stack update bad request response
func (o *StackUpdateBadRequest) Code() int {
	return 400
}

func (o *StackUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateBadRequest", 400)
}

func (o *StackUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateBadRequest", 400)
}

func (o *StackUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackUpdateForbidden creates a StackUpdateForbidden with default headers values
func NewStackUpdateForbidden() *StackUpdateForbidden {
	return &StackUpdateForbidden{}
}

/*
StackUpdateForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type StackUpdateForbidden struct {
}

// IsSuccess returns true when this stack update forbidden response has a 2xx status code
func (o *StackUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack update forbidden response has a 3xx status code
func (o *StackUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack update forbidden response has a 4xx status code
func (o *StackUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack update forbidden response has a 5xx status code
func (o *StackUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stack update forbidden response a status code equal to that given
func (o *StackUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stack update forbidden response
func (o *StackUpdateForbidden) Code() int {
	return 403
}

func (o *StackUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateForbidden", 403)
}

func (o *StackUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateForbidden", 403)
}

func (o *StackUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackUpdateNotFound creates a StackUpdateNotFound with default headers values
func NewStackUpdateNotFound() *StackUpdateNotFound {
	return &StackUpdateNotFound{}
}

/*
StackUpdateNotFound describes a response with status code 404, with default header values.

Not found
*/
type StackUpdateNotFound struct {
}

// IsSuccess returns true when this stack update not found response has a 2xx status code
func (o *StackUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack update not found response has a 3xx status code
func (o *StackUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack update not found response has a 4xx status code
func (o *StackUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack update not found response has a 5xx status code
func (o *StackUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stack update not found response a status code equal to that given
func (o *StackUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stack update not found response
func (o *StackUpdateNotFound) Code() int {
	return 404
}

func (o *StackUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateNotFound", 404)
}

func (o *StackUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateNotFound", 404)
}

func (o *StackUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackUpdateInternalServerError creates a StackUpdateInternalServerError with default headers values
func NewStackUpdateInternalServerError() *StackUpdateInternalServerError {
	return &StackUpdateInternalServerError{}
}

/*
StackUpdateInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type StackUpdateInternalServerError struct {
}

// IsSuccess returns true when this stack update internal server error response has a 2xx status code
func (o *StackUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack update internal server error response has a 3xx status code
func (o *StackUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack update internal server error response has a 4xx status code
func (o *StackUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack update internal server error response has a 5xx status code
func (o *StackUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stack update internal server error response a status code equal to that given
func (o *StackUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stack update internal server error response
func (o *StackUpdateInternalServerError) Code() int {
	return 500
}

func (o *StackUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateInternalServerError", 500)
}

func (o *StackUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}][%d] stackUpdateInternalServerError", 500)
}

func (o *StackUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
