// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStackDeleteKubernetesByNameParams creates a new StackDeleteKubernetesByNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStackDeleteKubernetesByNameParams() *StackDeleteKubernetesByNameParams {
	return &StackDeleteKubernetesByNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStackDeleteKubernetesByNameParamsWithTimeout creates a new StackDeleteKubernetesByNameParams object
// with the ability to set a timeout on a request.
func NewStackDeleteKubernetesByNameParamsWithTimeout(timeout time.Duration) *StackDeleteKubernetesByNameParams {
	return &StackDeleteKubernetesByNameParams{
		timeout: timeout,
	}
}

// NewStackDeleteKubernetesByNameParamsWithContext creates a new StackDeleteKubernetesByNameParams object
// with the ability to set a context for a request.
func NewStackDeleteKubernetesByNameParamsWithContext(ctx context.Context) *StackDeleteKubernetesByNameParams {
	return &StackDeleteKubernetesByNameParams{
		Context: ctx,
	}
}

// NewStackDeleteKubernetesByNameParamsWithHTTPClient creates a new StackDeleteKubernetesByNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewStackDeleteKubernetesByNameParamsWithHTTPClient(client *http.Client) *StackDeleteKubernetesByNameParams {
	return &StackDeleteKubernetesByNameParams{
		HTTPClient: client,
	}
}

/*
StackDeleteKubernetesByNameParams contains all the parameters to send to the API endpoint

	for the stack delete kubernetes by name operation.

	Typically these are written to a http.Request.
*/
type StackDeleteKubernetesByNameParams struct {

	/* EndpointID.

	   Environment identifier
	*/
	EndpointID int64

	/* External.

	   Set to true to delete an external stack. Only external Swarm stacks are supported
	*/
	External *bool

	/* Name.

	   Stack name
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the stack delete kubernetes by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StackDeleteKubernetesByNameParams) WithDefaults() *StackDeleteKubernetesByNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the stack delete kubernetes by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StackDeleteKubernetesByNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) WithTimeout(timeout time.Duration) *StackDeleteKubernetesByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) WithContext(ctx context.Context) *StackDeleteKubernetesByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) WithHTTPClient(client *http.Client) *StackDeleteKubernetesByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndpointID adds the endpointID to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) WithEndpointID(endpointID int64) *StackDeleteKubernetesByNameParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) SetEndpointID(endpointID int64) {
	o.EndpointID = endpointID
}

// WithExternal adds the external to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) WithExternal(external *bool) *StackDeleteKubernetesByNameParams {
	o.SetExternal(external)
	return o
}

// SetExternal adds the external to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) SetExternal(external *bool) {
	o.External = external
}

// WithName adds the name to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) WithName(name string) *StackDeleteKubernetesByNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the stack delete kubernetes by name params
func (o *StackDeleteKubernetesByNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *StackDeleteKubernetesByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endpointId
	qrEndpointID := o.EndpointID
	qEndpointID := swag.FormatInt64(qrEndpointID)
	if qEndpointID != "" {

		if err := r.SetQueryParam("endpointId", qEndpointID); err != nil {
			return err
		}
	}

	if o.External != nil {

		// query param external
		var qrExternal bool

		if o.External != nil {
			qrExternal = *o.External
		}
		qExternal := swag.FormatBool(qrExternal)
		if qExternal != "" {

			if err := r.SetQueryParam("external", qExternal); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
