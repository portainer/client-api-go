// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStackFileInspectParams creates a new StackFileInspectParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStackFileInspectParams() *StackFileInspectParams {
	return &StackFileInspectParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStackFileInspectParamsWithTimeout creates a new StackFileInspectParams object
// with the ability to set a timeout on a request.
func NewStackFileInspectParamsWithTimeout(timeout time.Duration) *StackFileInspectParams {
	return &StackFileInspectParams{
		timeout: timeout,
	}
}

// NewStackFileInspectParamsWithContext creates a new StackFileInspectParams object
// with the ability to set a context for a request.
func NewStackFileInspectParamsWithContext(ctx context.Context) *StackFileInspectParams {
	return &StackFileInspectParams{
		Context: ctx,
	}
}

// NewStackFileInspectParamsWithHTTPClient creates a new StackFileInspectParams object
// with the ability to set a custom HTTPClient for a request.
func NewStackFileInspectParamsWithHTTPClient(client *http.Client) *StackFileInspectParams {
	return &StackFileInspectParams{
		HTTPClient: client,
	}
}

/*
StackFileInspectParams contains all the parameters to send to the API endpoint

	for the stack file inspect operation.

	Typically these are written to a http.Request.
*/
type StackFileInspectParams struct {

	/* CommitHash.

	   Git repository commit hash. If both version and commitHash are provided, the commitHash will be used
	*/
	CommitHash *string

	/* ID.

	   Stack identifier
	*/
	ID int64

	/* Version.

	   Stack file version maintained by Portainer. If both version and commitHash are provided, the commitHash will be used
	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the stack file inspect params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StackFileInspectParams) WithDefaults() *StackFileInspectParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the stack file inspect params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StackFileInspectParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the stack file inspect params
func (o *StackFileInspectParams) WithTimeout(timeout time.Duration) *StackFileInspectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stack file inspect params
func (o *StackFileInspectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stack file inspect params
func (o *StackFileInspectParams) WithContext(ctx context.Context) *StackFileInspectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stack file inspect params
func (o *StackFileInspectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stack file inspect params
func (o *StackFileInspectParams) WithHTTPClient(client *http.Client) *StackFileInspectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stack file inspect params
func (o *StackFileInspectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommitHash adds the commitHash to the stack file inspect params
func (o *StackFileInspectParams) WithCommitHash(commitHash *string) *StackFileInspectParams {
	o.SetCommitHash(commitHash)
	return o
}

// SetCommitHash adds the commitHash to the stack file inspect params
func (o *StackFileInspectParams) SetCommitHash(commitHash *string) {
	o.CommitHash = commitHash
}

// WithID adds the id to the stack file inspect params
func (o *StackFileInspectParams) WithID(id int64) *StackFileInspectParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the stack file inspect params
func (o *StackFileInspectParams) SetID(id int64) {
	o.ID = id
}

// WithVersion adds the version to the stack file inspect params
func (o *StackFileInspectParams) WithVersion(version *int64) *StackFileInspectParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the stack file inspect params
func (o *StackFileInspectParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *StackFileInspectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommitHash != nil {

		// query param commitHash
		var qrCommitHash string

		if o.CommitHash != nil {
			qrCommitHash = *o.CommitHash
		}
		qCommitHash := qrCommitHash
		if qCommitHash != "" {

			if err := r.SetQueryParam("commitHash", qCommitHash); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
