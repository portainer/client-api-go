// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StackDeleteReader is a Reader for the StackDelete structure.
type StackDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStackDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStackDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /stacks/{id}] StackDelete", response, response.Code())
	}
}

// NewStackDeleteNoContent creates a StackDeleteNoContent with default headers values
func NewStackDeleteNoContent() *StackDeleteNoContent {
	return &StackDeleteNoContent{}
}

/*
StackDeleteNoContent describes a response with status code 204, with default header values.

Success
*/
type StackDeleteNoContent struct {
}

// IsSuccess returns true when this stack delete no content response has a 2xx status code
func (o *StackDeleteNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stack delete no content response has a 3xx status code
func (o *StackDeleteNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack delete no content response has a 4xx status code
func (o *StackDeleteNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack delete no content response has a 5xx status code
func (o *StackDeleteNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stack delete no content response a status code equal to that given
func (o *StackDeleteNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the stack delete no content response
func (o *StackDeleteNoContent) Code() int {
	return 204
}

func (o *StackDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteNoContent", 204)
}

func (o *StackDeleteNoContent) String() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteNoContent", 204)
}

func (o *StackDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackDeleteBadRequest creates a StackDeleteBadRequest with default headers values
func NewStackDeleteBadRequest() *StackDeleteBadRequest {
	return &StackDeleteBadRequest{}
}

/*
StackDeleteBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type StackDeleteBadRequest struct {
}

// IsSuccess returns true when this stack delete bad request response has a 2xx status code
func (o *StackDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack delete bad request response has a 3xx status code
func (o *StackDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack delete bad request response has a 4xx status code
func (o *StackDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack delete bad request response has a 5xx status code
func (o *StackDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stack delete bad request response a status code equal to that given
func (o *StackDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stack delete bad request response
func (o *StackDeleteBadRequest) Code() int {
	return 400
}

func (o *StackDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteBadRequest", 400)
}

func (o *StackDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteBadRequest", 400)
}

func (o *StackDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackDeleteForbidden creates a StackDeleteForbidden with default headers values
func NewStackDeleteForbidden() *StackDeleteForbidden {
	return &StackDeleteForbidden{}
}

/*
StackDeleteForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type StackDeleteForbidden struct {
}

// IsSuccess returns true when this stack delete forbidden response has a 2xx status code
func (o *StackDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack delete forbidden response has a 3xx status code
func (o *StackDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack delete forbidden response has a 4xx status code
func (o *StackDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack delete forbidden response has a 5xx status code
func (o *StackDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stack delete forbidden response a status code equal to that given
func (o *StackDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stack delete forbidden response
func (o *StackDeleteForbidden) Code() int {
	return 403
}

func (o *StackDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteForbidden", 403)
}

func (o *StackDeleteForbidden) String() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteForbidden", 403)
}

func (o *StackDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackDeleteNotFound creates a StackDeleteNotFound with default headers values
func NewStackDeleteNotFound() *StackDeleteNotFound {
	return &StackDeleteNotFound{}
}

/*
StackDeleteNotFound describes a response with status code 404, with default header values.

Not found
*/
type StackDeleteNotFound struct {
}

// IsSuccess returns true when this stack delete not found response has a 2xx status code
func (o *StackDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack delete not found response has a 3xx status code
func (o *StackDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack delete not found response has a 4xx status code
func (o *StackDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack delete not found response has a 5xx status code
func (o *StackDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stack delete not found response a status code equal to that given
func (o *StackDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stack delete not found response
func (o *StackDeleteNotFound) Code() int {
	return 404
}

func (o *StackDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteNotFound", 404)
}

func (o *StackDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteNotFound", 404)
}

func (o *StackDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackDeleteInternalServerError creates a StackDeleteInternalServerError with default headers values
func NewStackDeleteInternalServerError() *StackDeleteInternalServerError {
	return &StackDeleteInternalServerError{}
}

/*
StackDeleteInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type StackDeleteInternalServerError struct {
}

// IsSuccess returns true when this stack delete internal server error response has a 2xx status code
func (o *StackDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack delete internal server error response has a 3xx status code
func (o *StackDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack delete internal server error response has a 4xx status code
func (o *StackDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack delete internal server error response has a 5xx status code
func (o *StackDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stack delete internal server error response a status code equal to that given
func (o *StackDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stack delete internal server error response
func (o *StackDeleteInternalServerError) Code() int {
	return 500
}

func (o *StackDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteInternalServerError", 500)
}

func (o *StackDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /stacks/{id}][%d] stackDeleteInternalServerError", 500)
}

func (o *StackDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
