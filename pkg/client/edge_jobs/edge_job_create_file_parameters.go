// Code generated by go-swagger; DO NOT EDIT.

package edge_jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEdgeJobCreateFileParams creates a new EdgeJobCreateFileParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEdgeJobCreateFileParams() *EdgeJobCreateFileParams {
	return &EdgeJobCreateFileParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEdgeJobCreateFileParamsWithTimeout creates a new EdgeJobCreateFileParams object
// with the ability to set a timeout on a request.
func NewEdgeJobCreateFileParamsWithTimeout(timeout time.Duration) *EdgeJobCreateFileParams {
	return &EdgeJobCreateFileParams{
		timeout: timeout,
	}
}

// NewEdgeJobCreateFileParamsWithContext creates a new EdgeJobCreateFileParams object
// with the ability to set a context for a request.
func NewEdgeJobCreateFileParamsWithContext(ctx context.Context) *EdgeJobCreateFileParams {
	return &EdgeJobCreateFileParams{
		Context: ctx,
	}
}

// NewEdgeJobCreateFileParamsWithHTTPClient creates a new EdgeJobCreateFileParams object
// with the ability to set a custom HTTPClient for a request.
func NewEdgeJobCreateFileParamsWithHTTPClient(client *http.Client) *EdgeJobCreateFileParams {
	return &EdgeJobCreateFileParams{
		HTTPClient: client,
	}
}

/*
EdgeJobCreateFileParams contains all the parameters to send to the API endpoint

	for the edge job create file operation.

	Typically these are written to a http.Request.
*/
type EdgeJobCreateFileParams struct {

	/* CronExpression.

	   A cron expression to schedule this job
	*/
	CronExpression string

	/* EdgeGroups.

	   JSON stringified array of Edge Groups ids
	*/
	EdgeGroups string

	/* Endpoints.

	   JSON stringified array of Environment ids
	*/
	Endpoints string

	/* Name.

	   Name of the stack
	*/
	Name string

	/* Recurring.

	   If recurring
	*/
	Recurring *bool

	/* File.

	   Content of the Stack file
	*/
	File runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the edge job create file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeJobCreateFileParams) WithDefaults() *EdgeJobCreateFileParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the edge job create file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeJobCreateFileParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the edge job create file params
func (o *EdgeJobCreateFileParams) WithTimeout(timeout time.Duration) *EdgeJobCreateFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edge job create file params
func (o *EdgeJobCreateFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edge job create file params
func (o *EdgeJobCreateFileParams) WithContext(ctx context.Context) *EdgeJobCreateFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edge job create file params
func (o *EdgeJobCreateFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edge job create file params
func (o *EdgeJobCreateFileParams) WithHTTPClient(client *http.Client) *EdgeJobCreateFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edge job create file params
func (o *EdgeJobCreateFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCronExpression adds the cronExpression to the edge job create file params
func (o *EdgeJobCreateFileParams) WithCronExpression(cronExpression string) *EdgeJobCreateFileParams {
	o.SetCronExpression(cronExpression)
	return o
}

// SetCronExpression adds the cronExpression to the edge job create file params
func (o *EdgeJobCreateFileParams) SetCronExpression(cronExpression string) {
	o.CronExpression = cronExpression
}

// WithEdgeGroups adds the edgeGroups to the edge job create file params
func (o *EdgeJobCreateFileParams) WithEdgeGroups(edgeGroups string) *EdgeJobCreateFileParams {
	o.SetEdgeGroups(edgeGroups)
	return o
}

// SetEdgeGroups adds the edgeGroups to the edge job create file params
func (o *EdgeJobCreateFileParams) SetEdgeGroups(edgeGroups string) {
	o.EdgeGroups = edgeGroups
}

// WithEndpoints adds the endpoints to the edge job create file params
func (o *EdgeJobCreateFileParams) WithEndpoints(endpoints string) *EdgeJobCreateFileParams {
	o.SetEndpoints(endpoints)
	return o
}

// SetEndpoints adds the endpoints to the edge job create file params
func (o *EdgeJobCreateFileParams) SetEndpoints(endpoints string) {
	o.Endpoints = endpoints
}

// WithName adds the name to the edge job create file params
func (o *EdgeJobCreateFileParams) WithName(name string) *EdgeJobCreateFileParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the edge job create file params
func (o *EdgeJobCreateFileParams) SetName(name string) {
	o.Name = name
}

// WithRecurring adds the recurring to the edge job create file params
func (o *EdgeJobCreateFileParams) WithRecurring(recurring *bool) *EdgeJobCreateFileParams {
	o.SetRecurring(recurring)
	return o
}

// SetRecurring adds the recurring to the edge job create file params
func (o *EdgeJobCreateFileParams) SetRecurring(recurring *bool) {
	o.Recurring = recurring
}

// WithFile adds the file to the edge job create file params
func (o *EdgeJobCreateFileParams) WithFile(file runtime.NamedReadCloser) *EdgeJobCreateFileParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the edge job create file params
func (o *EdgeJobCreateFileParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WriteToRequest writes these params to a swagger request
func (o *EdgeJobCreateFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param CronExpression
	frCronExpression := o.CronExpression
	fCronExpression := frCronExpression
	if fCronExpression != "" {
		if err := r.SetFormParam("CronExpression", fCronExpression); err != nil {
			return err
		}
	}

	// form param EdgeGroups
	frEdgeGroups := o.EdgeGroups
	fEdgeGroups := frEdgeGroups
	if fEdgeGroups != "" {
		if err := r.SetFormParam("EdgeGroups", fEdgeGroups); err != nil {
			return err
		}
	}

	// form param Endpoints
	frEndpoints := o.Endpoints
	fEndpoints := frEndpoints
	if fEndpoints != "" {
		if err := r.SetFormParam("Endpoints", fEndpoints); err != nil {
			return err
		}
	}

	// form param Name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("Name", fName); err != nil {
			return err
		}
	}

	if o.Recurring != nil {

		// form param Recurring
		var frRecurring bool
		if o.Recurring != nil {
			frRecurring = *o.Recurring
		}
		fRecurring := swag.FormatBool(frRecurring)
		if fRecurring != "" {
			if err := r.SetFormParam("Recurring", fRecurring); err != nil {
				return err
			}
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
