// Code generated by go-swagger; DO NOT EDIT.

package edge_jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge jobs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new edge jobs API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new edge jobs API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for edge jobs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	EdgeJobCreateFile(params *EdgeJobCreateFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobCreateFileOK, error)

	EdgeJobCreateString(params *EdgeJobCreateStringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobCreateStringOK, error)

	EdgeJobDelete(params *EdgeJobDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobDeleteNoContent, error)

	EdgeJobFile(params *EdgeJobFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobFileOK, error)

	EdgeJobInspect(params *EdgeJobInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobInspectOK, error)

	EdgeJobList(params *EdgeJobListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobListOK, error)

	EdgeJobTaskLogsInspect(params *EdgeJobTaskLogsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTaskLogsInspectOK, error)

	EdgeJobTasksClear(params *EdgeJobTasksClearParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTasksClearNoContent, error)

	EdgeJobTasksCollect(params *EdgeJobTasksCollectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTasksCollectNoContent, error)

	EdgeJobTasksList(params *EdgeJobTasksListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTasksListOK, error)

	EdgeJobUpdate(params *EdgeJobUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EdgeJobCreateFile creates an edge job from a file

**Access policy**: administrator
*/
func (a *Client) EdgeJobCreateFile(params *EdgeJobCreateFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobCreateFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobCreateFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobCreateFile",
		Method:             "POST",
		PathPattern:        "/edge_jobs/create/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobCreateFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobCreateFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobCreateFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobCreateString creates an edge job from a text

**Access policy**: administrator
*/
func (a *Client) EdgeJobCreateString(params *EdgeJobCreateStringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobCreateStringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobCreateStringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobCreateString",
		Method:             "POST",
		PathPattern:        "/edge_jobs/create/string",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobCreateStringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobCreateStringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobCreateString: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobDelete deletes an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobDelete(params *EdgeJobDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobDelete",
		Method:             "DELETE",
		PathPattern:        "/edge_jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobFile fetches a file of an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobFile(params *EdgeJobFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobFile",
		Method:             "GET",
		PathPattern:        "/edge_jobs/{id}/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobInspect inspects an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobInspect(params *EdgeJobInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobInspect",
		Method:             "GET",
		PathPattern:        "/edge_jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobList fetches edge jobs list

**Access policy**: administrator
*/
func (a *Client) EdgeJobList(params *EdgeJobListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobList",
		Method:             "GET",
		PathPattern:        "/edge_jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobTaskLogsInspect fetches the log for a specifc task on an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobTaskLogsInspect(params *EdgeJobTaskLogsInspectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTaskLogsInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobTaskLogsInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobTaskLogsInspect",
		Method:             "GET",
		PathPattern:        "/edge_jobs/{id}/tasks/{taskID}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobTaskLogsInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobTaskLogsInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobTaskLogsInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobTasksClear clears the log for a specifc task on an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobTasksClear(params *EdgeJobTasksClearParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTasksClearNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobTasksClearParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobTasksClear",
		Method:             "DELETE",
		PathPattern:        "/edge_jobs/{id}/tasks/{taskID}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobTasksClearReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobTasksClearNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobTasksClear: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobTasksCollect collects the log for a specifc task on an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobTasksCollect(params *EdgeJobTasksCollectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTasksCollectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobTasksCollectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobTasksCollect",
		Method:             "POST",
		PathPattern:        "/edge_jobs/{id}/tasks/{taskID}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobTasksCollectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobTasksCollectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobTasksCollect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobTasksList fetches the list of tasks on an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobTasksList(params *EdgeJobTasksListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobTasksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobTasksListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobTasksList",
		Method:             "GET",
		PathPattern:        "/edge_jobs/{id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobTasksListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobTasksListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobTasksList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EdgeJobUpdate updates an edge job

**Access policy**: administrator
*/
func (a *Client) EdgeJobUpdate(params *EdgeJobUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeJobUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeJobUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeJobUpdate",
		Method:             "PUT",
		PathPattern:        "/edge_jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EdgeJobUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeJobUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EdgeJobUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
