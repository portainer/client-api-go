// Code generated by go-swagger; DO NOT EDIT.

package helm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewHelmRepoSearchParams creates a new HelmRepoSearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHelmRepoSearchParams() *HelmRepoSearchParams {
	return &HelmRepoSearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHelmRepoSearchParamsWithTimeout creates a new HelmRepoSearchParams object
// with the ability to set a timeout on a request.
func NewHelmRepoSearchParamsWithTimeout(timeout time.Duration) *HelmRepoSearchParams {
	return &HelmRepoSearchParams{
		timeout: timeout,
	}
}

// NewHelmRepoSearchParamsWithContext creates a new HelmRepoSearchParams object
// with the ability to set a context for a request.
func NewHelmRepoSearchParamsWithContext(ctx context.Context) *HelmRepoSearchParams {
	return &HelmRepoSearchParams{
		Context: ctx,
	}
}

// NewHelmRepoSearchParamsWithHTTPClient creates a new HelmRepoSearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewHelmRepoSearchParamsWithHTTPClient(client *http.Client) *HelmRepoSearchParams {
	return &HelmRepoSearchParams{
		HTTPClient: client,
	}
}

/*
HelmRepoSearchParams contains all the parameters to send to the API endpoint

	for the helm repo search operation.

	Typically these are written to a http.Request.
*/
type HelmRepoSearchParams struct {

	/* Chart.

	   Helm chart name
	*/
	Chart *string

	/* Repo.

	   Helm repository URL
	*/
	Repo string

	/* UseCache.

	   If true will use cache to search
	*/
	UseCache *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the helm repo search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HelmRepoSearchParams) WithDefaults() *HelmRepoSearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the helm repo search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HelmRepoSearchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the helm repo search params
func (o *HelmRepoSearchParams) WithTimeout(timeout time.Duration) *HelmRepoSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the helm repo search params
func (o *HelmRepoSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the helm repo search params
func (o *HelmRepoSearchParams) WithContext(ctx context.Context) *HelmRepoSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the helm repo search params
func (o *HelmRepoSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the helm repo search params
func (o *HelmRepoSearchParams) WithHTTPClient(client *http.Client) *HelmRepoSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the helm repo search params
func (o *HelmRepoSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChart adds the chart to the helm repo search params
func (o *HelmRepoSearchParams) WithChart(chart *string) *HelmRepoSearchParams {
	o.SetChart(chart)
	return o
}

// SetChart adds the chart to the helm repo search params
func (o *HelmRepoSearchParams) SetChart(chart *string) {
	o.Chart = chart
}

// WithRepo adds the repo to the helm repo search params
func (o *HelmRepoSearchParams) WithRepo(repo string) *HelmRepoSearchParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the helm repo search params
func (o *HelmRepoSearchParams) SetRepo(repo string) {
	o.Repo = repo
}

// WithUseCache adds the useCache to the helm repo search params
func (o *HelmRepoSearchParams) WithUseCache(useCache *string) *HelmRepoSearchParams {
	o.SetUseCache(useCache)
	return o
}

// SetUseCache adds the useCache to the helm repo search params
func (o *HelmRepoSearchParams) SetUseCache(useCache *string) {
	o.UseCache = useCache
}

// WriteToRequest writes these params to a swagger request
func (o *HelmRepoSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Chart != nil {

		// query param chart
		var qrChart string

		if o.Chart != nil {
			qrChart = *o.Chart
		}
		qChart := qrChart
		if qChart != "" {

			if err := r.SetQueryParam("chart", qChart); err != nil {
				return err
			}
		}
	}

	// query param repo
	qrRepo := o.Repo
	qRepo := qrRepo
	if qRepo != "" {

		if err := r.SetQueryParam("repo", qRepo); err != nil {
			return err
		}
	}

	if o.UseCache != nil {

		// query param useCache
		var qrUseCache string

		if o.UseCache != nil {
			qrUseCache = *o.UseCache
		}
		qUseCache := qrUseCache
		if qUseCache != "" {

			if err := r.SetQueryParam("useCache", qUseCache); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
