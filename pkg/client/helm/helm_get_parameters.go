// Code generated by go-swagger; DO NOT EDIT.

package helm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHelmGetParams creates a new HelmGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHelmGetParams() *HelmGetParams {
	return &HelmGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHelmGetParamsWithTimeout creates a new HelmGetParams object
// with the ability to set a timeout on a request.
func NewHelmGetParamsWithTimeout(timeout time.Duration) *HelmGetParams {
	return &HelmGetParams{
		timeout: timeout,
	}
}

// NewHelmGetParamsWithContext creates a new HelmGetParams object
// with the ability to set a context for a request.
func NewHelmGetParamsWithContext(ctx context.Context) *HelmGetParams {
	return &HelmGetParams{
		Context: ctx,
	}
}

// NewHelmGetParamsWithHTTPClient creates a new HelmGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewHelmGetParamsWithHTTPClient(client *http.Client) *HelmGetParams {
	return &HelmGetParams{
		HTTPClient: client,
	}
}

/*
HelmGetParams contains all the parameters to send to the API endpoint

	for the helm get operation.

	Typically these are written to a http.Request.
*/
type HelmGetParams struct {

	/* ID.

	   Environment(Endpoint) identifier
	*/
	ID int64

	/* Name.

	   Helm release name
	*/
	Name string

	/* Namespace.

	   specify an optional namespace
	*/
	Namespace *string

	/* Revision.

	   specify an optional revision
	*/
	Revision *int64

	/* ShowResources.

	   show resources of the release
	*/
	ShowResources *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the helm get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HelmGetParams) WithDefaults() *HelmGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the helm get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HelmGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the helm get params
func (o *HelmGetParams) WithTimeout(timeout time.Duration) *HelmGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the helm get params
func (o *HelmGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the helm get params
func (o *HelmGetParams) WithContext(ctx context.Context) *HelmGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the helm get params
func (o *HelmGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the helm get params
func (o *HelmGetParams) WithHTTPClient(client *http.Client) *HelmGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the helm get params
func (o *HelmGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the helm get params
func (o *HelmGetParams) WithID(id int64) *HelmGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the helm get params
func (o *HelmGetParams) SetID(id int64) {
	o.ID = id
}

// WithName adds the name to the helm get params
func (o *HelmGetParams) WithName(name string) *HelmGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the helm get params
func (o *HelmGetParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the helm get params
func (o *HelmGetParams) WithNamespace(namespace *string) *HelmGetParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the helm get params
func (o *HelmGetParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithRevision adds the revision to the helm get params
func (o *HelmGetParams) WithRevision(revision *int64) *HelmGetParams {
	o.SetRevision(revision)
	return o
}

// SetRevision adds the revision to the helm get params
func (o *HelmGetParams) SetRevision(revision *int64) {
	o.Revision = revision
}

// WithShowResources adds the showResources to the helm get params
func (o *HelmGetParams) WithShowResources(showResources *bool) *HelmGetParams {
	o.SetShowResources(showResources)
	return o
}

// SetShowResources adds the showResources to the helm get params
func (o *HelmGetParams) SetShowResources(showResources *bool) {
	o.ShowResources = showResources
}

// WriteToRequest writes these params to a swagger request
func (o *HelmGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	if o.Revision != nil {

		// query param revision
		var qrRevision int64

		if o.Revision != nil {
			qrRevision = *o.Revision
		}
		qRevision := swag.FormatInt64(qrRevision)
		if qRevision != "" {

			if err := r.SetQueryParam("revision", qRevision); err != nil {
				return err
			}
		}
	}

	if o.ShowResources != nil {

		// query param showResources
		var qrShowResources bool

		if o.ShowResources != nil {
			qrShowResources = *o.ShowResources
		}
		qShowResources := swag.FormatBool(qrShowResources)
		if qShowResources != "" {

			if err := r.SetQueryParam("showResources", qShowResources); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
