// Code generated by go-swagger; DO NOT EDIT.

package helm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new helm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new helm API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new helm API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for helm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	HelmDelete(params *HelmDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmDeleteNoContent, error)

	HelmInstall(params *HelmInstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmInstallCreated, error)

	HelmList(params *HelmListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmListOK, error)

	HelmRepoSearch(params *HelmRepoSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmRepoSearchOK, error)

	HelmShow(params *HelmShowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmShowOK, error)

	HelmUserRepositoriesList(params *HelmUserRepositoriesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmUserRepositoriesListOK, error)

	HelmUserRepositoryCreate(params *HelmUserRepositoryCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmUserRepositoryCreateOK, error)

	HelmUserRepositoryDelete(params *HelmUserRepositoryDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmUserRepositoryDeleteNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
HelmDelete deletes helm release

**Access policy**: authenticated
*/
func (a *Client) HelmDelete(params *HelmDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmDelete",
		Method:             "DELETE",
		PathPattern:        "/endpoints/{id}/kubernetes/helm/{release}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HelmInstall installs helm chart

**Access policy**: authenticated
*/
func (a *Client) HelmInstall(params *HelmInstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmInstallCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmInstallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmInstall",
		Method:             "POST",
		PathPattern:        "/endpoints/{id}/kubernetes/helm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmInstallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmInstallCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmInstall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HelmList lists helm releases

**Access policy**: authenticated
*/
func (a *Client) HelmList(params *HelmListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmList",
		Method:             "GET",
		PathPattern:        "/endpoints/{id}/kubernetes/helm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HelmRepoSearch searches helm charts

**Access policy**: authenticated
*/
func (a *Client) HelmRepoSearch(params *HelmRepoSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmRepoSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmRepoSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmRepoSearch",
		Method:             "GET",
		PathPattern:        "/templates/helm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmRepoSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmRepoSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmRepoSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HelmShow shows helm chart information

**Access policy**: authenticated
*/
func (a *Client) HelmShow(params *HelmShowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmShowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmShow",
		Method:             "GET",
		PathPattern:        "/templates/helm/{command}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmShowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmShowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmShow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	HelmUserRepositoriesList lists a users helm repositories

	Inspect a user helm repositories.

**Access policy**: authenticated
*/
func (a *Client) HelmUserRepositoriesList(params *HelmUserRepositoriesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmUserRepositoriesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmUserRepositoriesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmUserRepositoriesList",
		Method:             "GET",
		PathPattern:        "/users/{id}/helm/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmUserRepositoriesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmUserRepositoriesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmUserRepositoriesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	HelmUserRepositoryCreate creates a user helm repository

	Create a user helm repository.

**Access policy**: authenticated
*/
func (a *Client) HelmUserRepositoryCreate(params *HelmUserRepositoryCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmUserRepositoryCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmUserRepositoryCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmUserRepositoryCreate",
		Method:             "POST",
		PathPattern:        "/users/{id}/helm/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmUserRepositoryCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmUserRepositoryCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmUserRepositoryCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HelmUserRepositoryDelete deletes a users helm repository

**Access policy**: authenticated
*/
func (a *Client) HelmUserRepositoryDelete(params *HelmUserRepositoryDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HelmUserRepositoryDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHelmUserRepositoryDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HelmUserRepositoryDelete",
		Method:             "DELETE",
		PathPattern:        "/users/{id}/helm/repositories/{repositoryID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HelmUserRepositoryDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HelmUserRepositoryDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HelmUserRepositoryDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
