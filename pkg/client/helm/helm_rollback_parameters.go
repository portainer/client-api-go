// Code generated by go-swagger; DO NOT EDIT.

package helm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHelmRollbackParams creates a new HelmRollbackParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHelmRollbackParams() *HelmRollbackParams {
	return &HelmRollbackParams{
		requestTimeout: cr.DefaultTimeout,
	}
}

// NewHelmRollbackParamsWithTimeout creates a new HelmRollbackParams object
// with the ability to set a timeout on a request.
func NewHelmRollbackParamsWithTimeout(timeout time.Duration) *HelmRollbackParams {
	return &HelmRollbackParams{
		requestTimeout: timeout,
	}
}

// NewHelmRollbackParamsWithContext creates a new HelmRollbackParams object
// with the ability to set a context for a request.
func NewHelmRollbackParamsWithContext(ctx context.Context) *HelmRollbackParams {
	return &HelmRollbackParams{
		Context: ctx,
	}
}

// NewHelmRollbackParamsWithHTTPClient creates a new HelmRollbackParams object
// with the ability to set a custom HTTPClient for a request.
func NewHelmRollbackParamsWithHTTPClient(client *http.Client) *HelmRollbackParams {
	return &HelmRollbackParams{
		HTTPClient: client,
	}
}

/*
HelmRollbackParams contains all the parameters to send to the API endpoint

	for the helm rollback operation.

	Typically these are written to a http.Request.
*/
type HelmRollbackParams struct {

	/* Force.

	   force resource update through delete/recreate if needed (default: false)
	*/
	Force *bool

	/* ID.

	   Environment(Endpoint) identifier
	*/
	ID int64

	/* Namespace.

	   specify an optional namespace
	*/
	Namespace *string

	/* Recreate.

	   performs pods restart for the resource if applicable (default: true)
	*/
	Recreate *bool

	/* Release.

	   Helm release name
	*/
	Release string

	/* Revision.

	   specify the revision to rollback to (defaults to previous revision if not specified)
	*/
	Revision *int64

	/* Timeout.

	   time to wait for any individual Kubernetes operation in seconds (default: 300)
	*/
	Timeout *int64

	/* Wait.

	   wait for resources to be ready (default: false)
	*/
	Wait *bool

	/* WaitForJobs.

	   wait for jobs to complete before marking the release as successful (default: false)
	*/
	WaitForJobs *bool

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithDefaults hydrates default values in the helm rollback params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HelmRollbackParams) WithDefaults() *HelmRollbackParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the helm rollback params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HelmRollbackParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithRequestTimeout adds the timeout to the helm rollback params
func (o *HelmRollbackParams) WithRequestTimeout(timeout time.Duration) *HelmRollbackParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the helm rollback params
func (o *HelmRollbackParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the helm rollback params
func (o *HelmRollbackParams) WithContext(ctx context.Context) *HelmRollbackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the helm rollback params
func (o *HelmRollbackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the helm rollback params
func (o *HelmRollbackParams) WithHTTPClient(client *http.Client) *HelmRollbackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the helm rollback params
func (o *HelmRollbackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the helm rollback params
func (o *HelmRollbackParams) WithForce(force *bool) *HelmRollbackParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the helm rollback params
func (o *HelmRollbackParams) SetForce(force *bool) {
	o.Force = force
}

// WithID adds the id to the helm rollback params
func (o *HelmRollbackParams) WithID(id int64) *HelmRollbackParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the helm rollback params
func (o *HelmRollbackParams) SetID(id int64) {
	o.ID = id
}

// WithNamespace adds the namespace to the helm rollback params
func (o *HelmRollbackParams) WithNamespace(namespace *string) *HelmRollbackParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the helm rollback params
func (o *HelmRollbackParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithRecreate adds the recreate to the helm rollback params
func (o *HelmRollbackParams) WithRecreate(recreate *bool) *HelmRollbackParams {
	o.SetRecreate(recreate)
	return o
}

// SetRecreate adds the recreate to the helm rollback params
func (o *HelmRollbackParams) SetRecreate(recreate *bool) {
	o.Recreate = recreate
}

// WithRelease adds the release to the helm rollback params
func (o *HelmRollbackParams) WithRelease(release string) *HelmRollbackParams {
	o.SetRelease(release)
	return o
}

// SetRelease adds the release to the helm rollback params
func (o *HelmRollbackParams) SetRelease(release string) {
	o.Release = release
}

// WithRevision adds the revision to the helm rollback params
func (o *HelmRollbackParams) WithRevision(revision *int64) *HelmRollbackParams {
	o.SetRevision(revision)
	return o
}

// SetRevision adds the revision to the helm rollback params
func (o *HelmRollbackParams) SetRevision(revision *int64) {
	o.Revision = revision
}

// WithTimeout adds the timeout to the helm rollback params
func (o *HelmRollbackParams) WithTimeout(timeout *int64) *HelmRollbackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the helm rollback params
func (o *HelmRollbackParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WithWait adds the wait to the helm rollback params
func (o *HelmRollbackParams) WithWait(wait *bool) *HelmRollbackParams {
	o.SetWait(wait)
	return o
}

// SetWait adds the wait to the helm rollback params
func (o *HelmRollbackParams) SetWait(wait *bool) {
	o.Wait = wait
}

// WithWaitForJobs adds the waitForJobs to the helm rollback params
func (o *HelmRollbackParams) WithWaitForJobs(waitForJobs *bool) *HelmRollbackParams {
	o.SetWaitForJobs(waitForJobs)
	return o
}

// SetWaitForJobs adds the waitForJobs to the helm rollback params
func (o *HelmRollbackParams) SetWaitForJobs(waitForJobs *bool) {
	o.WaitForJobs = waitForJobs
}

// WriteToRequest writes these params to a swagger request
func (o *HelmRollbackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	if o.Recreate != nil {

		// query param recreate
		var qrRecreate bool

		if o.Recreate != nil {
			qrRecreate = *o.Recreate
		}
		qRecreate := swag.FormatBool(qrRecreate)
		if qRecreate != "" {

			if err := r.SetQueryParam("recreate", qRecreate); err != nil {
				return err
			}
		}
	}

	// path param release
	if err := r.SetPathParam("release", o.Release); err != nil {
		return err
	}

	if o.Revision != nil {

		// query param revision
		var qrRevision int64

		if o.Revision != nil {
			qrRevision = *o.Revision
		}
		qRevision := swag.FormatInt64(qrRevision)
		if qRevision != "" {

			if err := r.SetQueryParam("revision", qRevision); err != nil {
				return err
			}
		}
	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64

		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {

			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}
	}

	if o.Wait != nil {

		// query param wait
		var qrWait bool

		if o.Wait != nil {
			qrWait = *o.Wait
		}
		qWait := swag.FormatBool(qrWait)
		if qWait != "" {

			if err := r.SetQueryParam("wait", qWait); err != nil {
				return err
			}
		}
	}

	if o.WaitForJobs != nil {

		// query param waitForJobs
		var qrWaitForJobs bool

		if o.WaitForJobs != nil {
			qrWaitForJobs = *o.WaitForJobs
		}
		qWaitForJobs := swag.FormatBool(qrWaitForJobs)
		if qWaitForJobs != "" {

			if err := r.SetQueryParam("waitForJobs", qWaitForJobs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
