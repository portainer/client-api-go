// Code generated by go-swagger; DO NOT EDIT.

package edge_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEdgeStackCreateFileParams creates a new EdgeStackCreateFileParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEdgeStackCreateFileParams() *EdgeStackCreateFileParams {
	return &EdgeStackCreateFileParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEdgeStackCreateFileParamsWithTimeout creates a new EdgeStackCreateFileParams object
// with the ability to set a timeout on a request.
func NewEdgeStackCreateFileParamsWithTimeout(timeout time.Duration) *EdgeStackCreateFileParams {
	return &EdgeStackCreateFileParams{
		timeout: timeout,
	}
}

// NewEdgeStackCreateFileParamsWithContext creates a new EdgeStackCreateFileParams object
// with the ability to set a context for a request.
func NewEdgeStackCreateFileParamsWithContext(ctx context.Context) *EdgeStackCreateFileParams {
	return &EdgeStackCreateFileParams{
		Context: ctx,
	}
}

// NewEdgeStackCreateFileParamsWithHTTPClient creates a new EdgeStackCreateFileParams object
// with the ability to set a custom HTTPClient for a request.
func NewEdgeStackCreateFileParamsWithHTTPClient(client *http.Client) *EdgeStackCreateFileParams {
	return &EdgeStackCreateFileParams{
		HTTPClient: client,
	}
}

/*
EdgeStackCreateFileParams contains all the parameters to send to the API endpoint

	for the edge stack create file operation.

	Typically these are written to a http.Request.
*/
type EdgeStackCreateFileParams struct {

	/* DeploymentType.

	   deploy type 0 - 'compose', 1 - 'kubernetes'
	*/
	DeploymentType int64

	/* EdgeGroups.

	   JSON stringified array of Edge Groups ids
	*/
	EdgeGroups string

	/* EnvVars.

	   JSON stringified array of environment variables {name, value}
	*/
	EnvVars *string

	/* Name.

	   Name of the stack. it must only consist of lowercase alphanumeric characters, hyphens, or underscores as well as start with a letter or number
	*/
	Name string

	/* PrePullImage.

	   Pre Pull image
	*/
	PrePullImage *bool

	/* Registries.

	   JSON stringified array of Registry ids to use for this stack
	*/
	Registries *string

	/* RetryDeploy.

	   Retry deploy
	*/
	RetryDeploy *bool

	/* RetryPeriod.

	   Duration, in seconds, for which the agent should continue attempting to deploy the stack after a failure
	*/
	RetryPeriod *int64

	/* StaggerConfig.

	   JSON stringified object of stagger config
	*/
	StaggerConfig *string

	/* UseManifestNamespaces.

	   Uses the manifest's namespaces instead of the default one, relevant only for kube environments
	*/
	UseManifestNamespaces *bool

	/* Webhook.

	   unique webhook id
	*/
	Webhook string

	/* Dryrun.

	   if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
	*/
	Dryrun *string

	/* File.

	   Content of the Stack file
	*/
	File runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the edge stack create file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeStackCreateFileParams) WithDefaults() *EdgeStackCreateFileParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the edge stack create file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeStackCreateFileParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithTimeout(timeout time.Duration) *EdgeStackCreateFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithContext(ctx context.Context) *EdgeStackCreateFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithHTTPClient(client *http.Client) *EdgeStackCreateFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeploymentType adds the deploymentType to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithDeploymentType(deploymentType int64) *EdgeStackCreateFileParams {
	o.SetDeploymentType(deploymentType)
	return o
}

// SetDeploymentType adds the deploymentType to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetDeploymentType(deploymentType int64) {
	o.DeploymentType = deploymentType
}

// WithEdgeGroups adds the edgeGroups to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithEdgeGroups(edgeGroups string) *EdgeStackCreateFileParams {
	o.SetEdgeGroups(edgeGroups)
	return o
}

// SetEdgeGroups adds the edgeGroups to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetEdgeGroups(edgeGroups string) {
	o.EdgeGroups = edgeGroups
}

// WithEnvVars adds the envVars to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithEnvVars(envVars *string) *EdgeStackCreateFileParams {
	o.SetEnvVars(envVars)
	return o
}

// SetEnvVars adds the envVars to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetEnvVars(envVars *string) {
	o.EnvVars = envVars
}

// WithName adds the name to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithName(name string) *EdgeStackCreateFileParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetName(name string) {
	o.Name = name
}

// WithPrePullImage adds the prePullImage to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithPrePullImage(prePullImage *bool) *EdgeStackCreateFileParams {
	o.SetPrePullImage(prePullImage)
	return o
}

// SetPrePullImage adds the prePullImage to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetPrePullImage(prePullImage *bool) {
	o.PrePullImage = prePullImage
}

// WithRegistries adds the registries to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithRegistries(registries *string) *EdgeStackCreateFileParams {
	o.SetRegistries(registries)
	return o
}

// SetRegistries adds the registries to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetRegistries(registries *string) {
	o.Registries = registries
}

// WithRetryDeploy adds the retryDeploy to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithRetryDeploy(retryDeploy *bool) *EdgeStackCreateFileParams {
	o.SetRetryDeploy(retryDeploy)
	return o
}

// SetRetryDeploy adds the retryDeploy to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetRetryDeploy(retryDeploy *bool) {
	o.RetryDeploy = retryDeploy
}

// WithRetryPeriod adds the retryPeriod to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithRetryPeriod(retryPeriod *int64) *EdgeStackCreateFileParams {
	o.SetRetryPeriod(retryPeriod)
	return o
}

// SetRetryPeriod adds the retryPeriod to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetRetryPeriod(retryPeriod *int64) {
	o.RetryPeriod = retryPeriod
}

// WithStaggerConfig adds the staggerConfig to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithStaggerConfig(staggerConfig *string) *EdgeStackCreateFileParams {
	o.SetStaggerConfig(staggerConfig)
	return o
}

// SetStaggerConfig adds the staggerConfig to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetStaggerConfig(staggerConfig *string) {
	o.StaggerConfig = staggerConfig
}

// WithUseManifestNamespaces adds the useManifestNamespaces to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithUseManifestNamespaces(useManifestNamespaces *bool) *EdgeStackCreateFileParams {
	o.SetUseManifestNamespaces(useManifestNamespaces)
	return o
}

// SetUseManifestNamespaces adds the useManifestNamespaces to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetUseManifestNamespaces(useManifestNamespaces *bool) {
	o.UseManifestNamespaces = useManifestNamespaces
}

// WithWebhook adds the webhook to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithWebhook(webhook string) *EdgeStackCreateFileParams {
	o.SetWebhook(webhook)
	return o
}

// SetWebhook adds the webhook to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetWebhook(webhook string) {
	o.Webhook = webhook
}

// WithDryrun adds the dryrun to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithDryrun(dryrun *string) *EdgeStackCreateFileParams {
	o.SetDryrun(dryrun)
	return o
}

// SetDryrun adds the dryrun to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetDryrun(dryrun *string) {
	o.Dryrun = dryrun
}

// WithFile adds the file to the edge stack create file params
func (o *EdgeStackCreateFileParams) WithFile(file runtime.NamedReadCloser) *EdgeStackCreateFileParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the edge stack create file params
func (o *EdgeStackCreateFileParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WriteToRequest writes these params to a swagger request
func (o *EdgeStackCreateFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param DeploymentType
	frDeploymentType := o.DeploymentType
	fDeploymentType := swag.FormatInt64(frDeploymentType)
	if fDeploymentType != "" {
		if err := r.SetFormParam("DeploymentType", fDeploymentType); err != nil {
			return err
		}
	}

	// form param EdgeGroups
	frEdgeGroups := o.EdgeGroups
	fEdgeGroups := frEdgeGroups
	if fEdgeGroups != "" {
		if err := r.SetFormParam("EdgeGroups", fEdgeGroups); err != nil {
			return err
		}
	}

	if o.EnvVars != nil {

		// form param EnvVars
		var frEnvVars string
		if o.EnvVars != nil {
			frEnvVars = *o.EnvVars
		}
		fEnvVars := frEnvVars
		if fEnvVars != "" {
			if err := r.SetFormParam("EnvVars", fEnvVars); err != nil {
				return err
			}
		}
	}

	// form param Name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("Name", fName); err != nil {
			return err
		}
	}

	if o.PrePullImage != nil {

		// form param PrePullImage
		var frPrePullImage bool
		if o.PrePullImage != nil {
			frPrePullImage = *o.PrePullImage
		}
		fPrePullImage := swag.FormatBool(frPrePullImage)
		if fPrePullImage != "" {
			if err := r.SetFormParam("PrePullImage", fPrePullImage); err != nil {
				return err
			}
		}
	}

	if o.Registries != nil {

		// form param Registries
		var frRegistries string
		if o.Registries != nil {
			frRegistries = *o.Registries
		}
		fRegistries := frRegistries
		if fRegistries != "" {
			if err := r.SetFormParam("Registries", fRegistries); err != nil {
				return err
			}
		}
	}

	if o.RetryDeploy != nil {

		// form param RetryDeploy
		var frRetryDeploy bool
		if o.RetryDeploy != nil {
			frRetryDeploy = *o.RetryDeploy
		}
		fRetryDeploy := swag.FormatBool(frRetryDeploy)
		if fRetryDeploy != "" {
			if err := r.SetFormParam("RetryDeploy", fRetryDeploy); err != nil {
				return err
			}
		}
	}

	if o.RetryPeriod != nil {

		// form param RetryPeriod
		var frRetryPeriod int64
		if o.RetryPeriod != nil {
			frRetryPeriod = *o.RetryPeriod
		}
		fRetryPeriod := swag.FormatInt64(frRetryPeriod)
		if fRetryPeriod != "" {
			if err := r.SetFormParam("RetryPeriod", fRetryPeriod); err != nil {
				return err
			}
		}
	}

	if o.StaggerConfig != nil {

		// form param StaggerConfig
		var frStaggerConfig string
		if o.StaggerConfig != nil {
			frStaggerConfig = *o.StaggerConfig
		}
		fStaggerConfig := frStaggerConfig
		if fStaggerConfig != "" {
			if err := r.SetFormParam("StaggerConfig", fStaggerConfig); err != nil {
				return err
			}
		}
	}

	if o.UseManifestNamespaces != nil {

		// form param UseManifestNamespaces
		var frUseManifestNamespaces bool
		if o.UseManifestNamespaces != nil {
			frUseManifestNamespaces = *o.UseManifestNamespaces
		}
		fUseManifestNamespaces := swag.FormatBool(frUseManifestNamespaces)
		if fUseManifestNamespaces != "" {
			if err := r.SetFormParam("UseManifestNamespaces", fUseManifestNamespaces); err != nil {
				return err
			}
		}
	}

	// form param Webhook
	frWebhook := o.Webhook
	fWebhook := frWebhook
	if fWebhook != "" {
		if err := r.SetFormParam("Webhook", fWebhook); err != nil {
			return err
		}
	}

	if o.Dryrun != nil {

		// query param dryrun
		var qrDryrun string

		if o.Dryrun != nil {
			qrDryrun = *o.Dryrun
		}
		qDryrun := qrDryrun
		if qDryrun != "" {

			if err := r.SetQueryParam("dryrun", qDryrun); err != nil {
				return err
			}
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
