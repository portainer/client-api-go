// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new system API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new system API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SystemInfo(params *SystemInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemInfoOK, error)

	SystemNodesCount(params *SystemNodesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemNodesCountOK, error)

	SystemStatus(params *SystemStatusParams, opts ...ClientOption) (*SystemStatusOK, error)

	SystemUpdate(params *SystemUpdateParams, opts ...ClientOption) (*SystemUpdateNoContent, error)

	SystemUpgrade(params *SystemUpgradeParams, opts ...ClientOption) (*SystemUpgradeNoContent, error)

	SystemVersion(params *SystemVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SystemInfo retrieves system info

**Access policy**: authenticated
*/
func (a *Client) SystemInfo(params *SystemInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemInfo",
		Method:             "GET",
		PathPattern:        "/system/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemNodesCount retrieves the count of nodes

**Access policy**: authenticated
*/
func (a *Client) SystemNodesCount(params *SystemNodesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemNodesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemNodesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemNodesCount",
		Method:             "GET",
		PathPattern:        "/system/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemNodesCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemNodesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemNodesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SystemStatus checks portainer status

	Retrieve Portainer status

**Access policy**: public
*/
func (a *Client) SystemStatus(params *SystemStatusParams, opts ...ClientOption) (*SystemStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemStatus",
		Method:             "GET",
		PathPattern:        "/system/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SystemUpdate updates portainer to latest version

	Update Portainer to latest version

**Access policy**: administrator
*/
func (a *Client) SystemUpdate(params *SystemUpdateParams, opts ...ClientOption) (*SystemUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemUpdate",
		Method:             "POST",
		PathPattern:        "/system/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SystemUpgrade upgrades portainer to b e

	Upgrade Portainer to BE

**Access policy**: administrator
*/
func (a *Client) SystemUpgrade(params *SystemUpgradeParams, opts ...ClientOption) (*SystemUpgradeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemUpgrade",
		Method:             "POST",
		PathPattern:        "/system/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemUpgradeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemUpgrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SystemVersion checks for portainer updates

	Check if portainer has an update available

**Access policy**: authenticated
*/
func (a *Client) SystemVersion(params *SystemVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemVersion",
		Method:             "GET",
		PathPattern:        "/system/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
