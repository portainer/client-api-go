// Code generated by go-swagger; DO NOT EDIT.

package useractivity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAuthLogsCSVParams creates a new AuthLogsCSVParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAuthLogsCSVParams() *AuthLogsCSVParams {
	return &AuthLogsCSVParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAuthLogsCSVParamsWithTimeout creates a new AuthLogsCSVParams object
// with the ability to set a timeout on a request.
func NewAuthLogsCSVParamsWithTimeout(timeout time.Duration) *AuthLogsCSVParams {
	return &AuthLogsCSVParams{
		timeout: timeout,
	}
}

// NewAuthLogsCSVParamsWithContext creates a new AuthLogsCSVParams object
// with the ability to set a context for a request.
func NewAuthLogsCSVParamsWithContext(ctx context.Context) *AuthLogsCSVParams {
	return &AuthLogsCSVParams{
		Context: ctx,
	}
}

// NewAuthLogsCSVParamsWithHTTPClient creates a new AuthLogsCSVParams object
// with the ability to set a custom HTTPClient for a request.
func NewAuthLogsCSVParamsWithHTTPClient(client *http.Client) *AuthLogsCSVParams {
	return &AuthLogsCSVParams{
		HTTPClient: client,
	}
}

/*
AuthLogsCSVParams contains all the parameters to send to the API endpoint

	for the auth logs c s v operation.

	Typically these are written to a http.Request.
*/
type AuthLogsCSVParams struct {

	/* After.

	   Results after timestamp (unix)
	*/
	After *int64

	/* Before.

	   Results before timestamp (unix)
	*/
	Before *int64

	/* Keyword.

	   Query logs by this keyword
	*/
	Keyword *string

	/* Limit.

	   Limit results
	*/
	Limit *int64

	/* SortBy.

	   Sort by this column
	*/
	SortBy *string

	/* SortDesc.

	   Sort order, if true will return results by descending order
	*/
	SortDesc *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the auth logs c s v params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthLogsCSVParams) WithDefaults() *AuthLogsCSVParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the auth logs c s v params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthLogsCSVParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the auth logs c s v params
func (o *AuthLogsCSVParams) WithTimeout(timeout time.Duration) *AuthLogsCSVParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the auth logs c s v params
func (o *AuthLogsCSVParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the auth logs c s v params
func (o *AuthLogsCSVParams) WithContext(ctx context.Context) *AuthLogsCSVParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the auth logs c s v params
func (o *AuthLogsCSVParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the auth logs c s v params
func (o *AuthLogsCSVParams) WithHTTPClient(client *http.Client) *AuthLogsCSVParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the auth logs c s v params
func (o *AuthLogsCSVParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the auth logs c s v params
func (o *AuthLogsCSVParams) WithAfter(after *int64) *AuthLogsCSVParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the auth logs c s v params
func (o *AuthLogsCSVParams) SetAfter(after *int64) {
	o.After = after
}

// WithBefore adds the before to the auth logs c s v params
func (o *AuthLogsCSVParams) WithBefore(before *int64) *AuthLogsCSVParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the auth logs c s v params
func (o *AuthLogsCSVParams) SetBefore(before *int64) {
	o.Before = before
}

// WithKeyword adds the keyword to the auth logs c s v params
func (o *AuthLogsCSVParams) WithKeyword(keyword *string) *AuthLogsCSVParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the auth logs c s v params
func (o *AuthLogsCSVParams) SetKeyword(keyword *string) {
	o.Keyword = keyword
}

// WithLimit adds the limit to the auth logs c s v params
func (o *AuthLogsCSVParams) WithLimit(limit *int64) *AuthLogsCSVParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the auth logs c s v params
func (o *AuthLogsCSVParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSortBy adds the sortBy to the auth logs c s v params
func (o *AuthLogsCSVParams) WithSortBy(sortBy *string) *AuthLogsCSVParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the auth logs c s v params
func (o *AuthLogsCSVParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortDesc adds the sortDesc to the auth logs c s v params
func (o *AuthLogsCSVParams) WithSortDesc(sortDesc *bool) *AuthLogsCSVParams {
	o.SetSortDesc(sortDesc)
	return o
}

// SetSortDesc adds the sortDesc to the auth logs c s v params
func (o *AuthLogsCSVParams) SetSortDesc(sortDesc *bool) {
	o.SortDesc = sortDesc
}

// WriteToRequest writes these params to a swagger request
func (o *AuthLogsCSVParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter int64

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := swag.FormatInt64(qrAfter)
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore int64

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := swag.FormatInt64(qrBefore)
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.Keyword != nil {

		// query param keyword
		var qrKeyword string

		if o.Keyword != nil {
			qrKeyword = *o.Keyword
		}
		qKeyword := qrKeyword
		if qKeyword != "" {

			if err := r.SetQueryParam("keyword", qKeyword); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortDesc != nil {

		// query param sortDesc
		var qrSortDesc bool

		if o.SortDesc != nil {
			qrSortDesc = *o.SortDesc
		}
		qSortDesc := swag.FormatBool(qrSortDesc)
		if qSortDesc != "" {

			if err := r.SetQueryParam("sortDesc", qSortDesc); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
