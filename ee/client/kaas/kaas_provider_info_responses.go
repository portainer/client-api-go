// Code generated by go-swagger; DO NOT EDIT.

package kaas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// KaasProviderInfoReader is a Reader for the KaasProviderInfo structure.
type KaasProviderInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KaasProviderInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKaasProviderInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKaasProviderInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewKaasProviderInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewKaasProviderInfoServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKaasProviderInfoOK creates a KaasProviderInfoOK with default headers values
func NewKaasProviderInfoOK() *KaasProviderInfoOK {
	return &KaasProviderInfoOK{}
}

/*
KaasProviderInfoOK describes a response with status code 200, with default header values.

Success
*/
type KaasProviderInfoOK struct {
}

// IsSuccess returns true when this kaas provider info o k response has a 2xx status code
func (o *KaasProviderInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kaas provider info o k response has a 3xx status code
func (o *KaasProviderInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kaas provider info o k response has a 4xx status code
func (o *KaasProviderInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kaas provider info o k response has a 5xx status code
func (o *KaasProviderInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kaas provider info o k response a status code equal to that given
func (o *KaasProviderInfoOK) IsCode(code int) bool {
	return code == 200
}

func (o *KaasProviderInfoOK) Error() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoOK ", 200)
}

func (o *KaasProviderInfoOK) String() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoOK ", 200)
}

func (o *KaasProviderInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewKaasProviderInfoBadRequest creates a KaasProviderInfoBadRequest with default headers values
func NewKaasProviderInfoBadRequest() *KaasProviderInfoBadRequest {
	return &KaasProviderInfoBadRequest{}
}

/*
KaasProviderInfoBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type KaasProviderInfoBadRequest struct {
}

// IsSuccess returns true when this kaas provider info bad request response has a 2xx status code
func (o *KaasProviderInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kaas provider info bad request response has a 3xx status code
func (o *KaasProviderInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kaas provider info bad request response has a 4xx status code
func (o *KaasProviderInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this kaas provider info bad request response has a 5xx status code
func (o *KaasProviderInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this kaas provider info bad request response a status code equal to that given
func (o *KaasProviderInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *KaasProviderInfoBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoBadRequest ", 400)
}

func (o *KaasProviderInfoBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoBadRequest ", 400)
}

func (o *KaasProviderInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewKaasProviderInfoInternalServerError creates a KaasProviderInfoInternalServerError with default headers values
func NewKaasProviderInfoInternalServerError() *KaasProviderInfoInternalServerError {
	return &KaasProviderInfoInternalServerError{}
}

/*
KaasProviderInfoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type KaasProviderInfoInternalServerError struct {
}

// IsSuccess returns true when this kaas provider info internal server error response has a 2xx status code
func (o *KaasProviderInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kaas provider info internal server error response has a 3xx status code
func (o *KaasProviderInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kaas provider info internal server error response has a 4xx status code
func (o *KaasProviderInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this kaas provider info internal server error response has a 5xx status code
func (o *KaasProviderInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this kaas provider info internal server error response a status code equal to that given
func (o *KaasProviderInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *KaasProviderInfoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoInternalServerError ", 500)
}

func (o *KaasProviderInfoInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoInternalServerError ", 500)
}

func (o *KaasProviderInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewKaasProviderInfoServiceUnavailable creates a KaasProviderInfoServiceUnavailable with default headers values
func NewKaasProviderInfoServiceUnavailable() *KaasProviderInfoServiceUnavailable {
	return &KaasProviderInfoServiceUnavailable{}
}

/*
KaasProviderInfoServiceUnavailable describes a response with status code 503, with default header values.

Missing configuration
*/
type KaasProviderInfoServiceUnavailable struct {
}

// IsSuccess returns true when this kaas provider info service unavailable response has a 2xx status code
func (o *KaasProviderInfoServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kaas provider info service unavailable response has a 3xx status code
func (o *KaasProviderInfoServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kaas provider info service unavailable response has a 4xx status code
func (o *KaasProviderInfoServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this kaas provider info service unavailable response has a 5xx status code
func (o *KaasProviderInfoServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this kaas provider info service unavailable response a status code equal to that given
func (o *KaasProviderInfoServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *KaasProviderInfoServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoServiceUnavailable ", 503)
}

func (o *KaasProviderInfoServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /cloud][%d] kaasProviderInfoServiceUnavailable ", 503)
}

func (o *KaasProviderInfoServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
