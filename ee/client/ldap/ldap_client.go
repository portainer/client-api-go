// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ldap API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ldap API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LDAPAdminGroups(params *LDAPAdminGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPAdminGroupsOK, error)

	LDAPCheck(params *LDAPCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPCheckNoContent, error)

	LDAPGroups(params *LDAPGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPGroupsOK, error)

	LDAPTestLogin(params *LDAPTestLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPTestLoginOK, error)

	LDAPUsers(params *LDAPUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPUsersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	LDAPAdminGroups fetches l d a p admin groups

	Fetch LDAP admin groups from LDAP server based on AdminGroupSearchSettings

**Access policy**: administrator
*/
func (a *Client) LDAPAdminGroups(params *LDAPAdminGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPAdminGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLDAPAdminGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LDAPAdminGroups",
		Method:             "POST",
		PathPattern:        "/ldap/admin-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LDAPAdminGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LDAPAdminGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LDAPAdminGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	LDAPCheck tests l d a p connectivity

	Test LDAP connectivity using LDAP details

**Access policy**: administrator
*/
func (a *Client) LDAPCheck(params *LDAPCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLDAPCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LDAPCheck",
		Method:             "POST",
		PathPattern:        "/ldap/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LDAPCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LDAPCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LDAPCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LDAPGroups searches l d a p groups

**Access policy**: administrator
*/
func (a *Client) LDAPGroups(params *LDAPGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLDAPGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LDAPGroups",
		Method:             "POST",
		PathPattern:        "/ldap/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LDAPGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LDAPGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LDAPGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LDAPTestLogin tests login to ldap server

**Access policy**: administrator
*/
func (a *Client) LDAPTestLogin(params *LDAPTestLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPTestLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLDAPTestLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LDAPTestLogin",
		Method:             "POST",
		PathPattern:        "/ldap/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LDAPTestLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LDAPTestLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LDAPTestLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LDAPUsers searches l d a p users

**Access policy**: administrator
*/
func (a *Client) LDAPUsers(params *LDAPUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LDAPUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLDAPUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LDAPUsers",
		Method:             "POST",
		PathPattern:        "/ldap/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LDAPUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LDAPUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LDAPUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
