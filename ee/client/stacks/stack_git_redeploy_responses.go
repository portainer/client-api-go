// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api-go/ee/v2/models"
)

// StackGitRedeployReader is a Reader for the StackGitRedeploy structure.
type StackGitRedeployReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackGitRedeployReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackGitRedeployOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackGitRedeployBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackGitRedeployForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackGitRedeployNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStackGitRedeployInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStackGitRedeployOK creates a StackGitRedeployOK with default headers values
func NewStackGitRedeployOK() *StackGitRedeployOK {
	return &StackGitRedeployOK{}
}

/*
StackGitRedeployOK describes a response with status code 200, with default header values.

Success
*/
type StackGitRedeployOK struct {
	Payload *models.PortainereeStack
}

// IsSuccess returns true when this stack git redeploy o k response has a 2xx status code
func (o *StackGitRedeployOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stack git redeploy o k response has a 3xx status code
func (o *StackGitRedeployOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack git redeploy o k response has a 4xx status code
func (o *StackGitRedeployOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack git redeploy o k response has a 5xx status code
func (o *StackGitRedeployOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stack git redeploy o k response a status code equal to that given
func (o *StackGitRedeployOK) IsCode(code int) bool {
	return code == 200
}

func (o *StackGitRedeployOK) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployOK  %+v", 200, o.Payload)
}

func (o *StackGitRedeployOK) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployOK  %+v", 200, o.Payload)
}

func (o *StackGitRedeployOK) GetPayload() *models.PortainereeStack {
	return o.Payload
}

func (o *StackGitRedeployOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortainereeStack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackGitRedeployBadRequest creates a StackGitRedeployBadRequest with default headers values
func NewStackGitRedeployBadRequest() *StackGitRedeployBadRequest {
	return &StackGitRedeployBadRequest{}
}

/*
StackGitRedeployBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type StackGitRedeployBadRequest struct {
}

// IsSuccess returns true when this stack git redeploy bad request response has a 2xx status code
func (o *StackGitRedeployBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack git redeploy bad request response has a 3xx status code
func (o *StackGitRedeployBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack git redeploy bad request response has a 4xx status code
func (o *StackGitRedeployBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack git redeploy bad request response has a 5xx status code
func (o *StackGitRedeployBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stack git redeploy bad request response a status code equal to that given
func (o *StackGitRedeployBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StackGitRedeployBadRequest) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployBadRequest ", 400)
}

func (o *StackGitRedeployBadRequest) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployBadRequest ", 400)
}

func (o *StackGitRedeployBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackGitRedeployForbidden creates a StackGitRedeployForbidden with default headers values
func NewStackGitRedeployForbidden() *StackGitRedeployForbidden {
	return &StackGitRedeployForbidden{}
}

/*
StackGitRedeployForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type StackGitRedeployForbidden struct {
}

// IsSuccess returns true when this stack git redeploy forbidden response has a 2xx status code
func (o *StackGitRedeployForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack git redeploy forbidden response has a 3xx status code
func (o *StackGitRedeployForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack git redeploy forbidden response has a 4xx status code
func (o *StackGitRedeployForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack git redeploy forbidden response has a 5xx status code
func (o *StackGitRedeployForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stack git redeploy forbidden response a status code equal to that given
func (o *StackGitRedeployForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StackGitRedeployForbidden) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployForbidden ", 403)
}

func (o *StackGitRedeployForbidden) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployForbidden ", 403)
}

func (o *StackGitRedeployForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackGitRedeployNotFound creates a StackGitRedeployNotFound with default headers values
func NewStackGitRedeployNotFound() *StackGitRedeployNotFound {
	return &StackGitRedeployNotFound{}
}

/*
StackGitRedeployNotFound describes a response with status code 404, with default header values.

Not found
*/
type StackGitRedeployNotFound struct {
}

// IsSuccess returns true when this stack git redeploy not found response has a 2xx status code
func (o *StackGitRedeployNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack git redeploy not found response has a 3xx status code
func (o *StackGitRedeployNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack git redeploy not found response has a 4xx status code
func (o *StackGitRedeployNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack git redeploy not found response has a 5xx status code
func (o *StackGitRedeployNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stack git redeploy not found response a status code equal to that given
func (o *StackGitRedeployNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StackGitRedeployNotFound) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployNotFound ", 404)
}

func (o *StackGitRedeployNotFound) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployNotFound ", 404)
}

func (o *StackGitRedeployNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackGitRedeployInternalServerError creates a StackGitRedeployInternalServerError with default headers values
func NewStackGitRedeployInternalServerError() *StackGitRedeployInternalServerError {
	return &StackGitRedeployInternalServerError{}
}

/*
StackGitRedeployInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type StackGitRedeployInternalServerError struct {
}

// IsSuccess returns true when this stack git redeploy internal server error response has a 2xx status code
func (o *StackGitRedeployInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack git redeploy internal server error response has a 3xx status code
func (o *StackGitRedeployInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack git redeploy internal server error response has a 4xx status code
func (o *StackGitRedeployInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack git redeploy internal server error response has a 5xx status code
func (o *StackGitRedeployInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stack git redeploy internal server error response a status code equal to that given
func (o *StackGitRedeployInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StackGitRedeployInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployInternalServerError ", 500)
}

func (o *StackGitRedeployInternalServerError) String() string {
	return fmt.Sprintf("[PUT /stacks/{id}/git/redeploy][%d] stackGitRedeployInternalServerError ", 500)
}

func (o *StackGitRedeployInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
