// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/portainer/client-api-go/v2/ee/models"
)

// UserGetGitCredentialReader is a Reader for the UserGetGitCredential structure.
type UserGetGitCredentialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserGetGitCredentialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserGetGitCredentialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserGetGitCredentialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserGetGitCredentialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserGetGitCredentialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserGetGitCredentialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserGetGitCredentialOK creates a UserGetGitCredentialOK with default headers values
func NewUserGetGitCredentialOK() *UserGetGitCredentialOK {
	return &UserGetGitCredentialOK{}
}

/*
UserGetGitCredentialOK describes a response with status code 200, with default header values.

Success
*/
type UserGetGitCredentialOK struct {
	Payload *models.PortainereeGitCredential
}

// IsSuccess returns true when this user get git credential o k response has a 2xx status code
func (o *UserGetGitCredentialOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user get git credential o k response has a 3xx status code
func (o *UserGetGitCredentialOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user get git credential o k response has a 4xx status code
func (o *UserGetGitCredentialOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user get git credential o k response has a 5xx status code
func (o *UserGetGitCredentialOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user get git credential o k response a status code equal to that given
func (o *UserGetGitCredentialOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserGetGitCredentialOK) Error() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialOK  %+v", 200, o.Payload)
}

func (o *UserGetGitCredentialOK) String() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialOK  %+v", 200, o.Payload)
}

func (o *UserGetGitCredentialOK) GetPayload() *models.PortainereeGitCredential {
	return o.Payload
}

func (o *UserGetGitCredentialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortainereeGitCredential)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGetGitCredentialBadRequest creates a UserGetGitCredentialBadRequest with default headers values
func NewUserGetGitCredentialBadRequest() *UserGetGitCredentialBadRequest {
	return &UserGetGitCredentialBadRequest{}
}

/*
UserGetGitCredentialBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UserGetGitCredentialBadRequest struct {
}

// IsSuccess returns true when this user get git credential bad request response has a 2xx status code
func (o *UserGetGitCredentialBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user get git credential bad request response has a 3xx status code
func (o *UserGetGitCredentialBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user get git credential bad request response has a 4xx status code
func (o *UserGetGitCredentialBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user get git credential bad request response has a 5xx status code
func (o *UserGetGitCredentialBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user get git credential bad request response a status code equal to that given
func (o *UserGetGitCredentialBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserGetGitCredentialBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialBadRequest ", 400)
}

func (o *UserGetGitCredentialBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialBadRequest ", 400)
}

func (o *UserGetGitCredentialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserGetGitCredentialForbidden creates a UserGetGitCredentialForbidden with default headers values
func NewUserGetGitCredentialForbidden() *UserGetGitCredentialForbidden {
	return &UserGetGitCredentialForbidden{}
}

/*
UserGetGitCredentialForbidden describes a response with status code 403, with default header values.

Permission denied
*/
type UserGetGitCredentialForbidden struct {
}

// IsSuccess returns true when this user get git credential forbidden response has a 2xx status code
func (o *UserGetGitCredentialForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user get git credential forbidden response has a 3xx status code
func (o *UserGetGitCredentialForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user get git credential forbidden response has a 4xx status code
func (o *UserGetGitCredentialForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user get git credential forbidden response has a 5xx status code
func (o *UserGetGitCredentialForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user get git credential forbidden response a status code equal to that given
func (o *UserGetGitCredentialForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserGetGitCredentialForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialForbidden ", 403)
}

func (o *UserGetGitCredentialForbidden) String() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialForbidden ", 403)
}

func (o *UserGetGitCredentialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserGetGitCredentialNotFound creates a UserGetGitCredentialNotFound with default headers values
func NewUserGetGitCredentialNotFound() *UserGetGitCredentialNotFound {
	return &UserGetGitCredentialNotFound{}
}

/*
UserGetGitCredentialNotFound describes a response with status code 404, with default header values.

User not found
*/
type UserGetGitCredentialNotFound struct {
}

// IsSuccess returns true when this user get git credential not found response has a 2xx status code
func (o *UserGetGitCredentialNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user get git credential not found response has a 3xx status code
func (o *UserGetGitCredentialNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user get git credential not found response has a 4xx status code
func (o *UserGetGitCredentialNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user get git credential not found response has a 5xx status code
func (o *UserGetGitCredentialNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user get git credential not found response a status code equal to that given
func (o *UserGetGitCredentialNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserGetGitCredentialNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialNotFound ", 404)
}

func (o *UserGetGitCredentialNotFound) String() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialNotFound ", 404)
}

func (o *UserGetGitCredentialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserGetGitCredentialInternalServerError creates a UserGetGitCredentialInternalServerError with default headers values
func NewUserGetGitCredentialInternalServerError() *UserGetGitCredentialInternalServerError {
	return &UserGetGitCredentialInternalServerError{}
}

/*
UserGetGitCredentialInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UserGetGitCredentialInternalServerError struct {
}

// IsSuccess returns true when this user get git credential internal server error response has a 2xx status code
func (o *UserGetGitCredentialInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user get git credential internal server error response has a 3xx status code
func (o *UserGetGitCredentialInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user get git credential internal server error response has a 4xx status code
func (o *UserGetGitCredentialInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user get git credential internal server error response has a 5xx status code
func (o *UserGetGitCredentialInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user get git credential internal server error response a status code equal to that given
func (o *UserGetGitCredentialInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserGetGitCredentialInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialInternalServerError ", 500)
}

func (o *UserGetGitCredentialInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{id}/gitcredentials/{credentialID}][%d] userGetGitCredentialInternalServerError ", 500)
}

func (o *UserGetGitCredentialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
