// Code generated by go-swagger; DO NOT EDIT.

package models_ce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EndpointsEndpointUpdatePayload endpoints endpoint update payload
//
// swagger:model endpoints.endpointUpdatePayload
type EndpointsEndpointUpdatePayload struct {

	// Azure application ID
	// Example: eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4
	AzureApplicationID string `json:"azureApplicationID,omitempty"`

	// Azure authentication key
	// Example: cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=
	AzureAuthenticationKey string `json:"azureAuthenticationKey,omitempty"`

	// Azure tenant ID
	// Example: 34ddc78d-4fel-2358-8cc1-df84c8o839f5
	AzureTenantID string `json:"azureTenantID,omitempty"`

	// The check in interval for edge agent (in seconds)
	// Example: 5
	EdgeCheckinInterval int64 `json:"edgeCheckinInterval,omitempty"`

	// GPUs information
	Gpus []*PortainerPair `json:"gpus"`

	// Group identifier
	// Example: 1
	GroupID int64 `json:"groupID,omitempty"`

	// Associated Kubernetes data
	Kubernetes *PortainerKubernetesData `json:"kubernetes,omitempty"`

	// Name that will be used to identify this environment(endpoint)
	// Example: my-environment
	Name string `json:"name,omitempty"`

	// URL or IP address where exposed containers will be reachable.\
	// Defaults to URL if not specified
	// Example: docker.mydomain.tld:2375
	PublicURL string `json:"publicURL,omitempty"`

	// The status of the environment(endpoint) (1 - up, 2 - down)
	// Example: 1
	Status int64 `json:"status,omitempty"`

	// List of tag identifiers to which this environment(endpoint) is associated
	// Example: [1,2]
	TagIDs []int64 `json:"tagIDs"`

	// team access policies
	TeamAccessPolicies PortainerTeamAccessPolicies `json:"teamAccessPolicies,omitempty"`

	// Require TLS to connect against this environment(endpoint)
	// Example: true
	TLS *bool `json:"tls,omitempty"`

	// Skip client verification when using TLS
	// Example: false
	TlsskipClientVerify *bool `json:"tlsskipClientVerify,omitempty"`

	// Skip server verification when using TLS
	// Example: false
	TlsskipVerify *bool `json:"tlsskipVerify,omitempty"`

	// URL or IP address of a Docker host
	// Example: docker.mydomain.tld:2375
	URL string `json:"url,omitempty"`

	// user access policies
	UserAccessPolicies PortainerUserAccessPolicies `json:"userAccessPolicies,omitempty"`
}

// Validate validates this endpoints endpoint update payload
func (m *EndpointsEndpointUpdatePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGpus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamAccessPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAccessPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointsEndpointUpdatePayload) validateGpus(formats strfmt.Registry) error {
	if swag.IsZero(m.Gpus) { // not required
		return nil
	}

	for i := 0; i < len(m.Gpus); i++ {
		if swag.IsZero(m.Gpus[i]) { // not required
			continue
		}

		if m.Gpus[i] != nil {
			if err := m.Gpus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndpointsEndpointUpdatePayload) validateKubernetes(formats strfmt.Registry) error {
	if swag.IsZero(m.Kubernetes) { // not required
		return nil
	}

	if m.Kubernetes != nil {
		if err := m.Kubernetes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetes")
			}
			return err
		}
	}

	return nil
}

func (m *EndpointsEndpointUpdatePayload) validateTeamAccessPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamAccessPolicies) { // not required
		return nil
	}

	if m.TeamAccessPolicies != nil {
		if err := m.TeamAccessPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teamAccessPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("teamAccessPolicies")
			}
			return err
		}
	}

	return nil
}

func (m *EndpointsEndpointUpdatePayload) validateUserAccessPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAccessPolicies) { // not required
		return nil
	}

	if m.UserAccessPolicies != nil {
		if err := m.UserAccessPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userAccessPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userAccessPolicies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this endpoints endpoint update payload based on the context it is used
func (m *EndpointsEndpointUpdatePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGpus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamAccessPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAccessPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointsEndpointUpdatePayload) contextValidateGpus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Gpus); i++ {

		if m.Gpus[i] != nil {
			if err := m.Gpus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndpointsEndpointUpdatePayload) contextValidateKubernetes(ctx context.Context, formats strfmt.Registry) error {

	if m.Kubernetes != nil {
		if err := m.Kubernetes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetes")
			}
			return err
		}
	}

	return nil
}

func (m *EndpointsEndpointUpdatePayload) contextValidateTeamAccessPolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TeamAccessPolicies.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("teamAccessPolicies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("teamAccessPolicies")
		}
		return err
	}

	return nil
}

func (m *EndpointsEndpointUpdatePayload) contextValidateUserAccessPolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserAccessPolicies.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userAccessPolicies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("userAccessPolicies")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointsEndpointUpdatePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointsEndpointUpdatePayload) UnmarshalBinary(b []byte) error {
	var res EndpointsEndpointUpdatePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
