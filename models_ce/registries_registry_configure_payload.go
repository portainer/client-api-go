// Code generated by go-swagger; DO NOT EDIT.

package models_ce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistriesRegistryConfigurePayload registries registry configure payload
//
// swagger:model registries.registryConfigurePayload
type RegistriesRegistryConfigurePayload struct {

	// Is authentication against this registry enabled
	// Example: false
	// Required: true
	Authentication *bool `json:"authentication"`

	// Password used to authenticate against this registry. required when Authentication is true
	// Example: registry_password
	Password string `json:"password,omitempty"`

	// ECR region
	Region string `json:"region,omitempty"`

	// Use TLS
	// Example: true
	TLS *bool `json:"tls,omitempty"`

	// The TLS CA certificate file
	TlscacertFile []int64 `json:"tlscacertFile"`

	// The TLS client certificate file
	TlscertFile []int64 `json:"tlscertFile"`

	// The TLS client key file
	TlskeyFile []int64 `json:"tlskeyFile"`

	// Skip the verification of the server TLS certificate
	// Example: false
	TlsskipVerify *bool `json:"tlsskipVerify,omitempty"`

	// Username used to authenticate against this registry. Required when Authentication is true
	// Example: registry_user
	Username string `json:"username,omitempty"`
}

// Validate validates this registries registry configure payload
func (m *RegistriesRegistryConfigurePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistriesRegistryConfigurePayload) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this registries registry configure payload based on context it is used
func (m *RegistriesRegistryConfigurePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegistriesRegistryConfigurePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistriesRegistryConfigurePayload) UnmarshalBinary(b []byte) error {
	var res RegistriesRegistryConfigurePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
